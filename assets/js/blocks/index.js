(() => {
  // blocks/column/edit.js
  var { __ } = window.wp.i18n;
  var {
    useBlockProps,
    useInnerBlocksProps,
    InspectorControls,
    PanelColorSettings,
    MediaUpload,
    MediaUploadCheck,
    ButtonBlockAppender
  } = window.wp.blockEditor;
  var {
    ToggleControl,
    SelectControl: SelectControl2,
    RangeControl,
    Button
  } = window.wp.components;
  var { useState, useEffect } = window.wp.element;
  var { useSelect, useDispatch } = window.wp.data;
  var { useBlockId, getDimensionCSS } = digi.utils;
  var { tabIcons } = digi.icons;
  var { ResponsiveControl, DimensionControl, BoxShadowControl, CustomTabPanel, TabPanelBody: TabPanelBody2 } = digi.components;
  var ColumnEdit = ({ attributes, setAttributes, clientId }) => {
    const {
      id,
      visibility,
      width,
      order,
      hoverEffect,
      backgroundColor,
      backgroundImage,
      backgroundPosition,
      backgroundRepeat,
      backgroundSize,
      backgroundOverlay,
      backgroundOverlayOpacity,
      backgroundOverlayBlendMode,
      padding,
      margin,
      borderStyle,
      borderWidth,
      borderColor,
      borderRadius,
      boxShadow,
      boxShadowHover
    } = attributes;
    useBlockId(id, clientId, setAttributes);
    const [localActiveDevice, setLocalActiveDevice] = useState(window.digi.responsiveState.activeDevice);
    const [activeTab, setActiveTab] = useState(() => {
      if (window.digi.uiState) {
        const savedTab = window.digi.uiState.getActiveTab(clientId);
        if (savedTab)
          return savedTab;
      }
      return "options";
    });
    const [isInternalWidthUpdate, setIsInternalWidthUpdate] = useState(false);
    const { parentClientId, hasChildBlocks } = useSelect(
      (select) => {
        const { getBlockParents, getBlockCount } = select("core/block-editor");
        const parents = getBlockParents(clientId);
        const parentId = parents.length > 0 ? parents[0] : null;
        return {
          parentClientId: parentId,
          hasChildBlocks: getBlockCount(clientId) > 0
        };
      },
      [clientId]
    );
    useEffect(() => {
      const unsubscribe = window.digi.responsiveState.subscribe((device) => {
        setLocalActiveDevice(device);
      });
      return unsubscribe;
    }, []);
    const handleWidthChange = (newWidth, device) => {
      setAttributes({
        width: {
          ...width,
          [device]: Math.round(newWidth * 100) / 100
          // Round to 2 decimal places
        }
      });
    };
    const bgPositionOptions = [
      { label: __("Top Left", "digiblocks"), value: "top left" },
      { label: __("Top Center", "digiblocks"), value: "top center" },
      { label: __("Top Right", "digiblocks"), value: "top right" },
      { label: __("Center Left", "digiblocks"), value: "center left" },
      { label: __("Center Center", "digiblocks"), value: "center center" },
      { label: __("Center Right", "digiblocks"), value: "center right" },
      { label: __("Bottom Left", "digiblocks"), value: "bottom left" },
      { label: __("Bottom Center", "digiblocks"), value: "bottom center" },
      { label: __("Bottom Right", "digiblocks"), value: "bottom right" }
    ];
    const bgRepeatOptions = [
      { label: __("No Repeat", "digiblocks"), value: "no-repeat" },
      { label: __("Repeat", "digiblocks"), value: "repeat" },
      { label: __("Repeat X", "digiblocks"), value: "repeat-x" },
      { label: __("Repeat Y", "digiblocks"), value: "repeat-y" }
    ];
    const bgSizeOptions = [
      { label: __("Cover", "digiblocks"), value: "cover" },
      { label: __("Contain", "digiblocks"), value: "contain" },
      { label: __("Auto", "digiblocks"), value: "auto" },
      { label: __("100%", "digiblocks"), value: "100%" }
    ];
    const borderStyleOptions = [
      { label: __("None", "digiblocks"), value: "none" },
      { label: __("Solid", "digiblocks"), value: "solid" },
      { label: __("Dashed", "digiblocks"), value: "dashed" },
      { label: __("Dotted", "digiblocks"), value: "dotted" },
      { label: __("Double", "digiblocks"), value: "double" }
    ];
    const blendModeOptions = [
      { label: __("Normal", "digiblocks"), value: "normal" },
      { label: __("Multiply", "digiblocks"), value: "multiply" },
      { label: __("Screen", "digiblocks"), value: "screen" },
      { label: __("Overlay", "digiblocks"), value: "overlay" },
      { label: __("Darken", "digiblocks"), value: "darken" },
      { label: __("Lighten", "digiblocks"), value: "lighten" },
      { label: __("Color Dodge", "digiblocks"), value: "color-dodge" },
      { label: __("Color Burn", "digiblocks"), value: "color-burn" },
      { label: __("Hard Light", "digiblocks"), value: "hard-light" },
      { label: __("Soft Light", "digiblocks"), value: "soft-light" },
      { label: __("Difference", "digiblocks"), value: "difference" },
      { label: __("Exclusion", "digiblocks"), value: "exclusion" },
      { label: __("Hue", "digiblocks"), value: "hue" },
      { label: __("Saturation", "digiblocks"), value: "saturation" },
      { label: __("Color", "digiblocks"), value: "color" },
      { label: __("Luminosity", "digiblocks"), value: "luminosity" }
    ];
    const hoverEffectOptions = [
      { label: __("None", "digiblocks"), value: "none" },
      { label: __("Lift", "digiblocks"), value: "lift" },
      { label: __("Scale", "digiblocks"), value: "scale" },
      { label: __("Glow", "digiblocks"), value: "glow" }
    ];
    const tabList = [
      {
        name: "options",
        title: __("Layout", "digiblocks"),
        icon: tabIcons.optionsIcon
      },
      {
        name: "style",
        title: __("Style", "digiblocks"),
        icon: tabIcons.styleIcon
      },
      {
        name: "background",
        title: __("Background", "digiblocks"),
        icon: tabIcons.backgroundIcon
      }
    ];
    const generateColumnCSS = () => {
      const activeDevice = localActiveDevice;
      const getColumnPadding = (padding2, device) => {
        const hasDeviceValues = (dev) => {
          return padding2 && padding2[dev] && (padding2[dev].top !== void 0 && padding2[dev].top !== "" || padding2[dev].right !== void 0 && padding2[dev].right !== "" || padding2[dev].bottom !== void 0 && padding2[dev].bottom !== "" || padding2[dev].left !== void 0 && padding2[dev].left !== "");
        };
        let values;
        if (hasDeviceValues(device)) {
          values = padding2[device];
        } else if (device === "tablet" && hasDeviceValues("desktop")) {
          values = padding2["desktop"];
        } else if (device === "mobile") {
          if (hasDeviceValues("tablet")) {
            values = padding2["tablet"];
          } else if (hasDeviceValues("desktop")) {
            values = padding2["desktop"];
          } else {
            return "";
          }
        } else {
          return "";
        }
        const ensureMinPadding = (value, unit2) => {
          if (value === void 0 || value === "") {
            return unit2 === "px" ? "10px" : "0" + unit2;
          }
          if (unit2 === "px" && parseFloat(value) < 10) {
            return "10px";
          }
          return value + unit2;
        };
        const unit = values.unit || "px";
        const top = ensureMinPadding(values.top, unit);
        const right = ensureMinPadding(values.right, unit);
        const bottom = ensureMinPadding(values.bottom, unit);
        const left = ensureMinPadding(values.left, unit);
        return `padding: ${top} ${right} ${bottom} ${left} !important;`;
      };
      const paddingCSS = getColumnPadding(padding, activeDevice);
      const tabletPaddingCSS = getColumnPadding(padding, "tablet");
      const mobilePaddingCSS = getColumnPadding(padding, "mobile");
      let backgroundImageCSS = "";
      if (backgroundImage && backgroundImage.url) {
        backgroundImageCSS = `background-image: url(${backgroundImage.url});
            background-position: ${backgroundPosition};
            background-repeat: ${backgroundRepeat};
            background-size: ${backgroundSize};`;
      }
      let overlayCSS = "";
      if (backgroundOverlay) {
        overlayCSS = `
            .${id}:before {
                content: '';
                position: absolute;
                top: 0;
                left: 0;
                width: 100%;
                height: 100%;
                background-color: ${backgroundOverlay};
                opacity: ${backgroundOverlayOpacity};
                mix-blend-mode: ${backgroundOverlayBlendMode};
                z-index: 1;
                pointer-events: none;
                border-radius: inherit;
            }
            .${id} > * {
                position: relative;
                z-index: 2;
            }`;
      }
      let boxShadowCSS = "";
      if (boxShadow && boxShadow.enable) {
        boxShadowCSS = `box-shadow: ${boxShadow.horizontal}px ${boxShadow.vertical}px ${boxShadow.blur}px ${boxShadow.spread}px ${boxShadow.color};`;
      }
      let hoverCSS = "";
      let boxShadowHoverCSS = "";
      if (boxShadowHover && boxShadowHover.enable) {
        const insetHover = boxShadowHover.position === "inset" ? "inset " : "";
        hoverCSS += `box-shadow: ${insetHover}${boxShadowHover.horizontal}px ${boxShadowHover.vertical}px ${boxShadowHover.blur}px ${boxShadowHover.spread}px ${boxShadowHover.color};`;
      }
      if (hoverEffect === "lift") {
        hoverCSS += "transform: translateY(-10px);";
      } else if (hoverEffect === "scale") {
        hoverCSS += "transform: scale(1.05);";
      } else if (hoverEffect === "glow") {
        hoverCSS += "filter: brightness(1.1);";
      }
      return `
            /* Column Block - ${id} */
            .${id} {
                position: relative;
                width: ${width[activeDevice]}%;
                ${paddingCSS}
				${getDimensionCSS(margin, "margin", activeDevice)}
                display: flex;
                flex-direction: column;
                ${order[activeDevice] !== 0 ? `order: ${order[activeDevice]};` : ""}
                ${backgroundColor ? `background-color: ${backgroundColor};` : ""}
                ${backgroundImageCSS}
                ${borderStyle !== "none" ? `
					border-style: ${borderStyle}!important;
					${getDimensionCSS(borderWidth, "border-width", activeDevice, true)}
					border-color: ${borderColor}!important;` : ""}
                ${getDimensionCSS(borderRadius, "border-radius", activeDevice)}
				${boxShadowCSS}
                transition: all 0.3s ease;
            }
            
            /* Hover effects */
            .${id}:hover {
                ${boxShadowHoverCSS}
            }

            .${id} > div {
                width: 100%;
            }
            
            ${overlayCSS}
            
            /* Tablet styles */
            @media (max-width: 991px) {
                .${id} {
                    width: ${width["tablet"]}%;
					${tabletPaddingCSS}
					${getDimensionCSS(margin, "margin", "tablet")}
                    ${order["tablet"] !== 0 ? `order: ${order["tablet"]};` : ""}
					${getDimensionCSS(borderRadius, "border-radius", "tablet")}
                    ${borderStyle !== "none" ? `${getDimensionCSS(borderWidth, "border-width", "tablet", true)}` : ""}
                }
            }
            
            /* Mobile styles */
            @media (max-width: 767px) {
                .${id} {
                    width: ${width["mobile"]}%;
					${mobilePaddingCSS}
					${getDimensionCSS(margin, "margin", "mobile")}
                    ${order["mobile"] !== 0 ? `order: ${order["mobile"]};` : ""}
					${getDimensionCSS(borderRadius, "border-radius", "mobile")}
                    ${borderStyle !== "none" ? `${getDimensionCSS(borderWidth, "border-width", "mobile", true)}` : ""}
                }
            }

			/* Visibility Controls */
			${visibility.desktop ? `
				@media (min-width: 992px) {
					.${id} {
						opacity: 0.5 !important;
					}
				}
			` : ""}

			${visibility.tablet ? `
				@media (min-width: 768px) and (max-width: 991px) {
					.${id} {
						opacity: 0.5 !important;
					}
				}
			` : ""}

			${visibility.mobile ? `
				@media (max-width: 767px) {
					.${id} {
						opacity: 0.5 !important;
					}
				}
			` : ""}
        `;
    };
    const blockProps = useBlockProps({
      className: `digiblocks-column ${id}`
    });
    const innerBlocksProps = useInnerBlocksProps(blockProps, {
      templateLock: false,
      renderAppender: hasChildBlocks ? void 0 : () => /* @__PURE__ */ wp.element.createElement(ButtonBlockAppender, { rootClientId: clientId })
    });
    const renderTabContent = () => {
      switch (activeTab) {
        case "options":
          return /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(
            TabPanelBody2,
            {
              tab: "options",
              name: "column",
              title: __("Column", "digiblocks"),
              initialOpen: true
            },
            /* @__PURE__ */ wp.element.createElement(
              ResponsiveControl,
              {
                label: __("Width (%)", "digiblocks")
              },
              /* @__PURE__ */ wp.element.createElement(
                RangeControl,
                {
                  value: width[localActiveDevice],
                  onChange: (value) => handleWidthChange(value, localActiveDevice),
                  min: 10,
                  max: 100,
                  step: 0.01,
                  __next40pxDefaultSize: true,
                  __nextHasNoMarginBottom: true
                }
              )
            ),
            /* @__PURE__ */ wp.element.createElement(
              ResponsiveControl,
              {
                label: __("Order", "digiblocks")
              },
              /* @__PURE__ */ wp.element.createElement(
                RangeControl,
                {
                  value: order[localActiveDevice],
                  onChange: (value) => setAttributes({
                    order: {
                      ...order,
                      [localActiveDevice]: value
                    }
                  }),
                  min: -10,
                  max: 10,
                  step: 1,
                  allowReset: true,
                  resetFallbackValue: 0,
                  __next40pxDefaultSize: true,
                  __nextHasNoMarginBottom: true
                }
              )
            )
          ), /* @__PURE__ */ wp.element.createElement(
            TabPanelBody2,
            {
              tab: "layout",
              name: "spacing",
              title: __("Spacing", "digiblocks"),
              initialOpen: false
            },
            /* @__PURE__ */ wp.element.createElement(
              ResponsiveControl,
              {
                label: __("Padding", "digiblocks")
              },
              /* @__PURE__ */ wp.element.createElement(
                DimensionControl,
                {
                  values: padding[localActiveDevice],
                  onChange: (value) => setAttributes({
                    padding: {
                      ...padding,
                      [localActiveDevice]: value
                    }
                  })
                }
              )
            ),
            /* @__PURE__ */ wp.element.createElement(
              ResponsiveControl,
              {
                label: __("Margin", "digiblocks")
              },
              /* @__PURE__ */ wp.element.createElement(
                DimensionControl,
                {
                  values: margin[localActiveDevice],
                  onChange: (value) => setAttributes({
                    margin: {
                      ...margin,
                      [localActiveDevice]: value
                    }
                  })
                }
              )
            )
          ), /* @__PURE__ */ wp.element.createElement(
            TabPanelBody2,
            {
              tab: "layout",
              name: "effect",
              title: __("Hover Effect", "digiblocks"),
              initialOpen: false
            },
            /* @__PURE__ */ wp.element.createElement(
              SelectControl2,
              {
                label: __("Hover Effect", "digiblocks"),
                value: hoverEffect || "none",
                options: hoverEffectOptions,
                onChange: (value) => setAttributes({ hoverEffect: value }),
                __next40pxDefaultSize: true,
                __nextHasNoMarginBottom: true
              }
            )
          ), /* @__PURE__ */ wp.element.createElement(
            TabPanelBody2,
            {
              tab: "layout",
              name: "visibility",
              title: __("Visibility", "digiblocks"),
              initialOpen: false
            },
            /* @__PURE__ */ wp.element.createElement("div", { className: "components-base-control__help", style: {
              padding: "12px",
              backgroundColor: "#f0f6fc",
              border: "1px solid #c3ddfd",
              borderRadius: "4px",
              marginBottom: "16px"
            } }, /* @__PURE__ */ wp.element.createElement("strong", null, __("Editor Note:", "digiblocks")), /* @__PURE__ */ wp.element.createElement("br", null), __("Hidden elements appear with reduced opacity in the editor for easy editing. Visibility changes only take effect on the frontend.", "digiblocks")),
            /* @__PURE__ */ wp.element.createElement(
              ToggleControl,
              {
                label: __("Hide on Desktop", "digiblocks"),
                checked: visibility.desktop,
                onChange: (value) => setAttributes({
                  visibility: {
                    ...visibility,
                    desktop: value
                  }
                }),
                __nextHasNoMarginBottom: true
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              ToggleControl,
              {
                label: __("Hide on Tablet", "digiblocks"),
                checked: visibility.tablet,
                onChange: (value) => setAttributes({
                  visibility: {
                    ...visibility,
                    tablet: value
                  }
                }),
                __nextHasNoMarginBottom: true
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              ToggleControl,
              {
                label: __("Hide on Mobile", "digiblocks"),
                checked: visibility.mobile,
                onChange: (value) => setAttributes({
                  visibility: {
                    ...visibility,
                    mobile: value
                  }
                }),
                __nextHasNoMarginBottom: true
              }
            )
          ));
        case "style":
          return /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(
            TabPanelBody2,
            {
              tab: "style",
              name: "borders",
              title: __("Borders & Radius", "digiblocks"),
              initialOpen: true
            },
            /* @__PURE__ */ wp.element.createElement(
              SelectControl2,
              {
                label: __("Border Style", "digiblocks"),
                value: borderStyle,
                options: borderStyleOptions,
                onChange: (value) => setAttributes({ borderStyle: value }),
                __next40pxDefaultSize: true,
                __nextHasNoMarginBottom: true
              }
            ),
            borderStyle !== "none" && /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(
              ResponsiveControl,
              {
                label: __("Border Width", "digiblocks")
              },
              /* @__PURE__ */ wp.element.createElement(
                DimensionControl,
                {
                  values: borderWidth[localActiveDevice],
                  onChange: (value) => setAttributes({
                    borderWidth: {
                      ...borderWidth,
                      [localActiveDevice]: value
                    }
                  })
                }
              )
            ), /* @__PURE__ */ wp.element.createElement(
              PanelColorSettings,
              {
                title: "",
                enableAlpha: true,
                colorSettings: [
                  {
                    value: borderColor,
                    onChange: (value) => setAttributes({ borderColor: value }),
                    label: __("Border Color", "digiblocks")
                  }
                ]
              }
            )),
            /* @__PURE__ */ wp.element.createElement(
              ResponsiveControl,
              {
                label: __("Border Radius", "digiblocks")
              },
              /* @__PURE__ */ wp.element.createElement(
                DimensionControl,
                {
                  values: borderRadius[localActiveDevice],
                  onChange: (value) => setAttributes({
                    borderRadius: {
                      ...borderRadius,
                      [localActiveDevice]: value
                    }
                  }),
                  units: [
                    { label: "px", value: "px" },
                    { label: "%", value: "%" },
                    { label: "em", value: "em" }
                  ]
                }
              )
            ),
            /* @__PURE__ */ wp.element.createElement(
              BoxShadowControl,
              {
                normalValue: boxShadow,
                hoverValue: boxShadowHover,
                onNormalChange: (value) => setAttributes({ boxShadow: value }),
                onHoverChange: (value) => setAttributes({ boxShadowHover: value })
              }
            )
          ));
        case "background":
          return /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(
            TabPanelBody2,
            {
              tab: "background",
              name: "background",
              title: __("Background", "digiblocks"),
              initialOpen: true
            },
            /* @__PURE__ */ wp.element.createElement(
              PanelColorSettings,
              {
                title: __("Background Color", "digiblocks"),
                initialOpen: true,
                enableAlpha: true,
                colorSettings: [
                  {
                    value: backgroundColor,
                    onChange: (value) => setAttributes({ backgroundColor: value }),
                    label: __("Background Color", "digiblocks")
                  }
                ]
              }
            ),
            /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-media-control" }, /* @__PURE__ */ wp.element.createElement("p", { className: "components-base-control__label" }, __("Background Image", "digiblocks")), /* @__PURE__ */ wp.element.createElement(MediaUploadCheck, null, /* @__PURE__ */ wp.element.createElement(
              MediaUpload,
              {
                onSelect: (media) => {
                  setAttributes({
                    backgroundImage: {
                      url: media.url,
                      id: media.id,
                      alt: media.alt || "",
                      size: media.sizes?.full?.url ? "full" : ""
                    }
                  });
                },
                allowedTypes: ["image"],
                value: backgroundImage?.id,
                render: ({ open }) => /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-media-upload-wrapper" }, backgroundImage?.url ? /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-media-preview" }, /* @__PURE__ */ wp.element.createElement("img", { src: backgroundImage.url, alt: backgroundImage.alt || "" }), /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-media-controls" }, /* @__PURE__ */ wp.element.createElement(
                  Button,
                  {
                    isPrimary: true,
                    onClick: open
                  },
                  /* @__PURE__ */ wp.element.createElement("span", { class: "dashicon dashicons dashicons-edit" })
                ), /* @__PURE__ */ wp.element.createElement(
                  Button,
                  {
                    isDestructive: true,
                    onClick: () => setAttributes({ backgroundImage: { url: "", id: 0, alt: "", size: "" } })
                  },
                  /* @__PURE__ */ wp.element.createElement("span", { class: "dashicon dashicons dashicons-trash" })
                ))) : /* @__PURE__ */ wp.element.createElement(
                  Button,
                  {
                    className: "digiblocks-media-upload-button",
                    isPrimary: true,
                    onClick: open
                  },
                  __("Select Image", "digiblocks")
                ))
              }
            ))),
            backgroundImage?.url && /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(
              SelectControl2,
              {
                label: __("Background Position", "digiblocks"),
                value: backgroundPosition,
                options: bgPositionOptions,
                onChange: (value) => setAttributes({ backgroundPosition: value }),
                __next40pxDefaultSize: true,
                __nextHasNoMarginBottom: true
              }
            ), /* @__PURE__ */ wp.element.createElement(
              SelectControl2,
              {
                label: __("Background Repeat", "digiblocks"),
                value: backgroundRepeat,
                options: bgRepeatOptions,
                onChange: (value) => setAttributes({ backgroundRepeat: value }),
                __next40pxDefaultSize: true,
                __nextHasNoMarginBottom: true
              }
            ), /* @__PURE__ */ wp.element.createElement(
              SelectControl2,
              {
                label: __("Background Size", "digiblocks"),
                value: backgroundSize,
                options: bgSizeOptions,
                onChange: (value) => setAttributes({ backgroundSize: value }),
                __next40pxDefaultSize: true,
                __nextHasNoMarginBottom: true
              }
            ))
          ), /* @__PURE__ */ wp.element.createElement(
            TabPanelBody2,
            {
              tab: "background",
              name: "overlay",
              title: __("Background Overlay", "digiblocks"),
              initialOpen: false
            },
            /* @__PURE__ */ wp.element.createElement(
              PanelColorSettings,
              {
                title: __("Overlay Color", "digiblocks"),
                initialOpen: true,
                enableAlpha: true,
                colorSettings: [
                  {
                    value: backgroundOverlay,
                    onChange: (value) => setAttributes({ backgroundOverlay: value }),
                    label: __("Overlay Color", "digiblocks")
                  }
                ]
              }
            ),
            backgroundOverlay && /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(
              RangeControl,
              {
                label: __("Overlay Opacity", "digiblocks"),
                value: backgroundOverlayOpacity,
                onChange: (value) => setAttributes({ backgroundOverlayOpacity: value }),
                min: 0,
                max: 1,
                step: 0.01,
                __next40pxDefaultSize: true,
                __nextHasNoMarginBottom: true
              }
            ), /* @__PURE__ */ wp.element.createElement(
              SelectControl2,
              {
                label: __("Blend Mode", "digiblocks"),
                value: backgroundOverlayBlendMode,
                options: blendModeOptions,
                onChange: (value) => setAttributes({ backgroundOverlayBlendMode: value }),
                __next40pxDefaultSize: true,
                __nextHasNoMarginBottom: true
              }
            ))
          ));
        default:
          return null;
      }
    };
    return /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(InspectorControls, null, /* @__PURE__ */ wp.element.createElement(
      CustomTabPanel,
      {
        tabs: tabList,
        activeTab,
        onSelect: setActiveTab
      },
      renderTabContent()
    )), /* @__PURE__ */ wp.element.createElement("style", { dangerouslySetInnerHTML: { __html: generateColumnCSS() } }), /* @__PURE__ */ wp.element.createElement("div", { ...innerBlocksProps }));
  };
  var edit_default = ColumnEdit;

  // blocks/column/save.js
  var { __: __2 } = window.wp.i18n;
  var { useBlockProps: useBlockProps2, useInnerBlocksProps: useInnerBlocksProps2 } = window.wp.blockEditor;
  var ColumnSave = ({ attributes }) => {
    const {
      id,
      backgroundOverlay
    } = attributes;
    const classNames = `digiblocks-column ${id}`;
    const blockProps = useBlockProps2.save({
      className: classNames
    });
    const innerBlocksProps = useInnerBlocksProps2.save(blockProps);
    return /* @__PURE__ */ wp.element.createElement("div", { ...innerBlocksProps });
  };
  var save_default = ColumnSave;

  // blocks/container/edit.js
  var { __: __3 } = window.wp.i18n;
  var {
    useBlockProps: useBlockProps3,
    useInnerBlocksProps: useInnerBlocksProps3,
    InspectorControls: InspectorControls2,
    PanelColorSettings: PanelColorSettings2,
    MediaUpload: MediaUpload2,
    MediaUploadCheck: MediaUploadCheck2
  } = window.wp.blockEditor;
  var {
    ToggleControl: ToggleControl2,
    SelectControl: SelectControl3,
    RangeControl: RangeControl2,
    Button: Button2,
    Tooltip,
    __experimentalToggleGroupControl: ToggleGroupControl,
    __experimentalToggleGroupControlOption: ToggleGroupControlOption
  } = window.wp.components;
  var { useState: useState2, useEffect: useEffect2, useRef } = window.wp.element;
  var { useDispatch: useDispatch2, useSelect: useSelect2 } = window.wp.data;
  var { createBlock } = window.wp.blocks;
  var { useBlockId: useBlockId2, getDimensionCSS: getDimensionCSS2, animations, animationPreview } = digi.utils;
  var { tabIcons: tabIcons2 } = digi.icons;
  var { ResponsiveControl: ResponsiveControl2, DimensionControl: DimensionControl2, BoxShadowControl: BoxShadowControl2, CustomTabPanel: CustomTabPanel2, TabPanelBody: TabPanelBody3, ResponsiveRangeControl, ResponsiveButtonGroup } = digi.components;
  var containerLayouts = [
    {
      name: "1-col",
      label: __3("1 Column", "digiblocks"),
      icon: /* @__PURE__ */ wp.element.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", x: "0", y: "0", viewBox: "0 0 90 48" }, /* @__PURE__ */ wp.element.createElement("path", { d: "M88 48H2c-1.1 0-2-.9-2-2V2C0 .9.9 0 2 0h86c1.1 0 2 .9 2 2v44c0 1.1-.9 2-2 2z" })),
      columns: [100]
    },
    {
      name: "2-col-equal",
      label: __3("2 Columns Equal", "digiblocks"),
      icon: /* @__PURE__ */ wp.element.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", x: "0", y: "0", viewBox: "0 0 90 48" }, /* @__PURE__ */ wp.element.createElement("path", { d: "M41.3 48H2c-1.1 0-2-.9-2-2V2C0 .9.9 0 2 0h39.2c1.1 0 2 .9 2 2v44c.1 1.1-.8 2-1.9 2zM88 48H48.7c-1.1 0-2-.9-2-2V2c0-1.1.9-2 2-2H88c1.1 0 2 .9 2 2v44c0 1.1-.9 2-2 2z" })),
      columns: [50, 50]
    },
    {
      name: "3-col-equal",
      label: __3("3 Columns Equal", "digiblocks"),
      icon: /* @__PURE__ */ wp.element.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", x: "0", y: "0", viewBox: "0 0 90 48" }, /* @__PURE__ */ wp.element.createElement("path", { d: "M26.2 48H2c-1.1 0-2-.9-2-2V2C0 .9.9 0 2 0h24.2c1.1 0 2 .9 2 2v44c.1 1.1-.9 2-2 2zM57.1 48H32.9c-1.1 0-2-.9-2-2V2c0-1.1.9-2 2-2h24.2c1.1 0 2 .9 2 2v44c0 1.1-.9 2-2 2zM88 48H63.8c-1.1 0-2-.9-2-2V2c0-1.1.9-2 2-2H88c1.1 0 2 .9 2 2v44c0 1.1-.9 2-2 2z" })),
      columns: [33.33, 33.33, 33.33]
    },
    {
      name: "4-col-equal",
      label: __3("4 Columns Equal", "digiblocks"),
      icon: /* @__PURE__ */ wp.element.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", x: "0", y: "0", viewBox: "0 0 90 48" }, /* @__PURE__ */ wp.element.createElement("path", { d: "M19 48H2c-1.1 0-2-.9-2-2V2C0 .9.9 0 2 0h17c1.1 0 2 .9 2 2v44c0 1.1-.9 2-2 2zM42 48H25c-1.1 0-2-.9-2-2V2c0-1.1.9-2 2-2h17c1.1 0 2 .9 2 2v44c0 1.1-.9 2-2 2zM64.9 48H48c-1.1 0-2-.9-2-2V2c0-1.1.9-2 2-2h16.9c1.1 0 2 .9 2 2v44c.1 1.1-.8 2-2 2zM87.9 48H71c-1.1 0-2-.9-2-2V2c0-1.1.9-2 2-2h16.9c1.1 0 2 .9 2 2v44c.1 1.1-.9 2-2 2z" })),
      columns: [25, 25, 25, 25]
    },
    {
      name: "1-3-col",
      label: __3("1/3 + 2/3", "digiblocks"),
      icon: /* @__PURE__ */ wp.element.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", x: "0", y: "0", viewBox: "0 0 90 48" }, /* @__PURE__ */ wp.element.createElement("path", { d: "M24.1 48H2c-1.1 0-2-.9-2-2V2C0 .9.9 0 2 0h22c1.1 0 2 .9 2 2v44c.1 1.1-.8 2-1.9 2zM87.9 48H30.2c-1.1 0-2-.9-2-2V2c0-1.1.9-2 2-2h57.7c1.1 0 2 .9 2 2v44c.1 1.1-.9 2-2 2z" })),
      columns: [33.33, 66.67]
    },
    {
      name: "3-1-col",
      label: __3("2/3 + 1/3", "digiblocks"),
      icon: /* @__PURE__ */ wp.element.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", x: "0", y: "0", viewBox: "0 0 90 48" }, /* @__PURE__ */ wp.element.createElement("path", { d: "M60.6 48H2c-1.1 0-2-.9-2-2V2C0 .9.9 0 2 0h58.6c1.1 0 2 .9 2 2v44c0 1.1-.9 2-2 2zM87.9 48H66.7c-1.1 0-2-.9-2-2V2c0-1.1.9-2 2-2h21.2c1.1 0 2 .9 2 2v44c.1 1.1-.9 2-2 2z" })),
      columns: [66.67, 33.33]
    },
    {
      name: "1-4-1-4-2-4-col",
      label: __3("1/4 + 1/4 + 2/4", "digiblocks"),
      icon: /* @__PURE__ */ wp.element.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", x: "0", y: "0", viewBox: "0 0 90 48" }, /* @__PURE__ */ wp.element.createElement("path", { d: "M20.1 48H2c-1.1 0-2-.9-2-2V2C0 .9.9 0 2 0h18.1c1.1 0 2 .9 2 2v44c.1 1.1-.8 2-2 2zM44.6 48H26.5c-1.1 0-2-.9-2-2V2c0-1.1.9-2 2-2h18.1c1.1 0 2 .9 2 2v44c0 1.1-.9 2-2 2zM87.9 48h-37c-1.1 0-2-.9-2-2V2c0-1.1.9-2 2-2h37c1.1 0 2 .9 2 2v44c.1 1.1-.9 2-2 2z" })),
      columns: [25, 25, 50]
    },
    {
      name: "2-4-1-4-1-4-col",
      label: __3("2/4 + 1/4 + 1/4", "digiblocks"),
      icon: /* @__PURE__ */ wp.element.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", x: "0", y: "0", viewBox: "0 0 90 48" }, /* @__PURE__ */ wp.element.createElement("path", { d: "M69.8 48h18.1c1.1 0 2-.9 2-2V2c0-1.1-.9-2-2-2H69.8c-1.1 0-2 .9-2 2v44c0 1.1.9 2 2 2zM45.4 48h18.1c1.1 0 2-.9 2-2V2c0-1.1-.9-2-2-2H45.4c-1.1 0-2 .9-2 2v44c0 1.1.9 2 2 2zM2 48h37c1.1 0 2-.9 2-2V2c0-1.1-.9-2-2-2H2C.9 0 0 .9 0 2v44c0 1.1.9 2 2 2z" })),
      columns: [50, 25, 25]
    },
    {
      name: "1-4-2-4-1-4-col",
      label: __3("1/4 + 2/4 + 1/4", "digiblocks"),
      icon: /* @__PURE__ */ wp.element.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", x: "0", y: "0", viewBox: "0 0 90 48" }, /* @__PURE__ */ wp.element.createElement("path", { d: "M69.8 48h18.1c1.1 0 2-.9 2-2V2c0-1.1-.9-2-2-2H69.8c-1.1 0-2 .9-2 2v44c0 1.1.9 2 2 2zM2 48h18.1c1.1 0 2-.9 2-2V2c0-1.1-.9-2-2-2H2C.9 0 0 .9 0 2v44c0 1.1.9 2 2 2zM26.4 48h37c1.1 0 2-.9 2-2V2c0-1.1-.9-2-2-2h-37c-1.1 0-2 .9-2 2v44c0 1.1.9 2 2 2z" })),
      columns: [25, 50, 25]
    },
    {
      name: "5-col-equal",
      label: __3("5 Columns Equal", "digiblocks"),
      icon: /* @__PURE__ */ wp.element.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", x: "0", y: "0", viewBox: "0 0 90 48" }, /* @__PURE__ */ wp.element.createElement("path", { d: "M20.3 48h12.6c1.1 0 2-.9 2-2V2c0-1.1-.9-2-2-2H20.3c-1.1 0-2 .9-2 2v44c0 1.1.9 2 2 2zM38.7 48h12.6c1.1 0 2-.9 2-2V2c0-1.1-.9-2-2-2H38.7c-1.1 0-2 .9-2 2v44c-.1 1.1.9 2 2 2zM57.1 48h12.6c1.1 0 2-.9 2-2V2c0-1.1-.9-2-2-2H57.1c-1.1 0-2 .9-2 2v44c0 1.1.9 2 2 2zM75.4 48H88c1.1 0 2-.9 2-2V2c0-1.1-.9-2-2-2H75.4c-1.1 0-2 .9-2 2v44c0 1.1.9 2 2 2zM2 48h12.6c1.1 0 2-.9 2-2V2c0-1.1-.9-2-2-2H2C.9 0 0 .9 0 2v44c0 1.1.9 2 2 2z" })),
      columns: [20, 20, 20, 20, 20]
    },
    {
      name: "6-col-equal",
      label: __3("6 Columns Equal", "digiblocks"),
      icon: /* @__PURE__ */ wp.element.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", x: "0", y: "0", viewBox: "0 0 90 48" }, /* @__PURE__ */ wp.element.createElement("path", { d: "M17.3 48H27c1.1 0 2-.9 2-2V2c0-1.1-.9-2-2-2h-9.7c-1.1 0-2 .9-2 2v44c-.1 1.1.8 2 2 2zM32.4 48h9.7c1.1 0 2-.9 2-2V2c0-1.1-.9-2-2-2h-9.7c-1.1 0-2 .9-2 2v44c0 1.1.9 2 2 2zM47.8 48h9.7c1.1 0 2-.9 2-2V2c0-1.1-.9-2-2-2h-9.7c-1.1 0-2 .9-2 2v44c-.1 1.1.8 2 2 2zM62.9 48h9.7c1.1 0 2-.9 2-2V2c0-1.1-.9-2-2-2h-9.7c-1.1 0-2 .9-2 2v44c-.1 1.1.8 2 2 2zM78.3 48H88c1.1 0 2-.9 2-2V2c0-1.1-.9-2-2-2h-9.7c-1.1 0-2 .9-2 2v44c-.1 1.1.9 2 2 2zM2 48h9.7c1.1 0 2-.9 2-2V2c0-1.1-.9-2-2-2H2C.9 0 0 .9 0 2v44c0 1.1.9 2 2 2z" })),
      columns: [16.67, 16.67, 16.67, 16.67, 16.67, 16.67]
    },
    {
      name: "1-6-4-6-1-6-col",
      label: __3("1/6 + 4/6 + 1/6", "digiblocks"),
      icon: /* @__PURE__ */ wp.element.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", x: "0", y: "0", viewBox: "0 0 90 48" }, /* @__PURE__ */ wp.element.createElement("path", { d: "M19.2 48h51.5c1.1 0 2-.9 2-2V2c0-1.1-.9-2-2-2H19.2c-1.1 0-2 .9-2 2v44c0 1.1.9 2 2 2zM77.1 48H88c1.1 0 2-.9 2-2V2c0-1.1-.9-2-2-2H77.1c-1.1 0-2 .9-2 2v44c-.1 1.1.8 2 2 2zM2 48h11.1c1.1 0 2-.9 2-2V2c0-1.1-.9-2-2-2H2C.9 0 0 .9 0 2v44c0 1.1.9 2 2 2z" })),
      columns: [16.67, 66.67, 16.67]
    }
  ];
  var ContainerEdit = ({ attributes, setAttributes, clientId }) => {
    const {
      flexWrap,
      id,
      anchor,
      visibility,
      customClasses,
      layout,
      contentLayout,
      contentWidth,
      contentMaxWidth,
      horizontalAlign,
      verticalAlign,
      heightType,
      minHeight,
      columnGap,
      rowGap,
      reverseColumnsMobile,
      stackOnTablet,
      stackOnMobile,
      overflowHidden,
      zIndex,
      backgroundColor,
      backgroundImage,
      backgroundPosition,
      backgroundRepeat,
      backgroundSize,
      backgroundVideo,
      backgroundVideoFallbackImage,
      backgroundOverlay,
      backgroundOverlayOpacity,
      backgroundOverlayBlendMode,
      padding,
      margin,
      borderStyle,
      borderWidth,
      borderColor,
      borderRadius,
      boxShadow,
      boxShadowHover,
      animation
    } = attributes;
    useBlockId2(id, clientId, setAttributes);
    const [localActiveDevice, setLocalActiveDevice] = useState2(window.digi.responsiveState.activeDevice);
    const [activeTab, setActiveTab] = useState2(() => {
      if (window.digi.uiState) {
        const savedTab = window.digi.uiState.getActiveTab(clientId);
        if (savedTab)
          return savedTab;
      }
      return "options";
    });
    const [showLayoutSelector, setShowLayoutSelector] = useState2(!layout);
    const previewTimeoutRef = useRef(null);
    useEffect2(() => {
      const unsubscribe = window.digi.responsiveState.subscribe((device) => {
        setLocalActiveDevice(device);
      });
      return unsubscribe;
    }, []);
    const { isNested } = useSelect2(
      (select) => {
        const { getBlockParentsByBlockName } = select("core/block-editor");
        return {
          isNested: getBlockParentsByBlockName(clientId, "digiblocks/container").length > 0
        };
      },
      [clientId]
    );
    useEffect2(() => {
      setAttributes({ isNested });
    }, [isNested, setAttributes]);
    const { innerBlocks, hasChildBlocks } = useSelect2(
      (select) => {
        const { getBlocks } = select("core/block-editor");
        const blocks = getBlocks(clientId);
        return {
          innerBlocks: blocks,
          hasChildBlocks: blocks.length > 0
        };
      },
      [clientId]
    );
    const { replaceInnerBlocks } = useDispatch2("core/block-editor");
    const createColumnsFromLayout = (selectedLayout) => {
      const layoutConfig = containerLayouts.find((l) => l.name === selectedLayout);
      if (!layoutConfig)
        return;
      const existingColumns = innerBlocks.map((column) => ({
        clientId: column.clientId,
        attributes: column.attributes,
        innerBlocks: column.innerBlocks
      }));
      const newColumnCount = layoutConfig.columns.length;
      const prevColumnCount = existingColumns.length;
      const columnBlocks = [];
      layoutConfig.columns.forEach((columnWidth, index) => {
        if (index < prevColumnCount) {
          const existingColumn = existingColumns[index];
          columnBlocks.push(createBlock(
            "digiblocks/column",
            {
              ...existingColumn.attributes,
              width: {
                desktop: columnWidth,
                tablet: stackOnTablet ? 100 : columnWidth,
                mobile: stackOnMobile ? 100 : columnWidth
              }
            },
            [...existingColumn.innerBlocks]
            // Keep existing blocks
          ));
        } else {
          columnBlocks.push(createBlock(
            "digiblocks/column",
            {
              id: `column-${id}-${index}`,
              width: {
                desktop: columnWidth,
                tablet: stackOnTablet ? 100 : columnWidth,
                mobile: stackOnMobile ? 100 : columnWidth
              }
            },
            []
            // No inner blocks for new columns
          ));
        }
      });
      if (prevColumnCount > newColumnCount && newColumnCount > 0) {
        const blocksToMove = [];
        for (let i = newColumnCount; i < prevColumnCount; i++) {
          blocksToMove.push(...existingColumns[i].innerBlocks);
        }
        if (blocksToMove.length > 0) {
          const lastColumnBlocks = columnBlocks[columnBlocks.length - 1].innerBlocks;
          columnBlocks[columnBlocks.length - 1].innerBlocks = [...lastColumnBlocks, ...blocksToMove];
        }
      }
      replaceInnerBlocks(clientId, columnBlocks, false);
      setAttributes({ layout: selectedLayout });
      setShowLayoutSelector(false);
    };
    useEffect2(() => {
      if (animation && animation !== "none") {
        const timeoutId = setTimeout(() => {
          animationPreview(id, animation, animations, previewTimeoutRef);
        }, 100);
        return () => clearTimeout(timeoutId);
      }
    }, [animation]);
    const animationOptions = [
      { label: __3("None", "digiblocks"), value: "none" },
      ...Object.keys(animations).map((animation2) => ({
        label: animation2.replace(/-/g, " ").replace(/\b\w/g, (l) => l.toUpperCase()),
        value: animation2
      }))
    ];
    const handlePreviewClick = () => {
      animationPreview(id, animation, animations, previewTimeoutRef);
    };
    const bgPositionOptions = [
      { label: __3("Top Left", "digiblocks"), value: "top left" },
      { label: __3("Top Center", "digiblocks"), value: "top center" },
      { label: __3("Top Right", "digiblocks"), value: "top right" },
      { label: __3("Center Left", "digiblocks"), value: "center left" },
      { label: __3("Center Center", "digiblocks"), value: "center center" },
      { label: __3("Center Right", "digiblocks"), value: "center right" },
      { label: __3("Bottom Left", "digiblocks"), value: "bottom left" },
      { label: __3("Bottom Center", "digiblocks"), value: "bottom center" },
      { label: __3("Bottom Right", "digiblocks"), value: "bottom right" }
    ];
    const bgRepeatOptions = [
      { label: __3("No Repeat", "digiblocks"), value: "no-repeat" },
      { label: __3("Repeat", "digiblocks"), value: "repeat" },
      { label: __3("Repeat X", "digiblocks"), value: "repeat-x" },
      { label: __3("Repeat Y", "digiblocks"), value: "repeat-y" }
    ];
    const bgSizeOptions = [
      { label: __3("Cover", "digiblocks"), value: "cover" },
      { label: __3("Contain", "digiblocks"), value: "contain" },
      { label: __3("Auto", "digiblocks"), value: "auto" },
      { label: __3("100%", "digiblocks"), value: "100%" }
    ];
    const borderStyleOptions = [
      { label: __3("None", "digiblocks"), value: "none" },
      { label: __3("Solid", "digiblocks"), value: "solid" },
      { label: __3("Dashed", "digiblocks"), value: "dashed" },
      { label: __3("Dotted", "digiblocks"), value: "dotted" },
      { label: __3("Double", "digiblocks"), value: "double" }
    ];
    const blendModeOptions = [
      { label: __3("Normal", "digiblocks"), value: "normal" },
      { label: __3("Multiply", "digiblocks"), value: "multiply" },
      { label: __3("Screen", "digiblocks"), value: "screen" },
      { label: __3("Overlay", "digiblocks"), value: "overlay" },
      { label: __3("Darken", "digiblocks"), value: "darken" },
      { label: __3("Lighten", "digiblocks"), value: "lighten" },
      { label: __3("Color Dodge", "digiblocks"), value: "color-dodge" },
      { label: __3("Color Burn", "digiblocks"), value: "color-burn" },
      { label: __3("Hard Light", "digiblocks"), value: "hard-light" },
      { label: __3("Soft Light", "digiblocks"), value: "soft-light" },
      { label: __3("Difference", "digiblocks"), value: "difference" },
      { label: __3("Exclusion", "digiblocks"), value: "exclusion" },
      { label: __3("Hue", "digiblocks"), value: "hue" },
      { label: __3("Saturation", "digiblocks"), value: "saturation" },
      { label: __3("Color", "digiblocks"), value: "color" },
      { label: __3("Luminosity", "digiblocks"), value: "luminosity" }
    ];
    const tabList = [
      {
        name: "options",
        title: __3("Layout", "digiblocks"),
        icon: tabIcons2.optionsIcon
      },
      {
        name: "style",
        title: __3("Style", "digiblocks"),
        icon: tabIcons2.styleIcon
      },
      {
        name: "background",
        title: __3("Background", "digiblocks"),
        icon: tabIcons2.backgroundIcon
      },
      {
        name: "advanced",
        title: __3("Advanced", "digiblocks"),
        icon: tabIcons2.advancedIcon
      }
    ];
    const getContainerPadding = (padding2, device) => {
      const hasDeviceValues = (dev) => {
        return padding2 && padding2[dev] && (padding2[dev].top !== void 0 && padding2[dev].top !== "" || padding2[dev].right !== void 0 && padding2[dev].right !== "" || padding2[dev].bottom !== void 0 && padding2[dev].bottom !== "" || padding2[dev].left !== void 0 && padding2[dev].left !== "");
      };
      let values;
      if (hasDeviceValues(device)) {
        values = padding2[device];
      } else if (device === "tablet" && hasDeviceValues("desktop")) {
        values = padding2["desktop"];
      } else if (device === "mobile") {
        if (hasDeviceValues("tablet")) {
          values = padding2["tablet"];
        } else if (hasDeviceValues("desktop")) {
          values = padding2["desktop"];
        } else {
          return "";
        }
      } else {
        return "";
      }
      const ensureMinPadding = (value, unit2) => {
        if (value === void 0 || value === "") {
          return "0" + unit2;
        }
        if (unit2 === "px" && parseFloat(value) < 10) {
          return "10px";
        }
        return value + unit2;
      };
      const unit = values.unit || "px";
      const top = ensureMinPadding(values.top, unit);
      const right = ensureMinPadding(values.right, unit);
      const bottom = ensureMinPadding(values.bottom, unit);
      const left = ensureMinPadding(values.left, unit);
      return `padding: ${top} ${right} ${bottom} ${left} !important;`;
    };
    const getGapValue = (gapObj, device) => {
      if (gapObj[device] && gapObj[device].value !== "") {
        return {
          value: gapObj[device].value,
          unit: gapObj[device].unit || "px"
        };
      }
      if (device === "tablet") {
        return {
          value: gapObj.desktop.value,
          unit: gapObj.desktop.unit || "px"
        };
      }
      if (device === "mobile") {
        if (gapObj.tablet && gapObj.tablet.value !== "") {
          return {
            value: gapObj.tablet.value,
            unit: gapObj.tablet.unit || "px"
          };
        }
        return {
          value: gapObj.desktop.value,
          unit: gapObj.desktop.unit || "px"
        };
      }
      return {
        value: 0,
        unit: "px"
      };
    };
    const generateCSS = () => {
      const activeDevice = localActiveDevice;
      const paddingCSS = getContainerPadding(padding, activeDevice);
      const tabletPaddingCSS = getContainerPadding(padding, "tablet");
      const mobilePaddingCSS = getContainerPadding(padding, "mobile");
      let animationCSS = "";
      if (animation && animation !== "none" && animations[animation]) {
        animationCSS = animations[animation].keyframes;
      }
      let backgroundImageCSS = "";
      if (backgroundImage && backgroundImage.url) {
        backgroundImageCSS = `background-image: url(${backgroundImage.url});
            background-position: ${backgroundPosition};
            background-repeat: ${backgroundRepeat};
            background-size: ${backgroundSize};`;
      }
      let overlayCSS = "";
      if (backgroundOverlay) {
        overlayCSS = `
            .${id}:before {
                content: '';
                position: absolute;
                top: 0;
                left: 0;
                width: 100%;
                height: 100%;
                background-color: ${backgroundOverlay};
                opacity: ${backgroundOverlayOpacity};
                mix-blend-mode: ${backgroundOverlayBlendMode};
                z-index: 1;
                pointer-events: none;
                border-radius: inherit;
            }
            .${id} > * {
                position: relative;
                z-index: 2;
            }`;
      }
      let boxShadowCSS = "";
      if (boxShadow && boxShadow.enable) {
        boxShadowCSS = `box-shadow: ${boxShadow.horizontal}px ${boxShadow.vertical}px ${boxShadow.blur}px ${boxShadow.spread}px ${boxShadow.color};`;
      }
      let boxShadowHoverCSS = "";
      if (boxShadowHover && boxShadowHover.enable) {
        const insetHover = boxShadowHover.position === "inset" ? "inset " : "";
        boxShadowHoverCSS = `box-shadow: ${insetHover}${boxShadowHover.horizontal}px ${boxShadowHover.vertical}px ${boxShadowHover.blur}px ${boxShadowHover.spread}px ${boxShadowHover.color};`;
      }
      let heightCSS = "";
      if (heightType[activeDevice] === "full") {
        heightCSS = "height: 100vh;";
      } else if (heightType[activeDevice] === "custom") {
        heightCSS = `min-height: ${minHeight[activeDevice]}px !important;`;
      }
      let contentWidthCSS = "";
      if (!isNested) {
        if (contentLayout === "full") {
          contentWidthCSS = "width: 100%;";
        } else {
          const widthValue = contentWidth[activeDevice] !== void 0 && contentWidth[activeDevice] !== "" ? contentWidth[activeDevice] : contentWidth.desktop;
          contentWidthCSS = `width: ${widthValue}px;
				margin-left: auto;
				margin-right: auto;`;
        }
      }
      let contentMaxWidthCSS = "";
      if (!isNested) {
        if (contentLayout === "full") {
          contentMaxWidthCSS = "max-width: 100%;";
        } else {
          const maxWidthValue = contentMaxWidth[activeDevice] !== void 0 && contentMaxWidth[activeDevice] !== "" ? contentMaxWidth[activeDevice] : contentMaxWidth.desktop;
          contentMaxWidthCSS = `max-width: ${maxWidthValue}%;`;
        }
      }
      return `
            /* Container Block - ${id} */
            .${id} {
                position: relative;
                ${paddingCSS}
				${getDimensionCSS2(margin, "margin", activeDevice)}
                width: 100%;
                ${heightCSS}
                ${backgroundColor ? `background-color: ${backgroundColor};` : ""}
                ${backgroundImageCSS}
                ${borderStyle !== "none" ? `
                border-style: ${borderStyle}!important;
				${getDimensionCSS2(borderWidth, "border-width", activeDevice, true)}
                border-color: ${borderColor}!important;` : ""}
				${getDimensionCSS2(borderRadius, "border-radius", activeDevice)}
                ${boxShadowCSS}
                ${overflowHidden ? "overflow: hidden;" : ""}
                ${zIndex ? `z-index: ${zIndex};` : ""}
                transition: all 0.3s ease;
            }
            
            /* Hover effects */
            .${id}:hover {
                ${boxShadowHoverCSS}
            }

			.${id} > .digiblocks-container-inner {
                display: flex;
				flex-wrap: ${flexWrap[activeDevice]};
                align-items: ${verticalAlign[activeDevice]};
    			justify-content: ${horizontalAlign[activeDevice]};
				gap: ${getGapValue(rowGap, activeDevice).value}${getGapValue(rowGap, activeDevice).unit} ${getGapValue(columnGap, activeDevice).value}${getGapValue(columnGap, activeDevice).unit};
            }

			.${id}.alignfull > .digiblocks-container-inner {
				${!isNested ? contentWidthCSS : ""}
				${!isNested ? contentMaxWidthCSS : ""}
            }
            
            ${overlayCSS}
            
            /* Background video */
            .${id} > .digiblocks-bg-video-container {
                position: absolute;
                top: 0;
                left: 0;
                width: 100%;
                height: 100%;
                overflow: hidden;
                z-index: 0;
                pointer-events: none;
                border-radius: inherit;
            }
            
            .${id} > .digiblocks-bg-video {
                position: absolute;
                top: 50%;
                left: 50%;
                min-width: 100%;
                min-height: 100%;
                width: auto;
                height: auto;
                transform: translateX(-50%) translateY(-50%);
                object-fit: cover;
            }

			/* Responsive preview */
			body[data-digiblocks-device="tablet"] .${id} {
				${heightType["tablet"] === "custom" ? `min-height: ${minHeight["tablet"]}px;` : ""}
			}

			body[data-digiblocks-device="tablet"] .${id} > .digiblocks-container-inner {
				flex-wrap: ${flexWrap["tablet"]};
				align-items: ${verticalAlign["tablet"]};
				justify-content: ${horizontalAlign["tablet"]};
				gap: ${getGapValue(rowGap, "tablet").value}${getGapValue(rowGap, "tablet").unit} ${getGapValue(columnGap, "tablet").value}${getGapValue(columnGap, "tablet").unit};
				${stackOnTablet ? "flex-direction: column;" : ""}
			}

			${stackOnTablet ? `
				body[data-digiblocks-device="tablet"] .${id} > .digiblocks-container-inner .digiblocks-column {
					width: 100%;
				}` : ""}

			body[data-digiblocks-device="mobile"] .${id} {
				${heightType["mobile"] === "custom" ? `min-height: ${minHeight["mobile"]}px;` : ""}
			}

			body[data-digiblocks-device="mobile"] .${id} > .digiblocks-container-inner {
				flex-wrap: ${flexWrap["mobile"]};
				align-items: ${verticalAlign["mobile"]};
				justify-content: ${horizontalAlign["mobile"]};
				gap: ${getGapValue(rowGap, "mobile").value}${getGapValue(rowGap, "mobile").unit} ${getGapValue(columnGap, "mobile").value}${getGapValue(columnGap, "mobile").unit};
				${stackOnMobile ? "flex-direction: column;" : ""}
				${reverseColumnsMobile ? "flex-direction: column-reverse;" : ""}
			}

			${stackOnMobile ? `
				body[data-digiblocks-device="mobile"] .${id} > .digiblocks-container-inner .digiblocks-column {
					width: 100%;
				}` : ""}
            
            /* Tablet styles */
            @media (max-width: 991px) {
                .${id} {
                    ${tabletPaddingCSS}
					${getDimensionCSS2(margin, "margin", "tablet")}
					${heightType["tablet"] === "custom" ? `min-height: ${minHeight["tablet"]}px;` : ""}
					${getDimensionCSS2(borderRadius, "border-radius", "tablet")}
					${borderStyle !== "none" ? `${getDimensionCSS2(borderWidth, "border-width", "tablet", true)}` : ""}
                }

				.${id} > .digiblocks-container-inner {
					${!isNested && contentLayout !== "full" ? `
						width: ${contentWidth.tablet !== void 0 && contentWidth.tablet !== "" ? contentWidth.tablet : contentWidth.desktop}px;
						max-width: ${contentMaxWidth.tablet !== void 0 && contentMaxWidth.tablet !== "" ? contentMaxWidth.tablet : contentMaxWidth.desktop}%;
					` : ""}
					flex-wrap: ${flexWrap["tablet"]};
					align-items: ${verticalAlign["tablet"]};
					justify-content: ${horizontalAlign["tablet"]};
					gap: ${getGapValue(rowGap, "tablet").value}${getGapValue(rowGap, "tablet").unit} ${getGapValue(columnGap, "tablet").value}${getGapValue(columnGap, "tablet").unit};
                    ${stackOnTablet ? "flex-direction: column;" : ""}
				}

				${stackOnTablet ? `
					.${id} > .digiblocks-container-inner .digiblocks-column {
						width: 100%;
					}` : ""}
            }
            
            /* Mobile styles */
            @media (max-width: 767px) {
                .${id} {
                    ${mobilePaddingCSS}
					${getDimensionCSS2(margin, "margin", "mobile")}
                    ${heightType["mobile"] === "custom" ? `min-height: ${minHeight["mobile"]}px;` : ""}
					${getDimensionCSS2(borderRadius, "border-radius", "mobile")}
                    ${borderStyle !== "none" ? `border-width: ${borderWidth["mobile"].top}${borderWidth["mobile"].unit} ${borderWidth["mobile"].right}${borderWidth["mobile"].unit} ${borderWidth["mobile"].bottom}${borderWidth["mobile"].unit} ${borderWidth["mobile"].left}${borderWidth["mobile"].unit};` : ""}
                }

				.${id} > .digiblocks-container-inner {
					${!isNested && contentLayout !== "full" ? `
						width: ${contentWidth.mobile !== void 0 && contentWidth.mobile !== "" ? contentWidth.mobile : contentWidth.tablet !== void 0 && contentWidth.tablet !== "" ? contentWidth.tablet : contentWidth.desktop}px;
						max-width: ${contentMaxWidth.mobile !== void 0 && contentMaxWidth.mobile !== "" ? contentMaxWidth.mobile : contentMaxWidth.tablet !== void 0 && contentMaxWidth.tablet !== "" ? contentMaxWidth.tablet : contentMaxWidth.desktop}%;
					` : ""}
					flex-wrap: ${flexWrap["mobile"]};
					align-items: ${verticalAlign["mobile"]};
					justify-content: ${horizontalAlign["mobile"]};
					gap: ${getGapValue(rowGap, "mobile").value}${getGapValue(rowGap, "mobile").unit} ${getGapValue(columnGap, "mobile").value}${getGapValue(columnGap, "mobile").unit};
                    ${stackOnMobile ? "flex-direction: column;" : ""}
                    ${reverseColumnsMobile ? "flex-direction: column-reverse;" : ""}
				}

				${stackOnMobile ? `
					.${id} > .digiblocks-container-inner .digiblocks-column {
						width: 100%;
					}` : ""}
            }
            
            /* Animation keyframes */
            ${animationCSS}

			/* Visibility Controls */
			${visibility.desktop ? `
				@media (min-width: 992px) {
					.${id} {
						opacity: 0.5 !important;
					}
				}
			` : ""}

			${visibility.tablet ? `
				@media (min-width: 768px) and (max-width: 991px) {
					.${id} {
						opacity: 0.5 !important;
					}
				}
			` : ""}

			${visibility.mobile ? `
				@media (max-width: 767px) {
					.${id} {
						opacity: 0.5 !important;
					}
				}
			` : ""}
        `;
    };
    const blockProps = useBlockProps3({
      className: `digiblocks-container ${isNested ? "" : "alignfull"} ${id} ${customClasses || ""}`,
      id: anchor || null
    });
    const allowedBlocks = ["digiblocks/column"];
    const innerBlocksProps = useInnerBlocksProps3(
      { className: "digiblocks-container-inner" },
      {
        allowedBlocks: showLayoutSelector ? [] : allowedBlocks,
        orientation: "horizontal",
        renderAppender: hasChildBlocks ? void 0 : window.wp.blockEditor.ButtonBlockAppender
      }
    );
    const renderTabContent = () => {
      switch (activeTab) {
        case "options":
          return /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(
            TabPanelBody3,
            {
              tab: "options",
              name: "layout",
              title: __3("Container Layout", "digiblocks"),
              initialOpen: true
            },
            /* @__PURE__ */ wp.element.createElement(
              Button2,
              {
                variant: "secondary",
                onClick: () => setShowLayoutSelector(true),
                className: "digiblocks-change-layout-button"
              },
              layout ? __3("Change Layout", "digiblocks") : __3("Select Layout", "digiblocks")
            ),
            !isNested && /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(
              ToggleGroupControl,
              {
                label: __3("Layout", "digiblocks"),
                value: contentLayout,
                onChange: (value) => setAttributes({ contentLayout: value }),
                isBlock: true,
                __next40pxDefaultSize: true,
                __nextHasNoMarginBottom: true
              },
              /* @__PURE__ */ wp.element.createElement(
                ToggleGroupControlOption,
                {
                  value: "boxed",
                  label: __3("Boxed", "digiblocks")
                }
              ),
              /* @__PURE__ */ wp.element.createElement(
                ToggleGroupControlOption,
                {
                  value: "full",
                  label: __3("Full Width", "digiblocks")
                }
              )
            ), contentLayout === "boxed" && /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(
              ResponsiveControl2,
              {
                label: __3("Content Width (px)", "digiblocks")
              },
              /* @__PURE__ */ wp.element.createElement(
                RangeControl2,
                {
                  value: contentWidth[localActiveDevice] !== "" ? contentWidth[localActiveDevice] : localActiveDevice === "desktop" ? digiBlocksData.contentWidth || 1200 : contentWidth.desktop || digiBlocksData.contentWidth || 1200,
                  onChange: (value) => setAttributes({
                    contentWidth: {
                      ...contentWidth,
                      [localActiveDevice]: value
                    }
                  }),
                  min: 300,
                  max: 2e3,
                  step: 1,
                  __next40pxDefaultSize: true,
                  __nextHasNoMarginBottom: true
                }
              )
            ), /* @__PURE__ */ wp.element.createElement(
              ResponsiveControl2,
              {
                label: __3("Content Max Width (%)", "digiblocks")
              },
              /* @__PURE__ */ wp.element.createElement(
                RangeControl2,
                {
                  value: contentMaxWidth[localActiveDevice] !== "" ? contentMaxWidth[localActiveDevice] : localActiveDevice === "desktop" ? digiBlocksData.contentMaxWidth || 90 : contentMaxWidth.desktop || digiBlocksData.contentMaxWidth || 90,
                  onChange: (value) => setAttributes({
                    contentMaxWidth: {
                      ...contentMaxWidth,
                      [localActiveDevice]: value
                    }
                  }),
                  min: 0,
                  max: 100,
                  step: 1,
                  __next40pxDefaultSize: true,
                  __nextHasNoMarginBottom: true
                }
              )
            ))),
            /* @__PURE__ */ wp.element.createElement(
              ResponsiveButtonGroup,
              {
                label: __3("Flex Wrap", "digiblocks"),
                value: flexWrap,
                onChange: (value) => setAttributes({ flexWrap: value }),
                options: [
                  { label: __3("No Wrap", "digiblocks"), value: "nowrap" },
                  { label: __3("Wrap", "digiblocks"), value: "wrap" }
                ]
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              ResponsiveButtonGroup,
              {
                label: __3("Height", "digiblocks"),
                value: heightType,
                onChange: (value) => setAttributes({ heightType: value }),
                options: [
                  { label: __3("Auto", "digiblocks"), value: "auto" },
                  { label: __3("Full", "digiblocks"), value: "full" },
                  { label: __3("Custom", "digiblocks"), value: "custom" }
                ]
              }
            ),
            heightType[localActiveDevice] === "custom" && /* @__PURE__ */ wp.element.createElement(
              ResponsiveControl2,
              {
                label: __3("Min Height", "digiblocks")
              },
              /* @__PURE__ */ wp.element.createElement(
                RangeControl2,
                {
                  value: minHeight[localActiveDevice],
                  onChange: (value) => setAttributes({
                    minHeight: {
                      ...minHeight,
                      [localActiveDevice]: value
                    }
                  }),
                  min: 0,
                  max: 1e3,
                  __next40pxDefaultSize: true,
                  __nextHasNoMarginBottom: true
                }
              )
            ),
            /* @__PURE__ */ wp.element.createElement(
              ResponsiveButtonGroup,
              {
                label: __3("Horizontal Align", "digiblocks"),
                value: horizontalAlign,
                onChange: (value) => setAttributes({ horizontalAlign: value }),
                options: [
                  { label: __3("Left", "digiblocks"), value: "flex-start" },
                  { label: __3("Center", "digiblocks"), value: "center" },
                  { label: __3("Right", "digiblocks"), value: "flex-end" },
                  { label: __3("Space", "digiblocks"), value: "space-between" }
                ]
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              ResponsiveButtonGroup,
              {
                label: __3("Vertical Align", "digiblocks"),
                value: verticalAlign,
                onChange: (value) => setAttributes({ verticalAlign: value }),
                options: [
                  { label: __3("Top", "digiblocks"), value: "flex-start" },
                  { label: __3("Middle", "digiblocks"), value: "center" },
                  { label: __3("Bottom", "digiblocks"), value: "flex-end" }
                ]
              }
            )
          ), /* @__PURE__ */ wp.element.createElement(
            TabPanelBody3,
            {
              tab: "layout",
              name: "spacing",
              title: __3("Spacing", "digiblocks"),
              initialOpen: false
            },
            /* @__PURE__ */ wp.element.createElement(
              ResponsiveRangeControl,
              {
                label: __3("Column Gap", "digiblocks"),
                value: columnGap,
                onChange: (value) => setAttributes({ columnGap: value }),
                units: [
                  { label: "px", value: "px" },
                  { label: "%", value: "%" },
                  { label: "em", value: "em" },
                  { label: "rem", value: "rem" }
                ],
                defaultUnit: "px",
                min: 0,
                max: 100,
                step: 1
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              ResponsiveRangeControl,
              {
                label: __3("Row Gap", "digiblocks"),
                value: rowGap,
                onChange: (value) => setAttributes({ rowGap: value }),
                units: [
                  // no % unit as it doesn't work on Row Gap
                  { label: "px", value: "px" },
                  { label: "em", value: "em" },
                  { label: "rem", value: "rem" }
                ],
                defaultUnit: "px",
                min: 0,
                max: 100,
                step: 1
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              ResponsiveControl2,
              {
                label: __3("Padding", "digiblocks")
              },
              /* @__PURE__ */ wp.element.createElement(
                DimensionControl2,
                {
                  values: padding[localActiveDevice],
                  onChange: (value) => setAttributes({
                    padding: {
                      ...padding,
                      [localActiveDevice]: value
                    }
                  })
                }
              )
            ),
            /* @__PURE__ */ wp.element.createElement(
              ResponsiveControl2,
              {
                label: __3("Margin", "digiblocks")
              },
              /* @__PURE__ */ wp.element.createElement(
                DimensionControl2,
                {
                  values: margin[localActiveDevice],
                  onChange: (value) => setAttributes({
                    margin: {
                      ...margin,
                      [localActiveDevice]: value
                    }
                  })
                }
              )
            )
          ), /* @__PURE__ */ wp.element.createElement(
            TabPanelBody3,
            {
              tab: "layout",
              name: "responsive",
              title: __3("Responsive", "digiblocks"),
              initialOpen: false
            },
            /* @__PURE__ */ wp.element.createElement(
              ToggleControl2,
              {
                label: __3("Stack on Tablet", "digiblocks"),
                checked: stackOnTablet,
                onChange: (value) => setAttributes({ stackOnTablet: value }),
                help: __3("Stack columns vertically on tablet devices.", "digiblocks"),
                __nextHasNoMarginBottom: true
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              ToggleControl2,
              {
                label: __3("Stack on Mobile", "digiblocks"),
                checked: stackOnMobile,
                onChange: (value) => setAttributes({ stackOnMobile: value }),
                help: __3("Stack columns vertically on mobile devices.", "digiblocks"),
                __nextHasNoMarginBottom: true
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              ToggleControl2,
              {
                label: __3("Reverse Columns on Mobile", "digiblocks"),
                checked: reverseColumnsMobile,
                onChange: (value) => setAttributes({ reverseColumnsMobile: value }),
                help: __3("Reverse the order of columns on mobile devices.", "digiblocks"),
                __nextHasNoMarginBottom: true
              }
            )
          ), /* @__PURE__ */ wp.element.createElement(
            TabPanelBody3,
            {
              tab: "layout",
              name: "visibility",
              title: __3("Visibility", "digiblocks"),
              initialOpen: false
            },
            /* @__PURE__ */ wp.element.createElement("div", { className: "components-base-control__help", style: {
              padding: "12px",
              backgroundColor: "#f0f6fc",
              border: "1px solid #c3ddfd",
              borderRadius: "4px",
              marginBottom: "16px"
            } }, /* @__PURE__ */ wp.element.createElement("strong", null, __3("Editor Note:", "digiblocks")), /* @__PURE__ */ wp.element.createElement("br", null), __3("Hidden elements appear with reduced opacity in the editor for easy editing. Visibility changes only take effect on the frontend.", "digiblocks")),
            /* @__PURE__ */ wp.element.createElement(
              ToggleControl2,
              {
                label: __3("Hide on Desktop", "digiblocks"),
                checked: visibility.desktop,
                onChange: (value) => setAttributes({
                  visibility: {
                    ...visibility,
                    desktop: value
                  }
                }),
                __nextHasNoMarginBottom: true
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              ToggleControl2,
              {
                label: __3("Hide on Tablet", "digiblocks"),
                checked: visibility.tablet,
                onChange: (value) => setAttributes({
                  visibility: {
                    ...visibility,
                    tablet: value
                  }
                }),
                __nextHasNoMarginBottom: true
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              ToggleControl2,
              {
                label: __3("Hide on Mobile", "digiblocks"),
                checked: visibility.mobile,
                onChange: (value) => setAttributes({
                  visibility: {
                    ...visibility,
                    mobile: value
                  }
                }),
                __nextHasNoMarginBottom: true
              }
            )
          ));
        case "style":
          return /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(
            TabPanelBody3,
            {
              tab: "style",
              name: "borders",
              title: __3("Borders & Radius", "digiblocks"),
              initialOpen: true
            },
            /* @__PURE__ */ wp.element.createElement(
              SelectControl3,
              {
                label: __3("Border Style", "digiblocks"),
                value: borderStyle,
                options: borderStyleOptions,
                onChange: (value) => setAttributes({ borderStyle: value }),
                __next40pxDefaultSize: true,
                __nextHasNoMarginBottom: true
              }
            ),
            borderStyle !== "none" && /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(
              ResponsiveControl2,
              {
                label: __3("Border Width", "digiblocks")
              },
              /* @__PURE__ */ wp.element.createElement(
                DimensionControl2,
                {
                  values: borderWidth[localActiveDevice],
                  onChange: (value) => setAttributes({
                    borderWidth: {
                      ...borderWidth,
                      [localActiveDevice]: value
                    }
                  })
                }
              )
            ), /* @__PURE__ */ wp.element.createElement(
              PanelColorSettings2,
              {
                title: "",
                enableAlpha: true,
                colorSettings: [
                  {
                    value: borderColor,
                    onChange: (value) => setAttributes({ borderColor: value }),
                    label: __3("Border Color", "digiblocks")
                  }
                ]
              }
            )),
            /* @__PURE__ */ wp.element.createElement(
              ResponsiveControl2,
              {
                label: __3("Border Radius", "digiblocks")
              },
              /* @__PURE__ */ wp.element.createElement(
                DimensionControl2,
                {
                  values: borderRadius[localActiveDevice],
                  onChange: (value) => setAttributes({
                    borderRadius: {
                      ...borderRadius,
                      [localActiveDevice]: value
                    }
                  }),
                  units: [
                    { label: "px", value: "px" },
                    { label: "%", value: "%" },
                    { label: "em", value: "em" }
                  ]
                }
              )
            ),
            /* @__PURE__ */ wp.element.createElement(
              BoxShadowControl2,
              {
                normalValue: boxShadow,
                hoverValue: boxShadowHover,
                onNormalChange: (value) => setAttributes({ boxShadow: value }),
                onHoverChange: (value) => setAttributes({ boxShadowHover: value })
              }
            )
          ), /* @__PURE__ */ wp.element.createElement(
            TabPanelBody3,
            {
              tab: "style",
              name: "advanced",
              title: __3("Advanced", "digiblocks"),
              initialOpen: false
            },
            /* @__PURE__ */ wp.element.createElement(
              ToggleControl2,
              {
                label: __3("Overflow Hidden", "digiblocks"),
                checked: overflowHidden,
                onChange: (value) => setAttributes({ overflowHidden: value }),
                help: __3("Hide content that overflows the container boundaries.", "digiblocks"),
                __nextHasNoMarginBottom: true
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              RangeControl2,
              {
                label: __3("Z-Index", "digiblocks"),
                value: zIndex,
                onChange: (value) => setAttributes({ zIndex: value }),
                min: -99,
                max: 99,
                step: 1,
                allowReset: true,
                resetFallbackValue: 0,
                __next40pxDefaultSize: true,
                __nextHasNoMarginBottom: true
              }
            )
          ));
        case "background":
          return /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(
            TabPanelBody3,
            {
              tab: "background",
              name: "background",
              title: __3("Background", "digiblocks"),
              initialOpen: true
            },
            /* @__PURE__ */ wp.element.createElement(
              PanelColorSettings2,
              {
                title: __3("Background Color", "digiblocks"),
                initialOpen: true,
                enableAlpha: true,
                colorSettings: [
                  {
                    value: backgroundColor,
                    onChange: (value) => setAttributes({ backgroundColor: value }),
                    label: __3("Background Color", "digiblocks")
                  }
                ]
              }
            ),
            /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-media-control" }, /* @__PURE__ */ wp.element.createElement("p", { className: "components-base-control__label" }, __3("Background Image", "digiblocks")), /* @__PURE__ */ wp.element.createElement(MediaUploadCheck2, null, /* @__PURE__ */ wp.element.createElement(
              MediaUpload2,
              {
                onSelect: (media) => {
                  setAttributes({
                    backgroundImage: {
                      url: media.url,
                      id: media.id,
                      alt: media.alt || "",
                      size: media.sizes?.full?.url ? "full" : ""
                    }
                  });
                },
                allowedTypes: ["image"],
                value: backgroundImage?.id,
                render: ({ open }) => /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-media-upload-wrapper" }, backgroundImage?.url ? /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-media-preview" }, /* @__PURE__ */ wp.element.createElement("img", { src: backgroundImage.url, alt: backgroundImage.alt || "" }), /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-media-controls" }, /* @__PURE__ */ wp.element.createElement(
                  Button2,
                  {
                    isPrimary: true,
                    onClick: open
                  },
                  /* @__PURE__ */ wp.element.createElement("span", { class: "dashicon dashicons dashicons-edit" })
                ), /* @__PURE__ */ wp.element.createElement(
                  Button2,
                  {
                    isDestructive: true,
                    onClick: () => setAttributes({ backgroundImage: { url: "", id: 0, alt: "", size: "" } })
                  },
                  /* @__PURE__ */ wp.element.createElement("span", { class: "dashicon dashicons dashicons-trash" })
                ))) : /* @__PURE__ */ wp.element.createElement(
                  Button2,
                  {
                    className: "digiblocks-media-upload-button",
                    isPrimary: true,
                    onClick: open
                  },
                  __3("Select Image", "digiblocks")
                ))
              }
            ))),
            backgroundImage?.url && /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(
              SelectControl3,
              {
                label: __3("Background Position", "digiblocks"),
                value: backgroundPosition,
                options: bgPositionOptions,
                onChange: (value) => setAttributes({ backgroundPosition: value }),
                __next40pxDefaultSize: true,
                __nextHasNoMarginBottom: true
              }
            ), /* @__PURE__ */ wp.element.createElement(
              SelectControl3,
              {
                label: __3("Background Repeat", "digiblocks"),
                value: backgroundRepeat,
                options: bgRepeatOptions,
                onChange: (value) => setAttributes({ backgroundRepeat: value }),
                __next40pxDefaultSize: true,
                __nextHasNoMarginBottom: true
              }
            ), /* @__PURE__ */ wp.element.createElement(
              SelectControl3,
              {
                label: __3("Background Size", "digiblocks"),
                value: backgroundSize,
                options: bgSizeOptions,
                onChange: (value) => setAttributes({ backgroundSize: value }),
                __next40pxDefaultSize: true,
                __nextHasNoMarginBottom: true
              }
            ))
          ), /* @__PURE__ */ wp.element.createElement(
            TabPanelBody3,
            {
              tab: "background",
              name: "backgroundVideo",
              title: __3("Background Video", "digiblocks"),
              initialOpen: false
            },
            /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-media-control" }, /* @__PURE__ */ wp.element.createElement("p", { className: "components-base-control__label" }, __3("Background Video", "digiblocks")), /* @__PURE__ */ wp.element.createElement(MediaUploadCheck2, null, /* @__PURE__ */ wp.element.createElement(
              MediaUpload2,
              {
                onSelect: (media) => {
                  setAttributes({
                    backgroundVideo: {
                      url: media.url,
                      id: media.id
                    }
                  });
                },
                allowedTypes: ["video"],
                value: backgroundVideo?.id,
                render: ({ open }) => /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-media-upload-wrapper" }, backgroundVideo?.url ? /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-media-preview" }, /* @__PURE__ */ wp.element.createElement("video", { controls: true }, /* @__PURE__ */ wp.element.createElement("source", { src: backgroundVideo.url }), __3("Your browser does not support the video tag.", "digiblocks")), /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-media-controls" }, /* @__PURE__ */ wp.element.createElement(
                  Button2,
                  {
                    isPrimary: true,
                    onClick: open
                  },
                  /* @__PURE__ */ wp.element.createElement("span", { class: "dashicon dashicons dashicons-edit" })
                ), /* @__PURE__ */ wp.element.createElement(
                  Button2,
                  {
                    isDestructive: true,
                    onClick: () => setAttributes({ backgroundVideo: { url: "", id: 0 } })
                  },
                  /* @__PURE__ */ wp.element.createElement("span", { class: "dashicon dashicons dashicons-trash" })
                ))) : /* @__PURE__ */ wp.element.createElement(
                  Button2,
                  {
                    className: "digiblocks-media-upload-button",
                    isPrimary: true,
                    onClick: open
                  },
                  __3("Select Video", "digiblocks")
                ))
              }
            ))),
            backgroundVideo?.url && /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-media-control" }, /* @__PURE__ */ wp.element.createElement("p", { className: "components-base-control__label" }, __3("Video Fallback Image", "digiblocks")), /* @__PURE__ */ wp.element.createElement(MediaUploadCheck2, null, /* @__PURE__ */ wp.element.createElement(
              MediaUpload2,
              {
                onSelect: (media) => {
                  setAttributes({
                    backgroundVideoFallbackImage: {
                      url: media.url,
                      id: media.id,
                      alt: media.alt || ""
                    }
                  });
                },
                allowedTypes: ["image"],
                value: backgroundVideoFallbackImage?.id,
                render: ({ open }) => /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-media-upload-wrapper" }, backgroundVideoFallbackImage?.url ? /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-media-preview" }, /* @__PURE__ */ wp.element.createElement("img", { src: backgroundVideoFallbackImage.url, alt: backgroundVideoFallbackImage.alt || "" }), /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-media-controls" }, /* @__PURE__ */ wp.element.createElement(
                  Button2,
                  {
                    isPrimary: true,
                    onClick: open
                  },
                  /* @__PURE__ */ wp.element.createElement("span", { class: "dashicon dashicons dashicons-edit" })
                ), /* @__PURE__ */ wp.element.createElement(
                  Button2,
                  {
                    isDestructive: true,
                    onClick: () => setAttributes({ backgroundVideoFallbackImage: { url: "", id: 0, alt: "" } })
                  },
                  /* @__PURE__ */ wp.element.createElement("span", { class: "dashicon dashicons dashicons-trash" })
                ))) : /* @__PURE__ */ wp.element.createElement(
                  Button2,
                  {
                    className: "digiblocks-media-upload-button",
                    isPrimary: true,
                    onClick: open
                  },
                  __3("Select Fallback Image", "digiblocks")
                ))
              }
            )))
          ), /* @__PURE__ */ wp.element.createElement(
            TabPanelBody3,
            {
              tab: "background",
              name: "overlay",
              title: __3("Background Overlay", "digiblocks"),
              initialOpen: false
            },
            /* @__PURE__ */ wp.element.createElement(
              PanelColorSettings2,
              {
                title: __3("Overlay Color", "digiblocks"),
                initialOpen: true,
                enableAlpha: true,
                colorSettings: [
                  {
                    value: backgroundOverlay,
                    onChange: (value) => setAttributes({ backgroundOverlay: value }),
                    label: __3("Overlay Color", "digiblocks")
                  }
                ]
              }
            ),
            backgroundOverlay && /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(
              RangeControl2,
              {
                label: __3("Overlay Opacity", "digiblocks"),
                value: backgroundOverlayOpacity,
                onChange: (value) => setAttributes({ backgroundOverlayOpacity: value }),
                min: 0,
                max: 1,
                step: 0.01,
                __next40pxDefaultSize: true,
                __nextHasNoMarginBottom: true
              }
            ), /* @__PURE__ */ wp.element.createElement(
              SelectControl3,
              {
                label: __3("Blend Mode", "digiblocks"),
                value: backgroundOverlayBlendMode,
                options: blendModeOptions,
                onChange: (value) => setAttributes({ backgroundOverlayBlendMode: value }),
                __next40pxDefaultSize: true,
                __nextHasNoMarginBottom: true
              }
            ))
          ));
        case "advanced":
          return /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(
            TabPanelBody3,
            {
              tab: "style",
              name: "animation",
              title: __3("Animation", "digiblocks"),
              initialOpen: true
            },
            /* @__PURE__ */ wp.element.createElement(
              SelectControl3,
              {
                label: __3("Animation Effect", "digiblocks"),
                value: animation,
                options: animationOptions,
                onChange: (value) => setAttributes({ animation: value }),
                __next40pxDefaultSize: true,
                __nextHasNoMarginBottom: true
              }
            ),
            animation && animation !== "none" && /* @__PURE__ */ wp.element.createElement("div", { style: { marginTop: "10px" } }, /* @__PURE__ */ wp.element.createElement(
              Button2,
              {
                variant: "secondary",
                isSecondary: true,
                onClick: handlePreviewClick,
                style: { width: "100%" }
              },
              __3("Preview Animation", "digiblocks")
            ))
          ), /* @__PURE__ */ wp.element.createElement(
            TabPanelBody3,
            {
              tab: "advanced",
              name: "additional",
              title: __3("Additional", "digiblocks"),
              initialOpen: false
            },
            /* @__PURE__ */ wp.element.createElement("div", { className: "components-base-control html-anchor-control" }, /* @__PURE__ */ wp.element.createElement("div", { className: "components-base-control__field" }, /* @__PURE__ */ wp.element.createElement("label", { className: "components-base-control__label", htmlFor: "html-anchor" }, __3("HTML anchor", "digiblocks")), /* @__PURE__ */ wp.element.createElement(
              "input",
              {
                className: "components-text-control__input",
                type: "text",
                id: "html-anchor",
                value: anchor || "",
                onChange: (e) => setAttributes({ anchor: e.target.value }),
                "aria-describedby": "html-anchor-help",
                autoCapitalize: "none",
                autoComplete: "off"
              }
            )), /* @__PURE__ */ wp.element.createElement("p", { id: "html-anchor-help", className: "components-base-control__help" }, __3(`Enter a word or two \u2014 without spaces \u2014 to make a unique web address just for this block, called an "anchor". Then, you'll be able to link directly to this section of your page.`, "digiblocks"), " ", /* @__PURE__ */ wp.element.createElement(
              "a",
              {
                className: "components-external-link",
                href: "https://wordpress.org/documentation/article/page-jumps/",
                target: "_blank",
                rel: "external noreferrer noopener"
              },
              /* @__PURE__ */ wp.element.createElement("span", { className: "components-external-link__contents" }, __3("Learn more about anchors", "digiblocks")),
              /* @__PURE__ */ wp.element.createElement("span", { className: "components-external-link__icon", "aria-label": "(opens in a new tab)" }, "\u2197")
            ))),
            /* @__PURE__ */ wp.element.createElement("div", { className: "components-base-control" }, /* @__PURE__ */ wp.element.createElement("div", { className: "components-base-control__field" }, /* @__PURE__ */ wp.element.createElement("label", { className: "components-base-control__label", htmlFor: "additional-css-classes" }, __3("Additional CSS class(es)", "digiblocks")), /* @__PURE__ */ wp.element.createElement(
              "input",
              {
                className: "components-text-control__input",
                type: "text",
                id: "additional-css-classes",
                value: customClasses || "",
                onChange: (e) => setAttributes({ customClasses: e.target.value }),
                "aria-describedby": "additional-css-classes-help",
                autoComplete: "off"
              }
            )), /* @__PURE__ */ wp.element.createElement("p", { id: "additional-css-classes-help", className: "components-base-control__help" }, __3("Separate multiple classes with spaces.", "digiblocks")))
          ));
        default:
          return null;
      }
    };
    const LayoutSelector = () => /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-layout-selector" }, /* @__PURE__ */ wp.element.createElement("h2", null, __3("Select a Layout", "digiblocks")), /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-layout-grid" }, containerLayouts.map((layout2) => /* @__PURE__ */ wp.element.createElement(Tooltip, { text: layout2.label, key: layout2.name }, /* @__PURE__ */ wp.element.createElement(
      "div",
      {
        className: "digiblocks-layout-option",
        onClick: () => createColumnsFromLayout(layout2.name),
        "aria-label": layout2.label
      },
      /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-layout-icon" }, layout2.icon),
      /* @__PURE__ */ wp.element.createElement("span", { className: "screen-reader-text" }, layout2.label)
    )))));
    const BackgroundVideo = () => {
      if (!backgroundVideo?.url)
        return null;
      return /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-bg-video-container" }, /* @__PURE__ */ wp.element.createElement("video", { className: "digiblocks-bg-video", autoPlay: true, muted: true, loop: true, playsInline: true, poster: backgroundVideoFallbackImage?.url || "" }, /* @__PURE__ */ wp.element.createElement("source", { src: backgroundVideo.url, type: "video/mp4" })));
    };
    return /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(InspectorControls2, null, /* @__PURE__ */ wp.element.createElement(
      CustomTabPanel2,
      {
        tabs: tabList,
        activeTab,
        onSelect: setActiveTab,
        customClass: "four"
      },
      renderTabContent()
    )), /* @__PURE__ */ wp.element.createElement("style", { dangerouslySetInnerHTML: { __html: generateCSS() } }), /* @__PURE__ */ wp.element.createElement("div", { ...blockProps }, backgroundVideo?.url && /* @__PURE__ */ wp.element.createElement(BackgroundVideo, null), showLayoutSelector ? /* @__PURE__ */ wp.element.createElement(LayoutSelector, null) : /* @__PURE__ */ wp.element.createElement("div", { ...innerBlocksProps })));
  };
  var edit_default2 = ContainerEdit;

  // blocks/container/save.js
  var { __: __4 } = window.wp.i18n;
  var { useBlockProps: useBlockProps4, useInnerBlocksProps: useInnerBlocksProps4 } = window.wp.blockEditor;
  var ContainerSave = ({ attributes }) => {
    const {
      isNested,
      id,
      anchor,
      customClasses,
      backgroundVideo,
      backgroundVideoFallbackImage,
      animation
    } = attributes;
    const classNames = `digiblocks-container ${isNested ? "" : "alignfull"} ${id} ${customClasses || ""}${animation !== "none" ? ` animate-${animation}` : ""}`;
    const blockProps = useBlockProps4.save({
      className: classNames,
      id: anchor || null
    });
    const innerBlocksProps = useInnerBlocksProps4.save({
      className: "digiblocks-container-inner"
    });
    return /* @__PURE__ */ wp.element.createElement("div", { ...blockProps }, backgroundVideo && backgroundVideo.url && /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-bg-video-container" }, /* @__PURE__ */ wp.element.createElement("video", { className: "digiblocks-bg-video", autoPlay: true, muted: true, loop: true, playsInline: true, poster: backgroundVideoFallbackImage?.url || "" }, /* @__PURE__ */ wp.element.createElement("source", { src: backgroundVideo.url, type: "video/mp4" }))), /* @__PURE__ */ wp.element.createElement("div", { ...innerBlocksProps }));
  };
  var save_default2 = ContainerSave;

  // blocks/accordion/edit.js
  var { __: __5 } = window.wp.i18n;
  var {
    useBlockProps: useBlockProps5,
    RichText,
    InspectorControls: InspectorControls3,
    PanelColorSettings: PanelColorSettings3
  } = window.wp.blockEditor;
  var {
    SelectControl: SelectControl4,
    RangeControl: RangeControl3,
    ToggleControl: ToggleControl3,
    Button: Button3,
    Tooltip: Tooltip2,
    __experimentalToggleGroupControl: ToggleGroupControl2,
    __experimentalToggleGroupControlOption: ToggleGroupControlOption2,
    TabPanel
  } = window.wp.components;
  var { useState: useState3, useEffect: useEffect3, useRef: useRef2 } = window.wp.element;
  var { useBlockId: useBlockId3, animations: animations2, animationPreview: animationPreview2 } = digi.utils;
  var { tabIcons: tabIcons3 } = digi.icons;
  var { ResponsiveControl: ResponsiveControl3, DimensionControl: DimensionControl3, TypographyControl, BoxShadowControl: BoxShadowControl3, CustomTabPanel: CustomTabPanel3, TabPanelBody: TabPanelBody4 } = digi.components;
  var AccordionEdit = ({ attributes, setAttributes, clientId }) => {
    const {
      id,
      anchor,
      visibility,
      customClasses,
      items,
      titleColor,
      titleHoverColor,
      titleActiveColor,
      backgroundColor,
      backgroundHoverColor,
      backgroundActiveColor,
      contentColor,
      contentHoverColor,
      borderColor,
      borderHoverColor,
      borderRadius,
      borderWidth,
      borderStyle,
      boxShadow,
      boxShadowHover,
      padding,
      margin,
      titleTypography,
      contentTypography,
      iconPosition,
      iconColor,
      iconHoverColor,
      iconActiveColor,
      iconSize,
      animation,
      allowMultipleOpen,
      iconType
    } = attributes;
    useBlockId3(id, clientId, setAttributes);
    const [localActiveDevice, setLocalActiveDevice] = useState3(window.digi.responsiveState.activeDevice);
    useEffect3(() => {
      const unsubscribe = window.digi.responsiveState.subscribe((device) => {
        setLocalActiveDevice(device);
      });
      return unsubscribe;
    }, []);
    const [activeTab, setActiveTab] = useState3(() => {
      if (window.digi.uiState) {
        const savedTab = window.digi.uiState.getActiveTab(clientId);
        if (savedTab)
          return savedTab;
      }
      return "options";
    });
    const [titleColorTab, setTitleColorTab] = useState3("normal");
    const [backgroundColorTab, setBackgroundColorTab] = useState3("normal");
    const [iconColorTab, setIconColorTab] = useState3("normal");
    const [borderColorTab, setBorderColorTab] = useState3("normal");
    const [contentColorTab, setContentColorTab] = useState3("normal");
    const addItem = () => {
      const newItems = [...items, {
        id: `item-${items.length + 1}-${Date.now().toString(36)}`,
        title: __5("New Accordion Item", "digiblocks"),
        content: __5("Add your content here.", "digiblocks"),
        isOpen: false
      }];
      setAttributes({ items: newItems });
    };
    const removeItem = (index) => {
      const newItems = [...items];
      newItems.splice(index, 1);
      setAttributes({ items: newItems });
    };
    const updateItemTitle = (title, index) => {
      const newItems = [...items];
      newItems[index].title = title;
      setAttributes({ items: newItems });
    };
    const updateItemContent = (content, index) => {
      const newItems = [...items];
      newItems[index].content = content;
      setAttributes({ items: newItems });
    };
    const toggleItem = (index) => {
      const newItems = [...items];
      if (!allowMultipleOpen) {
        newItems.forEach((item, i) => {
          if (i !== index) {
            newItems[i].isOpen = false;
          }
        });
      }
      newItems[index].isOpen = !newItems[index].isOpen;
      setAttributes({ items: newItems });
    };
    const moveItemUp = (index) => {
      if (index === 0)
        return;
      const newItems = [...items];
      const temp = newItems[index];
      newItems[index] = newItems[index - 1];
      newItems[index - 1] = temp;
      setAttributes({ items: newItems });
    };
    const moveItemDown = (index) => {
      if (index === items.length - 1)
        return;
      const newItems = [...items];
      const temp = newItems[index];
      newItems[index] = newItems[index + 1];
      newItems[index + 1] = temp;
      setAttributes({ items: newItems });
    };
    const duplicateItem = (index) => {
      const itemToDuplicate = items[index];
      const timestamp = Date.now();
      const newItem = {
        ...itemToDuplicate,
        id: `accordion-item-${clientId.substr(0, 8)}-${timestamp}`,
        isOpen: false
      };
      const newItems = [...items];
      newItems.splice(index + 1, 0, newItem);
      setAttributes({
        items: newItems
      });
    };
    const borderStyleOptions = [
      { label: __5("None", "digiblocks"), value: "none" },
      { label: __5("Solid", "digiblocks"), value: "solid" },
      { label: __5("Dotted", "digiblocks"), value: "dotted" },
      { label: __5("Dashed", "digiblocks"), value: "dashed" },
      { label: __5("Double", "digiblocks"), value: "double" },
      { label: __5("Groove", "digiblocks"), value: "groove" },
      { label: __5("Inset", "digiblocks"), value: "inset" },
      { label: __5("Outset", "digiblocks"), value: "outset" },
      { label: __5("Ridge", "digiblocks"), value: "ridge" }
    ];
    const animationOptions = [
      { label: __5("None", "digiblocks"), value: "none" },
      ...Object.keys(animations2).map((animation2) => ({
        label: animation2.replace(/-/g, " ").replace(/\b\w/g, (l) => l.toUpperCase()),
        value: animation2
      }))
    ];
    const previewTimeoutRef = useRef2(null);
    useEffect3(() => {
      if (animation && animation !== "none") {
        const timeoutId = setTimeout(() => {
          animationPreview2(id, animation, animations2, previewTimeoutRef);
        }, 100);
        return () => clearTimeout(timeoutId);
      }
    }, [animation]);
    const handlePreviewClick = () => {
      animationPreview2(id, animation, animations2, previewTimeoutRef);
    };
    const tabList = [
      {
        name: "options",
        title: __5("Options", "digiblocks"),
        icon: tabIcons3.optionsIcon
      },
      {
        name: "style",
        title: __5("Style", "digiblocks"),
        icon: tabIcons3.styleIcon
      },
      {
        name: "advanced",
        title: __5("Advanced", "digiblocks"),
        icon: tabIcons3.advancedIcon
      }
    ];
    const renderItemIcon = (isOpen) => {
      const size = iconSize[localActiveDevice] || 16;
      if (iconType === "plusMinus") {
        return /* @__PURE__ */ wp.element.createElement("svg", { width: size, height: size, viewBox: "0 0 24 24", xmlns: "http://www.w3.org/2000/svg" }, /* @__PURE__ */ wp.element.createElement("path", { d: isOpen ? "M19 13H5v-2h14v2z" : "M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z" }));
      } else if (iconType === "arrowUpDown") {
        return /* @__PURE__ */ wp.element.createElement("svg", { width: size, height: size, viewBox: "0 0 24 24", xmlns: "http://www.w3.org/2000/svg" }, /* @__PURE__ */ wp.element.createElement("path", { d: isOpen ? "M7.41 15.41L12 10.83l4.59 4.58L18 14l-6-6-6 6z" : "M7.41 8.59L12 13.17l4.59-4.58L18 10l-6 6-6-6z" }));
      }
      return null;
    };
    const generateCSS = () => {
      const activeDevice = window.digi.responsiveState.activeDevice;
      let borderCSS = "";
      if (borderStyle && borderStyle !== "none") {
        const currentBorderWidth = borderWidth && borderWidth[activeDevice] ? borderWidth[activeDevice] : { top: 1, right: 1, bottom: 1, left: 1, unit: "px" };
        const currentBorderRadius = borderRadius && borderRadius[activeDevice] ? borderRadius[activeDevice] : { top: 8, right: 8, bottom: 8, left: 8, unit: "px" };
        borderCSS = `
                border-style: ${borderStyle};
                border-color: ${borderColor || "#e0e0e0"};
                border-width: ${currentBorderWidth.top}${currentBorderWidth.unit} ${currentBorderWidth.right}${currentBorderWidth.unit} ${currentBorderWidth.bottom}${currentBorderWidth.unit} ${currentBorderWidth.left}${currentBorderWidth.unit};
                border-radius: ${currentBorderRadius.top}${currentBorderRadius.unit} ${currentBorderRadius.right}${currentBorderRadius.unit} ${currentBorderRadius.bottom}${currentBorderRadius.unit} ${currentBorderRadius.left}${currentBorderRadius.unit};
            `;
      } else {
        borderCSS = "border-style: none;";
      }
      let boxShadowCSS = "box-shadow: none;";
      if (boxShadow && boxShadow.enable) {
        const inset = boxShadow.position === "inset" ? "inset " : "";
        boxShadowCSS = `box-shadow: ${inset}${boxShadow.horizontal}px ${boxShadow.vertical}px ${boxShadow.blur}px ${boxShadow.spread}px ${boxShadow.color};`;
      }
      let boxShadowHoverCSS = "";
      if (boxShadowHover && boxShadowHover.enable) {
        const inset = boxShadowHover.position === "inset" ? "inset " : "";
        boxShadowHoverCSS = `box-shadow: ${inset}${boxShadowHover.horizontal}px ${boxShadowHover.vertical}px ${boxShadowHover.blur}px ${boxShadowHover.spread}px ${boxShadowHover.color};`;
      }
      const paddingCSS = `padding: ${padding[activeDevice].top}${padding[activeDevice].unit} ${padding[activeDevice].right}${padding[activeDevice].unit} ${padding[activeDevice].bottom}${padding[activeDevice].unit} ${padding[activeDevice].left}${padding[activeDevice].unit};`;
      const marginCSS = `margin: ${margin[activeDevice].top}${margin[activeDevice].unit} ${margin[activeDevice].right}${margin[activeDevice].unit} ${margin[activeDevice].bottom}${margin[activeDevice].unit} ${margin[activeDevice].left}${margin[activeDevice].unit};`;
      let titleTypographyCSS = "";
      if (titleTypography) {
        if (titleTypography.fontFamily) {
          titleTypographyCSS += `font-family: ${titleTypography.fontFamily};`;
        }
        if (titleTypography.fontSize && titleTypography.fontSize[activeDevice]) {
          titleTypographyCSS += `font-size: ${titleTypography.fontSize[activeDevice]}${titleTypography.fontSizeUnit || "px"};`;
        }
        if (titleTypography.fontWeight) {
          titleTypographyCSS += `font-weight: ${titleTypography.fontWeight};`;
        }
        if (titleTypography.fontStyle) {
          titleTypographyCSS += `font-style: ${titleTypography.fontStyle};`;
        }
        if (titleTypography.textTransform) {
          titleTypographyCSS += `text-transform: ${titleTypography.textTransform};`;
        }
        if (titleTypography.textDecoration) {
          titleTypographyCSS += `text-decoration: ${titleTypography.textDecoration};`;
        }
        if (titleTypography.lineHeight && titleTypography.lineHeight[activeDevice]) {
          titleTypographyCSS += `line-height: ${titleTypography.lineHeight[activeDevice]}${titleTypography.lineHeightUnit || "em"};`;
        }
        if (titleTypography.letterSpacing && titleTypography.letterSpacing[activeDevice]) {
          titleTypographyCSS += `letter-spacing: ${titleTypography.letterSpacing[activeDevice]}${titleTypography.letterSpacingUnit || "px"};`;
        }
      }
      let contentTypographyCSS = "";
      if (contentTypography) {
        if (contentTypography.fontFamily) {
          contentTypographyCSS += `font-family: ${contentTypography.fontFamily};`;
        }
        if (contentTypography.fontSize && contentTypography.fontSize[activeDevice]) {
          contentTypographyCSS += `font-size: ${contentTypography.fontSize[activeDevice]}${contentTypography.fontSizeUnit || "px"};`;
        }
        if (contentTypography.fontWeight) {
          contentTypographyCSS += `font-weight: ${contentTypography.fontWeight};`;
        }
        if (contentTypography.fontStyle) {
          contentTypographyCSS += `font-style: ${contentTypography.fontStyle};`;
        }
        if (contentTypography.textTransform) {
          contentTypographyCSS += `text-transform: ${contentTypography.textTransform};`;
        }
        if (contentTypography.textDecoration) {
          contentTypographyCSS += `text-decoration: ${contentTypography.textDecoration};`;
        }
        if (contentTypography.lineHeight && contentTypography.lineHeight[activeDevice]) {
          contentTypographyCSS += `line-height: ${contentTypography.lineHeight[activeDevice]}${contentTypography.lineHeightUnit || "em"};`;
        }
        if (contentTypography.letterSpacing && contentTypography.letterSpacing[activeDevice]) {
          contentTypographyCSS += `letter-spacing: ${contentTypography.letterSpacing[activeDevice]}${contentTypography.letterSpacingUnit || "px"};`;
        }
      }
      let animationCSS = "";
      if (animation && animation !== "none" && animations2[animation]) {
        animationCSS = animations2[animation].keyframes;
      }
      return `
            /* Accordion item */
            .${id} .digiblocks-accordion-item {
                overflow: hidden;
                background-color: ${backgroundColor || "#ffffff"};
                ${borderCSS}
                ${boxShadowCSS}
				${marginCSS}
                transition: all 0.3s ease;
            }

			/* Hover effects */
            .${id} .digiblocks-accordion-item:hover {
                ${backgroundHoverColor ? `background-color: ${backgroundHoverColor};` : ""}
                ${borderHoverColor ? `border-color: ${borderHoverColor};` : ""}
				${boxShadowHover && boxShadowHover.enable ? boxShadowHoverCSS : ""}
            }
            
            /* Accordion header */
            .${id} .digiblocks-accordion-header {
                position: relative;
                cursor: pointer;
                ${paddingCSS}
                display: flex;
                align-items: center;
                justify-content: space-between;
				gap: .75rem;
                ${iconPosition === "left" ? "flex-direction: row-reverse;" : ""}
                ${iconPosition === "left" ? "justify-content: flex-end;" : ""}
                transition: background-color 0.3s ease;
            }
            
            /* Accordion title */
            .${id} .digiblocks-accordion-title {
                margin: 0;
                color: ${titleColor || "#333333"};
                flex: 1;
                ${titleTypographyCSS}
                transition: color 0.3s ease;
            }
            
            /* Hover effects for title */
            .${id} .digiblocks-accordion-header:hover .digiblocks-accordion-title {
                ${titleHoverColor ? `color: ${titleHoverColor};` : ""}
            }
            
            /* Accordion title active state */
            .${id} .digiblocks-accordion-item.is-active .digiblocks-accordion-title {
                color: ${titleActiveColor || "#1e73be"};
            }
            
            /* Accordion icon */
            .${id} .digiblocks-accordion-icon {
                display: flex;
                align-items: center;
                justify-content: center;
            }
            
            /* SVG icon fill color */
            .${id} .digiblocks-accordion-icon svg {
                fill: ${iconColor || "#333333"};
                width: ${iconSize[activeDevice]}px;
                height: ${iconSize[activeDevice]}px;
                transition: transform 0.3s ease, fill 0.3s ease;
            }
            
            /* Hover effects for icon */
            .${id} .digiblocks-accordion-header:hover .digiblocks-accordion-icon svg {
                ${iconHoverColor ? `fill: ${iconHoverColor};` : ""}
            }
            
            /* Active icon color */
            .${id} .digiblocks-accordion-item.is-active .digiblocks-accordion-icon svg {
                fill: ${iconActiveColor || "#1e73be"};
            }
            
            /* Active header background */
            .${id} .digiblocks-accordion-item.is-active .digiblocks-accordion-header {
                background-color: ${backgroundActiveColor || "#f7f7f7"};
            }
            
            /* Accordion content */
            .${id} .digiblocks-accordion-content {
                overflow: hidden;
                ${paddingCSS}
                color: ${contentColor || "#666666"};
                ${contentTypographyCSS}
                transition: color 0.3s ease;
            }
            
            /* Hover effects for content */
            .${id} .digiblocks-accordion-item:hover .digiblocks-accordion-content {
                ${contentHoverColor ? `color: ${contentHoverColor};` : ""}
            }
            
            .${id} .digiblocks-accordion-content p:first-child {
                margin-top: 0;
            }
            
            .${id} .digiblocks-accordion-content p:last-child {
                margin-bottom: 0;
            }
            
            /* Item controls in editor */
			.${id} .digiblocks-accordion-item {
				position: relative;
			}

			.${id} .digiblocks-accordion-item-controls {
				display: flex;
				gap: 5px;
				position: absolute;
				right: 10px;
				top: 0;
				background-color: #fff;
				padding: 2px;
				border-radius: 3px;
				box-shadow: 0 1px 3px rgba(0,0,0,0.12);
				z-index: 10;
			}
            
            /* Animation keyframes */
            ${animationCSS}

			/* Visibility Controls */
			${visibility.desktop ? `
				@media (min-width: 992px) {
					.${id} {
						opacity: 0.5 !important;
					}
				}
			` : ""}

			${visibility.tablet ? `
				@media (min-width: 768px) and (max-width: 991px) {
					.${id} {
						opacity: 0.5 !important;
					}
				}
			` : ""}

			${visibility.mobile ? `
				@media (max-width: 767px) {
					.${id} {
						opacity: 0.5 !important;
					}
				}
			` : ""}
        `;
    };
    const renderTabContent = () => {
      switch (activeTab) {
        case "options":
          return /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement("div", { className: "components-panel__body is-opened" }, /* @__PURE__ */ wp.element.createElement(
            ToggleControl3,
            {
              label: __5("Allow Multiple Open", "digiblocks"),
              checked: allowMultipleOpen,
              onChange: (value) => setAttributes({ allowMultipleOpen: value }),
              help: __5("If enabled, multiple accordion items can be open at the same time.", "digiblocks"),
              __nextHasNoMarginBottom: true
            }
          ), /* @__PURE__ */ wp.element.createElement(
            ToggleGroupControl2,
            {
              label: __5("Icon Type", "digiblocks"),
              value: iconType,
              onChange: (value) => setAttributes({ iconType: value }),
              isBlock: true,
              __next40pxDefaultSize: true,
              __nextHasNoMarginBottom: true
            },
            /* @__PURE__ */ wp.element.createElement(
              ToggleGroupControlOption2,
              {
                value: "plusMinus",
                label: __5("Plus/Minus", "digiblocks")
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              ToggleGroupControlOption2,
              {
                value: "arrowUpDown",
                label: __5("Up/Down", "digiblocks")
              }
            )
          ), /* @__PURE__ */ wp.element.createElement(
            ToggleGroupControl2,
            {
              label: __5("Icon Position", "digiblocks"),
              value: iconPosition,
              onChange: (value) => setAttributes({ iconPosition: value }),
              isBlock: true,
              __next40pxDefaultSize: true,
              __nextHasNoMarginBottom: true
            },
            /* @__PURE__ */ wp.element.createElement(
              ToggleGroupControlOption2,
              {
                value: "left",
                label: __5("Left", "digiblocks")
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              ToggleGroupControlOption2,
              {
                value: "right",
                label: __5("Right", "digiblocks")
              }
            )
          ), /* @__PURE__ */ wp.element.createElement(
            ResponsiveControl3,
            {
              label: __5("Icon Size", "digiblocks")
            },
            /* @__PURE__ */ wp.element.createElement(
              RangeControl3,
              {
                value: iconSize[localActiveDevice],
                onChange: (value) => setAttributes({
                  iconSize: {
                    ...iconSize,
                    [localActiveDevice]: value
                  }
                }),
                min: 12,
                max: 48,
                step: 1,
                __nextHasNoMarginBottom: true,
                __next40pxDefaultSize: true
              }
            )
          )));
        case "style":
          return /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(
            TabPanelBody4,
            {
              tab: "style",
              name: "colors",
              title: __5("Colors", "digiblocks"),
              initialOpen: true
            },
            /* @__PURE__ */ wp.element.createElement(
              TabPanel,
              {
                className: "digiblocks-control-tabs",
                activeClass: "active-tab",
                tabs: [
                  {
                    name: "normal",
                    title: __5("Normal", "digiblocks"),
                    className: "digiblocks-tab-1 normal"
                  },
                  {
                    name: "hover",
                    title: __5("Hover", "digiblocks"),
                    className: "digiblocks-tab-2 hover"
                  }
                ],
                onSelect: (tabName) => {
                  setTitleColorTab(tabName);
                  setBackgroundColorTab(tabName);
                  setIconColorTab(tabName);
                  setBorderColorTab(tabName);
                  setContentColorTab(tabName);
                }
              },
              (tab) => {
                if (tab.name === "normal") {
                  return /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(
                    PanelColorSettings3,
                    {
                      title: __5("Title Colors", "digiblocks"),
                      initialOpen: true,
                      enableAlpha: true,
                      colorSettings: [
                        {
                          value: titleColor,
                          onChange: (value) => setAttributes({ titleColor: value }),
                          label: __5("Title Color", "digiblocks")
                        },
                        {
                          value: titleActiveColor,
                          onChange: (value) => setAttributes({ titleActiveColor: value }),
                          label: __5("Active Title Color", "digiblocks")
                        }
                      ]
                    }
                  ), /* @__PURE__ */ wp.element.createElement(
                    PanelColorSettings3,
                    {
                      title: __5("Icon Colors", "digiblocks"),
                      initialOpen: false,
                      enableAlpha: true,
                      colorSettings: [
                        {
                          value: iconColor,
                          onChange: (value) => setAttributes({ iconColor: value }),
                          label: __5("Icon Color", "digiblocks")
                        },
                        {
                          value: iconActiveColor,
                          onChange: (value) => setAttributes({ iconActiveColor: value }),
                          label: __5("Active Icon Color", "digiblocks")
                        }
                      ]
                    }
                  ), /* @__PURE__ */ wp.element.createElement(
                    PanelColorSettings3,
                    {
                      title: __5("Background Colors", "digiblocks"),
                      initialOpen: false,
                      enableAlpha: true,
                      colorSettings: [
                        {
                          value: backgroundColor,
                          onChange: (value) => setAttributes({ backgroundColor: value }),
                          label: __5("Background Color", "digiblocks")
                        },
                        {
                          value: backgroundActiveColor,
                          onChange: (value) => setAttributes({ backgroundActiveColor: value }),
                          label: __5("Active Background Color", "digiblocks")
                        }
                      ]
                    }
                  ), /* @__PURE__ */ wp.element.createElement(
                    PanelColorSettings3,
                    {
                      title: __5("Content Colors", "digiblocks"),
                      initialOpen: false,
                      enableAlpha: true,
                      colorSettings: [
                        {
                          value: contentColor,
                          onChange: (value) => setAttributes({ contentColor: value }),
                          label: __5("Content Text Color", "digiblocks")
                        }
                      ]
                    }
                  ), /* @__PURE__ */ wp.element.createElement(
                    PanelColorSettings3,
                    {
                      title: __5("Border Colors", "digiblocks"),
                      initialOpen: false,
                      enableAlpha: true,
                      colorSettings: [
                        {
                          value: borderColor,
                          onChange: (value) => setAttributes({ borderColor: value }),
                          label: __5("Border Color", "digiblocks")
                        }
                      ]
                    }
                  ));
                } else {
                  return /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(
                    PanelColorSettings3,
                    {
                      title: __5("Title Hover Colors", "digiblocks"),
                      initialOpen: true,
                      enableAlpha: true,
                      colorSettings: [
                        {
                          value: titleHoverColor,
                          onChange: (value) => setAttributes({ titleHoverColor: value }),
                          label: __5("Title Hover Color", "digiblocks")
                        }
                      ]
                    }
                  ), /* @__PURE__ */ wp.element.createElement(
                    PanelColorSettings3,
                    {
                      title: __5("Icon Hover Colors", "digiblocks"),
                      initialOpen: false,
                      enableAlpha: true,
                      colorSettings: [
                        {
                          value: iconHoverColor,
                          onChange: (value) => setAttributes({ iconHoverColor: value }),
                          label: __5("Icon Hover Color", "digiblocks")
                        }
                      ]
                    }
                  ), /* @__PURE__ */ wp.element.createElement(
                    PanelColorSettings3,
                    {
                      title: __5("Background Hover Colors", "digiblocks"),
                      initialOpen: false,
                      enableAlpha: true,
                      colorSettings: [
                        {
                          value: backgroundHoverColor,
                          onChange: (value) => setAttributes({ backgroundHoverColor: value }),
                          label: __5("Background Hover Color", "digiblocks")
                        }
                      ]
                    }
                  ), /* @__PURE__ */ wp.element.createElement(
                    PanelColorSettings3,
                    {
                      title: __5("Content Hover Colors", "digiblocks"),
                      initialOpen: false,
                      enableAlpha: true,
                      colorSettings: [
                        {
                          value: contentHoverColor,
                          onChange: (value) => setAttributes({ contentHoverColor: value }),
                          label: __5("Content Hover Color", "digiblocks")
                        }
                      ]
                    }
                  ), /* @__PURE__ */ wp.element.createElement(
                    PanelColorSettings3,
                    {
                      title: __5("Border Hover Colors", "digiblocks"),
                      initialOpen: false,
                      enableAlpha: true,
                      colorSettings: [
                        {
                          value: borderHoverColor,
                          onChange: (value) => setAttributes({ borderHoverColor: value }),
                          label: __5("Border Hover Color", "digiblocks")
                        }
                      ]
                    }
                  ));
                }
              }
            )
          ), /* @__PURE__ */ wp.element.createElement(
            TabPanelBody4,
            {
              tab: "style",
              name: "typo",
              title: __5("Typography", "digiblocks"),
              initialOpen: false
            },
            /* @__PURE__ */ wp.element.createElement(
              TypographyControl,
              {
                label: __5("Title Typography", "digiblocks"),
                value: titleTypography,
                onChange: (value) => setAttributes({ titleTypography: value }),
                defaults: {
                  fontSize: { desktop: 18, tablet: 16, mobile: 16 },
                  fontSizeUnit: "px",
                  lineHeight: { desktop: 1.5, tablet: 1.4, mobile: 1.3 },
                  lineHeightUnit: "em"
                }
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              TypographyControl,
              {
                label: __5("Content Typography", "digiblocks"),
                value: contentTypography,
                onChange: (value) => setAttributes({ contentTypography: value }),
                defaults: {
                  fontSize: { desktop: 16, tablet: 15, mobile: 14 },
                  fontSizeUnit: "px",
                  lineHeight: { desktop: 1.5, tablet: 1.4, mobile: 1.3 },
                  lineHeightUnit: "em"
                }
              }
            )
          ), /* @__PURE__ */ wp.element.createElement(
            TabPanelBody4,
            {
              tab: "style",
              name: "border",
              title: __5("Border & Shadow", "digiblocks"),
              initialOpen: false
            },
            /* @__PURE__ */ wp.element.createElement(
              SelectControl4,
              {
                label: __5("Border Style", "digiblocks"),
                value: borderStyle,
                options: borderStyleOptions,
                onChange: (value) => setAttributes({ borderStyle: value }),
                __nextHasNoMarginBottom: true,
                __next40pxDefaultSize: true
              }
            ),
            borderStyle !== "none" && /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(
              ResponsiveControl3,
              {
                label: __5("Border Width", "digiblocks")
              },
              /* @__PURE__ */ wp.element.createElement(
                DimensionControl3,
                {
                  values: borderWidth[localActiveDevice],
                  onChange: (value) => setAttributes({
                    borderWidth: {
                      ...borderWidth,
                      [localActiveDevice]: value
                    }
                  })
                }
              )
            ), /* @__PURE__ */ wp.element.createElement(
              ResponsiveControl3,
              {
                label: __5("Border Radius", "digiblocks")
              },
              /* @__PURE__ */ wp.element.createElement(
                DimensionControl3,
                {
                  values: borderRadius[localActiveDevice],
                  onChange: (value) => setAttributes({
                    borderRadius: {
                      ...borderRadius,
                      [localActiveDevice]: value
                    }
                  }),
                  units: [
                    { label: "px", value: "px" },
                    { label: "%", value: "%" }
                  ]
                }
              )
            )),
            /* @__PURE__ */ wp.element.createElement(
              BoxShadowControl3,
              {
                normalValue: boxShadow,
                hoverValue: boxShadowHover,
                onNormalChange: (value) => setAttributes({
                  boxShadow: value
                }),
                onHoverChange: (value) => setAttributes({
                  boxShadowHover: value
                })
              }
            )
          ), /* @__PURE__ */ wp.element.createElement(
            TabPanelBody4,
            {
              tab: "style",
              name: "spacing",
              title: __5("Spacing", "digiblocks"),
              initialOpen: false
            },
            /* @__PURE__ */ wp.element.createElement(
              ResponsiveControl3,
              {
                label: __5("Padding", "digiblocks")
              },
              /* @__PURE__ */ wp.element.createElement(
                DimensionControl3,
                {
                  values: padding[localActiveDevice],
                  onChange: (value) => setAttributes({
                    padding: {
                      ...padding,
                      [localActiveDevice]: value
                    }
                  })
                }
              )
            ),
            /* @__PURE__ */ wp.element.createElement(
              ResponsiveControl3,
              {
                label: __5("Margin", "digiblocks")
              },
              /* @__PURE__ */ wp.element.createElement(
                DimensionControl3,
                {
                  values: margin[localActiveDevice],
                  onChange: (value) => setAttributes({
                    margin: {
                      ...margin,
                      [localActiveDevice]: value
                    }
                  })
                }
              )
            )
          ));
        case "advanced":
          return /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(
            TabPanelBody4,
            {
              tab: "advanced",
              name: "animation",
              title: __5("Animation", "digiblocks"),
              initialOpen: true
            },
            /* @__PURE__ */ wp.element.createElement(
              SelectControl4,
              {
                label: __5("Animation", "digiblocks"),
                value: animation,
                options: animationOptions,
                onChange: (value) => setAttributes({ animation: value }),
                __nextHasNoMarginBottom: true,
                __next40pxDefaultSize: true
              }
            ),
            animation && animation !== "none" && /* @__PURE__ */ wp.element.createElement("div", { style: { marginTop: "10px" } }, /* @__PURE__ */ wp.element.createElement(
              Button3,
              {
                variant: "secondary",
                isSecondary: true,
                onClick: handlePreviewClick,
                style: { width: "100%" }
              },
              __5("Preview Animation", "digiblocks")
            ))
          ), /* @__PURE__ */ wp.element.createElement(
            TabPanelBody4,
            {
              tab: "advanced",
              name: "visibility",
              title: __5("Visibility", "digiblocks"),
              initialOpen: false
            },
            /* @__PURE__ */ wp.element.createElement("div", { className: "components-base-control__help", style: {
              padding: "12px",
              backgroundColor: "#f0f6fc",
              border: "1px solid #c3ddfd",
              borderRadius: "4px",
              marginBottom: "16px"
            } }, /* @__PURE__ */ wp.element.createElement("strong", null, __5("Editor Note:", "digiblocks")), /* @__PURE__ */ wp.element.createElement("br", null), __5("Hidden elements appear with reduced opacity in the editor for easy editing. Visibility changes only take effect on the frontend.", "digiblocks")),
            /* @__PURE__ */ wp.element.createElement(
              ToggleControl3,
              {
                label: __5("Hide on Desktop", "digiblocks"),
                checked: visibility.desktop,
                onChange: (value) => setAttributes({
                  visibility: {
                    ...visibility,
                    desktop: value
                  }
                }),
                __nextHasNoMarginBottom: true
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              ToggleControl3,
              {
                label: __5("Hide on Tablet", "digiblocks"),
                checked: visibility.tablet,
                onChange: (value) => setAttributes({
                  visibility: {
                    ...visibility,
                    tablet: value
                  }
                }),
                __nextHasNoMarginBottom: true
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              ToggleControl3,
              {
                label: __5("Hide on Mobile", "digiblocks"),
                checked: visibility.mobile,
                onChange: (value) => setAttributes({
                  visibility: {
                    ...visibility,
                    mobile: value
                  }
                }),
                __nextHasNoMarginBottom: true
              }
            )
          ), /* @__PURE__ */ wp.element.createElement(
            TabPanelBody4,
            {
              tab: "advanced",
              name: "additional",
              title: __5("Additional", "digiblocks"),
              initialOpen: false
            },
            /* @__PURE__ */ wp.element.createElement("div", { className: "components-base-control html-anchor-control" }, /* @__PURE__ */ wp.element.createElement("div", { className: "components-base-control__field" }, /* @__PURE__ */ wp.element.createElement("label", { className: "components-base-control__label", htmlFor: "html-anchor" }, __5("HTML anchor", "digiblocks")), /* @__PURE__ */ wp.element.createElement(
              "input",
              {
                className: "components-text-control__input",
                type: "text",
                id: "html-anchor",
                value: anchor || "",
                onChange: (e) => setAttributes({ anchor: e.target.value }),
                "aria-describedby": "html-anchor-help",
                autoCapitalize: "none",
                autoComplete: "off"
              }
            )), /* @__PURE__ */ wp.element.createElement("p", { id: "html-anchor-help", className: "components-base-control__help" }, __5(`Enter a word or two \u2014 without spaces \u2014 to make a unique web address just for this block, called an "anchor". Then, you'll be able to link directly to this section of your page.`, "digiblocks"), " ", /* @__PURE__ */ wp.element.createElement(
              "a",
              {
                className: "components-external-link",
                href: "https://wordpress.org/documentation/article/page-jumps/",
                target: "_blank",
                rel: "external noreferrer noopener"
              },
              /* @__PURE__ */ wp.element.createElement("span", { className: "components-external-link__contents" }, __5("Learn more about anchors", "digiblocks")),
              /* @__PURE__ */ wp.element.createElement("span", { className: "components-external-link__icon", "aria-label": "(opens in a new tab)" }, "\u2197")
            ))),
            /* @__PURE__ */ wp.element.createElement("div", { className: "components-base-control" }, /* @__PURE__ */ wp.element.createElement("div", { className: "components-base-control__field" }, /* @__PURE__ */ wp.element.createElement("label", { className: "components-base-control__label", htmlFor: "additional-css-classes" }, __5("Additional CSS class(es)", "digiblocks")), /* @__PURE__ */ wp.element.createElement(
              "input",
              {
                className: "components-text-control__input",
                type: "text",
                id: "additional-css-classes",
                value: customClasses || "",
                onChange: (e) => setAttributes({ customClasses: e.target.value }),
                "aria-describedby": "additional-css-classes-help",
                autoComplete: "off"
              }
            )), /* @__PURE__ */ wp.element.createElement("p", { id: "additional-css-classes-help", className: "components-base-control__help" }, __5("Separate multiple classes with spaces.", "digiblocks")))
          ));
        default:
          return null;
      }
    };
    const blockProps = useBlockProps5({
      className: `digiblocks-accordion ${id} ${customClasses || ""}`,
      id: anchor || null
      // Set the anchor as ID if provided
    });
    return /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(InspectorControls3, null, /* @__PURE__ */ wp.element.createElement(
      CustomTabPanel3,
      {
        tabs: tabList,
        activeTab,
        onSelect: (tab) => {
          requestAnimationFrame(() => {
            setActiveTab(tab);
          });
        }
      },
      renderTabContent()
    )), /* @__PURE__ */ wp.element.createElement("style", { dangerouslySetInnerHTML: { __html: generateCSS() } }), /* @__PURE__ */ wp.element.createElement("div", { ...blockProps }, /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-accordion-wrapper" }, items.map((item, index) => /* @__PURE__ */ wp.element.createElement(
      "div",
      {
        key: item.id,
        className: `digiblocks-accordion-item ${item.isOpen ? "is-active" : ""}`
      },
      /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-accordion-header", onClick: () => toggleItem(index) }, /* @__PURE__ */ wp.element.createElement(
        RichText,
        {
          tagName: "h4",
          className: "digiblocks-accordion-title",
          value: item.title,
          onChange: (value) => updateItemTitle(value, index),
          placeholder: __5("Accordion Title", "digiblocks")
        }
      ), /* @__PURE__ */ wp.element.createElement("span", { className: "digiblocks-accordion-icon" }, renderItemIcon(item.isOpen))),
      /* @__PURE__ */ wp.element.createElement(
        "div",
        {
          className: "digiblocks-accordion-content",
          style: { display: item.isOpen ? "block" : "none" }
        },
        /* @__PURE__ */ wp.element.createElement(
          RichText,
          {
            tagName: "div",
            value: item.content,
            onChange: (value) => updateItemContent(value, index),
            placeholder: __5("Add your content here.", "digiblocks")
          }
        )
      ),
      /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-accordion-item-controls" }, /* @__PURE__ */ wp.element.createElement(Tooltip2, { text: __5("Move Up", "digiblocks") }, /* @__PURE__ */ wp.element.createElement(
        Button3,
        {
          className: "digiblocks-accordion-item-move-up",
          onClick: (e) => {
            e.stopPropagation();
            moveItemUp(index);
          },
          icon: "arrow-up-alt2",
          disabled: index === 0,
          isSmall: true
        }
      )), /* @__PURE__ */ wp.element.createElement(Tooltip2, { text: __5("Move Down", "digiblocks") }, /* @__PURE__ */ wp.element.createElement(
        Button3,
        {
          className: "digiblocks-accordion-item-move-down",
          onClick: (e) => {
            e.stopPropagation();
            moveItemDown(index);
          },
          icon: "arrow-down-alt2",
          disabled: index === items.length - 1,
          isSmall: true
        }
      )), /* @__PURE__ */ wp.element.createElement(Tooltip2, { text: __5("Duplicate", "digiblocks") }, /* @__PURE__ */ wp.element.createElement(
        Button3,
        {
          className: "digiblocks-accordion-item-duplicate",
          onClick: (e) => {
            e.stopPropagation();
            duplicateItem(index);
          },
          icon: "admin-page",
          isSmall: true
        }
      )), /* @__PURE__ */ wp.element.createElement(Tooltip2, { text: __5("Remove", "digiblocks") }, /* @__PURE__ */ wp.element.createElement(
        Button3,
        {
          className: "digiblocks-accordion-item-remove",
          onClick: (e) => {
            e.stopPropagation();
            removeItem(index);
          },
          icon: "trash",
          isSmall: true
        }
      )))
    )), /* @__PURE__ */ wp.element.createElement(
      Button3,
      {
        variant: "primary",
        icon: "plus",
        onClick: addItem,
        style: { width: "100%", marginTop: "20px", justifyContent: "center" }
      },
      __5("Add Accordion Item", "digiblocks")
    ))));
  };
  var edit_default3 = AccordionEdit;

  // blocks/accordion/save.js
  var { useBlockProps: useBlockProps6, RichText: RichText2 } = window.wp.blockEditor;
  var AccordionSave = ({ attributes }) => {
    const {
      id,
      anchor,
      customClasses,
      items,
      iconPosition,
      iconType,
      allowMultipleOpen,
      animation
    } = attributes;
    const renderItemIcon = (isOpen) => {
      if (iconType === "plusMinus") {
        return /* @__PURE__ */ wp.element.createElement("svg", { width: "24", height: "24", viewBox: "0 0 24 24", xmlns: "http://www.w3.org/2000/svg" }, /* @__PURE__ */ wp.element.createElement("path", { d: isOpen ? "M19 13H5v-2h14v2z" : "M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z" }));
      } else if (iconType === "arrowUpDown") {
        return /* @__PURE__ */ wp.element.createElement("svg", { width: "24", height: "24", viewBox: "0 0 24 24", xmlns: "http://www.w3.org/2000/svg" }, /* @__PURE__ */ wp.element.createElement("path", { d: isOpen ? "M7.41 15.41L12 10.83l4.59 4.58L18 14l-6-6-6 6z" : "M7.41 8.59L12 13.17l4.59-4.58L18 10l-6 6-6-6z" }));
      }
      return null;
    };
    const blockClasses = [
      "digiblocks-accordion",
      id,
      iconPosition === "left" ? "icon-position-left" : "icon-position-right",
      allowMultipleOpen ? "allow-multiple-open" : "single-open",
      animation !== "none" ? `animate-${animation}` : "",
      customClasses || ""
    ].filter(Boolean).join(" ");
    const blockProps = useBlockProps6.save({
      className: blockClasses,
      id: anchor || null,
      "data-icon-type": iconType
    });
    return /* @__PURE__ */ wp.element.createElement("div", { ...blockProps }, /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-accordion-wrapper" }, items.map((item) => /* @__PURE__ */ wp.element.createElement(
      "div",
      {
        key: item.id,
        className: `digiblocks-accordion-item ${item.isOpen ? "is-active" : ""}`,
        "data-item-id": item.id
      },
      /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-accordion-header" }, /* @__PURE__ */ wp.element.createElement(
        RichText2.Content,
        {
          tagName: "h4",
          className: "digiblocks-accordion-title",
          value: item.title
        }
      ), /* @__PURE__ */ wp.element.createElement("span", { className: "digiblocks-accordion-icon" }, renderItemIcon(item.isOpen))),
      /* @__PURE__ */ wp.element.createElement(
        "div",
        {
          className: "digiblocks-accordion-content",
          style: { display: item.isOpen ? "block" : "none" }
        },
        /* @__PURE__ */ wp.element.createElement(
          RichText2.Content,
          {
            tagName: "div",
            value: item.content
          }
        )
      )
    ))));
  };
  var save_default3 = AccordionSave;

  // blocks/buttons/edit.js
  var { __: __6 } = window.wp.i18n;
  var {
    useBlockProps: useBlockProps7,
    useInnerBlocksProps: useInnerBlocksProps5,
    InspectorControls: InspectorControls4
  } = window.wp.blockEditor;
  var {
    SelectControl: SelectControl5,
    RangeControl: RangeControl4,
    ToggleControl: ToggleControl4,
    Button: Button4,
    __experimentalToggleGroupControl: ToggleGroupControl3,
    __experimentalToggleGroupControlOption: ToggleGroupControlOption3
  } = window.wp.components;
  var { useState: useState4, useEffect: useEffect4 } = window.wp.element;
  var { useBlockId: useBlockId4, animations: animations3, animationPreview: animationPreview3 } = digi.utils;
  var { tabIcons: tabIcons4 } = digi.icons;
  var { ResponsiveControl: ResponsiveControl4, CustomTabPanel: CustomTabPanel4, TabPanelBody: TabPanelBody5 } = digi.components;
  var ButtonsEdit = ({ attributes, setAttributes, clientId }) => {
    const {
      id,
      anchor,
      visibility,
      customClasses,
      layout,
      align,
      buttonSpacing,
      animation
    } = attributes;
    const [localActiveDevice, setLocalActiveDevice] = useState4(window.digi.responsiveState.activeDevice);
    const [activeTab, setActiveTab] = useState4(() => {
      if (window.digi.uiState) {
        const savedTab = window.digi.uiState.getActiveTab(clientId);
        if (savedTab)
          return savedTab;
      }
      return "options";
    });
    useEffect4(() => {
      const unsubscribe = window.digi.responsiveState.subscribe((device) => {
        setLocalActiveDevice(device);
      });
      return unsubscribe;
    }, []);
    useBlockId4(id, clientId, setAttributes);
    const animationOptions = [
      { label: __6("None", "digiblocks"), value: "none" },
      ...Object.keys(animations3).map((animation2) => ({
        label: animation2.replace(/-/g, " ").replace(/\b\w/g, (l) => l.toUpperCase()),
        value: animation2
      }))
    ];
    const tabList = [
      {
        name: "options",
        title: __6("Options", "digiblocks"),
        icon: tabIcons4.optionsIcon
      },
      {
        name: "advanced",
        title: __6("Advanced", "digiblocks"),
        icon: tabIcons4.advancedIcon
      }
    ];
    const generateCSS = () => {
      const activeDevice = window.digi.responsiveState.activeDevice;
      return `
            /* Buttons Block - ${id} */
            .${id} {
                display: flex;
                flex-wrap: wrap;
                ${layout === "vertical" ? "flex-direction: column;" : ""}
                align-items: ${align};
                gap: ${buttonSpacing[activeDevice]}px;
                transition: all 0.3s ease;
            }

			/* Editor Style */
			.digiblocks-button-inserter {
				display: flex;
				position: absolute;
				bottom: 0;
				right: 0;
			}

			/* Visibility Controls */
			${visibility.desktop ? `
				@media (min-width: 992px) {
					.${id} {
						opacity: 0.5 !important;
					}
				}
			` : ""}

			${visibility.tablet ? `
				@media (min-width: 768px) and (max-width: 991px) {
					.${id} {
						opacity: 0.5 !important;
					}
				}
			` : ""}

			${visibility.mobile ? `
				@media (max-width: 767px) {
					.${id} {
						opacity: 0.5 !important;
					}
				}
			` : ""}
        `;
    };
    const renderTabContent = () => {
      switch (activeTab) {
        case "options":
          return /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement("div", { className: "components-panel__body is-opened" }, /* @__PURE__ */ wp.element.createElement(
            ToggleGroupControl3,
            {
              label: __6("Layout", "digiblocks"),
              value: layout,
              onChange: (value) => setAttributes({ layout: value }),
              isBlock: true,
              __next40pxDefaultSize: true,
              __nextHasNoMarginBottom: true
            },
            /* @__PURE__ */ wp.element.createElement(
              ToggleGroupControlOption3,
              {
                value: "horizontal",
                label: __6("Horizontal", "digiblocks")
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              ToggleGroupControlOption3,
              {
                value: "vertical",
                label: __6("Vertical", "digiblocks")
              }
            )
          ), /* @__PURE__ */ wp.element.createElement(
            ToggleGroupControl3,
            {
              label: __6("Alignment", "digiblocks"),
              value: align,
              onChange: (value) => setAttributes({ align: value }),
              isBlock: true,
              __next40pxDefaultSize: true,
              __nextHasNoMarginBottom: true
            },
            /* @__PURE__ */ wp.element.createElement(
              ToggleGroupControlOption3,
              {
                value: "flex-start",
                label: layout === "horizontal" ? __6("Top", "digiblocks") : __6("Left", "digiblocks")
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              ToggleGroupControlOption3,
              {
                value: "center",
                label: __6("Center", "digiblocks")
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              ToggleGroupControlOption3,
              {
                value: "flex-end",
                label: layout === "horizontal" ? __6("Bottom", "digiblocks") : __6("Right", "digiblocks")
              }
            )
          ), /* @__PURE__ */ wp.element.createElement(
            ResponsiveControl4,
            {
              label: __6("Button Spacing", "digiblocks")
            },
            /* @__PURE__ */ wp.element.createElement(
              RangeControl4,
              {
                value: buttonSpacing[localActiveDevice],
                onChange: (value) => setAttributes({
                  buttonSpacing: {
                    ...buttonSpacing,
                    [localActiveDevice]: value
                  }
                }),
                min: 0,
                max: 50,
                step: 1,
                __next40pxDefaultSize: true,
                __nextHasNoMarginBottom: true
              }
            )
          )));
        case "advanced":
          return /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(
            TabPanelBody5,
            {
              tab: "advanced",
              name: "animation",
              title: __6("Animation", "digiblocks"),
              initialOpen: true
            },
            /* @__PURE__ */ wp.element.createElement(
              SelectControl5,
              {
                label: __6("Animation Effect", "digiblocks"),
                value: animation,
                options: animationOptions,
                onChange: (value) => setAttributes({ animation: value }),
                __next40pxDefaultSize: true,
                __nextHasNoMarginBottom: true
              }
            )
          ), /* @__PURE__ */ wp.element.createElement(
            TabPanelBody5,
            {
              tab: "advanced",
              name: "visibility",
              title: __6("Visibility", "digiblocks"),
              initialOpen: false
            },
            /* @__PURE__ */ wp.element.createElement("div", { className: "components-base-control__help", style: {
              padding: "12px",
              backgroundColor: "#f0f6fc",
              border: "1px solid #c3ddfd",
              borderRadius: "4px",
              marginBottom: "16px"
            } }, /* @__PURE__ */ wp.element.createElement("strong", null, __6("Editor Note:", "digiblocks")), /* @__PURE__ */ wp.element.createElement("br", null), __6("Hidden elements appear with reduced opacity in the editor for easy editing. Visibility changes only take effect on the frontend.", "digiblocks")),
            /* @__PURE__ */ wp.element.createElement(
              ToggleControl4,
              {
                label: __6("Hide on Desktop", "digiblocks"),
                checked: visibility.desktop,
                onChange: (value) => setAttributes({
                  visibility: {
                    ...visibility,
                    desktop: value
                  }
                }),
                __nextHasNoMarginBottom: true
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              ToggleControl4,
              {
                label: __6("Hide on Tablet", "digiblocks"),
                checked: visibility.tablet,
                onChange: (value) => setAttributes({
                  visibility: {
                    ...visibility,
                    tablet: value
                  }
                }),
                __nextHasNoMarginBottom: true
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              ToggleControl4,
              {
                label: __6("Hide on Mobile", "digiblocks"),
                checked: visibility.mobile,
                onChange: (value) => setAttributes({
                  visibility: {
                    ...visibility,
                    mobile: value
                  }
                }),
                __nextHasNoMarginBottom: true
              }
            )
          ), /* @__PURE__ */ wp.element.createElement(
            TabPanelBody5,
            {
              tab: "advanced",
              name: "additional",
              title: __6("Additional", "digiblocks"),
              initialOpen: false
            },
            /* @__PURE__ */ wp.element.createElement("div", { className: "components-base-control html-anchor-control" }, /* @__PURE__ */ wp.element.createElement("div", { className: "components-base-control__field" }, /* @__PURE__ */ wp.element.createElement("label", { className: "components-base-control__label", htmlFor: "html-anchor" }, __6("HTML anchor", "digiblocks")), /* @__PURE__ */ wp.element.createElement(
              "input",
              {
                className: "components-text-control__input",
                type: "text",
                id: "html-anchor",
                value: anchor || "",
                onChange: (e) => setAttributes({ anchor: e.target.value }),
                "aria-describedby": "html-anchor-help",
                autoCapitalize: "none",
                autoComplete: "off"
              }
            )), /* @__PURE__ */ wp.element.createElement("p", { id: "html-anchor-help", className: "components-base-control__help" }, __6(`Enter a word or two \u2014 without spaces \u2014 to make a unique web address just for this block, called an "anchor". Then, you'll be able to link directly to this section of your page.`, "digiblocks"), " ", /* @__PURE__ */ wp.element.createElement(
              "a",
              {
                className: "components-external-link",
                href: "https://wordpress.org/documentation/article/page-jumps/",
                target: "_blank",
                rel: "external noreferrer noopener"
              },
              /* @__PURE__ */ wp.element.createElement("span", { className: "components-external-link__contents" }, __6("Learn more about anchors", "digiblocks")),
              /* @__PURE__ */ wp.element.createElement("span", { className: "components-external-link__icon", "aria-label": "(opens in a new tab)" }, "\u2197")
            ))),
            /* @__PURE__ */ wp.element.createElement("div", { className: "components-base-control" }, /* @__PURE__ */ wp.element.createElement("div", { className: "components-base-control__field" }, /* @__PURE__ */ wp.element.createElement("label", { className: "components-base-control__label", htmlFor: "additional-css-classes" }, __6("Additional CSS class(es)", "digiblocks")), /* @__PURE__ */ wp.element.createElement(
              "input",
              {
                className: "components-text-control__input",
                type: "text",
                id: "additional-css-classes",
                value: customClasses || "",
                onChange: (e) => setAttributes({ customClasses: e.target.value }),
                "aria-describedby": "additional-css-classes-help",
                autoComplete: "off"
              }
            )), /* @__PURE__ */ wp.element.createElement("p", { id: "additional-css-classes-help", className: "components-base-control__help" }, __6("Separate multiple classes with spaces.", "digiblocks")))
          ));
        default:
          return null;
      }
    };
    const blockProps = useBlockProps7({
      className: `digiblocks-buttons-block ${id} ${customClasses || ""}`,
      id: anchor || null
    });
    const ALLOWED_BLOCKS = ["digiblocks/button"];
    const BUTTON_TEMPLATE = [
      ["digiblocks/button", {}]
    ];
    const innerBlocksProps = useInnerBlocksProps5(blockProps, {
      allowedBlocks: ALLOWED_BLOCKS,
      template: BUTTON_TEMPLATE,
      renderAppender: false,
      orientation: layout === "vertical" ? "vertical" : "horizontal"
    });
    return /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(InspectorControls4, null, /* @__PURE__ */ wp.element.createElement(
      CustomTabPanel4,
      {
        tabs: tabList,
        activeTab,
        onSelect: setActiveTab
      },
      renderTabContent()
    )), /* @__PURE__ */ wp.element.createElement("style", { dangerouslySetInnerHTML: { __html: generateCSS() } }), /* @__PURE__ */ wp.element.createElement("div", { ...innerBlocksProps }, innerBlocksProps.children, /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-button-inserter" }, /* @__PURE__ */ wp.element.createElement(
      Button4,
      {
        variant: "primary",
        isSmall: true,
        icon: "plus",
        onClick: () => {
          const buttonBlock = window.wp.blocks.createBlock("digiblocks/button");
          window.wp.data.dispatch("core/block-editor").insertBlock(buttonBlock, void 0, clientId);
        }
      },
      __6("Add", "digiblocks")
    ))));
  };
  var edit_default4 = ButtonsEdit;

  // blocks/buttons/save.js
  var { useBlockProps: useBlockProps8, useInnerBlocksProps: useInnerBlocksProps6 } = window.wp.blockEditor;
  var ButtonsSave = ({ attributes }) => {
    const {
      id,
      anchor,
      customClasses,
      animation
    } = attributes;
    const blockClasses = [
      "digiblocks-buttons-block",
      id,
      animation !== "none" ? `animate-${animation}` : "",
      customClasses || ""
    ].filter(Boolean).join(" ");
    const blockProps = useBlockProps8.save({
      className: blockClasses,
      id: anchor || null
    });
    const innerBlocksProps = useInnerBlocksProps6.save(blockProps);
    return /* @__PURE__ */ wp.element.createElement("div", { ...innerBlocksProps });
  };
  var save_default4 = ButtonsSave;

  // blocks/button/edit.js
  var { __: __7 } = window.wp.i18n;
  var {
    useBlockProps: useBlockProps9,
    RichText: RichText3,
    InspectorControls: InspectorControls5,
    PanelColorSettings: PanelColorSettings4,
    LinkControl
  } = window.wp.blockEditor;
  var {
    SelectControl: SelectControl6,
    TabPanel: TabPanel2,
    ToggleControl: ToggleControl5,
    __experimentalToggleGroupControl: ToggleGroupControl4,
    __experimentalToggleGroupControlOption: ToggleGroupControlOption4
  } = window.wp.components;
  var { useState: useState5, useEffect: useEffect5 } = window.wp.element;
  var { useBlockId: useBlockId5, getDimensionCSS: getDimensionCSS3 } = digi.utils;
  var { tabIcons: tabIcons5 } = digi.icons;
  var { ResponsiveControl: ResponsiveControl5, DimensionControl: DimensionControl4, BoxShadowControl: BoxShadowControl4, TypographyControl: TypographyControl2, CustomTabPanel: CustomTabPanel5, TabPanelBody: TabPanelBody6, FontAwesomeControl } = digi.components;
  var ButtonEdit = ({ attributes, setAttributes, clientId, isSelected }) => {
    const {
      id,
      anchor,
      visibility,
      customClasses,
      text,
      url,
      opensInNewTab,
      rel,
      iconValue,
      iconPosition,
      size,
      fill,
      textColor,
      textHoverColor,
      backgroundColor,
      backgroundHoverColor,
      borderStyle,
      borderWidth,
      borderRadius,
      borderColor,
      borderHoverColor,
      boxShadow,
      boxShadowHover,
      padding,
      margin,
      onlyIcon,
      buttonTypography
    } = attributes;
    useBlockId5(id, clientId, setAttributes);
    const [localActiveDevice, setLocalActiveDevice] = useState5(window.digi.responsiveState.activeDevice);
    const [isEditingURL, setIsEditingURL] = useState5(false);
    const [activeTab, setActiveTab] = useState5(() => {
      if (window.digi.uiState) {
        const savedTab = window.digi.uiState.getActiveTab(clientId);
        if (savedTab)
          return savedTab;
      }
      return "options";
    });
    const [componentsLoaded, setComponentsLoaded] = useState5(false);
    useEffect5(() => {
      const checkComponents = () => {
        if (window.digi && window.digi.components && window.digi.components.FontAwesomeControl) {
          setComponentsLoaded(true);
          return true;
        }
        return false;
      };
      if (!checkComponents()) {
        const timeout = setTimeout(() => {
          if (checkComponents()) {
            clearTimeout(timeout);
          }
        }, 500);
        return () => clearTimeout(timeout);
      }
    }, []);
    useEffect5(() => {
      const unsubscribe = window.digi.responsiveState.subscribe((device) => {
        setLocalActiveDevice(device);
      });
      return unsubscribe;
    }, []);
    const borderStyleOptions = [
      { label: __7("Default", "digiblocks"), value: "default" },
      { label: __7("None", "digiblocks"), value: "none" },
      { label: __7("Solid", "digiblocks"), value: "solid" },
      { label: __7("Dotted", "digiblocks"), value: "dotted" },
      { label: __7("Dashed", "digiblocks"), value: "dashed" },
      { label: __7("Double", "digiblocks"), value: "double" },
      { label: __7("Groove", "digiblocks"), value: "groove" },
      { label: __7("Inset", "digiblocks"), value: "inset" },
      { label: __7("Outset", "digiblocks"), value: "outset" },
      { label: __7("Ridge", "digiblocks"), value: "ridge" }
    ];
    const sizeOptions = [
      { label: __7("Small", "digiblocks"), value: "small" },
      { label: __7("Medium", "digiblocks"), value: "medium" },
      { label: __7("Large", "digiblocks"), value: "large" },
      { label: __7("Custom", "digiblocks"), value: "custom" }
    ];
    const tabList = [
      {
        name: "options",
        title: __7("Options", "digiblocks"),
        icon: tabIcons5.optionsIcon
      },
      {
        name: "style",
        title: __7("Style", "digiblocks"),
        icon: tabIcons5.styleIcon
      },
      {
        name: "advanced",
        title: __7("Advanced", "digiblocks"),
        icon: tabIcons5.advancedIcon
      }
    ];
    const stateTabList = [
      {
        name: "normal",
        title: __7("Normal", "digiblocks"),
        className: "digiblocks-tab-1 normal"
      },
      {
        name: "hover",
        title: __7("Hover", "digiblocks"),
        className: "digiblocks-tab-2 hover"
      }
    ];
    const FontAwesomeControl6 = componentsLoaded ? window.digi.components.FontAwesomeControl : null;
    const generateCSS = () => {
      const activeDevice = localActiveDevice;
      let sizeCSS = "";
      if (size === "custom") {
        sizeCSS = getDimensionCSS3(padding, "padding", activeDevice);
      } else if (size === "small") {
        sizeCSS = "padding: 8px 16px;";
      } else if (size === "large") {
        sizeCSS = "padding: 16px 32px;";
      } else {
        sizeCSS = "padding: 12px 24px;";
      }
      let borderCSS = "";
      if (borderStyle && borderStyle !== "default" && borderStyle !== "none") {
        const borderWidthCSS = getDimensionCSS3(borderWidth, "border-width", activeDevice);
        const borderWidthStyle = borderWidthCSS || "border-width: 1px 1px 1px 1px;";
        borderCSS = `
                border-style: ${borderStyle};
                border-color: ${borderColor || "#333333"};
                ${borderWidthStyle}
            `;
      } else {
        borderCSS = "border: none;";
      }
      let borderRadiusCSS = "";
      borderRadiusCSS = getDimensionCSS3(borderRadius, "border-radius", activeDevice);
      let boxShadowCSS = "box-shadow: none;";
      if (boxShadow && boxShadow.enable) {
        const inset = boxShadow.position === "inset" ? "inset " : "";
        boxShadowCSS = `box-shadow: ${inset}${boxShadow.horizontal}px ${boxShadow.vertical}px ${boxShadow.blur}px ${boxShadow.spread}px ${boxShadow.color};`;
      }
      const marginCSS = getDimensionCSS3(margin, "margin", activeDevice);
      let hoverCSS = "";
      if (boxShadowHover && boxShadowHover.enable) {
        const insetHover = boxShadowHover.position === "inset" ? "inset " : "";
        hoverCSS += `box-shadow: ${insetHover}${boxShadowHover.horizontal}px ${boxShadowHover.vertical}px ${boxShadowHover.blur}px ${boxShadowHover.spread}px ${boxShadowHover.color};`;
      }
      let buttonTypographyCSS = "";
      if (buttonTypography) {
        if (buttonTypography.fontFamily) {
          buttonTypographyCSS += `font-family: ${buttonTypography.fontFamily};`;
        }
        if (buttonTypography.fontSize && buttonTypography.fontSize[activeDevice]) {
          buttonTypographyCSS += `font-size: ${buttonTypography.fontSize[activeDevice]}${buttonTypography.fontSizeUnit || "px"};`;
        }
        if (buttonTypography.fontWeight) {
          buttonTypographyCSS += `font-weight: ${buttonTypography.fontWeight};`;
        }
        if (buttonTypography.fontStyle) {
          buttonTypographyCSS += `font-style: ${buttonTypography.fontStyle};`;
        }
        if (buttonTypography.textTransform) {
          buttonTypographyCSS += `text-transform: ${buttonTypography.textTransform};`;
        }
        if (buttonTypography.textDecoration) {
          buttonTypographyCSS += `text-decoration: ${buttonTypography.textDecoration};`;
        }
        if (buttonTypography.lineHeight && buttonTypography.lineHeight[activeDevice]) {
          buttonTypographyCSS += `line-height: ${buttonTypography.lineHeight[activeDevice]}${buttonTypography.lineHeightUnit || "em"};`;
        }
        if (buttonTypography.letterSpacing && buttonTypography.letterSpacing[activeDevice]) {
          buttonTypographyCSS += `letter-spacing: ${buttonTypography.letterSpacing[activeDevice]}${buttonTypography.letterSpacingUnit || "px"};`;
        }
      }
      return `
            /* Button Block - ${id} */
            .${id} {
                display: inline-flex;
                align-items: center;
                justify-content: center;
                text-decoration: none;
                cursor: pointer;
                transition: all 0.3s ease;
                ${sizeCSS}
                ${borderCSS}
                ${borderRadiusCSS}
                ${boxShadowCSS}
                ${marginCSS}
                ${fill ? "width: 100%;" : ""}
                gap: 8px; /* Space between icon and text */
                ${backgroundColor ? `background-color: ${backgroundColor};` : ""}
                ${textColor ? `color: ${textColor};` : ""}
            }
            
            .${id}:hover {
                ${textHoverColor ? `color: ${textHoverColor};` : ""}
                ${backgroundHoverColor ? `background-color: ${backgroundHoverColor};` : ""}
                ${borderHoverColor ? `border-color: ${borderHoverColor};` : ""}
                ${hoverCSS}
            }
            
            /* Icon styles */
            .${id} .digiblocks-button-icon {
                display: flex;
                align-items: center;
                justify-content: center;
            }
            
            .${id} .digiblocks-button-icon svg {
                width: 1em;
                height: 1em;
                fill: currentColor;
            }
            
            /* Button typography */
            .${id} {
                ${buttonTypographyCSS}
            }

			/* Visibility Controls */
			${visibility.desktop ? `
				@media (min-width: 992px) {
					.${id} {
						opacity: 0.5 !important;
					}
				}
			` : ""}

			${visibility.tablet ? `
				@media (min-width: 768px) and (max-width: 991px) {
					.${id} {
						opacity: 0.5 !important;
					}
				}
			` : ""}

			${visibility.mobile ? `
				@media (max-width: 767px) {
					.${id} {
						opacity: 0.5 !important;
					}
				}
			` : ""}
        `;
    };
    const renderButtonContent = () => {
      const iconElement = iconValue && iconValue.svg ? /* @__PURE__ */ wp.element.createElement(
        "span",
        {
          key: "icon",
          className: "digiblocks-button-icon",
          dangerouslySetInnerHTML: { __html: iconValue.svg }
        }
      ) : null;
      const textElement = !onlyIcon ? /* @__PURE__ */ wp.element.createElement(
        RichText3,
        {
          key: "text",
          value: text,
          onChange: (value) => setAttributes({ text: value }),
          placeholder: __7("Add text\u2026", "digiblocks"),
          allowedFormats: [],
          withoutInteractiveFormatting: true,
          identifier: "text"
        }
      ) : null;
      if (iconPosition === "left") {
        return [iconElement, textElement].filter(Boolean);
      } else {
        return [textElement, iconElement].filter(Boolean);
      }
    };
    const renderTabContent = () => {
      switch (activeTab) {
        case "options":
          return /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(
            TabPanelBody6,
            {
              tab: "options",
              name: "icon",
              title: __7("Icon", "digiblocks"),
              initialOpen: true
            },
            !componentsLoaded ? /* @__PURE__ */ wp.element.createElement("div", { style: { textAlign: "center", padding: "20px 0" } }, /* @__PURE__ */ wp.element.createElement("div", { className: "components-spinner" }), /* @__PURE__ */ wp.element.createElement("p", null, __7("Loading icon selector...", "digiblocks"))) : /* @__PURE__ */ wp.element.createElement(
              FontAwesomeControl6,
              {
                label: __7("Select Icon", "digiblocks"),
                value: iconValue,
                onChange: (value) => setAttributes({ iconValue: value })
              }
            ),
            iconValue && /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(
              ToggleControl5,
              {
                label: __7("Only Icon", "digiblocks"),
                checked: onlyIcon,
                onChange: (value) => setAttributes({ onlyIcon: value }),
                __nextHasNoMarginBottom: true
              }
            ), !onlyIcon && /* @__PURE__ */ wp.element.createElement(
              ToggleGroupControl4,
              {
                label: __7("Icon Position", "digiblocks"),
                value: iconPosition,
                onChange: (value) => setAttributes({ iconPosition: value }),
                isBlock: true,
                __next40pxDefaultSize: true,
                __nextHasNoMarginBottom: true
              },
              /* @__PURE__ */ wp.element.createElement(
                ToggleGroupControlOption4,
                {
                  value: "left",
                  label: __7("Left", "digiblocks")
                }
              ),
              /* @__PURE__ */ wp.element.createElement(
                ToggleGroupControlOption4,
                {
                  value: "right",
                  label: __7("Right", "digiblocks")
                }
              )
            ))
          ), /* @__PURE__ */ wp.element.createElement(
            TabPanelBody6,
            {
              tab: "options",
              name: "link",
              title: __7("Link", "digiblocks"),
              initialOpen: false
            },
            /* @__PURE__ */ wp.element.createElement(
              LinkControl,
              {
                value: url ? { url, opensInNewTab, rel } : void 0,
                onChange: (newLink) => {
                  setAttributes({
                    url: newLink.url,
                    opensInNewTab: newLink.opensInNewTab,
                    rel: newLink.rel || ""
                  });
                  setIsEditingURL(false);
                },
                settings: [
                  {
                    id: "opensInNewTab",
                    title: __7("Open in new tab")
                  },
                  {
                    id: "rel",
                    title: __7("Add noopener noreferrer")
                  }
                ],
                onRemove: () => {
                  setAttributes({ url: "", opensInNewTab: false, rel: "" });
                  setIsEditingURL(false);
                }
              }
            )
          ), /* @__PURE__ */ wp.element.createElement(
            TabPanelBody6,
            {
              tab: "options",
              name: "size",
              title: __7("Size and Fill", "digiblocks"),
              initialOpen: false
            },
            /* @__PURE__ */ wp.element.createElement(
              SelectControl6,
              {
                label: __7("Size", "digiblocks"),
                value: size,
                options: sizeOptions,
                onChange: (value) => setAttributes({ size: value }),
                __next40pxDefaultSize: true,
                __nextHasNoMarginBottom: true
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              ToggleControl5,
              {
                label: __7("Expand to Container Width", "digiblocks"),
                checked: fill,
                onChange: (value) => setAttributes({ fill: value }),
                __nextHasNoMarginBottom: true
              }
            )
          ));
        case "style":
          return /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(
            TabPanelBody6,
            {
              tab: "style",
              name: "typography",
              title: __7("Typography", "digiblocks"),
              initialOpen: true
            },
            /* @__PURE__ */ wp.element.createElement(
              TypographyControl2,
              {
                label: __7("Button Typography", "digiblocks"),
                value: buttonTypography,
                onChange: (value) => setAttributes({ buttonTypography: value }),
                defaults: {
                  fontSize: { desktop: 16, tablet: 15, mobile: 14 },
                  fontSizeUnit: "px",
                  lineHeight: { desktop: 1.5, tablet: 1.4, mobile: 1.3 },
                  lineHeightUnit: "em"
                }
              }
            )
          ), /* @__PURE__ */ wp.element.createElement(
            TabPanelBody6,
            {
              tab: "style",
              name: "colors",
              title: __7("Colors", "digiblocks"),
              initialOpen: true
            },
            /* @__PURE__ */ wp.element.createElement(
              TabPanel2,
              {
                className: "digiblocks-control-tabs",
                activeClass: "active-tab",
                tabs: stateTabList
              },
              (tab) => /* @__PURE__ */ wp.element.createElement(
                PanelColorSettings4,
                {
                  title: tab.name === "normal" ? __7("Normal Colors", "digiblocks") : __7("Hover Colors", "digiblocks"),
                  initialOpen: true,
                  enableAlpha: true,
                  colorSettings: [
                    {
                      value: tab.name === "normal" ? textColor : textHoverColor,
                      onChange: (value) => setAttributes(
                        tab.name === "normal" ? { textColor: value } : { textHoverColor: value }
                      ),
                      label: __7("Text Color", "digiblocks")
                    },
                    {
                      value: tab.name === "normal" ? backgroundColor : backgroundHoverColor,
                      onChange: (value) => setAttributes(
                        tab.name === "normal" ? { backgroundColor: value } : { backgroundHoverColor: value }
                      ),
                      label: __7("Background Color", "digiblocks")
                    }
                  ]
                }
              )
            )
          ), size === "custom" && /* @__PURE__ */ wp.element.createElement(
            TabPanelBody6,
            {
              tab: "style",
              name: "spacing",
              title: __7("Spacing", "digiblocks"),
              initialOpen: false
            },
            /* @__PURE__ */ wp.element.createElement(
              ResponsiveControl5,
              {
                label: __7("Padding", "digiblocks")
              },
              /* @__PURE__ */ wp.element.createElement(
                DimensionControl4,
                {
                  values: padding[localActiveDevice],
                  onChange: (value) => setAttributes({
                    padding: {
                      ...padding,
                      [localActiveDevice]: value
                    }
                  })
                }
              )
            )
          ), /* @__PURE__ */ wp.element.createElement(
            TabPanelBody6,
            {
              tab: "style",
              name: "margin",
              title: __7("Margin", "digiblocks"),
              initialOpen: false
            },
            /* @__PURE__ */ wp.element.createElement(
              ResponsiveControl5,
              {
                label: __7("Margin", "digiblocks")
              },
              /* @__PURE__ */ wp.element.createElement(
                DimensionControl4,
                {
                  values: margin[localActiveDevice],
                  onChange: (value) => setAttributes({
                    margin: {
                      ...margin,
                      [localActiveDevice]: value
                    }
                  })
                }
              )
            )
          ), /* @__PURE__ */ wp.element.createElement(
            TabPanelBody6,
            {
              tab: "style",
              name: "box-style",
              title: __7("Box Style", "digiblocks"),
              initialOpen: false
            },
            /* @__PURE__ */ wp.element.createElement(
              SelectControl6,
              {
                label: __7("Border Style", "digiblocks"),
                value: borderStyle || "default",
                options: borderStyleOptions,
                onChange: (value) => {
                  if (value !== "default" && value !== "none" && (borderStyle === "default" || borderStyle === "none" || !borderStyle)) {
                    if (!borderWidth || Object.keys(borderWidth).length === 0) {
                      setAttributes({
                        borderWidth: {
                          desktop: { top: 1, right: 1, bottom: 1, left: 1, unit: "px" },
                          tablet: { top: "", right: "", bottom: "", left: "", unit: "px" },
                          mobile: { top: "", right: "", bottom: "", left: "", unit: "px" }
                        }
                      });
                    }
                  }
                  setAttributes({ borderStyle: value });
                },
                __next40pxDefaultSize: true,
                __nextHasNoMarginBottom: true
              }
            ),
            borderStyle && borderStyle !== "default" && borderStyle !== "none" && /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(
              TabPanel2,
              {
                className: "digiblocks-control-tabs",
                activeClass: "active-tab",
                tabs: stateTabList
              },
              (tab) => /* @__PURE__ */ wp.element.createElement(
                PanelColorSettings4,
                {
                  title: __7("Border Colors", "digiblocks"),
                  enableAlpha: true,
                  colorSettings: [
                    {
                      value: tab.name === "normal" ? borderColor : borderHoverColor,
                      onChange: (value) => setAttributes(
                        tab.name === "normal" ? { borderColor: value } : { borderHoverColor: value }
                      ),
                      label: __7("Border Color", "digiblocks")
                    }
                  ]
                }
              )
            ), /* @__PURE__ */ wp.element.createElement(
              ResponsiveControl5,
              {
                label: __7("Border Width", "digiblocks")
              },
              /* @__PURE__ */ wp.element.createElement(
                DimensionControl4,
                {
                  values: borderWidth[localActiveDevice],
                  onChange: (value) => setAttributes({
                    borderWidth: {
                      ...borderWidth,
                      [localActiveDevice]: value
                    }
                  })
                }
              )
            )),
            /* @__PURE__ */ wp.element.createElement(
              ResponsiveControl5,
              {
                label: __7("Border Radius", "digiblocks")
              },
              /* @__PURE__ */ wp.element.createElement(
                DimensionControl4,
                {
                  values: borderRadius[localActiveDevice],
                  onChange: (value) => setAttributes({
                    borderRadius: {
                      ...borderRadius,
                      [localActiveDevice]: value
                    }
                  }),
                  units: [
                    { label: "px", value: "px" },
                    { label: "%", value: "%" }
                  ]
                }
              )
            )
          ), /* @__PURE__ */ wp.element.createElement(
            TabPanelBody6,
            {
              tab: "style",
              name: "shadow",
              title: __7("Box Shadow", "digiblocks"),
              initialOpen: false
            },
            /* @__PURE__ */ wp.element.createElement(
              BoxShadowControl4,
              {
                normalValue: boxShadow,
                hoverValue: boxShadowHover,
                onNormalChange: (value) => setAttributes({ boxShadow: value }),
                onHoverChange: (value) => setAttributes({ boxShadowHover: value })
              }
            )
          ));
        case "advanced":
          return /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(
            TabPanelBody6,
            {
              tab: "advanced",
              name: "visibility",
              title: __7("Visibility", "digiblocks"),
              initialOpen: false
            },
            /* @__PURE__ */ wp.element.createElement("div", { className: "components-base-control__help", style: {
              padding: "12px",
              backgroundColor: "#f0f6fc",
              border: "1px solid #c3ddfd",
              borderRadius: "4px",
              marginBottom: "16px"
            } }, /* @__PURE__ */ wp.element.createElement("strong", null, __7("Editor Note:", "digiblocks")), /* @__PURE__ */ wp.element.createElement("br", null), __7("Hidden elements appear with reduced opacity in the editor for easy editing. Visibility changes only take effect on the frontend.", "digiblocks")),
            /* @__PURE__ */ wp.element.createElement(
              ToggleControl5,
              {
                label: __7("Hide on Desktop", "digiblocks"),
                checked: visibility.desktop,
                onChange: (value) => setAttributes({
                  visibility: {
                    ...visibility,
                    desktop: value
                  }
                }),
                __nextHasNoMarginBottom: true
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              ToggleControl5,
              {
                label: __7("Hide on Tablet", "digiblocks"),
                checked: visibility.tablet,
                onChange: (value) => setAttributes({
                  visibility: {
                    ...visibility,
                    tablet: value
                  }
                }),
                __nextHasNoMarginBottom: true
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              ToggleControl5,
              {
                label: __7("Hide on Mobile", "digiblocks"),
                checked: visibility.mobile,
                onChange: (value) => setAttributes({
                  visibility: {
                    ...visibility,
                    mobile: value
                  }
                }),
                __nextHasNoMarginBottom: true
              }
            )
          ), /* @__PURE__ */ wp.element.createElement(
            TabPanelBody6,
            {
              tab: "advanced",
              name: "additional",
              title: __7("Additional", "digiblocks"),
              initialOpen: true
            },
            /* @__PURE__ */ wp.element.createElement("div", { className: "components-base-control html-anchor-control" }, /* @__PURE__ */ wp.element.createElement("div", { className: "components-base-control__field" }, /* @__PURE__ */ wp.element.createElement("label", { className: "components-base-control__label", htmlFor: "html-anchor" }, __7("HTML anchor", "digiblocks")), /* @__PURE__ */ wp.element.createElement(
              "input",
              {
                className: "components-text-control__input",
                type: "text",
                id: "html-anchor",
                value: anchor || "",
                onChange: (e) => setAttributes({ anchor: e.target.value }),
                "aria-describedby": "html-anchor-help",
                autoCapitalize: "none",
                autoComplete: "off"
              }
            )), /* @__PURE__ */ wp.element.createElement("p", { id: "html-anchor-help", className: "components-base-control__help" }, __7(`Enter a word or two \u2014 without spaces \u2014 to make a unique web address just for this block, called an "anchor". Then, you'll be able to link directly to this section of your page.`, "digiblocks"), " ", /* @__PURE__ */ wp.element.createElement(
              "a",
              {
                className: "components-external-link",
                href: "https://wordpress.org/documentation/article/page-jumps/",
                target: "_blank",
                rel: "external noreferrer noopener"
              },
              /* @__PURE__ */ wp.element.createElement("span", { className: "components-external-link__contents" }, __7("Learn more about anchors", "digiblocks")),
              /* @__PURE__ */ wp.element.createElement("span", { className: "components-external-link__icon", "aria-label": "(opens in a new tab)" }, "\u2197")
            ))),
            /* @__PURE__ */ wp.element.createElement("div", { className: "components-base-control" }, /* @__PURE__ */ wp.element.createElement("div", { className: "components-base-control__field" }, /* @__PURE__ */ wp.element.createElement("label", { className: "components-base-control__label", htmlFor: "additional-css-classes" }, __7("Additional CSS class(es)", "digiblocks")), /* @__PURE__ */ wp.element.createElement(
              "input",
              {
                className: "components-text-control__input",
                type: "text",
                id: "additional-css-classes",
                value: customClasses || "",
                onChange: (e) => setAttributes({ customClasses: e.target.value }),
                "aria-describedby": "additional-css-classes-help",
                autoComplete: "off"
              }
            )), /* @__PURE__ */ wp.element.createElement("p", { id: "additional-css-classes-help", className: "components-base-control__help" }, __7("Separate multiple classes with spaces.", "digiblocks")))
          ));
        default:
          return null;
      }
    };
    const blockProps = useBlockProps9({
      className: `digiblocks-button ${id} ${size} ${fill ? "is-fill" : ""} ${customClasses || ""}`,
      id: anchor || null
    });
    return /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(InspectorControls5, null, /* @__PURE__ */ wp.element.createElement(
      CustomTabPanel5,
      {
        tabs: tabList,
        activeTab,
        onSelect: setActiveTab
      },
      renderTabContent()
    )), /* @__PURE__ */ wp.element.createElement("style", { dangerouslySetInnerHTML: { __html: generateCSS() } }), /* @__PURE__ */ wp.element.createElement("div", { ...blockProps }, renderButtonContent()));
  };
  var edit_default5 = ButtonEdit;

  // blocks/button/save.js
  var { useBlockProps: useBlockProps10, RichText: RichText4 } = window.wp.blockEditor;
  var ButtonSave = ({ attributes }) => {
    const {
      id,
      anchor,
      customClasses,
      text,
      url,
      opensInNewTab,
      rel,
      iconValue,
      iconPosition,
      size,
      fill,
      onlyIcon
    } = attributes;
    const blockClasses = [
      "digiblocks-button",
      id,
      size,
      fill ? "is-fill" : "",
      customClasses || ""
    ].filter(Boolean).join(" ");
    const buttonContent = /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, iconValue && iconValue.svg && iconPosition === "left" && /* @__PURE__ */ wp.element.createElement(
      "span",
      {
        className: "digiblocks-button-icon",
        dangerouslySetInnerHTML: { __html: iconValue.svg }
      }
    ), !onlyIcon && /* @__PURE__ */ wp.element.createElement(
      RichText4.Content,
      {
        value: text
      }
    ), iconValue && iconValue.svg && iconPosition === "right" && /* @__PURE__ */ wp.element.createElement(
      "span",
      {
        className: "digiblocks-button-icon",
        dangerouslySetInnerHTML: { __html: iconValue.svg }
      }
    ));
    if (url) {
      return /* @__PURE__ */ wp.element.createElement(
        "a",
        {
          ...useBlockProps10.save({
            className: blockClasses,
            id: anchor || null,
            href: url,
            target: opensInNewTab ? "_blank" : void 0,
            rel: rel ? "noopener noreferrer" : void 0
          })
        },
        buttonContent
      );
    }
    return /* @__PURE__ */ wp.element.createElement(
      "div",
      {
        ...useBlockProps10.save({
          className: blockClasses,
          id: anchor || null
        })
      },
      buttonContent
    );
  };
  var save_default5 = ButtonSave;

  // blocks/call-to-action/edit.js
  var { __: __8 } = window.wp.i18n;
  var {
    useBlockProps: useBlockProps11,
    RichText: RichText5,
    InspectorControls: InspectorControls6,
    PanelColorSettings: PanelColorSettings5,
    BlockControls,
    AlignmentToolbar,
    MediaUpload: MediaUpload3,
    MediaUploadCheck: MediaUploadCheck3
  } = window.wp.blockEditor;
  var {
    SelectControl: SelectControl7,
    RangeControl: RangeControl5,
    ToggleControl: ToggleControl6,
    Button: Button5,
    __experimentalToggleGroupControl: ToggleGroupControl5,
    __experimentalToggleGroupControlOption: ToggleGroupControlOption5,
    TabPanel: TabPanel3,
    TextControl,
    BaseControl
  } = window.wp.components;
  var { useState: useState6, useEffect: useEffect6, useRef: useRef3 } = window.wp.element;
  var { useBlockId: useBlockId6, getDimensionCSS: getDimensionCSS4, animations: animations4, animationPreview: animationPreview4 } = digi.utils;
  var { tabIcons: tabIcons6 } = digi.icons;
  var { ResponsiveControl: ResponsiveControl6, DimensionControl: DimensionControl5, TypographyControl: TypographyControl3, BoxShadowControl: BoxShadowControl5, CustomTabPanel: CustomTabPanel6, TabPanelBody: TabPanelBody7 } = digi.components;
  var CallToActionEdit = ({ attributes, setAttributes, clientId }) => {
    const {
      id,
      anchor,
      visibility,
      customClasses,
      style,
      horizontalLayout,
      title,
      content,
      headingTag,
      titleColor,
      textColor,
      buttonColor,
      buttonTextColor,
      backgroundColor,
      backgroundType,
      backgroundImage,
      backgroundOverlayColor,
      backgroundOverlayOpacity,
      backgroundPosition,
      backgroundSize,
      backgroundRepeat,
      borderStyle,
      borderWidth,
      borderRadius,
      borderColor,
      padding,
      margin,
      align,
      titleTypography,
      contentTypography,
      buttonTypography,
      contentWidth,
      width,
      animation,
      boxShadow,
      boxShadowHover,
      buttonBorderRadius,
      buttonPadding,
      buttonsAlign,
      buttons,
      titleHoverColor,
      textHoverColor,
      buttonHoverColor,
      buttonTextHoverColor,
      backgroundHoverColor,
      highlightText,
      highlightColor,
      highlightType,
      verticalAlign,
      reverseColumnsMobile,
      minHeight
    } = attributes;
    const [localActiveDevice, setLocalActiveDevice] = useState6(window.digi.responsiveState.activeDevice);
    const [isAnimating, setIsAnimating] = useState6(false);
    useEffect6(() => {
      const unsubscribe = window.digi.responsiveState.subscribe((device) => {
        setLocalActiveDevice(device);
      });
      return unsubscribe;
    }, []);
    const [activeTab, setActiveTab] = useState6(() => {
      if (window.digi.uiState) {
        const savedTab = window.digi.uiState.getActiveTab(clientId);
        if (savedTab)
          return savedTab;
      }
      return "options";
    });
    useBlockId6(id, clientId, setAttributes);
    useEffect6(() => {
      if (!buttons || !Array.isArray(buttons) || buttons.length === 0) {
        setAttributes({
          buttons: [
            {
              id: "button-1",
              text: __8("Click Here", "digiblocks"),
              url: "#",
              openInNewTab: false,
              rel: "",
              isPrimary: true,
              isFullWidth: false,
              customColors: false,
              backgroundColor: "",
              textColor: "",
              hoverBackgroundColor: "",
              hoverTextColor: "",
              borderRadius: ""
            }
          ]
        });
      }
      if (!titleTypography) {
        setAttributes({
          titleTypography: {
            fontFamily: "",
            fontSize: { desktop: 36, tablet: 32, mobile: 28 },
            fontSizeUnit: "px",
            fontWeight: "700",
            fontStyle: "normal",
            textTransform: "none",
            textDecoration: "none",
            lineHeight: { desktop: 1.2, tablet: 1.2, mobile: 1.2 },
            lineHeightUnit: "em",
            letterSpacing: { desktop: 0, tablet: 0, mobile: 0 },
            letterSpacingUnit: "px"
          }
        });
      }
      if (!contentTypography) {
        setAttributes({
          contentTypography: {
            fontFamily: "",
            fontSize: { desktop: 18, tablet: 16, mobile: 16 },
            fontSizeUnit: "px",
            fontWeight: "400",
            fontStyle: "normal",
            textTransform: "none",
            textDecoration: "none",
            lineHeight: { desktop: 1.6, tablet: 1.6, mobile: 1.5 },
            lineHeightUnit: "em",
            letterSpacing: { desktop: 0, tablet: 0, mobile: 0 },
            letterSpacingUnit: "px"
          }
        });
      }
      if (!buttonTypography) {
        setAttributes({
          buttonTypography: {
            fontFamily: "",
            fontSize: { desktop: 16, tablet: 16, mobile: 16 },
            fontSizeUnit: "px",
            fontWeight: "500",
            fontStyle: "normal",
            textTransform: "none",
            textDecoration: "none",
            lineHeight: { desktop: 1.5, tablet: 1.5, mobile: 1.5 },
            lineHeightUnit: "em",
            letterSpacing: { desktop: 0, tablet: 0, mobile: 0 },
            letterSpacingUnit: "px"
          }
        });
      }
      if (!boxShadowHover) {
        setAttributes({
          boxShadowHover: {
            enable: false,
            color: "rgba(0, 0, 0, 0.2)",
            horizontal: 0,
            vertical: 0,
            blur: 0,
            spread: 0,
            position: "outset"
          }
        });
      }
    }, [buttons, titleTypography, contentTypography, buttonTypography, boxShadowHover, setAttributes]);
    const previewTimeoutRef = useRef3(null);
    useEffect6(() => {
      if (animation && animation !== "none") {
        const timeoutId = setTimeout(() => {
          animationPreview4(id, animation, animations4, previewTimeoutRef);
        }, 100);
        return () => clearTimeout(timeoutId);
      }
    }, [animation]);
    const handlePreviewClick = () => {
      animationPreview4(id, animation, animations4, previewTimeoutRef);
    };
    const borderStyleOptions = [
      { label: __8("None", "digiblocks"), value: "none" },
      { label: __8("Solid", "digiblocks"), value: "solid" },
      { label: __8("Dotted", "digiblocks"), value: "dotted" },
      { label: __8("Dashed", "digiblocks"), value: "dashed" },
      { label: __8("Double", "digiblocks"), value: "double" },
      { label: __8("Groove", "digiblocks"), value: "groove" },
      { label: __8("Ridge", "digiblocks"), value: "ridge" },
      { label: __8("Inset", "digiblocks"), value: "inset" },
      { label: __8("Outset", "digiblocks"), value: "outset" }
    ];
    const animationOptions = [
      { label: __8("None", "digiblocks"), value: "none" },
      ...Object.keys(animations4).map((animation2) => ({
        label: animation2.replace(/-/g, " ").replace(/\b\w/g, (l) => l.toUpperCase()),
        value: animation2
      }))
    ];
    const styleOptions = [
      { label: __8("Basic", "digiblocks"), value: "basic" },
      { label: __8("Split", "digiblocks"), value: "split" },
      { label: __8("Cover", "digiblocks"), value: "cover" },
      { label: __8("Box", "digiblocks"), value: "box" },
      { label: __8("Modern", "digiblocks"), value: "modern" },
      { label: __8("Gradient", "digiblocks"), value: "gradient" },
      { label: __8("Minimal", "digiblocks"), value: "minimal" },
      { label: __8("Callout", "digiblocks"), value: "callout" },
      { label: __8("Banner", "digiblocks"), value: "banner" }
    ];
    const headingTagOptions = [
      { label: "H1", value: "h1" },
      { label: "H2", value: "h2" },
      { label: "H3", value: "h3" },
      { label: "H4", value: "h4" },
      { label: "H5", value: "h5" },
      { label: "H6", value: "h6" }
    ];
    const backgroundTypeOptions = [
      { label: __8("Color", "digiblocks"), value: "color" },
      { label: __8("Image", "digiblocks"), value: "image" },
      { label: __8("Gradient", "digiblocks"), value: "gradient" }
    ];
    const backgroundPositionOptions = [
      { label: __8("Center Center", "digiblocks"), value: "center center" },
      { label: __8("Center Top", "digiblocks"), value: "center top" },
      { label: __8("Center Bottom", "digiblocks"), value: "center bottom" },
      { label: __8("Left Top", "digiblocks"), value: "left top" },
      { label: __8("Left Center", "digiblocks"), value: "left center" },
      { label: __8("Left Bottom", "digiblocks"), value: "left bottom" },
      { label: __8("Right Top", "digiblocks"), value: "right top" },
      { label: __8("Right Center", "digiblocks"), value: "right center" },
      { label: __8("Right Bottom", "digiblocks"), value: "right bottom" }
    ];
    const backgroundSizeOptions = [
      { label: __8("Cover", "digiblocks"), value: "cover" },
      { label: __8("Contain", "digiblocks"), value: "contain" },
      { label: __8("Auto", "digiblocks"), value: "auto" }
    ];
    const backgroundRepeatOptions = [
      { label: __8("No Repeat", "digiblocks"), value: "no-repeat" },
      { label: __8("Repeat", "digiblocks"), value: "repeat" },
      { label: __8("Repeat X", "digiblocks"), value: "repeat-x" },
      { label: __8("Repeat Y", "digiblocks"), value: "repeat-y" }
    ];
    const buttonsAlignOptions = [
      { label: __8("Left", "digiblocks"), value: "left" },
      { label: __8("Center", "digiblocks"), value: "center" },
      { label: __8("Right", "digiblocks"), value: "right" }
    ];
    const verticalAlignOptions = [
      { label: __8("Top", "digiblocks"), value: "flex-start" },
      { label: __8("Center", "digiblocks"), value: "center" },
      { label: __8("Bottom", "digiblocks"), value: "flex-end" }
    ];
    const highlightTypeOptions = [
      { label: __8("None", "digiblocks"), value: "none" },
      { label: __8("Background", "digiblocks"), value: "background" },
      { label: __8("Text", "digiblocks"), value: "text" },
      { label: __8("Underline", "digiblocks"), value: "underline" }
    ];
    const DEFAULT_IMAGE_SIZE = { width: 300, height: 200 };
    const tabList = [
      {
        name: "options",
        title: __8("Options", "digiblocks"),
        icon: tabIcons6.optionsIcon
      },
      {
        name: "style",
        title: __8("Style", "digiblocks"),
        icon: tabIcons6.styleIcon
      },
      {
        name: "advanced",
        title: __8("Advanced", "digiblocks"),
        icon: tabIcons6.advancedIcon
      }
    ];
    const stateTabList = [
      {
        name: "normal",
        title: __8("Normal", "digiblocks"),
        className: "digiblocks-tab-1 normal"
      },
      {
        name: "hover",
        title: __8("Hover", "digiblocks"),
        className: "digiblocks-tab-2 hover"
      }
    ];
    const addButton = () => {
      const newButtonId = `button-${buttons.length + 1}`;
      const newButtons = [...buttons, {
        id: newButtonId,
        text: __8("Click Here", "digiblocks"),
        url: "#",
        openInNewTab: false,
        rel: "",
        isPrimary: false,
        isFullWidth: false,
        customColors: false,
        backgroundColor: "",
        textColor: "",
        hoverBackgroundColor: "",
        hoverTextColor: "",
        borderRadius: ""
      }];
      setAttributes({ buttons: newButtons });
    };
    const removeButton = (buttonId) => {
      const newButtons = buttons.filter((button) => button.id !== buttonId);
      setAttributes({ buttons: newButtons });
    };
    const updateButton = (buttonId, property, value) => {
      const newButtons = buttons.map((button) => {
        if (button.id === buttonId) {
          return {
            ...button,
            [property]: value
          };
        }
        return button;
      });
      setAttributes({ buttons: newButtons });
    };
    const renderStylePreview = (styleOption) => {
      const isSelected = style === styleOption.value;
      const containerStyle = {
        display: "inline-flex",
        flexDirection: "column",
        width: "70px",
        height: "70px",
        margin: "5px",
        border: `1px solid ${isSelected ? "#007cba" : "#ddd"}`,
        backgroundColor: isSelected ? "rgba(0,124,186,0.1)" : "white",
        borderRadius: "4px",
        cursor: "pointer",
        overflow: "hidden",
        transition: "all 0.2s ease"
      };
      const labelStyle = {
        textAlign: "center",
        fontSize: "10px",
        padding: "3px 0",
        fontWeight: isSelected ? "500" : "normal",
        borderBottom: `1px solid ${isSelected ? "#e0e0e0" : "transparent"}`,
        backgroundColor: isSelected ? "rgba(0,124,186,0.05)" : "transparent"
      };
      const previewStyle = {
        flex: 1,
        display: "flex",
        justifyContent: "center",
        alignItems: "center",
        padding: "8px"
      };
      let previewContent = null;
      switch (styleOption.value) {
        case "basic":
          previewContent = /* @__PURE__ */ wp.element.createElement("div", { style: { width: "100%", height: "100%", display: "flex", flexDirection: "column", alignItems: "center", justifyContent: "center" } }, /* @__PURE__ */ wp.element.createElement("div", { style: { width: "80%", height: "4px", backgroundColor: "#333", marginBottom: "4px" } }), /* @__PURE__ */ wp.element.createElement("div", { style: { width: "60%", height: "2px", backgroundColor: "#777", marginBottom: "6px" } }), /* @__PURE__ */ wp.element.createElement("div", { style: { width: "40%", height: "6px", backgroundColor: "#007cba", borderRadius: "2px" } }));
          break;
        case "split":
          previewContent = /* @__PURE__ */ wp.element.createElement("div", { style: { width: "100%", height: "100%", display: "flex" } }, /* @__PURE__ */ wp.element.createElement("div", { style: { width: "50%", height: "100%", backgroundColor: "#007cba", display: "flex", alignItems: "center", justifyContent: "center" } }, /* @__PURE__ */ wp.element.createElement("div", { style: { width: "70%", height: "70%", backgroundColor: "#fff", opacity: 0.2 } })), /* @__PURE__ */ wp.element.createElement("div", { style: { width: "50%", height: "100%", backgroundColor: "#f5f5f5", display: "flex", flexDirection: "column", alignItems: "center", justifyContent: "center", padding: "2px" } }, /* @__PURE__ */ wp.element.createElement("div", { style: { width: "80%", height: "3px", backgroundColor: "#333", marginBottom: "2px" } }), /* @__PURE__ */ wp.element.createElement("div", { style: { width: "60%", height: "2px", backgroundColor: "#777", marginBottom: "3px" } }), /* @__PURE__ */ wp.element.createElement("div", { style: { width: "40%", height: "4px", backgroundColor: "#007cba", borderRadius: "2px" } })));
          break;
        case "cover":
          previewContent = /* @__PURE__ */ wp.element.createElement("div", { style: { width: "100%", height: "100%", backgroundColor: "#007cba", opacity: 0.7, display: "flex", flexDirection: "column", alignItems: "center", justifyContent: "center" } }, /* @__PURE__ */ wp.element.createElement("div", { style: { width: "70%", height: "3px", backgroundColor: "#fff", marginBottom: "3px" } }), /* @__PURE__ */ wp.element.createElement("div", { style: { width: "50%", height: "2px", backgroundColor: "#fff", marginBottom: "4px" } }), /* @__PURE__ */ wp.element.createElement("div", { style: { width: "30%", height: "4px", backgroundColor: "#fff", borderRadius: "2px" } }));
          break;
        case "box":
          previewContent = /* @__PURE__ */ wp.element.createElement("div", { style: { width: "90%", height: "90%", margin: "auto", border: "2px solid #007cba", borderRadius: "3px", display: "flex", flexDirection: "column", alignItems: "center", justifyContent: "center", padding: "3px" } }, /* @__PURE__ */ wp.element.createElement("div", { style: { width: "70%", height: "3px", backgroundColor: "#333", marginBottom: "3px" } }), /* @__PURE__ */ wp.element.createElement("div", { style: { width: "50%", height: "2px", backgroundColor: "#777", marginBottom: "4px" } }), /* @__PURE__ */ wp.element.createElement("div", { style: { width: "30%", height: "4px", backgroundColor: "#007cba", borderRadius: "2px" } }));
          break;
        case "modern":
          previewContent = /* @__PURE__ */ wp.element.createElement("div", { style: { width: "100%", height: "100%", display: "flex", flexDirection: "column", alignItems: "flex-start", justifyContent: "center", padding: "3px", position: "relative" } }, /* @__PURE__ */ wp.element.createElement("div", { style: { position: "absolute", left: "0", top: "20%", width: "5px", height: "60%", backgroundColor: "#007cba" } }), /* @__PURE__ */ wp.element.createElement("div", { style: { width: "70%", height: "3px", backgroundColor: "#333", marginBottom: "3px", marginLeft: "8px" } }), /* @__PURE__ */ wp.element.createElement("div", { style: { width: "50%", height: "2px", backgroundColor: "#777", marginBottom: "4px", marginLeft: "8px" } }), /* @__PURE__ */ wp.element.createElement("div", { style: { width: "30%", height: "4px", backgroundColor: "#007cba", borderRadius: "2px", marginLeft: "8px" } }));
          break;
        case "gradient":
          previewContent = /* @__PURE__ */ wp.element.createElement("div", { style: {
            width: "100%",
            height: "100%",
            background: "linear-gradient(135deg, #6a11cb 0%, #2575fc 100%)",
            display: "flex",
            flexDirection: "column",
            alignItems: "center",
            justifyContent: "center"
          } }, /* @__PURE__ */ wp.element.createElement("div", { style: { width: "70%", height: "3px", backgroundColor: "#fff", marginBottom: "3px" } }), /* @__PURE__ */ wp.element.createElement("div", { style: { width: "50%", height: "2px", backgroundColor: "#fff", marginBottom: "4px" } }), /* @__PURE__ */ wp.element.createElement("div", { style: { width: "30%", height: "4px", backgroundColor: "#fff", borderRadius: "2px" } }));
          break;
        case "minimal":
          previewContent = /* @__PURE__ */ wp.element.createElement("div", { style: { width: "100%", height: "100%", display: "flex", flexDirection: "column", alignItems: "center", justifyContent: "center", padding: "3px" } }, /* @__PURE__ */ wp.element.createElement("div", { style: { width: "70%", height: "3px", backgroundColor: "#333", marginBottom: "3px" } }), /* @__PURE__ */ wp.element.createElement("div", { style: { width: "50%", height: "2px", backgroundColor: "#777", marginBottom: "4px" } }), /* @__PURE__ */ wp.element.createElement("div", { style: { width: "30%", height: "1px", backgroundColor: "#007cba", marginBottom: "1px" } }), /* @__PURE__ */ wp.element.createElement("div", { style: { width: "30%", height: "4px", backgroundColor: "#007cba", borderRadius: "2px" } }));
          break;
        case "callout":
          previewContent = /* @__PURE__ */ wp.element.createElement("div", { style: {
            width: "100%",
            height: "100%",
            backgroundColor: "#fff",
            border: "1px solid #eee",
            borderLeft: "5px solid #007cba",
            display: "flex",
            flexDirection: "column",
            alignItems: "flex-start",
            justifyContent: "center",
            padding: "5px"
          } }, /* @__PURE__ */ wp.element.createElement("div", { style: { width: "70%", height: "3px", backgroundColor: "#333", marginBottom: "3px" } }), /* @__PURE__ */ wp.element.createElement("div", { style: { width: "50%", height: "2px", backgroundColor: "#777", marginBottom: "4px" } }), /* @__PURE__ */ wp.element.createElement("div", { style: { width: "30%", height: "4px", backgroundColor: "#007cba", borderRadius: "2px" } }));
          break;
        case "banner":
          previewContent = /* @__PURE__ */ wp.element.createElement("div", { style: {
            width: "100%",
            height: "100%",
            display: "flex",
            flexDirection: "column",
            backgroundColor: "#f0f7ff",
            position: "relative"
          } }, /* @__PURE__ */ wp.element.createElement("div", { style: { height: "4px", width: "100%", backgroundColor: "#007cba" } }), /* @__PURE__ */ wp.element.createElement("div", { style: { flex: 1, display: "flex", flexDirection: "column", alignItems: "center", justifyContent: "center", padding: "3px" } }, /* @__PURE__ */ wp.element.createElement("div", { style: { width: "70%", height: "3px", backgroundColor: "#333", marginBottom: "3px" } }), /* @__PURE__ */ wp.element.createElement("div", { style: { width: "50%", height: "2px", backgroundColor: "#777", marginBottom: "4px" } }), /* @__PURE__ */ wp.element.createElement("div", { style: { width: "30%", height: "4px", backgroundColor: "#007cba", borderRadius: "2px" } })));
          break;
        default:
          previewContent = /* @__PURE__ */ wp.element.createElement("div", { style: { width: "100%", height: "100%", display: "flex", flexDirection: "column", alignItems: "center", justifyContent: "center" } }, /* @__PURE__ */ wp.element.createElement("div", { style: { width: "80%", height: "4px", backgroundColor: "#333", marginBottom: "4px" } }), /* @__PURE__ */ wp.element.createElement("div", { style: { width: "60%", height: "2px", backgroundColor: "#777", marginBottom: "6px" } }), /* @__PURE__ */ wp.element.createElement("div", { style: { width: "40%", height: "6px", backgroundColor: "#007cba", borderRadius: "2px" } }));
      }
      return /* @__PURE__ */ wp.element.createElement("div", { style: containerStyle, onClick: () => setAttributes({ style: styleOption.value }) }, /* @__PURE__ */ wp.element.createElement("div", { style: labelStyle }, styleOption.label), /* @__PURE__ */ wp.element.createElement("div", { style: previewStyle }, previewContent));
    };
    const generateCSS = () => {
      const activeDevice = window.digi.responsiveState.activeDevice;
      let borderCSS = "";
      if (borderStyle && borderStyle !== "none") {
        const borderWidthCSS = getDimensionCSS4(borderWidth, "border-width", activeDevice);
        const borderWidthOutput = borderWidthCSS || "border-width: 1px 1px 1px 1px;";
        borderCSS = `
				border-style: ${borderStyle};
				border-color: ${borderColor || "#e0e0e0"};
				${borderWidthOutput}
			`;
      } else {
        borderCSS = "border-style: none;";
      }
      let boxShadowCSS = "box-shadow: none;";
      if (boxShadow && boxShadow.enable) {
        const inset = boxShadow.position === "inset" ? "inset " : "";
        boxShadowCSS = `box-shadow: ${inset}${boxShadow.horizontal}px ${boxShadow.vertical}px ${boxShadow.blur}px ${boxShadow.spread}px ${boxShadow.color};`;
      }
      let backgroundCSS = "";
      if (backgroundType === "color") {
        backgroundCSS = `background-color: ${backgroundColor || "#f5f5f5"};`;
      } else if (backgroundType === "image" && backgroundImage && backgroundImage.url) {
        backgroundCSS = `
                background-image: url(${backgroundImage.url});
                background-position: ${backgroundPosition || "center center"};
                background-size: ${backgroundSize || "cover"};
                background-repeat: ${backgroundRepeat || "no-repeat"};
            `;
      } else if (backgroundType === "gradient") {
        backgroundCSS = `background: linear-gradient(135deg, ${backgroundColor || "#6a11cb"} 0%, ${backgroundHoverColor || "#2575fc"} 100%);`;
      }
      const minHeightCSS = minHeight && minHeight[activeDevice] ? `min-height: ${minHeight[activeDevice]}px;` : "";
      let titleTypographyCSS = "";
      if (titleTypography) {
        if (titleTypography.fontFamily) {
          titleTypographyCSS += `font-family: ${titleTypography.fontFamily};`;
        }
        if (titleTypography.fontSize && titleTypography.fontSize[activeDevice]) {
          titleTypographyCSS += `font-size: ${titleTypography.fontSize[activeDevice]}${titleTypography.fontSizeUnit || "px"};`;
        }
        if (titleTypography.fontWeight) {
          titleTypographyCSS += `font-weight: ${titleTypography.fontWeight};`;
        }
        if (titleTypography.fontStyle) {
          titleTypographyCSS += `font-style: ${titleTypography.fontStyle};`;
        }
        if (titleTypography.textTransform) {
          titleTypographyCSS += `text-transform: ${titleTypography.textTransform};`;
        }
        if (titleTypography.textDecoration) {
          titleTypographyCSS += `text-decoration: ${titleTypography.textDecoration};`;
        }
        if (titleTypography.lineHeight && titleTypography.lineHeight[activeDevice]) {
          titleTypographyCSS += `line-height: ${titleTypography.lineHeight[activeDevice]}${titleTypography.lineHeightUnit || "em"};`;
        }
        if (titleTypography.letterSpacing && titleTypography.letterSpacing[activeDevice]) {
          titleTypographyCSS += `letter-spacing: ${titleTypography.letterSpacing[activeDevice]}${titleTypography.letterSpacingUnit || "px"};`;
        }
      }
      let contentTypographyCSS = "";
      if (contentTypography) {
        if (contentTypography.fontFamily) {
          contentTypographyCSS += `font-family: ${contentTypography.fontFamily};`;
        }
        if (contentTypography.fontSize && contentTypography.fontSize[activeDevice]) {
          contentTypographyCSS += `font-size: ${contentTypography.fontSize[activeDevice]}${contentTypography.fontSizeUnit || "px"};`;
        }
        if (contentTypography.fontWeight) {
          contentTypographyCSS += `font-weight: ${contentTypography.fontWeight};`;
        }
        if (contentTypography.fontStyle) {
          contentTypographyCSS += `font-style: ${contentTypography.fontStyle};`;
        }
        if (contentTypography.textTransform) {
          contentTypographyCSS += `text-transform: ${contentTypography.textTransform};`;
        }
        if (contentTypography.textDecoration) {
          contentTypographyCSS += `text-decoration: ${contentTypography.textDecoration};`;
        }
        if (contentTypography.lineHeight && contentTypography.lineHeight[activeDevice]) {
          contentTypographyCSS += `line-height: ${contentTypography.lineHeight[activeDevice]}${contentTypography.lineHeightUnit || "em"};`;
        }
        if (contentTypography.letterSpacing && contentTypography.letterSpacing[activeDevice]) {
          contentTypographyCSS += `letter-spacing: ${contentTypography.letterSpacing[activeDevice]}${contentTypography.letterSpacingUnit || "px"};`;
        }
      }
      let buttonTypographyCSS = "";
      if (buttonTypography) {
        if (buttonTypography.fontFamily) {
          buttonTypographyCSS += `font-family: ${buttonTypography.fontFamily};`;
        }
        if (buttonTypography.fontSize && buttonTypography.fontSize[activeDevice]) {
          buttonTypographyCSS += `font-size: ${buttonTypography.fontSize[activeDevice]}${buttonTypography.fontSizeUnit || "px"};`;
        }
        if (buttonTypography.fontWeight) {
          buttonTypographyCSS += `font-weight: ${buttonTypography.fontWeight};`;
        }
        if (buttonTypography.fontStyle) {
          buttonTypographyCSS += `font-style: ${buttonTypography.fontStyle};`;
        }
        if (buttonTypography.textTransform) {
          buttonTypographyCSS += `text-transform: ${buttonTypography.textTransform};`;
        }
        if (buttonTypography.textDecoration) {
          buttonTypographyCSS += `text-decoration: ${buttonTypography.textDecoration};`;
        }
        if (buttonTypography.lineHeight && buttonTypography.lineHeight[activeDevice]) {
          buttonTypographyCSS += `line-height: ${buttonTypography.lineHeight[activeDevice]}${buttonTypography.lineHeightUnit || "em"};`;
        }
        if (buttonTypography.letterSpacing && buttonTypography.letterSpacing[activeDevice]) {
          buttonTypographyCSS += `letter-spacing: ${buttonTypography.letterSpacing[activeDevice]}${buttonTypography.letterSpacingUnit || "px"};`;
        }
      }
      const contentWidthCSS = contentWidth ? `max-width: ${contentWidth}${typeof contentWidth === "number" ? "%" : ""};` : "";
      const widthCSS = width ? `width: ${width}${typeof width === "number" ? "px" : ""};` : "width: 100%;";
      const textAlignCSS = align ? `text-align: ${align};` : "";
      const verticalAlignCSS = verticalAlign ? `justify-content: ${verticalAlign};` : "justify-content: center;";
      const buttonsAlignCSS = buttonsAlign ? `text-align: ${buttonsAlign};` : "text-align: left;";
      const mobileReverseCSS = reverseColumnsMobile ? "@media (max-width: 767px) { ." + id + ' .digiblocks-cta-split-container { flex-direction: column-reverse; } } body[data-digiblocks-device="mobile"] .' + id + " .digiblocks-cta-split-container { flex-direction: column-reverse; }" : "";
      let highlightCSS = "";
      if (highlightText && highlightType && highlightType !== "none" && highlightColor) {
        switch (highlightType) {
          case "background":
            highlightCSS = `
                        .${id} .digiblocks-cta-highlight {
                            background-color: ${highlightColor};
                            padding: 0 5px;
                            border-radius: 3px;
                        }
                    `;
            break;
          case "text":
            highlightCSS = `
                        .${id} .digiblocks-cta-highlight {
                            color: ${highlightColor};
                        }
                    `;
            break;
          case "underline":
            highlightCSS = `
                        .${id} .digiblocks-cta-highlight {
                            border-bottom: 2px solid ${highlightColor};
                            padding-bottom: 2px;
                        }
                    `;
            break;
        }
      }
      let styleSpecificCSS = "";
      switch (style) {
        case "split":
          styleSpecificCSS = `
                    .${id} {
                        padding: 0;
                    }
                    
                    .${id} .digiblocks-cta-split-container {
                        display: flex;
                        align-items: stretch;
                        min-height: inherit;
                    }
                    
                    .${id} .digiblocks-cta-image-container {
                        flex: 1;
                        min-height: 300px;
                        background-image: url(${backgroundImage?.url || ""});
                        background-position: ${backgroundPosition || "center center"};
                        background-size: ${backgroundSize || "cover"};
                        background-repeat: ${backgroundRepeat || "no-repeat"};
                    }
                    
                    .${id} .digiblocks-cta-content-container {
                        flex: 1;
                        ${getDimensionCSS4(padding, "padding", activeDevice)}
                        ${backgroundColor ? `background-color: ${backgroundColor};` : ""}
                        display: flex;
                        flex-direction: column;
                        ${verticalAlignCSS}
                    }

					@media (max-width: 767px) {
                        .${id} .digiblocks-cta-split-container {
                            flex-direction: column;
                        }
                        
                        .${id} .digiblocks-cta-image-container {
                            min-height: 200px;
                        }
                    }
                `;
          break;
        case "cover":
          styleSpecificCSS = `
                    .${id} {
                        position: relative;
                        z-index: 1;
                        color: #fff;
                        display: flex;
                        flex-direction: column;
                        justify-content: center;
                    }
                    
                    .${id} .digiblocks-cta-background {
                        position: absolute;
                        top: 0;
                        left: 0;
                        width: 100%;
                        height: 100%;
                        z-index: -1;
                        ${backgroundCSS}
                    }
                    
                    .${id} .digiblocks-cta-overlay {
                        position: absolute;
                        top: 0;
                        left: 0;
                        width: 100%;
                        height: 100%;
                        z-index: -1;
                        background-color: ${backgroundOverlayColor || "rgba(0,0,0,0.5)"};
                        opacity: ${backgroundOverlayOpacity !== void 0 ? backgroundOverlayOpacity / 100 : 0.5};
                    }
                    
                    .${id} .digiblocks-cta-title {
                        color: ${titleColor || "#fff"};
                    }
                    
                    .${id} .digiblocks-cta-content {
						color: ${textColor || "rgba(255, 255, 255, 0.9)"};
                    }
                    
                    .${id} .digiblocks-cta-button {
                        border: 2px solid #fff;
                        color: #fff;
                        background-color: transparent;
                    }
                    
                    .${id} .digiblocks-cta-button.is-primary {
                        background-color: #fff;
                        color: #000;
                    }
                    
                    .${id} .digiblocks-cta-button:hover {
                        background-color: #fff;
                        color: #000;
                    }
                    
                    .${id} .digiblocks-cta-button.is-primary:hover {
                        background-color: transparent;
                        color: #fff;
                    }
                `;
          break;
        case "box":
          styleSpecificCSS = `
                    .${id} {
                        border: 2px solid ${borderColor || "#e0e0e0"};
                        border-radius: 8px;
                        box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
                    }
                `;
          break;
        case "modern":
          styleSpecificCSS = `
                    .${id} {
                        position: relative;
                        padding-left: 50px;
                    }
                    
                    .${id}:before {
                        content: '';
                        position: absolute;
                        left: 0;
                        top: 20%;
                        height: 60%;
                        width: 8px;
                        background-color: ${buttonColor || "#1e73be"};
                        border-radius: 4px;
                    }
                `;
          break;
        case "gradient":
          styleSpecificCSS = `
                    .${id} {
                        background: linear-gradient(135deg, ${backgroundColor || "#6a11cb"} 0%, ${backgroundHoverColor || "#2575fc"} 100%);
                        color: #fff;
                        border-radius: 10px;
                    }
                    
                    .${id} .digiblocks-cta-title {
                        color: ${titleColor || "#fff"};
                    }
                    
                    .${id} .digiblocks-cta-content {
						color: ${textColor || "rgba(255, 255, 255, 0.9)"};
                    }
                    
                    .${id} .digiblocks-cta-button {
                        border: 2px solid #fff;
                        color: #fff;
                        background-color: transparent;
                    }
                    
                    .${id} .digiblocks-cta-button.is-primary {
                        background-color: #fff;
                        color: #000;
                    }
                    
                    .${id} .digiblocks-cta-button:hover {
                        background-color: #fff;
                        color: #000;
                    }
                    
                    .${id} .digiblocks-cta-button.is-primary:hover {
                        background-color: transparent;
                        color: #fff;
                    }
                `;
          break;
        case "minimal":
          styleSpecificCSS = `
                    .${id} {
                        border-top: 1px solid #eee;
                        border-bottom: 1px solid #eee;
                        padding-top: 50px;
                        padding-bottom: 50px;
                    }
                    
                    .${id} .digiblocks-cta-buttons {
                        position: relative;
                    }
                    
                    .${id} .digiblocks-cta-buttons:before {
                        content: '';
                        position: absolute;
                        top: -20px;
                        left: 0;
                        width: 50px;
                        height: 2px;
                        background-color: ${buttonColor || "#1e73be"};
                    }
                `;
          break;
        case "callout":
          styleSpecificCSS = `
                    .${id} {
                        border-left: 5px solid ${buttonColor || "#1e73be"};
                        background-color: ${backgroundColor || "#f5f5f5"};
                        padding: 30px;
                        position: relative;
                        border-radius: 0 4px 4px 0;
                    }
                    
                    .${id}:before {
                        content: '';
                        position: absolute;
                        top: 0;
                        bottom: 0;
                        left: 0;
                        width: 5px;
                        background-color: ${buttonColor || "#1e73be"};
                        border-radius: 4px 0 0 4px;
                    }
                    
                    .${id} .digiblocks-cta-title {
                        color: ${titleColor || "#333"};
                        margin-bottom: 15px;
                    }
                    
                    .${id} .digiblocks-cta-content {
                        color: ${textColor || "#666"};
                        margin-bottom: 20px;
                    }
                `;
          break;
        case "banner":
          styleSpecificCSS = `
                    .${id} {
                        position: relative;
                        padding: 30px;
                        background-color: ${backgroundColor || "#f0f7ff"};
                        border-radius: 0;
                        overflow: visible;
                    }
                    
                    .${id}:before {
                        content: '';
                        position: absolute;
                        top: 0;
                        left: 0;
                        right: 0;
                        height: 4px;
                        background-color: ${buttonColor || "#1e73be"};
                    }
                    
                    .${id} .digiblocks-cta-title {
                        color: ${titleColor || "#333"};
                        margin-bottom: 15px;
                    }
                    
                    .${id} .digiblocks-cta-content {
                        color: ${textColor || "#666"};
                        margin-bottom: 20px;
                    }
                    
                    .${id} .digiblocks-cta-button {
                        background-color: ${buttonColor || "#1e73be"};
                        color: ${buttonTextColor || "#fff"};
                        border-radius: 4px;
                        padding: 10px 20px;
                        transition: all 0.3s ease;
                    }
                    
                    .${id} .digiblocks-cta-button:hover {
                        transform: translateY(-2px);
                        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
                    }
                `;
          break;
        default:
          styleSpecificCSS = "";
      }
      let horizontalLayoutCSS = "";
      if (horizontalLayout) {
        highlightCSS = `
				.${id} .digiblocks-cta-horizontal {
					display: flex;
					align-items: center;
					justify-content: space-between;
					gap: 2rem;
					width: 100%;
				}
				
				.${id} .digiblocks-cta-horizontal .digiblocks-cta-content-wrapper {
					flex: 1;
				}
				
				.${id} .digiblocks-cta-horizontal .digiblocks-cta-buttons {
					flex-shrink: 0;
				}
				
				/* Responsive styles for horizontal layout */
				@media (max-width: 767px) {
					.${id} .digiblocks-cta-horizontal {
						flex-direction: column;
						align-items: ${align === "center" ? "center" : align === "right" ? "flex-end" : "flex-start"};
						gap: 1rem;
					}
					
					.${id} .digiblocks-cta-horizontal .digiblocks-cta-content-wrapper {
						width: 100%;
						text-align: ${align};
					}
				}

				body[data-digiblocks-device="mobile"] .${id} .digiblocks-cta-horizontal {
					flex-direction: column;
					align-items: ${align === "center" ? "center" : align === "right" ? "flex-end" : "flex-start"};
					gap: 1rem;
				}
				
				body[data-digiblocks-device="mobile"] .${id} .digiblocks-cta-horizontal .digiblocks-cta-content-wrapper {
					width: 100%;
					text-align: ${align};
				}
			`;
      }
      const titleWithHighlightCSS = highlightText && highlightType && highlightType !== "none" ? `
            .${id} .digiblocks-cta-title {
                white-space: pre-wrap;
            }
        ` : "";
      let hoverCSS = `
            .${id} .digiblocks-cta-title {
                transition: color 0.3s ease;
            }
            
            .${id} .digiblocks-cta-content {
                transition: color 0.3s ease;
            }
            
            .${id}:hover .digiblocks-cta-title {
                ${titleHoverColor ? `color: ${titleHoverColor};` : ""}
            }
            
            .${id}:hover .digiblocks-cta-content {
                ${textHoverColor ? `color: ${textHoverColor};` : ""}
            }
            
            .${id}:hover {
                ${backgroundHoverColor && style !== "gradient" && style !== "split" ? `background-color: ${backgroundHoverColor};` : ""}
                
                ${boxShadowHover && boxShadowHover.enable ? `
                    ${boxShadowHover.position === "inset" ? "box-shadow: inset" : "box-shadow:"} 
                    ${boxShadowHover.horizontal}px 
                    ${boxShadowHover.vertical}px 
                    ${boxShadowHover.blur}px 
                    ${boxShadowHover.spread}px 
                    ${boxShadowHover.color};` : ""}
            }
            
            .${id} .digiblocks-cta-button {
                transition: all 0.3s ease;
            }
            
            .${id} .digiblocks-cta-button:hover {
                ${buttonHoverColor ? `background-color: ${buttonHoverColor};` : ""}
                ${buttonTextHoverColor ? `color: ${buttonTextHoverColor};` : ""}
            }
        `;
      return `
            /* Call to Action Block - ${id} */
            .${id} {
                ${style !== "split" ? backgroundCSS : ""}
                ${borderCSS}
				${getDimensionCSS4(borderRadius, "border-radius", activeDevice)}
                ${boxShadowCSS}
                ${style !== "split" ? `${getDimensionCSS4(padding, "padding", activeDevice)}` : ""}
                ${getDimensionCSS4(margin, "margin", activeDevice)}
                ${widthCSS}
                ${minHeightCSS}
                transition: all 0.3s ease;
                position: relative;
                overflow: hidden;
            }
            
            .${id} .digiblocks-cta-container {
                ${contentWidthCSS}
                margin: 0 auto;
                ${style !== "split" ? textAlignCSS : ""}
            }
            
            .${id} .digiblocks-cta-title {
                color: ${titleColor || "#333333"};
                margin-top: 0;
                margin-bottom: 20px;
                ${titleTypographyCSS}
            }
            
            .${id} .digiblocks-cta-content {
                color: ${textColor || "#666666"};
                margin-bottom: 30px;
                ${contentTypographyCSS}
            }
            
            .${id} .digiblocks-cta-buttons {
                ${buttonsAlignCSS}
                display: flex;
                flex-wrap: wrap;
                gap: 10px;
                ${buttonsAlign === "center" ? "justify-content: center;" : buttonsAlign === "right" ? "justify-content: flex-end;" : "justify-content: flex-start;"}
            }
            
            .${id} .digiblocks-cta-button {
                display: inline-flex;
                align-items: center;
                justify-content: center;
                text-decoration: none;
                border: none;
                cursor: pointer;
                background-color: ${buttonColor || "#1e73be"};
                color: ${buttonTextColor || "#ffffff"};
                ${getDimensionCSS4(buttonPadding, "padding", activeDevice)}
                ${getDimensionCSS4(buttonBorderRadius, "border-radius", activeDevice)}
                ${buttonTypographyCSS}
            }
            
            .${id} .digiblocks-cta-button.is-full-width {
                width: 100%;
            }
            
            .${id} .digiblocks-cta-button:not(.is-primary) {
                background-color: transparent;
                color: ${buttonColor || "#1e73be"};
                border: 2px solid ${buttonColor || "#1e73be"};
            }
            
            ${styleSpecificCSS}
            ${horizontalLayoutCSS}
            ${highlightCSS}
            ${titleWithHighlightCSS}
            ${hoverCSS}
            ${mobileReverseCSS}
            
            /* Responsive styles */
			@media (max-width: 991px) {
                .${id} {
                    ${style !== "split" ? `${getDimensionCSS4(padding, "padding", "tablet")}` : ""}
                    
					${getDimensionCSS4(margin, "margin", "tablet")}
                    
                    ${minHeight && minHeight["tablet"] ? `min-height: ${minHeight["tablet"]}px;` : ""}
                    
                    ${borderStyle && borderStyle !== "none" ? borderWidth && borderWidth["tablet"] ? `${getDimensionCSS4(borderWidth, "border-width", "tablet")}` : "" : ""}
                    
                    ${borderStyle && borderStyle !== "none" ? borderRadius && borderRadius["tablet"] ? `${getDimensionCSS4(borderRadius, "border-radius", "tablet")}` : "" : ""}
                }
                
                .${id} .digiblocks-cta-title {
                    ${titleTypography && titleTypography.fontSize && titleTypography.fontSize["tablet"] ? `font-size: ${titleTypography.fontSize["tablet"]}${titleTypography.fontSizeUnit || "px"};` : ""}
                    
                    ${titleTypography && titleTypography.lineHeight && titleTypography.lineHeight["tablet"] ? `line-height: ${titleTypography.lineHeight["tablet"]}${titleTypography.lineHeightUnit || "em"};` : ""}
                    
                    ${titleTypography && titleTypography.letterSpacing && titleTypography.letterSpacing["tablet"] ? `letter-spacing: ${titleTypography.letterSpacing["tablet"]}${titleTypography.letterSpacingUnit || "px"};` : ""}
                }
                
                .${id} .digiblocks-cta-content {
                    ${contentTypography && contentTypography.fontSize && contentTypography.fontSize["tablet"] ? `font-size: ${contentTypography.fontSize["tablet"]}${contentTypography.fontSizeUnit || "px"};` : ""}
                    
                    ${contentTypography && contentTypography.lineHeight && contentTypography.lineHeight["tablet"] ? `line-height: ${contentTypography.lineHeight["tablet"]}${contentTypography.lineHeightUnit || "em"};` : ""}
                    
                    ${contentTypography && contentTypography.letterSpacing && contentTypography.letterSpacing["tablet"] ? `letter-spacing: ${contentTypography.letterSpacing["tablet"]}${contentTypography.letterSpacingUnit || "px"};` : ""}
                }
                
                .${id} .digiblocks-cta-button {
                    ${buttonTypography && buttonTypography.fontSize && buttonTypography.fontSize["tablet"] ? `font-size: ${buttonTypography.fontSize["tablet"]}${buttonTypography.fontSizeUnit || "px"};` : ""}

					${getDimensionCSS4(buttonPadding, "padding", "tablet")}
					${getDimensionCSS4(buttonBorderRadius, "border-radius", "tablet")}
                }
            }

			body[data-digiblocks-device="tablet"] .${id} {
				${style !== "split" ? `${getDimensionCSS4(padding, "padding", "tablet")}` : ""}

				${getDimensionCSS4(margin, "margin", "tablet")}
				
				${minHeight && minHeight["tablet"] ? `min-height: ${minHeight["tablet"]}px;` : ""}
				
				${borderStyle && borderStyle !== "none" ? borderWidth && borderWidth["tablet"] ? `${getDimensionCSS4(borderWidth, "border-width", "tablet")}` : "" : ""}
				
				${getDimensionCSS4(borderRadius, "border-radius", "tablet")}
			}
			
			body[data-digiblocks-device="tablet"] .${id} .digiblocks-cta-title {
				${titleTypography && titleTypography.fontSize && titleTypography.fontSize["tablet"] ? `font-size: ${titleTypography.fontSize["tablet"]}${titleTypography.fontSizeUnit || "px"};` : ""}
				
				${titleTypography && titleTypography.lineHeight && titleTypography.lineHeight["tablet"] ? `line-height: ${titleTypography.lineHeight["tablet"]}${titleTypography.lineHeightUnit || "em"};` : ""}
				
				${titleTypography && titleTypography.letterSpacing && titleTypography.letterSpacing["tablet"] ? `letter-spacing: ${titleTypography.letterSpacing["tablet"]}${titleTypography.letterSpacingUnit || "px"};` : ""}
			}
			
			body[data-digiblocks-device="tablet"] .${id} .digiblocks-cta-content {
				${contentTypography && contentTypography.fontSize && contentTypography.fontSize["tablet"] ? `font-size: ${contentTypography.fontSize["tablet"]}${contentTypography.fontSizeUnit || "px"};` : ""}
				
				${contentTypography && contentTypography.lineHeight && contentTypography.lineHeight["tablet"] ? `line-height: ${contentTypography.lineHeight["tablet"]}${contentTypography.lineHeightUnit || "em"};` : ""}
				
				${contentTypography && contentTypography.letterSpacing && contentTypography.letterSpacing["tablet"] ? `letter-spacing: ${contentTypography.letterSpacing["tablet"]}${contentTypography.letterSpacingUnit || "px"};` : ""}
			}
			
			body[data-digiblocks-device="tablet"] .${id} .digiblocks-cta-button {
				${buttonTypography && buttonTypography.fontSize && buttonTypography.fontSize["tablet"] ? `font-size: ${buttonTypography.fontSize["tablet"]}${buttonTypography.fontSizeUnit || "px"};` : ""}

				${getDimensionCSS4(buttonPadding, "padding", "tablet")}
				${getDimensionCSS4(buttonBorderRadius, "border-radius", "tablet")}
			}

			@media (max-width: 767px) {
                .${id} {
					${style !== "split" ? `${getDimensionCSS4(padding, "padding", "mobile")}` : ""}

					${getDimensionCSS4(margin, "margin", "mobile")}
					
					${minHeight && minHeight["mobile"] ? `min-height: ${minHeight["mobile"]}px;` : ""}
					
					${borderStyle && borderStyle !== "none" ? borderWidth && borderWidth["mobile"] ? `${getDimensionCSS4(borderWidth, "border-width", "mobile")}` : "" : ""}
					
					${getDimensionCSS4(borderRadius, "border-radius", "mobile")}
                }
                
                ${style === "split" ? `.${id} .digiblocks-cta-split-container {
                        flex-direction: ${reverseColumnsMobile ? "column-reverse" : "column"};
                    }
                    
                    .${id} .digiblocks-cta-image-container {
                        min-height: 200px;
                    }
                    
                    .${id} .digiblocks-cta-content-container {
                        ${getDimensionCSS4(padding, "padding", "mobile")}
                    }` : ""}
                
                .${id} .digiblocks-cta-title {
                    ${titleTypography && titleTypography.fontSize && titleTypography.fontSize["mobile"] ? `font-size: ${titleTypography.fontSize["mobile"]}${titleTypography.fontSizeUnit || "px"};` : ""}
                    
                    ${titleTypography && titleTypography.lineHeight && titleTypography.lineHeight["mobile"] ? `line-height: ${titleTypography.lineHeight["mobile"]}${titleTypography.lineHeightUnit || "em"};` : ""}
                    
                    ${titleTypography && titleTypography.letterSpacing && titleTypography.letterSpacing["mobile"] ? `letter-spacing: ${titleTypography.letterSpacing["mobile"]}${titleTypography.letterSpacingUnit || "px"};` : ""}
                }
                
                .${id} .digiblocks-cta-content {
                    ${contentTypography && contentTypography.fontSize && contentTypography.fontSize["mobile"] ? `font-size: ${contentTypography.fontSize["mobile"]}${contentTypography.fontSizeUnit || "px"};` : ""}
                    
                    ${contentTypography && contentTypography.lineHeight && contentTypography.lineHeight["mobile"] ? `line-height: ${contentTypography.lineHeight["mobile"]}${contentTypography.lineHeightUnit || "em"};` : ""}
                    
                    ${contentTypography && contentTypography.letterSpacing && contentTypography.letterSpacing["mobile"] ? `letter-spacing: ${contentTypography.letterSpacing["mobile"]}${contentTypography.letterSpacingUnit || "px"};` : ""}
                }
                
                .${id} .digiblocks-cta-button {
                    ${buttonTypography && buttonTypography.fontSize && buttonTypography.fontSize["mobile"] ? `font-size: ${buttonTypography.fontSize["mobile"]}${buttonTypography.fontSizeUnit || "px"};` : ""}
                    
					${getDimensionCSS4(buttonPadding, "padding", "mobile")}
					${getDimensionCSS4(buttonBorderRadius, "border-radius", "mobile")}
                }
                
                .${id} .digiblocks-cta-buttons {
                    flex-direction: column;
					gap: 10px;
                }
                
                .${id} .digiblocks-cta-button {
                    width: 100%;
                }
            }
			
			body[data-digiblocks-device="mobile"] .${id} {
				${style !== "split" ? `${getDimensionCSS4(padding, "padding", "mobile")}` : ""}
				
				${getDimensionCSS4(margin, "margin", "mobile")}
				
				${minHeight && minHeight["mobile"] ? `min-height: ${minHeight["mobile"]}px;` : ""}

				${borderStyle && borderStyle !== "none" ? borderWidth && borderWidth["mobile"] ? `${getDimensionCSS4(borderWidth, "border-width", "mobile")}` : "" : ""}
				
				${getDimensionCSS4(borderRadius, "border-radius", "mobile")}
			}
			
			${style === "split" ? `body[data-digiblocks-device="mobile"] .${id} .digiblocks-cta-split-container {
					flex-direction: ${reverseColumnsMobile ? "column-reverse" : "column"};
				}
				
				body[data-digiblocks-device="mobile"] .${id} .digiblocks-cta-image-container {
					min-height: 200px;
				}
				
				body[data-digiblocks-device="mobile"] .${id} .digiblocks-cta-content-container {
					${getDimensionCSS4(padding, "padding", "mobile")}
				}` : ""}
			
			body[data-digiblocks-device="mobile"] .${id} .digiblocks-cta-title {
				${titleTypography && titleTypography.fontSize && titleTypography.fontSize["mobile"] ? `font-size: ${titleTypography.fontSize["mobile"]}${titleTypography.fontSizeUnit || "px"};` : ""}
				
				${titleTypography && titleTypography.lineHeight && titleTypography.lineHeight["mobile"] ? `line-height: ${titleTypography.lineHeight["mobile"]}${titleTypography.lineHeightUnit || "em"};` : ""}
				
				${titleTypography && titleTypography.letterSpacing && titleTypography.letterSpacing["mobile"] ? `letter-spacing: ${titleTypography.letterSpacing["mobile"]}${titleTypography.letterSpacingUnit || "px"};` : ""}
			}
			
			body[data-digiblocks-device="mobile"] .${id} .digiblocks-cta-content {
				${contentTypography && contentTypography.fontSize && contentTypography.fontSize["mobile"] ? `font-size: ${contentTypography.fontSize["mobile"]}${contentTypography.fontSizeUnit || "px"};` : ""}
				
				${contentTypography && contentTypography.lineHeight && contentTypography.lineHeight["mobile"] ? `line-height: ${contentTypography.lineHeight["mobile"]}${contentTypography.lineHeightUnit || "em"};` : ""}
				
				${contentTypography && contentTypography.letterSpacing && contentTypography.letterSpacing["mobile"] ? `letter-spacing: ${contentTypography.letterSpacing["mobile"]}${contentTypography.letterSpacingUnit || "px"};` : ""}
			}
			
			body[data-digiblocks-device="mobile"] .${id} .digiblocks-cta-button {
				${buttonTypography && buttonTypography.fontSize && buttonTypography.fontSize["mobile"] ? `font-size: ${buttonTypography.fontSize["mobile"]}${buttonTypography.fontSizeUnit || "px"};` : ""}
				
				${getDimensionCSS4(buttonPadding, "padding", "mobile")}
				${getDimensionCSS4(buttonBorderRadius, "border-radius", "mobile")}				
			}
			
			body[data-digiblocks-device="mobile"] .${id} .digiblocks-cta-buttons {
				flex-direction: column;
				gap: 10px;
			}
			
			body[data-digiblocks-device="mobile"] .${id} .digiblocks-cta-button {
				width: 100%;
			}

			/* Change image for Split layout */
			.${id} .digiblocks-image-upload-container {
				position: relative;
				width: 100%;
				height: 100%;
				overflow: hidden;
			}
			
			.${id} .digiblocks-image-upload-container img {
				width: 100%;
				height: 100%;
				object-fit: cover;
				display: block;
				cursor: pointer;
				transition: transform 0.3s ease;
			}
			
			.${id} .digiblocks-image-upload-container:hover img {
				transform: scale(1.05);
			}
			
			.${id} .digiblocks-change-image-button {
				position: absolute;
				top: 0;
				bottom: 0;
				left: 0;
				right: 0;
				background-color: rgba(0, 0, 0, 0.5);
				color: white;
				padding: 8px 0;
				text-align: center;
				font-size: 12px;
				cursor: pointer;
				opacity: 0;
				transition: opacity 0.3s ease;
				border: none;
				width: 100%;
			}
			
			.${id} .digiblocks-image-upload-container:hover .digiblocks-change-image-button {
				opacity: 1;
			}
			
			.${id} .digiblocks-image-placeholder {
				width: 100%;
				height: 100%;
				display: flex;
				align-items: center;
				justify-content: center;
				background-color: #f0f0f0;
				color: #888;
				font-size: 14px;
				cursor: pointer;
				min-height: 300px;
			}

			/* Visibility Controls */
			${visibility.desktop ? `
				@media (min-width: 992px) {
					.${id} {
						opacity: 0.5 !important;
					}
				}
			` : ""}

			${visibility.tablet ? `
				@media (min-width: 768px) and (max-width: 991px) {
					.${id} {
						opacity: 0.5 !important;
					}
				}
			` : ""}

			${visibility.mobile ? `
				@media (max-width: 767px) {
					.${id} {
						opacity: 0.5 !important;
					}
				}
			` : ""}
        `;
    };
    const renderTitleWithHighlight = () => {
      if (!highlightText || !title)
        return title;
      const index = title.indexOf(highlightText);
      if (index === -1)
        return title;
      const before = title.substring(0, index);
      const highlight = title.substring(index, index + highlightText.length);
      const after = title.substring(index + highlightText.length);
      return /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, before, /* @__PURE__ */ wp.element.createElement("span", { className: "digiblocks-cta-highlight" }, highlight), after);
    };
    const renderButtonEditor = (button, index) => {
      return /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-button-editor", key: button.id, style: { marginBottom: "20px", padding: "15px", border: "1px solid #ddd", borderRadius: "5px" } }, /* @__PURE__ */ wp.element.createElement("div", { style: { display: "flex", justifyContent: "space-between", alignItems: "center", marginBottom: "15px" } }, /* @__PURE__ */ wp.element.createElement("h3", { style: { margin: 0 } }, __8("Button", "digiblocks"), " ", index + 1), buttons.length > 1 && /* @__PURE__ */ wp.element.createElement(
        Button5,
        {
          isDestructive: true,
          onClick: () => removeButton(button.id),
          icon: "trash"
        },
        __8("Remove", "digiblocks")
      )), /* @__PURE__ */ wp.element.createElement(
        TextControl,
        {
          label: __8("Button Text", "digiblocks"),
          value: button.text || "",
          onChange: (value) => updateButton(button.id, "text", value),
          __next40pxDefaultSize: true,
          __nextHasNoMarginBottom: true
        }
      ), /* @__PURE__ */ wp.element.createElement("div", { style: { marginTop: "10px" } }, /* @__PURE__ */ wp.element.createElement(
        TextControl,
        {
          label: __8("Button URL", "digiblocks"),
          value: button.url || "",
          onChange: (value) => updateButton(button.id, "url", value),
          __next40pxDefaultSize: true,
          __nextHasNoMarginBottom: true
        }
      )), /* @__PURE__ */ wp.element.createElement("div", { style: { marginTop: "15px" } }, /* @__PURE__ */ wp.element.createElement(
        ToggleControl6,
        {
          label: __8("Open in new tab", "digiblocks"),
          checked: button.openInNewTab || false,
          onChange: (value) => updateButton(button.id, "openInNewTab", value),
          __nextHasNoMarginBottom: true
        }
      ), /* @__PURE__ */ wp.element.createElement(
        ToggleControl6,
        {
          label: __8("Add noopener noreferrer", "digiblocks"),
          checked: !!button.rel,
          onChange: (value) => updateButton(button.id, "rel", value ? "noopener noreferrer" : ""),
          __nextHasNoMarginBottom: true
        }
      ), /* @__PURE__ */ wp.element.createElement(
        ToggleControl6,
        {
          label: __8("Primary Button", "digiblocks"),
          checked: button.isPrimary || false,
          onChange: (value) => updateButton(button.id, "isPrimary", value),
          __nextHasNoMarginBottom: true
        }
      ), /* @__PURE__ */ wp.element.createElement(
        ToggleControl6,
        {
          label: __8("Full Width Button", "digiblocks"),
          checked: button.isFullWidth || false,
          onChange: (value) => updateButton(button.id, "isFullWidth", value),
          __nextHasNoMarginBottom: true
        }
      ), /* @__PURE__ */ wp.element.createElement(
        ToggleControl6,
        {
          label: __8("Custom Colors", "digiblocks"),
          checked: button.customColors || false,
          onChange: (value) => updateButton(button.id, "customColors", value),
          __nextHasNoMarginBottom: true
        }
      )), button.customColors && /* @__PURE__ */ wp.element.createElement("div", { style: { marginTop: "15px" } }, /* @__PURE__ */ wp.element.createElement(
        PanelColorSettings5,
        {
          title: __8("Button Colors", "digiblocks"),
          initialOpen: true,
          enableAlpha: true,
          colorSettings: [
            {
              value: button.backgroundColor,
              onChange: (value) => updateButton(button.id, "backgroundColor", value),
              label: __8("Background Color", "digiblocks")
            },
            {
              value: button.textColor,
              onChange: (value) => updateButton(button.id, "textColor", value),
              label: __8("Text Color", "digiblocks")
            },
            {
              value: button.hoverBackgroundColor,
              onChange: (value) => updateButton(button.id, "hoverBackgroundColor", value),
              label: __8("Hover Background Color", "digiblocks")
            },
            {
              value: button.hoverTextColor,
              onChange: (value) => updateButton(button.id, "hoverTextColor", value),
              label: __8("Hover Text Color", "digiblocks")
            }
          ]
        }
      ), /* @__PURE__ */ wp.element.createElement(
        TextControl,
        {
          label: __8("Border Radius", "digiblocks"),
          type: "number",
          value: button.borderRadius || "",
          onChange: (value) => updateButton(button.id, "borderRadius", value),
          __next40pxDefaultSize: true,
          __nextHasNoMarginBottom: true
        }
      )));
    };
    const renderTabContent = () => {
      switch (activeTab) {
        case "options":
          return /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(
            TabPanelBody7,
            {
              tab: "options",
              name: "general",
              title: __8("General", "digiblocks"),
              initialOpen: true
            },
            /* @__PURE__ */ wp.element.createElement(
              BaseControl,
              {
                label: __8("CTA Style", "digiblocks"),
                id: "cta-style-selector",
                className: "digiblocks-cta-style-selector",
                __nextHasNoMarginBottom: true
              },
              /* @__PURE__ */ wp.element.createElement("div", { style: { display: "flex", flexWrap: "wrap", gap: "4px", justifyContent: "center", margin: "0 -5px" } }, styleOptions.map((styleOption) => /* @__PURE__ */ wp.element.createElement("div", { key: styleOption.value }, renderStylePreview(styleOption))))
            ),
            /* @__PURE__ */ wp.element.createElement(
              ToggleControl6,
              {
                label: __8("Horizontal Layout", "digiblocks"),
                help: __8("Display content and buttons side by side", "digiblocks"),
                checked: horizontalLayout || false,
                onChange: (value) => setAttributes({ horizontalLayout: value }),
                __nextHasNoMarginBottom: true
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              SelectControl7,
              {
                label: __8("Heading Tag", "digiblocks"),
                value: headingTag || "h2",
                options: headingTagOptions,
                onChange: (value) => setAttributes({ headingTag: value }),
                __next40pxDefaultSize: true,
                __nextHasNoMarginBottom: true
              }
            ),
            style === "split" && /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(
              ToggleGroupControl5,
              {
                label: __8("Vertical Align", "digiblocks"),
                value: verticalAlign || "center",
                onChange: (value) => setAttributes({ verticalAlign: value }),
                isBlock: true,
                __next40pxDefaultSize: true,
                __nextHasNoMarginBottom: true
              },
              verticalAlignOptions.map((option) => /* @__PURE__ */ wp.element.createElement(
                ToggleGroupControlOption5,
                {
                  key: option.value,
                  value: option.value,
                  label: option.label
                }
              ))
            ), /* @__PURE__ */ wp.element.createElement(
              ToggleControl6,
              {
                label: __8("Reverse Columns on Mobile", "digiblocks"),
                help: __8("Place the image above the text on mobile devices", "digiblocks"),
                checked: reverseColumnsMobile || false,
                onChange: (value) => setAttributes({ reverseColumnsMobile: value }),
                __nextHasNoMarginBottom: true
              }
            )),
            /* @__PURE__ */ wp.element.createElement(
              ResponsiveControl6,
              {
                label: __8("Content Width", "digiblocks")
              },
              /* @__PURE__ */ wp.element.createElement(
                RangeControl5,
                {
                  value: contentWidth,
                  onChange: (value) => setAttributes({ contentWidth: value }),
                  min: 10,
                  max: 100,
                  step: 1,
                  __next40pxDefaultSize: true,
                  __nextHasNoMarginBottom: true
                }
              )
            ),
            /* @__PURE__ */ wp.element.createElement(
              ResponsiveControl6,
              {
                label: __8("Min Height", "digiblocks")
              },
              /* @__PURE__ */ wp.element.createElement(
                RangeControl5,
                {
                  value: minHeight && minHeight[localActiveDevice] ? minHeight[localActiveDevice] : 0,
                  onChange: (value) => setAttributes({
                    minHeight: {
                      ...minHeight || {},
                      [localActiveDevice]: value
                    }
                  }),
                  min: 0,
                  max: 1e3,
                  step: 10,
                  __next40pxDefaultSize: true,
                  __nextHasNoMarginBottom: true
                }
              )
            )
          ), /* @__PURE__ */ wp.element.createElement(
            TabPanelBody7,
            {
              tab: "options",
              name: "content",
              title: __8("Content", "digiblocks"),
              initialOpen: false
            },
            /* @__PURE__ */ wp.element.createElement(
              BaseControl,
              {
                label: __8("Title Highlight", "digiblocks"),
                id: "title-highlight",
                help: __8("Enter text within the title to highlight", "digiblocks"),
                __nextHasNoMarginBottom: true
              },
              /* @__PURE__ */ wp.element.createElement(
                TextControl,
                {
                  value: highlightText || "",
                  onChange: (value) => setAttributes({ highlightText: value }),
                  __next40pxDefaultSize: true,
                  __nextHasNoMarginBottom: true
                }
              )
            ),
            highlightText && /* @__PURE__ */ wp.element.createElement(
              SelectControl7,
              {
                label: __8("Highlight Type", "digiblocks"),
                value: highlightType || "background",
                options: highlightTypeOptions,
                onChange: (value) => setAttributes({ highlightType: value }),
                __next40pxDefaultSize: true,
                __nextHasNoMarginBottom: true
              }
            ),
            highlightText && highlightType && highlightType !== "none" && /* @__PURE__ */ wp.element.createElement(
              PanelColorSettings5,
              {
                title: __8("Highlight Color", "digiblocks"),
                initialOpen: true,
                enableAlpha: true,
                colorSettings: [
                  {
                    value: highlightColor,
                    onChange: (value) => setAttributes({ highlightColor: value }),
                    label: __8("Highlight Color", "digiblocks")
                  }
                ]
              }
            )
          ), /* @__PURE__ */ wp.element.createElement(
            TabPanelBody7,
            {
              tab: "options",
              name: "buttons",
              title: __8("Buttons", "digiblocks"),
              initialOpen: false
            },
            /* @__PURE__ */ wp.element.createElement(
              ToggleGroupControl5,
              {
                label: __8("Buttons Alignment", "digiblocks"),
                value: buttonsAlign || "left",
                onChange: (value) => setAttributes({ buttonsAlign: value }),
                isBlock: true,
                __next40pxDefaultSize: true,
                __nextHasNoMarginBottom: true
              },
              buttonsAlignOptions.map((option) => /* @__PURE__ */ wp.element.createElement(
                ToggleGroupControlOption5,
                {
                  key: option.value,
                  value: option.value,
                  label: option.label
                }
              ))
            ),
            /* @__PURE__ */ wp.element.createElement(
              ResponsiveControl6,
              {
                label: __8("Padding", "digiblocks")
              },
              /* @__PURE__ */ wp.element.createElement(
                DimensionControl5,
                {
                  values: buttonPadding && buttonPadding[localActiveDevice] ? buttonPadding[localActiveDevice] : {
                    top: 10,
                    right: 20,
                    bottom: 10,
                    left: 20,
                    unit: "px"
                  },
                  onChange: (value) => setAttributes({
                    buttonPadding: {
                      ...buttonPadding || {},
                      [localActiveDevice]: value
                    }
                  })
                }
              )
            ),
            /* @__PURE__ */ wp.element.createElement(
              ResponsiveControl6,
              {
                label: __8("Border Radius", "digiblocks")
              },
              /* @__PURE__ */ wp.element.createElement(
                DimensionControl5,
                {
                  values: buttonBorderRadius && buttonBorderRadius[localActiveDevice] ? buttonBorderRadius[localActiveDevice] : {
                    top: 4,
                    right: 4,
                    bottom: 4,
                    left: 4,
                    unit: "px"
                  },
                  onChange: (value) => setAttributes({
                    buttonBorderRadius: {
                      ...buttonBorderRadius || {},
                      [localActiveDevice]: value
                    }
                  }),
                  units: [
                    { label: "px", value: "px" },
                    { label: "%", value: "%" }
                  ]
                }
              )
            ),
            /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-button-list" }, buttons && buttons.map((button, i) => renderButtonEditor(button, i))),
            /* @__PURE__ */ wp.element.createElement(
              Button5,
              {
                variant: "secondary",
                onClick: addButton,
                style: { marginTop: "10px", width: "100%" }
              },
              __8("Add Button", "digiblocks")
            )
          ));
        case "style":
          return /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(
            TabPanelBody7,
            {
              tab: "style",
              name: "colors",
              title: __8("Colors", "digiblocks"),
              initialOpen: true
            },
            /* @__PURE__ */ wp.element.createElement(
              TabPanel3,
              {
                className: "digiblocks-control-tabs",
                activeClass: "active-tab",
                tabs: stateTabList
              },
              (tab) => {
                if (tab.name === "normal") {
                  return /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(
                    PanelColorSettings5,
                    {
                      title: __8("Text Colors", "digiblocks"),
                      initialOpen: true,
                      enableAlpha: true,
                      colorSettings: [
                        {
                          value: titleColor,
                          onChange: (value) => setAttributes({ titleColor: value }),
                          label: __8("Title Color", "digiblocks")
                        },
                        {
                          value: textColor,
                          onChange: (value) => setAttributes({ textColor: value }),
                          label: __8("Text Color", "digiblocks")
                        }
                      ]
                    }
                  ), /* @__PURE__ */ wp.element.createElement(
                    PanelColorSettings5,
                    {
                      title: __8("Button Colors", "digiblocks"),
                      initialOpen: false,
                      enableAlpha: true,
                      colorSettings: [
                        {
                          value: buttonColor,
                          onChange: (value) => setAttributes({ buttonColor: value }),
                          label: __8("Button Color", "digiblocks")
                        },
                        {
                          value: buttonTextColor,
                          onChange: (value) => setAttributes({ buttonTextColor: value }),
                          label: __8("Button Text Color", "digiblocks")
                        }
                      ]
                    }
                  ), borderStyle && borderStyle !== "none" && /* @__PURE__ */ wp.element.createElement(
                    PanelColorSettings5,
                    {
                      title: __8("Border Color", "digiblocks"),
                      initialOpen: false,
                      enableAlpha: true,
                      colorSettings: [
                        {
                          value: borderColor,
                          onChange: (value) => setAttributes({ borderColor: value }),
                          label: __8("Border Color", "digiblocks")
                        }
                      ]
                    }
                  ));
                } else {
                  return /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(
                    PanelColorSettings5,
                    {
                      title: __8("Text Hover Colors", "digiblocks"),
                      initialOpen: true,
                      enableAlpha: true,
                      colorSettings: [
                        {
                          value: titleHoverColor,
                          onChange: (value) => setAttributes({ titleHoverColor: value }),
                          label: __8("Title Hover Color", "digiblocks")
                        },
                        {
                          value: textHoverColor,
                          onChange: (value) => setAttributes({ textHoverColor: value }),
                          label: __8("Text Hover Color", "digiblocks")
                        }
                      ]
                    }
                  ), /* @__PURE__ */ wp.element.createElement(
                    PanelColorSettings5,
                    {
                      title: __8("Button Hover Colors", "digiblocks"),
                      initialOpen: false,
                      enableAlpha: true,
                      colorSettings: [
                        {
                          value: buttonHoverColor,
                          onChange: (value) => setAttributes({ buttonHoverColor: value }),
                          label: __8("Button Hover Color", "digiblocks")
                        },
                        {
                          value: buttonTextHoverColor,
                          onChange: (value) => setAttributes({ buttonTextHoverColor: value }),
                          label: __8("Button Text Hover Color", "digiblocks")
                        }
                      ]
                    }
                  ), backgroundType === "color" && style !== "gradient" && /* @__PURE__ */ wp.element.createElement(
                    PanelColorSettings5,
                    {
                      title: __8("Background Hover Color", "digiblocks"),
                      initialOpen: false,
                      enableAlpha: true,
                      colorSettings: [
                        {
                          value: backgroundHoverColor,
                          onChange: (value) => setAttributes({ backgroundHoverColor: value }),
                          label: __8("Background Hover Color", "digiblocks")
                        }
                      ]
                    }
                  ));
                }
              }
            )
          ), /* @__PURE__ */ wp.element.createElement(
            TabPanelBody7,
            {
              tab: "style",
              name: "background",
              title: __8("Background", "digiblocks"),
              initialOpen: false
            },
            style !== "gradient" && /* @__PURE__ */ wp.element.createElement(
              ToggleGroupControl5,
              {
                label: __8("Background Type", "digiblocks"),
                value: backgroundType || "color",
                onChange: (value) => setAttributes({ backgroundType: value }),
                isBlock: true,
                __next40pxDefaultSize: true,
                __nextHasNoMarginBottom: true
              },
              backgroundTypeOptions.map((option) => /* @__PURE__ */ wp.element.createElement(
                ToggleGroupControlOption5,
                {
                  key: option.value,
                  value: option.value,
                  label: option.label
                }
              ))
            ),
            backgroundType === "color" && style !== "gradient" && /* @__PURE__ */ wp.element.createElement(
              PanelColorSettings5,
              {
                title: __8("Background Color", "digiblocks"),
                initialOpen: true,
                enableAlpha: true,
                colorSettings: [
                  {
                    value: backgroundColor,
                    onChange: (value) => setAttributes({ backgroundColor: value }),
                    label: __8("Background Color", "digiblocks")
                  }
                ]
              }
            ),
            backgroundType === "gradient" || style === "gradient" ? /* @__PURE__ */ wp.element.createElement(
              PanelColorSettings5,
              {
                title: __8("Gradient Colors", "digiblocks"),
                initialOpen: true,
                enableAlpha: true,
                colorSettings: [
                  {
                    value: backgroundColor,
                    onChange: (value) => setAttributes({ backgroundColor: value }),
                    label: __8("Start Color", "digiblocks")
                  },
                  {
                    value: backgroundHoverColor,
                    onChange: (value) => setAttributes({ backgroundHoverColor: value }),
                    label: __8("End Color", "digiblocks")
                  }
                ]
              }
            ) : null,
            backgroundType === "image" && /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement("div", { style: { marginBottom: "16px" } }, /* @__PURE__ */ wp.element.createElement(MediaUploadCheck3, null, /* @__PURE__ */ wp.element.createElement(
              MediaUpload3,
              {
                onSelect: (media) => {
                  setAttributes({
                    backgroundImage: {
                      id: media.id,
                      url: media.url,
                      alt: media.alt || "",
                      width: media.width,
                      height: media.height
                    }
                  });
                },
                allowedTypes: ["image"],
                value: backgroundImage?.id,
                render: ({ open }) => /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, !backgroundImage?.url ? /* @__PURE__ */ wp.element.createElement("div", { style: { marginBottom: "8px" } }, /* @__PURE__ */ wp.element.createElement(
                  Button5,
                  {
                    variant: "secondary",
                    onClick: open,
                    icon: "format-image",
                    style: { width: "100%" }
                  },
                  __8("Select Image", "digiblocks")
                )) : /* @__PURE__ */ wp.element.createElement("div", { style: { marginBottom: "16px" } }, /* @__PURE__ */ wp.element.createElement(
                  "img",
                  {
                    src: backgroundImage.url,
                    alt: backgroundImage.alt,
                    style: {
                      display: "block",
                      width: "100%",
                      height: "auto",
                      maxHeight: "150px",
                      objectFit: "cover",
                      marginBottom: "8px"
                    }
                  }
                ), /* @__PURE__ */ wp.element.createElement("div", { style: { display: "flex", gap: "8px" } }, /* @__PURE__ */ wp.element.createElement(
                  Button5,
                  {
                    variant: "secondary",
                    onClick: open,
                    style: { flexGrow: 1 }
                  },
                  __8("Replace", "digiblocks")
                ), /* @__PURE__ */ wp.element.createElement(
                  Button5,
                  {
                    variant: "secondary",
                    onClick: () => setAttributes({ backgroundImage: null }),
                    isDestructive: true
                  },
                  __8("Remove", "digiblocks")
                ))))
              }
            ))), backgroundImage?.url && !style.includes("split") && /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(
              RangeControl5,
              {
                label: __8("Overlay Opacity (%)", "digiblocks"),
                value: backgroundOverlayOpacity || 50,
                onChange: (value) => setAttributes({ backgroundOverlayOpacity: value }),
                min: 0,
                max: 100,
                step: 5,
                __next40pxDefaultSize: true,
                __nextHasNoMarginBottom: true
              }
            ), /* @__PURE__ */ wp.element.createElement(
              PanelColorSettings5,
              {
                title: __8("Overlay Color", "digiblocks"),
                enableAlpha: true,
                colorSettings: [
                  {
                    value: backgroundOverlayColor,
                    onChange: (value) => setAttributes({ backgroundOverlayColor: value }),
                    label: __8("Overlay Color", "digiblocks")
                  }
                ]
              }
            ), /* @__PURE__ */ wp.element.createElement(
              SelectControl7,
              {
                label: __8("Background Position", "digiblocks"),
                value: backgroundPosition || "center center",
                options: backgroundPositionOptions,
                onChange: (value) => setAttributes({ backgroundPosition: value }),
                __next40pxDefaultSize: true,
                __nextHasNoMarginBottom: true
              }
            ), /* @__PURE__ */ wp.element.createElement(
              SelectControl7,
              {
                label: __8("Background Size", "digiblocks"),
                value: backgroundSize || "cover",
                options: backgroundSizeOptions,
                onChange: (value) => setAttributes({ backgroundSize: value }),
                __next40pxDefaultSize: true,
                __nextHasNoMarginBottom: true
              }
            ), /* @__PURE__ */ wp.element.createElement(
              SelectControl7,
              {
                label: __8("Background Repeat", "digiblocks"),
                value: backgroundRepeat || "no-repeat",
                options: backgroundRepeatOptions,
                onChange: (value) => setAttributes({ backgroundRepeat: value }),
                __next40pxDefaultSize: true,
                __nextHasNoMarginBottom: true
              }
            )))
          ), /* @__PURE__ */ wp.element.createElement(
            TabPanelBody7,
            {
              tab: "style",
              name: "typography",
              title: __8("Typography", "digiblocks"),
              initialOpen: false
            },
            /* @__PURE__ */ wp.element.createElement(
              TypographyControl3,
              {
                label: __8("Title Typography", "digiblocks"),
                value: titleTypography,
                onChange: (value) => setAttributes({ titleTypography: value })
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              TypographyControl3,
              {
                label: __8("Content Typography", "digiblocks"),
                value: contentTypography,
                onChange: (value) => setAttributes({ contentTypography: value })
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              TypographyControl3,
              {
                label: __8("Button Typography", "digiblocks"),
                value: buttonTypography,
                onChange: (value) => setAttributes({ buttonTypography: value })
              }
            )
          ), /* @__PURE__ */ wp.element.createElement(
            TabPanelBody7,
            {
              tab: "style",
              name: "border",
              title: __8("Border", "digiblocks"),
              initialOpen: false
            },
            /* @__PURE__ */ wp.element.createElement(
              SelectControl7,
              {
                label: __8("Border Style", "digiblocks"),
                value: borderStyle || "none",
                options: borderStyleOptions,
                onChange: (value) => setAttributes({ borderStyle: value }),
                __next40pxDefaultSize: true,
                __nextHasNoMarginBottom: true
              }
            ),
            borderStyle && borderStyle !== "none" && /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(
              ResponsiveControl6,
              {
                label: __8("Border Width", "digiblocks")
              },
              /* @__PURE__ */ wp.element.createElement(
                DimensionControl5,
                {
                  values: borderWidth && borderWidth[localActiveDevice] ? borderWidth[localActiveDevice] : {
                    top: 1,
                    right: 1,
                    bottom: 1,
                    left: 1,
                    unit: "px"
                  },
                  onChange: (value) => setAttributes({
                    borderWidth: {
                      ...borderWidth || {},
                      [localActiveDevice]: value
                    }
                  })
                }
              )
            )),
            /* @__PURE__ */ wp.element.createElement(
              ResponsiveControl6,
              {
                label: __8("Border Radius", "digiblocks")
              },
              /* @__PURE__ */ wp.element.createElement(
                DimensionControl5,
                {
                  values: borderRadius && borderRadius[localActiveDevice] ? borderRadius[localActiveDevice] : {
                    top: 0,
                    right: 0,
                    bottom: 0,
                    left: 0,
                    unit: "px"
                  },
                  onChange: (value) => setAttributes({
                    borderRadius: {
                      ...borderRadius || {},
                      [localActiveDevice]: value
                    }
                  }),
                  units: [
                    { label: "px", value: "px" },
                    { label: "%", value: "%" }
                  ]
                }
              )
            )
          ), /* @__PURE__ */ wp.element.createElement(
            TabPanelBody7,
            {
              tab: "style",
              name: "spacing",
              title: __8("Spacing", "digiblocks"),
              initialOpen: false
            },
            /* @__PURE__ */ wp.element.createElement(
              ResponsiveControl6,
              {
                label: __8("Padding", "digiblocks")
              },
              /* @__PURE__ */ wp.element.createElement(
                DimensionControl5,
                {
                  values: padding && padding[localActiveDevice] ? padding[localActiveDevice] : {
                    top: 40,
                    right: 30,
                    bottom: 40,
                    left: 30,
                    unit: "px"
                  },
                  onChange: (value) => setAttributes({
                    padding: {
                      ...padding || {},
                      [localActiveDevice]: value
                    }
                  })
                }
              )
            ),
            /* @__PURE__ */ wp.element.createElement(
              ResponsiveControl6,
              {
                label: __8("Margin", "digiblocks")
              },
              /* @__PURE__ */ wp.element.createElement(
                DimensionControl5,
                {
                  values: margin && margin[localActiveDevice] ? margin[localActiveDevice] : {
                    top: 0,
                    right: 0,
                    bottom: 30,
                    left: 0,
                    unit: "px"
                  },
                  onChange: (value) => setAttributes({
                    margin: {
                      ...margin || {},
                      [localActiveDevice]: value
                    }
                  })
                }
              )
            )
          ), /* @__PURE__ */ wp.element.createElement(
            TabPanelBody7,
            {
              tab: "style",
              name: "shadow",
              title: __8("Box Shadow", "digiblocks"),
              initialOpen: false
            },
            /* @__PURE__ */ wp.element.createElement(
              BoxShadowControl5,
              {
                normalValue: boxShadow || {
                  enable: false,
                  color: "rgba(0, 0, 0, 0.2)",
                  horizontal: 0,
                  vertical: 0,
                  blur: 0,
                  spread: 0,
                  position: "outset"
                },
                hoverValue: boxShadowHover || {
                  enable: false,
                  color: "rgba(0, 0, 0, 0.2)",
                  horizontal: 0,
                  vertical: 0,
                  blur: 0,
                  spread: 0,
                  position: "outset"
                },
                onNormalChange: (value) => setAttributes({ boxShadow: value }),
                onHoverChange: (value) => setAttributes({ boxShadowHover: value })
              }
            )
          ));
        case "advanced":
          return /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(
            TabPanelBody7,
            {
              tab: "advanced",
              name: "animation",
              title: __8("Animation", "digiblocks"),
              initialOpen: true
            },
            /* @__PURE__ */ wp.element.createElement(
              SelectControl7,
              {
                label: __8("Animation Effect", "digiblocks"),
                value: animation || "none",
                options: animationOptions,
                onChange: (value) => setAttributes({ animation: value }),
                __next40pxDefaultSize: true,
                __nextHasNoMarginBottom: true
              }
            ),
            animation && animation !== "none" && /* @__PURE__ */ wp.element.createElement("div", { style: { marginTop: "10px" } }, /* @__PURE__ */ wp.element.createElement(
              Button5,
              {
                variant: "secondary",
                isSecondary: true,
                onClick: handlePreviewClick,
                style: { width: "100%" }
              },
              __8("Preview Animation", "digiblocks")
            ))
          ), /* @__PURE__ */ wp.element.createElement(
            TabPanelBody7,
            {
              tab: "advanced",
              name: "visibility",
              title: __8("Visibility", "digiblocks"),
              initialOpen: false
            },
            /* @__PURE__ */ wp.element.createElement("div", { className: "components-base-control__help", style: {
              padding: "12px",
              backgroundColor: "#f0f6fc",
              border: "1px solid #c3ddfd",
              borderRadius: "4px",
              marginBottom: "16px"
            } }, /* @__PURE__ */ wp.element.createElement("strong", null, __8("Editor Note:", "digiblocks")), /* @__PURE__ */ wp.element.createElement("br", null), __8("Hidden elements appear with reduced opacity in the editor for easy editing. Visibility changes only take effect on the frontend.", "digiblocks")),
            /* @__PURE__ */ wp.element.createElement(
              ToggleControl6,
              {
                label: __8("Hide on Desktop", "digiblocks"),
                checked: visibility.desktop,
                onChange: (value) => setAttributes({
                  visibility: {
                    ...visibility,
                    desktop: value
                  }
                }),
                __nextHasNoMarginBottom: true
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              ToggleControl6,
              {
                label: __8("Hide on Tablet", "digiblocks"),
                checked: visibility.tablet,
                onChange: (value) => setAttributes({
                  visibility: {
                    ...visibility,
                    tablet: value
                  }
                }),
                __nextHasNoMarginBottom: true
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              ToggleControl6,
              {
                label: __8("Hide on Mobile", "digiblocks"),
                checked: visibility.mobile,
                onChange: (value) => setAttributes({
                  visibility: {
                    ...visibility,
                    mobile: value
                  }
                }),
                __nextHasNoMarginBottom: true
              }
            )
          ), /* @__PURE__ */ wp.element.createElement(
            TabPanelBody7,
            {
              tab: "advanced",
              name: "additional",
              title: __8("Additional", "digiblocks"),
              initialOpen: false
            },
            /* @__PURE__ */ wp.element.createElement("div", { className: "components-base-control html-anchor-control" }, /* @__PURE__ */ wp.element.createElement("div", { className: "components-base-control__field" }, /* @__PURE__ */ wp.element.createElement("label", { className: "components-base-control__label", htmlFor: "html-anchor" }, __8("HTML anchor", "digiblocks")), /* @__PURE__ */ wp.element.createElement(
              "input",
              {
                className: "components-text-control__input",
                type: "text",
                id: "html-anchor",
                value: anchor || "",
                onChange: (e) => setAttributes({ anchor: e.target.value }),
                "aria-describedby": "html-anchor-help",
                autoCapitalize: "none",
                autoComplete: "off"
              }
            )), /* @__PURE__ */ wp.element.createElement("p", { id: "html-anchor-help", className: "components-base-control__help" }, __8(`Enter a word or two \u2014 without spaces \u2014 to make a unique web address just for this block, called an "anchor". Then, you'll be able to link directly to this section of your page.`, "digiblocks"), " ", /* @__PURE__ */ wp.element.createElement(
              "a",
              {
                className: "components-external-link",
                href: "https://wordpress.org/documentation/article/page-jumps/",
                target: "_blank",
                rel: "external noreferrer noopener"
              },
              /* @__PURE__ */ wp.element.createElement("span", { className: "components-external-link__contents" }, __8("Learn more about anchors", "digiblocks")),
              /* @__PURE__ */ wp.element.createElement("span", { className: "components-external-link__icon", "aria-label": "(opens in a new tab)" }, "\u2197")
            ))),
            /* @__PURE__ */ wp.element.createElement("div", { className: "components-base-control" }, /* @__PURE__ */ wp.element.createElement("div", { className: "components-base-control__field" }, /* @__PURE__ */ wp.element.createElement("label", { className: "components-base-control__label", htmlFor: "additional-css-classes" }, __8("Additional CSS class(es)", "digiblocks")), /* @__PURE__ */ wp.element.createElement(
              "input",
              {
                className: "components-text-control__input",
                type: "text",
                id: "additional-css-classes",
                value: customClasses || "",
                onChange: (e) => setAttributes({ customClasses: e.target.value }),
                "aria-describedby": "additional-css-classes-help",
                autoComplete: "off"
              }
            )), /* @__PURE__ */ wp.element.createElement("p", { id: "additional-css-classes-help", className: "components-base-control__help" }, __8("Separate multiple classes with spaces.", "digiblocks")))
          ));
        default:
          return null;
      }
    };
    const blockProps = useBlockProps11({
      className: `digiblocks-cta ${id} style-${style} ${animation !== "none" ? `animate-${animation}` : ""} ${customClasses || ""}`,
      id: anchor || null
      // Set the anchor as ID if provided
    });
    const renderButtons = () => {
      if (!buttons || buttons.length === 0)
        return null;
      return /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-cta-buttons" }, buttons.map((button) => {
        const buttonClasses = [
          "digiblocks-cta-button",
          button.isPrimary ? "is-primary" : "",
          button.isFullWidth ? "is-full-width" : ""
        ].filter(Boolean).join(" ");
        const buttonStyle = button.customColors ? {
          backgroundColor: button.isPrimary ? button.backgroundColor || buttonColor : "transparent",
          color: button.isPrimary ? button.textColor || buttonTextColor : button.backgroundColor || buttonColor,
          borderColor: button.backgroundColor || buttonColor,
          borderStyle: "solid",
          borderWidth: "2px",
          borderRadius: button.borderRadius ? `${button.borderRadius}px` : void 0
        } : {};
        return /* @__PURE__ */ wp.element.createElement(
          "span",
          {
            key: button.id,
            className: buttonClasses,
            style: button.customColors ? buttonStyle : {}
          },
          button.text || __8("Click Here", "digiblocks")
        );
      }));
    };
    const getBlockContent = () => {
      const HeadingTag = headingTag || "h2";
      switch (style) {
        case "split":
          return /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-cta-split-container" }, /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-cta-content-container" }, /* @__PURE__ */ wp.element.createElement("div", { className: `digiblocks-cta-container ${horizontalLayout ? "digiblocks-cta-horizontal" : ""}` }, /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-cta-content-wrapper" }, /* @__PURE__ */ wp.element.createElement(
            RichText5,
            {
              tagName: HeadingTag,
              className: "digiblocks-cta-title",
              value: title,
              onChange: (value) => setAttributes({ title: value }),
              placeholder: __8("Add title...", "digiblocks"),
              allowedFormats: ["core/bold", "core/italic"]
            }
          ), /* @__PURE__ */ wp.element.createElement(
            RichText5,
            {
              tagName: "p",
              className: "digiblocks-cta-content",
              value: content,
              onChange: (value) => setAttributes({ content: value }),
              placeholder: __8("Add content...", "digiblocks")
            }
          )), renderButtons())), /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-cta-image-container" }, /* @__PURE__ */ wp.element.createElement(MediaUploadCheck3, null, /* @__PURE__ */ wp.element.createElement(
            MediaUpload3,
            {
              onSelect: (media) => {
                setAttributes({
                  backgroundImage: {
                    id: media.id,
                    url: media.url,
                    alt: media.alt || "",
                    width: media.width,
                    height: media.height
                  }
                });
              },
              allowedTypes: ["image"],
              value: backgroundImage?.id,
              render: ({ open }) => /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-image-upload-container" }, backgroundImage?.url ? /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(
                "img",
                {
                  src: backgroundImage.url,
                  alt: backgroundImage.alt || "",
                  onClick: open
                }
              ), /* @__PURE__ */ wp.element.createElement(
                "button",
                {
                  className: "digiblocks-change-image-button",
                  onClick: open
                },
                __8("Change Image", "digiblocks")
              )) : /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-image-placeholder", onClick: open }, __8("Choose Image", "digiblocks")))
            }
          ))));
        case "cover":
          return /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-cta-background" }), /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-cta-overlay" }), /* @__PURE__ */ wp.element.createElement("div", { className: `digiblocks-cta-container ${horizontalLayout ? "digiblocks-cta-horizontal" : ""}` }, /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-cta-content-wrapper" }, /* @__PURE__ */ wp.element.createElement(
            RichText5,
            {
              tagName: HeadingTag,
              className: "digiblocks-cta-title",
              value: title,
              onChange: (value) => setAttributes({ title: value }),
              placeholder: __8("Add title...", "digiblocks"),
              allowedFormats: ["core/bold", "core/italic"]
            }
          ), /* @__PURE__ */ wp.element.createElement(
            RichText5,
            {
              tagName: "p",
              className: "digiblocks-cta-content",
              value: content,
              onChange: (value) => setAttributes({ content: value }),
              placeholder: __8("Add content...", "digiblocks")
            }
          )), renderButtons()), !backgroundImage?.url && /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-image-placeholder" }, /* @__PURE__ */ wp.element.createElement(MediaUploadCheck3, null, /* @__PURE__ */ wp.element.createElement(
            MediaUpload3,
            {
              onSelect: (media) => {
                setAttributes({
                  backgroundImage: {
                    id: media.id,
                    url: media.url,
                    alt: media.alt || "",
                    width: media.width,
                    height: media.height
                  }
                });
              },
              allowedTypes: ["image"],
              value: backgroundImage?.id,
              render: ({ open }) => /* @__PURE__ */ wp.element.createElement(
                Button5,
                {
                  variant: "secondary",
                  onClick: open,
                  icon: "format-image"
                },
                __8("Select Background Image", "digiblocks")
              )
            }
          ))));
        default:
          return /* @__PURE__ */ wp.element.createElement("div", { className: `digiblocks-cta-container ${horizontalLayout ? "digiblocks-cta-horizontal" : ""}` }, /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-cta-content-wrapper" }, /* @__PURE__ */ wp.element.createElement(
            RichText5,
            {
              tagName: HeadingTag,
              className: "digiblocks-cta-title",
              value: title,
              onChange: (value) => setAttributes({ title: value }),
              placeholder: __8("Add title...", "digiblocks"),
              allowedFormats: ["core/bold", "core/italic"],
              withoutInteractiveFormatting: true
            }
          ), /* @__PURE__ */ wp.element.createElement(
            RichText5,
            {
              tagName: "p",
              className: "digiblocks-cta-content",
              value: content,
              onChange: (value) => setAttributes({ content: value }),
              placeholder: __8("Add content...", "digiblocks"),
              withoutInteractiveFormatting: true
            }
          )), renderButtons());
      }
    };
    return /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(InspectorControls6, null, /* @__PURE__ */ wp.element.createElement(
      CustomTabPanel6,
      {
        tabs: tabList,
        activeTab,
        onSelect: setActiveTab
      },
      renderTabContent()
    )), /* @__PURE__ */ wp.element.createElement(BlockControls, null, /* @__PURE__ */ wp.element.createElement(
      AlignmentToolbar,
      {
        value: align,
        onChange: (value) => setAttributes({ align: value })
      }
    )), /* @__PURE__ */ wp.element.createElement("style", { dangerouslySetInnerHTML: { __html: generateCSS() } }), /* @__PURE__ */ wp.element.createElement("div", { ...blockProps }, getBlockContent()));
  };
  var edit_default6 = CallToActionEdit;

  // blocks/call-to-action/save.js
  var { useBlockProps: useBlockProps12, RichText: RichText6 } = window.wp.blockEditor;
  var CallToActionSave = ({ attributes }) => {
    const {
      id,
      anchor,
      customClasses,
      style,
      horizontalLayout,
      title,
      content,
      headingTag,
      backgroundImage,
      backgroundType,
      align,
      animation,
      buttons,
      highlightText,
      highlightType,
      highlightColor
    } = attributes;
    const blockClasses = [
      "digiblocks-cta",
      id,
      `style-${style}`,
      animation !== "none" ? `animate-${animation}` : "",
      customClasses
    ].filter(Boolean).join(" ");
    const HeadingTag = headingTag || "h2";
    const renderButtons = () => {
      if (!buttons || buttons.length === 0)
        return null;
      return /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-cta-buttons" }, buttons.map((button) => {
        const buttonClasses = [
          "digiblocks-cta-button",
          button.isPrimary ? "is-primary" : "",
          button.isFullWidth ? "is-full-width" : ""
        ].filter(Boolean).join(" ");
        const target = button.openInNewTab ? "_blank" : void 0;
        const rel = button.rel || void 0;
        return /* @__PURE__ */ wp.element.createElement(
          "a",
          {
            key: button.id,
            className: buttonClasses,
            href: button.url || "#",
            target,
            rel,
            "data-button-id": button.id
          },
          button.text || "Click Here"
        );
      }));
    };
    const getBlockContent = () => {
      switch (style) {
        case "split":
          return /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-cta-split-container" }, /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-cta-content-container" }, /* @__PURE__ */ wp.element.createElement("div", { className: `digiblocks-cta-container ${horizontalLayout ? "digiblocks-cta-horizontal" : ""}` }, /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-cta-content-wrapper" }, /* @__PURE__ */ wp.element.createElement(
            RichText6.Content,
            {
              tagName: HeadingTag,
              className: "digiblocks-cta-title",
              value: title
            }
          ), /* @__PURE__ */ wp.element.createElement(
            RichText6.Content,
            {
              tagName: "p",
              className: "digiblocks-cta-content",
              value: content
            }
          )), renderButtons())), /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-cta-image-container" }));
        case "cover":
          return /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-cta-background" }), /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-cta-overlay" }), /* @__PURE__ */ wp.element.createElement("div", { className: `digiblocks-cta-container ${horizontalLayout ? "digiblocks-cta-horizontal" : ""}` }, /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-cta-content-wrapper" }, /* @__PURE__ */ wp.element.createElement(
            RichText6.Content,
            {
              tagName: HeadingTag,
              className: "digiblocks-cta-title",
              value: title
            }
          ), /* @__PURE__ */ wp.element.createElement(
            RichText6.Content,
            {
              tagName: "p",
              className: "digiblocks-cta-content",
              value: content
            }
          )), renderButtons()));
        default:
          return /* @__PURE__ */ wp.element.createElement("div", { className: `digiblocks-cta-container ${horizontalLayout ? "digiblocks-cta-horizontal" : ""}` }, /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-cta-content-wrapper" }, /* @__PURE__ */ wp.element.createElement(
            RichText6.Content,
            {
              tagName: HeadingTag,
              className: "digiblocks-cta-title",
              value: title
            }
          ), /* @__PURE__ */ wp.element.createElement(
            RichText6.Content,
            {
              tagName: "p",
              className: "digiblocks-cta-content",
              value: content
            }
          )), renderButtons());
      }
    };
    return /* @__PURE__ */ wp.element.createElement(
      "div",
      {
        ...useBlockProps12.save({
          className: blockClasses,
          id: anchor || null,
          "data-style": style,
          "data-background-type": backgroundType || "color",
          "data-align": align || "left",
          "data-highlight-text": highlightText || "",
          "data-highlight-type": highlightType || "none",
          "data-highlight-color": highlightColor || "#ffde59"
        })
      },
      getBlockContent()
    );
  };
  var save_default6 = CallToActionSave;

  // blocks/countdown/edit.js
  var { __: __9 } = window.wp.i18n;
  var {
    useBlockProps: useBlockProps13,
    InspectorControls: InspectorControls7,
    PanelColorSettings: PanelColorSettings6,
    BlockControls: BlockControls2,
    AlignmentToolbar: AlignmentToolbar2
  } = window.wp.blockEditor;
  var {
    SelectControl: SelectControl8,
    RangeControl: RangeControl6,
    TabPanel: TabPanel4,
    ToggleControl: ToggleControl7,
    TextControl: TextControl2,
    DateTimePicker,
    Button: Button6,
    __experimentalToggleGroupControl: ToggleGroupControl6,
    __experimentalToggleGroupControlOption: ToggleGroupControlOption6,
    BaseControl: BaseControl2
  } = window.wp.components;
  var { useState: useState7, useEffect: useEffect7, useRef: useRef4 } = window.wp.element;
  var { useBlockId: useBlockId7, getDimensionCSS: getDimensionCSS5, animations: animations5, animationPreview: animationPreview5 } = digi.utils;
  var { tabIcons: tabIcons7 } = digi.icons;
  var { ResponsiveControl: ResponsiveControl7, DimensionControl: DimensionControl6, TypographyControl: TypographyControl4, BoxShadowControl: BoxShadowControl6, CustomTabPanel: CustomTabPanel7, TabPanelBody: TabPanelBody8 } = digi.components;
  var CountdownEdit = ({ attributes, setAttributes, clientId }) => {
    const {
      id,
      anchor,
      visibility,
      customClasses,
      endDate,
      showDays,
      showHours,
      showMinutes,
      showSeconds,
      daysLabel,
      hoursLabel,
      minutesLabel,
      secondsLabel,
      digitColor,
      digitBackground,
      digitHoverColor,
      digitHoverBackground,
      labelColor,
      labelHoverColor,
      separatorColor,
      separatorHoverColor,
      boxStyle,
      boxBorderRadius,
      boxPadding,
      boxMargin,
      boxBorderWidth,
      boxBorderColor,
      showBoxShadow,
      boxShadow,
      boxShadowHover,
      itemSpacing,
      align,
      labelPosition,
      labelSpacing,
      titleTypography,
      contentTypography,
      expiredMessage,
      animation,
      displaySeparator,
      separatorType,
      boxesEqual,
      style
    } = attributes;
    useBlockId7(id, clientId, setAttributes);
    const [localActiveDevice, setLocalActiveDevice] = useState7(window.digi.responsiveState.activeDevice);
    const [timeRemaining, setTimeRemaining] = useState7({
      days: 30,
      hours: 23,
      minutes: 59,
      seconds: 59
    });
    const [isAnimating, setIsAnimating] = useState7(false);
    const countdownIntervalRef = useRef4(null);
    useEffect7(() => {
      const unsubscribe = window.digi.responsiveState.subscribe((device) => {
        setLocalActiveDevice(device);
      });
      return unsubscribe;
    }, []);
    const [activeTab, setActiveTab] = useState7(() => {
      if (window.digi.uiState) {
        const savedTab = window.digi.uiState.getActiveTab(clientId);
        if (savedTab)
          return savedTab;
      }
      return "options";
    });
    const [activeStyleTab, setActiveStyleTab] = useState7("normal");
    useEffect7(() => {
      if (!endDate) {
        const oneWeekFromNow = /* @__PURE__ */ new Date();
        oneWeekFromNow.setDate(oneWeekFromNow.getDate() + 7);
        setAttributes({ endDate: oneWeekFromNow.toISOString() });
      }
      const updateCountdown = () => {
        const now = /* @__PURE__ */ new Date();
        let targetDate = /* @__PURE__ */ new Date();
        if (endDate) {
          targetDate = new Date(endDate);
        } else {
          targetDate.setDate(targetDate.getDate() + 30);
        }
        const difference = targetDate - now;
        if (difference > 0) {
          const days = Math.floor(difference / (1e3 * 60 * 60 * 24));
          const hours = Math.floor(difference % (1e3 * 60 * 60 * 24) / (1e3 * 60 * 60));
          const minutes = Math.floor(difference % (1e3 * 60 * 60) / (1e3 * 60));
          const seconds = Math.floor(difference % (1e3 * 60) / 1e3);
          setTimeRemaining({
            days,
            hours,
            minutes,
            seconds
          });
        } else {
          setTimeRemaining({
            days: 0,
            hours: 0,
            minutes: 0,
            seconds: 0
          });
        }
      };
      updateCountdown();
      countdownIntervalRef.current = setInterval(updateCountdown, 1e3);
      return () => {
        if (countdownIntervalRef.current) {
          clearInterval(countdownIntervalRef.current);
        }
      };
    }, [endDate, setAttributes]);
    const previewTimeoutRef = useRef4(null);
    useEffect7(() => {
      if (animation && animation !== "none") {
        const timeoutId = setTimeout(() => {
          animationPreview5(id, animation, animations5, previewTimeoutRef);
        }, 100);
        return () => clearTimeout(timeoutId);
      }
    }, [animation]);
    const handlePreviewClick = () => {
      animationPreview5(id, animation, animations5, previewTimeoutRef);
    };
    const boxStyleOptions = [
      { label: __9("Default", "digiblocks"), value: "default" },
      { label: __9("Filled", "digiblocks"), value: "filled" },
      { label: __9("Outlined", "digiblocks"), value: "outlined" },
      { label: __9("Pill", "digiblocks"), value: "pill" },
      { label: __9("Rounded", "digiblocks"), value: "rounded" },
      { label: __9("Circle", "digiblocks"), value: "circle" }
    ];
    const labelPositionOptions = [
      { label: __9("Bottom", "digiblocks"), value: "bottom" },
      { label: __9("Top", "digiblocks"), value: "top" },
      { label: __9("Inside", "digiblocks"), value: "inside" }
    ];
    const styleOptions = [
      { label: __9("Boxes", "digiblocks"), value: "boxes" },
      { label: __9("Simple", "digiblocks"), value: "simple" }
    ];
    const separatorTypeOptions = [
      { label: __9("Colon", "digiblocks"), value: "colon" },
      { label: __9("Hyphen", "digiblocks"), value: "hyphen" },
      { label: __9("Slash", "digiblocks"), value: "slash" },
      { label: __9("Dot", "digiblocks"), value: "dot" }
    ];
    const animationOptions = [
      { label: __9("None", "digiblocks"), value: "none" },
      ...Object.keys(animations5).map((animation2) => ({
        label: animation2.replace(/-/g, " ").replace(/\b\w/g, (l) => l.toUpperCase()),
        value: animation2
      }))
    ];
    const tabList = [
      {
        name: "options",
        title: __9("Options", "digiblocks"),
        icon: tabIcons7.optionsIcon
      },
      {
        name: "style",
        title: __9("Style", "digiblocks"),
        icon: tabIcons7.styleIcon
      },
      {
        name: "advanced",
        title: __9("Advanced", "digiblocks"),
        icon: tabIcons7.advancedIcon
      }
    ];
    const stateTabList = [
      {
        name: "normal",
        title: __9("Normal", "digiblocks"),
        className: "digiblocks-tab-1 normal"
      },
      {
        name: "hover",
        title: __9("Hover", "digiblocks"),
        className: "digiblocks-tab-2 hover"
      }
    ];
    const formatTime = (value) => {
      return value.toString().padStart(2, "0");
    };
    const generateCSS = () => {
      const activeDevice = localActiveDevice;
      const currentItemSpacing = itemSpacing && itemSpacing[activeDevice] !== void 0 ? itemSpacing[activeDevice] : 20;
      const currentLabelSpacing = labelSpacing && labelSpacing[activeDevice] !== void 0 ? labelSpacing[activeDevice] : 5;
      let titleTypographyCSS = "";
      if (titleTypography) {
        if (titleTypography.fontFamily) {
          titleTypographyCSS += `font-family: ${titleTypography.fontFamily};`;
        }
        if (titleTypography.fontSize && titleTypography.fontSize[activeDevice]) {
          titleTypographyCSS += `font-size: ${titleTypography.fontSize[activeDevice]}${titleTypography.fontSizeUnit || "px"};`;
        }
        if (titleTypography.fontWeight) {
          titleTypographyCSS += `font-weight: ${titleTypography.fontWeight};`;
        }
        if (titleTypography.fontStyle) {
          titleTypographyCSS += `font-style: ${titleTypography.fontStyle};`;
        }
        if (titleTypography.textTransform) {
          titleTypographyCSS += `text-transform: ${titleTypography.textTransform};`;
        }
        if (titleTypography.lineHeight && titleTypography.lineHeight[activeDevice]) {
          titleTypographyCSS += `line-height: ${titleTypography.lineHeight[activeDevice]}${titleTypography.lineHeightUnit || "em"};`;
        }
        if (titleTypography.letterSpacing && titleTypography.letterSpacing[activeDevice]) {
          titleTypographyCSS += `letter-spacing: ${titleTypography.letterSpacing[activeDevice]}${titleTypography.letterSpacingUnit || "px"};`;
        }
      }
      let contentTypographyCSS = "";
      if (contentTypography) {
        if (contentTypography.fontFamily) {
          contentTypographyCSS += `font-family: ${contentTypography.fontFamily};`;
        }
        if (contentTypography.fontSize && contentTypography.fontSize[activeDevice]) {
          contentTypographyCSS += `font-size: ${contentTypography.fontSize[activeDevice]}${contentTypography.fontSizeUnit || "px"};`;
        }
        if (contentTypography.fontWeight) {
          contentTypographyCSS += `font-weight: ${contentTypography.fontWeight};`;
        }
        if (contentTypography.fontStyle) {
          contentTypographyCSS += `font-style: ${contentTypography.fontStyle};`;
        }
        if (contentTypography.textTransform) {
          contentTypographyCSS += `text-transform: ${contentTypography.textTransform};`;
        }
        if (contentTypography.lineHeight && contentTypography.lineHeight[activeDevice]) {
          contentTypographyCSS += `line-height: ${contentTypography.lineHeight[activeDevice]}${contentTypography.lineHeightUnit || "em"};`;
        }
        if (contentTypography.letterSpacing && contentTypography.letterSpacing[activeDevice]) {
          contentTypographyCSS += `letter-spacing: ${contentTypography.letterSpacing[activeDevice]}${contentTypography.letterSpacingUnit || "px"};`;
        }
      }
      let boxShadowCSS = "";
      if (showBoxShadow && boxShadow && boxShadow.enable) {
        const inset = boxShadow.position === "inset" ? "inset " : "";
        boxShadowCSS = `box-shadow: ${inset}${boxShadow.horizontal}px ${boxShadow.vertical}px ${boxShadow.blur}px ${boxShadow.spread}px ${boxShadow.color};`;
      }
      let boxShadowHoverCSS = "";
      if (showBoxShadow && boxShadowHover && boxShadowHover.enable) {
        const inset = boxShadowHover.position === "inset" ? "inset " : "";
        boxShadowHoverCSS = `box-shadow: ${inset}${boxShadowHover.horizontal}px ${boxShadowHover.vertical}px ${boxShadowHover.blur}px ${boxShadowHover.spread}px ${boxShadowHover.color};`;
      }
      let specificStyles = "";
      if (style === "boxes") {
        switch (boxStyle) {
          case "filled":
            specificStyles = `
                        .${id} .digiblocks-countdown-item-inner {
                            background-color: ${digitBackground || "#f0f0f0"};
                            color: ${digitColor || "#333333"};
							${getDimensionCSS5(boxPadding, "padding", activeDevice)}
							${getDimensionCSS5(boxBorderRadius, "border-radius", activeDevice)}
                            ${boxShadowCSS}
                        }
                        .${id} .digiblocks-countdown-item:hover .digiblocks-countdown-item-inner {
                            background-color: ${digitHoverBackground || digitBackground || "#e0e0e0"};
                            color: ${digitHoverColor || digitColor || "#333333"};
                            ${boxShadowHoverCSS}
                        }
                    `;
            break;
          case "outlined":
            specificStyles = `
                        .${id} .digiblocks-countdown-item-inner {
                            background-color: transparent;
                            color: ${digitColor || "#333333"};
							${getDimensionCSS5(boxPadding, "padding", activeDevice)}
							border-style: solid;
							${getDimensionCSS5(boxBorderWidth, "border-width", activeDevice)}
							border-color: ${boxBorderColor || "#e0e0e0"};
							${getDimensionCSS5(boxBorderRadius, "border-radius", activeDevice)}
							${getDimensionCSS5(boxPadding, "padding", activeDevice)}
                            ${boxShadowCSS}
                        }
                        .${id} .digiblocks-countdown-item:hover .digiblocks-countdown-item-inner {
                            background-color: ${digitHoverBackground || "transparent"};
                            color: ${digitHoverColor || digitColor || "#333333"};
                            ${boxShadowHoverCSS}
                        }
                    `;
            break;
          case "pill":
            specificStyles = `
                        .${id} .digiblocks-countdown-item-inner {
                            background-color: ${digitBackground || "#f0f0f0"};
                            color: ${digitColor || "#333333"};
                            border-radius: 50px;
							${getDimensionCSS5(boxPadding, "padding", activeDevice)}
                            ${boxShadowCSS}
                        }
                        .${id} .digiblocks-countdown-item:hover .digiblocks-countdown-item-inner {
                            background-color: ${digitHoverBackground || digitBackground || "#e0e0e0"};
                            color: ${digitHoverColor || digitColor || "#333333"};
                            ${boxShadowHoverCSS}
                        }
                    `;
            break;
          case "rounded":
            specificStyles = `
                        .${id} .digiblocks-countdown-item-inner {
                            background-color: ${digitBackground || "#f0f0f0"};
                            color: ${digitColor || "#333333"};
                            border-radius: 8px;
							${getDimensionCSS5(boxPadding, "padding", activeDevice)}
                            ${boxShadowCSS}
                        }
                        .${id} .digiblocks-countdown-item:hover .digiblocks-countdown-item-inner {
                            background-color: ${digitHoverBackground || digitBackground || "#e0e0e0"};
                            color: ${digitHoverColor || digitColor || "#333333"};
                            ${boxShadowHoverCSS}
                        }
                    `;
            break;
          case "circle":
            specificStyles = `
                        .${id} .digiblocks-countdown-item-inner {
                            background-color: ${digitBackground || "#f0f0f0"};
                            color: ${digitColor || "#333333"};
                            border-radius: 50%;
                            aspect-ratio: 1/1;
                            display: flex;
                            justify-content: center;
                            align-items: center;
							${getDimensionCSS5(boxPadding, "padding", activeDevice)}
                            ${boxShadowCSS}
                        }
                        .${id} .digiblocks-countdown-item:hover .digiblocks-countdown-item-inner {
                            background-color: ${digitHoverBackground || digitBackground || "#e0e0e0"};
                            color: ${digitHoverColor || digitColor || "#333333"};
                            ${boxShadowHoverCSS}
                        }
                    `;
            break;
          case "default":
          default:
            specificStyles = `
                        .${id} .digiblocks-countdown-item-inner {
                            color: ${digitColor || "#333333"};
                            ${boxShadowCSS}
                        }
                        .${id} .digiblocks-countdown-item:hover .digiblocks-countdown-item-inner {
                            color: ${digitHoverColor || digitColor || "#333333"};
                            ${boxShadowHoverCSS}
                        }
                    `;
            break;
        }
      } else {
        specificStyles = `
                .${id} .digiblocks-countdown-item-inner {
                    color: ${digitColor || "#333333"};
                }
                .${id} .digiblocks-countdown-item:hover .digiblocks-countdown-item-inner {
                    color: ${digitHoverColor || digitColor || "#333333"};
                }
            `;
      }
      let separatorStyles = "";
      if (displaySeparator) {
        let separatorContent = "";
        switch (separatorType) {
          case "colon":
            separatorContent = ":";
            break;
          case "hyphen":
            separatorContent = "-";
            break;
          case "slash":
            separatorContent = "/";
            break;
          case "dot":
            separatorContent = "\u2022";
            break;
          default:
            separatorContent = ":";
            break;
        }
        separatorStyles = `
                .${id} .digiblocks-countdown-separator {
                    color: ${separatorColor || "#333333"};
                    font-size: ${titleTypography && titleTypography.fontSize && titleTypography.fontSize[activeDevice] ? titleTypography.fontSize[activeDevice] + (titleTypography.fontSizeUnit || "px") : "2rem"};
                }
                .${id} .digiblocks-countdown-separator::before {
                    content: "${separatorContent}";
                }
                .${id}:hover .digiblocks-countdown-separator {
                    color: ${separatorHoverColor || separatorColor || "#333333"};
                }
            `;
      }
      let equalWidthStyles = "";
      if (style === "boxes" && boxesEqual) {
        equalWidthStyles = `
                .${id} .digiblocks-countdown-item {
                    flex: 1 0 0;
                }
                .${id} .digiblocks-countdown-item-inner {
                    width: 100%;
                    text-align: center;
                    box-sizing: border-box;
                }
            `;
      }
      let labelPositionStyles = "";
      if (labelPosition === "top") {
        labelPositionStyles = `
                .${id} .digiblocks-countdown-item {
                    flex-direction: column-reverse;
                }
                .${id} .digiblocks-countdown-label {
                    margin-bottom: ${currentLabelSpacing}px;
                    margin-top: 0;
                }
            `;
      } else if (labelPosition === "inside") {
        if (style === "boxes") {
          labelPositionStyles = `
                    .${id} .digiblocks-countdown-item {
                        flex-direction: column;
                    }
                    .${id} .digiblocks-countdown-digit {
                        margin-bottom: ${currentLabelSpacing}px;
                    }
                    .${id} .digiblocks-countdown-label {
                        margin-top: 0;
                    }
                    .${id} .digiblocks-countdown-item-inner {
                        display: flex;
                        flex-direction: column;
                        align-items: center;
                        justify-content: center;
                    }
                `;
        } else {
          labelPositionStyles = `
                    .${id} .digiblocks-countdown-item {
                        flex-direction: column;
                    }
                    .${id} .digiblocks-countdown-label {
                        margin-top: ${currentLabelSpacing}px;
                    }
                `;
        }
      } else {
        labelPositionStyles = `
                .${id} .digiblocks-countdown-item {
                    flex-direction: column;
                }
                .${id} .digiblocks-countdown-label {
                    margin-top: ${currentLabelSpacing}px;
                }
            `;
      }
      return `
            /* Countdown Block - ${id} */
            .${id} {
				${getDimensionCSS5(boxMargin, "margin", activeDevice)}
                text-align: ${align};
                display: block;
            }
            
            .${id} .digiblocks-countdown-container {
                display: inline-flex;
                flex-wrap: wrap;
                justify-content: ${align === "center" ? "center" : align === "right" ? "flex-end" : "flex-start"};
                gap: ${currentItemSpacing}px;
            }
            
            .${id} .digiblocks-countdown-item {
                display: flex;
                align-items: center;
            }
            
            .${id} .digiblocks-countdown-item-inner {
                transition: all 0.3s ease;
            }
            
            .${id} .digiblocks-countdown-digit {
                ${titleTypographyCSS}
            }
            
            .${id} .digiblocks-countdown-label {
                ${contentTypographyCSS}
                color: ${labelColor || "#666666"};
                transition: color 0.3s ease;
            }
            
            .${id}:hover .digiblocks-countdown-label {
                color: ${labelHoverColor || labelColor || "#666666"};
            }
            
            .${id} .digiblocks-countdown-expired {
                ${titleTypographyCSS}
                color: ${digitColor || "#333333"};
                text-align: ${align};
            }
            
            /* Box style specific */
            ${specificStyles}
            
            /* Separator styles */
            ${separatorStyles}
            
            /* Equal width styles */
            ${equalWidthStyles}
            
            /* Label positioning */
            ${labelPositionStyles}

			/* Visibility Controls */
			${visibility.desktop ? `
				@media (min-width: 992px) {
					.${id} {
						opacity: 0.5 !important;
					}
				}
			` : ""}

			${visibility.tablet ? `
				@media (min-width: 768px) and (max-width: 991px) {
					.${id} {
						opacity: 0.5 !important;
					}
				}
			` : ""}

			${visibility.mobile ? `
				@media (max-width: 767px) {
					.${id} {
						opacity: 0.5 !important;
					}
				}
			` : ""}
        `;
    };
    const renderTabContent = () => {
      switch (activeTab) {
        case "options":
          return /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement("div", { className: "components-panel__body is-opened" }, /* @__PURE__ */ wp.element.createElement(
            ToggleGroupControl6,
            {
              label: __9("Style", "digiblocks"),
              value: style,
              onChange: (value) => setAttributes({ style: value }),
              isBlock: true,
              __next40pxDefaultSize: true,
              __nextHasNoMarginBottom: true
            },
            styleOptions.map((option) => /* @__PURE__ */ wp.element.createElement(
              ToggleGroupControlOption6,
              {
                key: option.value,
                value: option.value,
                label: option.label
              }
            ))
          ), style === "boxes" && /* @__PURE__ */ wp.element.createElement(
            SelectControl8,
            {
              label: __9("Box Style", "digiblocks"),
              value: boxStyle,
              options: boxStyleOptions,
              onChange: (value) => setAttributes({ boxStyle: value }),
              __next40pxDefaultSize: true,
              __nextHasNoMarginBottom: true
            }
          ), style === "boxes" && /* @__PURE__ */ wp.element.createElement(
            ToggleControl7,
            {
              label: __9("Equal Width Boxes", "digiblocks"),
              checked: !!boxesEqual,
              onChange: () => setAttributes({ boxesEqual: !boxesEqual }),
              help: __9("Make all countdown boxes the same width", "digiblocks"),
              __nextHasNoMarginBottom: true
            }
          ), /* @__PURE__ */ wp.element.createElement(
            SelectControl8,
            {
              label: __9("Label Position", "digiblocks"),
              value: labelPosition,
              options: labelPositionOptions,
              onChange: (value) => setAttributes({ labelPosition: value }),
              __next40pxDefaultSize: true,
              __nextHasNoMarginBottom: true
            }
          ), /* @__PURE__ */ wp.element.createElement(
            ToggleControl7,
            {
              label: __9("Show Separators", "digiblocks"),
              checked: !!displaySeparator,
              onChange: () => setAttributes({ displaySeparator: !displaySeparator }),
              __nextHasNoMarginBottom: true
            }
          ), displaySeparator && /* @__PURE__ */ wp.element.createElement(
            SelectControl8,
            {
              label: __9("Separator Type", "digiblocks"),
              value: separatorType,
              options: separatorTypeOptions,
              onChange: (value) => setAttributes({ separatorType: value }),
              __next40pxDefaultSize: true,
              __nextHasNoMarginBottom: true
            }
          ), /* @__PURE__ */ wp.element.createElement(
            BaseControl2,
            {
              label: __9("End Date & Time", "digiblocks"),
              id: "countdown-date-time",
              __nextHasNoMarginBottom: true
            },
            /* @__PURE__ */ wp.element.createElement(
              DateTimePicker,
              {
                currentDate: endDate,
                onChange: (date) => setAttributes({ endDate: date }),
                is12Hour: true
              }
            )
          ), /* @__PURE__ */ wp.element.createElement(
            TextControl2,
            {
              label: __9("Expired Message", "digiblocks"),
              value: expiredMessage,
              onChange: (value) => setAttributes({ expiredMessage: value }),
              placeholder: __9("Time's up!", "digiblocks"),
              __next40pxDefaultSize: true,
              __nextHasNoMarginBottom: true
            }
          ), /* @__PURE__ */ wp.element.createElement(
            TextControl2,
            {
              label: __9("Days Label", "digiblocks"),
              value: daysLabel,
              onChange: (value) => setAttributes({ daysLabel: value }),
              placeholder: __9("Days", "digiblocks"),
              __next40pxDefaultSize: true,
              __nextHasNoMarginBottom: true
            }
          ), /* @__PURE__ */ wp.element.createElement(
            TextControl2,
            {
              label: __9("Hours Label", "digiblocks"),
              value: hoursLabel,
              onChange: (value) => setAttributes({ hoursLabel: value }),
              placeholder: __9("Hours", "digiblocks"),
              __next40pxDefaultSize: true,
              __nextHasNoMarginBottom: true
            }
          ), /* @__PURE__ */ wp.element.createElement(
            TextControl2,
            {
              label: __9("Minutes Label", "digiblocks"),
              value: minutesLabel,
              onChange: (value) => setAttributes({ minutesLabel: value }),
              placeholder: __9("Minutes", "digiblocks"),
              __next40pxDefaultSize: true,
              __nextHasNoMarginBottom: true
            }
          ), /* @__PURE__ */ wp.element.createElement(
            TextControl2,
            {
              label: __9("Seconds Label", "digiblocks"),
              value: secondsLabel,
              onChange: (value) => setAttributes({ secondsLabel: value }),
              placeholder: __9("Seconds", "digiblocks"),
              __next40pxDefaultSize: true,
              __nextHasNoMarginBottom: true
            }
          ), /* @__PURE__ */ wp.element.createElement(
            ToggleControl7,
            {
              label: __9("Show Days", "digiblocks"),
              checked: showDays,
              onChange: () => setAttributes({ showDays: !showDays }),
              __nextHasNoMarginBottom: true
            }
          ), /* @__PURE__ */ wp.element.createElement(
            ToggleControl7,
            {
              label: __9("Show Hours", "digiblocks"),
              checked: showHours,
              onChange: () => setAttributes({ showHours: !showHours }),
              __nextHasNoMarginBottom: true
            }
          ), /* @__PURE__ */ wp.element.createElement(
            ToggleControl7,
            {
              label: __9("Show Minutes", "digiblocks"),
              checked: showMinutes,
              onChange: () => setAttributes({ showMinutes: !showMinutes }),
              __nextHasNoMarginBottom: true
            }
          ), /* @__PURE__ */ wp.element.createElement(
            ToggleControl7,
            {
              label: __9("Show Seconds", "digiblocks"),
              checked: showSeconds,
              onChange: () => setAttributes({ showSeconds: !showSeconds }),
              __nextHasNoMarginBottom: true
            }
          )));
        case "style":
          return /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(
            TabPanelBody8,
            {
              tab: "style",
              name: "colors",
              title: __9("Colors", "digiblocks"),
              initialOpen: true
            },
            /* @__PURE__ */ wp.element.createElement(
              TabPanel4,
              {
                className: "digiblocks-control-tabs",
                activeClass: "active-tab",
                tabs: stateTabList
              },
              (tab) => {
                if (tab.name === "normal") {
                  return /* @__PURE__ */ wp.element.createElement(
                    PanelColorSettings6,
                    {
                      title: __9("Normal Colors", "digiblocks"),
                      initialOpen: true,
                      enableAlpha: true,
                      colorSettings: [
                        {
                          value: digitColor,
                          onChange: (value) => setAttributes({ digitColor: value }),
                          label: __9("Digit Color", "digiblocks")
                        },
                        ...style === "boxes" ? [
                          {
                            value: digitBackground,
                            onChange: (value) => setAttributes({ digitBackground: value }),
                            label: __9("Box Background", "digiblocks")
                          }
                        ] : [],
                        {
                          value: labelColor,
                          onChange: (value) => setAttributes({ labelColor: value }),
                          label: __9("Label Color", "digiblocks")
                        },
                        ...displaySeparator ? [
                          {
                            value: separatorColor,
                            onChange: (value) => setAttributes({ separatorColor: value }),
                            label: __9("Separator Color", "digiblocks")
                          }
                        ] : [],
                        ...style === "boxes" && boxStyle === "outlined" ? [
                          {
                            value: boxBorderColor,
                            onChange: (value) => setAttributes({ boxBorderColor: value }),
                            label: __9("Border Color", "digiblocks")
                          }
                        ] : []
                      ]
                    }
                  );
                } else {
                  return /* @__PURE__ */ wp.element.createElement(
                    PanelColorSettings6,
                    {
                      title: __9("Hover Colors", "digiblocks"),
                      initialOpen: true,
                      enableAlpha: true,
                      colorSettings: [
                        {
                          value: digitHoverColor,
                          onChange: (value) => setAttributes({ digitHoverColor: value }),
                          label: __9("Digit Color", "digiblocks")
                        },
                        ...style === "boxes" ? [
                          {
                            value: digitHoverBackground,
                            onChange: (value) => setAttributes({ digitHoverBackground: value }),
                            label: __9("Box Background", "digiblocks")
                          }
                        ] : [],
                        {
                          value: labelHoverColor,
                          onChange: (value) => setAttributes({ labelHoverColor: value }),
                          label: __9("Label Color", "digiblocks")
                        },
                        ...displaySeparator ? [
                          {
                            value: separatorHoverColor,
                            onChange: (value) => setAttributes({ separatorHoverColor: value }),
                            label: __9("Separator Color", "digiblocks")
                          }
                        ] : []
                      ]
                    }
                  );
                }
              }
            )
          ), /* @__PURE__ */ wp.element.createElement(
            TabPanelBody8,
            {
              tab: "style",
              name: "typography",
              title: __9("Typography", "digiblocks"),
              initialOpen: false
            },
            /* @__PURE__ */ wp.element.createElement(
              TypographyControl4,
              {
                label: __9("Digit Typography", "digiblocks"),
                value: titleTypography,
                onChange: (value) => setAttributes({ titleTypography: value }),
                defaults: {
                  fontSize: { desktop: 32, tablet: 28, mobile: 24 },
                  fontSizeUnit: "px",
                  lineHeight: { desktop: 1.2, tablet: 1.2, mobile: 1.2 },
                  lineHeightUnit: "em",
                  fontWeight: "600"
                }
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              TypographyControl4,
              {
                label: __9("Label Typography", "digiblocks"),
                value: contentTypography,
                onChange: (value) => setAttributes({ contentTypography: value }),
                defaults: {
                  fontSize: { desktop: 14, tablet: 13, mobile: 12 },
                  fontSizeUnit: "px",
                  lineHeight: { desktop: 1.4, tablet: 1.4, mobile: 1.4 },
                  lineHeightUnit: "em"
                }
              }
            )
          ), style === "boxes" && /* @__PURE__ */ wp.element.createElement(
            TabPanelBody8,
            {
              tab: "style",
              name: "boxStyles",
              title: __9("Box Style", "digiblocks"),
              initialOpen: false
            },
            /* @__PURE__ */ wp.element.createElement(
              ResponsiveControl7,
              {
                label: __9("Border Radius", "digiblocks")
              },
              /* @__PURE__ */ wp.element.createElement(
                DimensionControl6,
                {
                  values: boxBorderRadius && boxBorderRadius[localActiveDevice] ? boxBorderRadius[localActiveDevice] : {
                    top: 4,
                    right: 4,
                    bottom: 4,
                    left: 4,
                    unit: "px"
                  },
                  onChange: (value) => setAttributes({
                    boxBorderRadius: {
                      ...boxBorderRadius,
                      [localActiveDevice]: value
                    }
                  }),
                  units: [
                    { label: "px", value: "px" },
                    { label: "%", value: "%" }
                  ]
                }
              )
            ),
            boxStyle === "outlined" && /* @__PURE__ */ wp.element.createElement(
              ResponsiveControl7,
              {
                label: __9("Border Width", "digiblocks")
              },
              /* @__PURE__ */ wp.element.createElement(
                DimensionControl6,
                {
                  values: boxBorderWidth && boxBorderWidth[localActiveDevice] ? boxBorderWidth[localActiveDevice] : {
                    top: 1,
                    right: 1,
                    bottom: 1,
                    left: 1,
                    unit: "px"
                  },
                  onChange: (value) => setAttributes({
                    boxBorderWidth: {
                      ...boxBorderWidth,
                      [localActiveDevice]: value
                    }
                  })
                }
              )
            ),
            /* @__PURE__ */ wp.element.createElement(
              ResponsiveControl7,
              {
                label: __9("Padding", "digiblocks")
              },
              /* @__PURE__ */ wp.element.createElement(
                DimensionControl6,
                {
                  values: boxPadding && boxPadding[localActiveDevice] ? boxPadding[localActiveDevice] : {
                    top: 10,
                    right: 10,
                    bottom: 10,
                    left: 10,
                    unit: "px"
                  },
                  onChange: (value) => setAttributes({
                    boxPadding: {
                      ...boxPadding,
                      [localActiveDevice]: value
                    }
                  })
                }
              )
            ),
            /* @__PURE__ */ wp.element.createElement(
              ResponsiveControl7,
              {
                label: __9("Margin", "digiblocks")
              },
              /* @__PURE__ */ wp.element.createElement(
                DimensionControl6,
                {
                  values: boxMargin && boxMargin[localActiveDevice] ? boxMargin[localActiveDevice] : {
                    top: 0,
                    right: 0,
                    bottom: 0,
                    left: 0,
                    unit: "px"
                  },
                  onChange: (value) => setAttributes({
                    boxMargin: {
                      ...boxMargin,
                      [localActiveDevice]: value
                    }
                  })
                }
              )
            ),
            /* @__PURE__ */ wp.element.createElement(
              ToggleControl7,
              {
                label: __9("Box Shadow", "digiblocks"),
                checked: !!showBoxShadow,
                onChange: () => setAttributes({ showBoxShadow: !showBoxShadow }),
                __nextHasNoMarginBottom: true
              }
            ),
            showBoxShadow && /* @__PURE__ */ wp.element.createElement(
              BoxShadowControl6,
              {
                normalValue: boxShadow,
                hoverValue: boxShadowHover,
                onNormalChange: (value) => setAttributes({
                  boxShadow: value
                }),
                onHoverChange: (value) => setAttributes({
                  boxShadowHover: value
                })
              }
            )
          ), /* @__PURE__ */ wp.element.createElement(
            TabPanelBody8,
            {
              tab: "style",
              name: "spacing",
              title: __9("Spacing", "digiblocks"),
              initialOpen: false
            },
            /* @__PURE__ */ wp.element.createElement(
              ResponsiveControl7,
              {
                label: __9("Items Spacing", "digiblocks")
              },
              /* @__PURE__ */ wp.element.createElement(
                RangeControl6,
                {
                  value: itemSpacing && itemSpacing[localActiveDevice] !== void 0 ? itemSpacing[localActiveDevice] : 20,
                  onChange: (value) => setAttributes({
                    itemSpacing: {
                      ...itemSpacing,
                      [localActiveDevice]: value
                    }
                  }),
                  min: 0,
                  max: 100,
                  __next40pxDefaultSize: true,
                  __nextHasNoMarginBottom: true
                }
              )
            ),
            /* @__PURE__ */ wp.element.createElement(
              ResponsiveControl7,
              {
                label: __9("Label Spacing", "digiblocks")
              },
              /* @__PURE__ */ wp.element.createElement(
                RangeControl6,
                {
                  value: labelSpacing && labelSpacing[localActiveDevice] !== void 0 ? labelSpacing[localActiveDevice] : 5,
                  onChange: (value) => setAttributes({
                    labelSpacing: {
                      ...labelSpacing,
                      [localActiveDevice]: value
                    }
                  }),
                  min: 0,
                  max: 50,
                  __next40pxDefaultSize: true,
                  __nextHasNoMarginBottom: true
                }
              )
            )
          ));
        case "advanced":
          return /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(
            TabPanelBody8,
            {
              tab: "advanced",
              name: "animation",
              title: __9("Animation", "digiblocks"),
              initialOpen: true
            },
            /* @__PURE__ */ wp.element.createElement(
              SelectControl8,
              {
                label: __9("Animation Effect", "digiblocks"),
                value: animation,
                options: animationOptions,
                onChange: (value) => setAttributes({ animation: value }),
                __next40pxDefaultSize: true,
                __nextHasNoMarginBottom: true
              }
            ),
            animation && animation !== "none" && /* @__PURE__ */ wp.element.createElement("div", { style: { marginTop: "10px" } }, /* @__PURE__ */ wp.element.createElement(
              Button6,
              {
                variant: "secondary",
                isSecondary: true,
                onClick: handlePreviewClick,
                disabled: isAnimating,
                style: { width: "100%" }
              },
              isAnimating ? __9("Animating...", "digiblocks") : __9("Preview Animation", "digiblocks")
            ))
          ), /* @__PURE__ */ wp.element.createElement(
            TabPanelBody8,
            {
              tab: "advanced",
              name: "visibility",
              title: __9("Visibility", "digiblocks"),
              initialOpen: false
            },
            /* @__PURE__ */ wp.element.createElement("div", { className: "components-base-control__help", style: {
              padding: "12px",
              backgroundColor: "#f0f6fc",
              border: "1px solid #c3ddfd",
              borderRadius: "4px",
              marginBottom: "16px"
            } }, /* @__PURE__ */ wp.element.createElement("strong", null, __9("Editor Note:", "digiblocks")), /* @__PURE__ */ wp.element.createElement("br", null), __9("Hidden elements appear with reduced opacity in the editor for easy editing. Visibility changes only take effect on the frontend.", "digiblocks")),
            /* @__PURE__ */ wp.element.createElement(
              ToggleControl7,
              {
                label: __9("Hide on Desktop", "digiblocks"),
                checked: visibility.desktop,
                onChange: (value) => setAttributes({
                  visibility: {
                    ...visibility,
                    desktop: value
                  }
                }),
                __nextHasNoMarginBottom: true
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              ToggleControl7,
              {
                label: __9("Hide on Tablet", "digiblocks"),
                checked: visibility.tablet,
                onChange: (value) => setAttributes({
                  visibility: {
                    ...visibility,
                    tablet: value
                  }
                }),
                __nextHasNoMarginBottom: true
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              ToggleControl7,
              {
                label: __9("Hide on Mobile", "digiblocks"),
                checked: visibility.mobile,
                onChange: (value) => setAttributes({
                  visibility: {
                    ...visibility,
                    mobile: value
                  }
                }),
                __nextHasNoMarginBottom: true
              }
            )
          ), /* @__PURE__ */ wp.element.createElement(
            TabPanelBody8,
            {
              tab: "advanced",
              name: "additional",
              title: __9("Additional", "digiblocks"),
              initialOpen: false
            },
            /* @__PURE__ */ wp.element.createElement("div", { className: "components-base-control html-anchor-control" }, /* @__PURE__ */ wp.element.createElement("div", { className: "components-base-control__field" }, /* @__PURE__ */ wp.element.createElement("label", { className: "components-base-control__label", htmlFor: "html-anchor" }, __9("HTML anchor", "digiblocks")), /* @__PURE__ */ wp.element.createElement(
              "input",
              {
                className: "components-text-control__input",
                type: "text",
                id: "html-anchor",
                value: anchor || "",
                onChange: (e) => setAttributes({ anchor: e.target.value }),
                "aria-describedby": "html-anchor-help",
                autoCapitalize: "none",
                autoComplete: "off"
              }
            )), /* @__PURE__ */ wp.element.createElement("p", { id: "html-anchor-help", className: "components-base-control__help" }, __9(`Enter a word or two \u2014 without spaces \u2014 to make a unique web address just for this block, called an "anchor". Then, you'll be able to link directly to this section of your page.`, "digiblocks"), " ", /* @__PURE__ */ wp.element.createElement(
              "a",
              {
                className: "components-external-link",
                href: "https://wordpress.org/documentation/article/page-jumps/",
                target: "_blank",
                rel: "external noreferrer noopener"
              },
              /* @__PURE__ */ wp.element.createElement("span", { className: "components-external-link__contents" }, __9("Learn more about anchors", "digiblocks")),
              /* @__PURE__ */ wp.element.createElement("span", { className: "components-external-link__icon", "aria-label": "(opens in a new tab)" }, "\u2197")
            ))),
            /* @__PURE__ */ wp.element.createElement("div", { className: "components-base-control" }, /* @__PURE__ */ wp.element.createElement("div", { className: "components-base-control__field" }, /* @__PURE__ */ wp.element.createElement("label", { className: "components-base-control__label", htmlFor: "additional-css-classes" }, __9("Additional CSS class(es)", "digiblocks")), /* @__PURE__ */ wp.element.createElement(
              "input",
              {
                className: "components-text-control__input",
                type: "text",
                id: "additional-css-classes",
                value: customClasses || "",
                onChange: (e) => setAttributes({ customClasses: e.target.value }),
                "aria-describedby": "additional-css-classes-help",
                autoComplete: "off"
              }
            )), /* @__PURE__ */ wp.element.createElement("p", { id: "additional-css-classes-help", className: "components-base-control__help" }, __9("Separate multiple classes with spaces.", "digiblocks")))
          ));
        default:
          return null;
      }
    };
    const blockProps = useBlockProps13({
      className: `digiblocks-countdown ${id} ${customClasses || ""}`,
      id: anchor || null
      // Set the anchor as ID if provided
    });
    if (!showDays && !showHours && !showMinutes && !showSeconds) {
      return /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(InspectorControls7, null, /* @__PURE__ */ wp.element.createElement(
        CustomTabPanel7,
        {
          tabs: tabList,
          activeTab,
          onSelect: setActiveTab
        },
        renderTabContent()
      )), /* @__PURE__ */ wp.element.createElement("div", { ...blockProps, style: { textAlign: align } }, /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-countdown-error" }, __9("Please enable at least one time unit in the block settings.", "digiblocks"))));
    }
    const renderCountdownItems = () => {
      const {
        days,
        hours,
        minutes,
        seconds
      } = timeRemaining;
      const items = [];
      if (showDays) {
        items.push(
          /* @__PURE__ */ wp.element.createElement("div", { key: "days", className: "digiblocks-countdown-item digiblocks-countdown-days" }, /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-countdown-item-inner" }, labelPosition === "inside" ? /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-countdown-digit" }, formatTime(days)), /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-countdown-label" }, daysLabel || __9("Days", "digiblocks"))) : /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-countdown-digit" }, formatTime(days))), labelPosition !== "inside" && /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-countdown-label" }, daysLabel || __9("Days", "digiblocks")))
        );
        if (displaySeparator && (showHours || showMinutes || showSeconds)) {
          items.push(
            /* @__PURE__ */ wp.element.createElement("div", { key: "days-separator", className: "digiblocks-countdown-separator" })
          );
        }
      }
      if (showHours) {
        items.push(
          /* @__PURE__ */ wp.element.createElement("div", { key: "hours", className: "digiblocks-countdown-item digiblocks-countdown-hours" }, /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-countdown-item-inner" }, labelPosition === "inside" ? /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-countdown-digit" }, formatTime(hours)), /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-countdown-label" }, hoursLabel || __9("Hours", "digiblocks"))) : /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-countdown-digit" }, formatTime(hours))), labelPosition !== "inside" && /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-countdown-label" }, hoursLabel || __9("Hours", "digiblocks")))
        );
        if (displaySeparator && (showMinutes || showSeconds)) {
          items.push(
            /* @__PURE__ */ wp.element.createElement("div", { key: "hours-separator", className: "digiblocks-countdown-separator" })
          );
        }
      }
      if (showMinutes) {
        items.push(
          /* @__PURE__ */ wp.element.createElement("div", { key: "minutes", className: "digiblocks-countdown-item digiblocks-countdown-minutes" }, /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-countdown-item-inner" }, labelPosition === "inside" ? /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-countdown-digit" }, formatTime(minutes)), /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-countdown-label" }, minutesLabel || __9("Minutes", "digiblocks"))) : /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-countdown-digit" }, formatTime(minutes))), labelPosition !== "inside" && /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-countdown-label" }, minutesLabel || __9("Minutes", "digiblocks")))
        );
        if (displaySeparator && showSeconds) {
          items.push(
            /* @__PURE__ */ wp.element.createElement("div", { key: "minutes-separator", className: "digiblocks-countdown-separator" })
          );
        }
      }
      if (showSeconds) {
        items.push(
          /* @__PURE__ */ wp.element.createElement("div", { key: "seconds", className: "digiblocks-countdown-item digiblocks-countdown-seconds" }, /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-countdown-item-inner" }, labelPosition === "inside" ? /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-countdown-digit" }, formatTime(seconds)), /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-countdown-label" }, secondsLabel || __9("Seconds", "digiblocks"))) : /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-countdown-digit" }, formatTime(seconds))), labelPosition !== "inside" && /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-countdown-label" }, secondsLabel || __9("Seconds", "digiblocks")))
        );
      }
      return items;
    };
    const isCountdownExpired = timeRemaining.days === 0 && timeRemaining.hours === 0 && timeRemaining.minutes === 0 && timeRemaining.seconds === 0;
    return /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(BlockControls2, null, /* @__PURE__ */ wp.element.createElement(
      AlignmentToolbar2,
      {
        value: align,
        onChange: (value) => setAttributes({ align: value })
      }
    )), /* @__PURE__ */ wp.element.createElement(InspectorControls7, null, /* @__PURE__ */ wp.element.createElement(
      CustomTabPanel7,
      {
        tabs: tabList,
        activeTab,
        onSelect: setActiveTab
      },
      renderTabContent()
    )), /* @__PURE__ */ wp.element.createElement("style", { dangerouslySetInnerHTML: { __html: generateCSS() } }), /* @__PURE__ */ wp.element.createElement("div", { ...blockProps }, isCountdownExpired ? /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-countdown-expired" }, expiredMessage || __9("Time's up!", "digiblocks")) : /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-countdown-container" }, renderCountdownItems())));
  };
  var edit_default7 = CountdownEdit;

  // blocks/countdown/save.js
  var { useBlockProps: useBlockProps14 } = window.wp.blockEditor;
  var CountdownSave = ({ attributes }) => {
    const {
      id,
      anchor,
      customClasses,
      endDate,
      showDays,
      showHours,
      showMinutes,
      showSeconds,
      daysLabel,
      hoursLabel,
      minutesLabel,
      secondsLabel,
      displaySeparator,
      separatorType,
      expiredMessage,
      animation,
      align,
      style,
      boxesEqual,
      labelPosition
    } = attributes;
    const blockClasses = [
      "digiblocks-countdown",
      id,
      `align-${align}`,
      animation !== "none" ? `animate-${animation}` : "",
      style === "boxes" ? "digiblocks-countdown-boxes" : "digiblocks-countdown-simple",
      boxesEqual ? "digiblocks-countdown-equal-width" : "",
      `digiblocks-countdown-labels-${labelPosition}`,
      displaySeparator ? "digiblocks-countdown-has-separators" : "",
      displaySeparator ? `digiblocks-countdown-separator-${separatorType}` : "",
      customClasses || ""
    ].filter(Boolean).join(" ");
    const blockProps = useBlockProps14.save({
      className: blockClasses,
      id: anchor || null,
      "data-end-date": endDate || "",
      "data-show-days": showDays ? "true" : "false",
      "data-show-hours": showHours ? "true" : "false",
      "data-show-minutes": showMinutes ? "true" : "false",
      "data-show-seconds": showSeconds ? "true" : "false",
      "data-days-label": daysLabel || "Days",
      "data-hours-label": hoursLabel || "Hours",
      "data-minutes-label": minutesLabel || "Minutes",
      "data-seconds-label": secondsLabel || "Seconds",
      "data-expired-message": expiredMessage || "Time's up!",
      "data-label-position": labelPosition || "bottom"
    });
    return /* @__PURE__ */ wp.element.createElement("div", { ...blockProps }, /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-countdown-container" }, showDays && /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-countdown-item digiblocks-countdown-days" }, /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-countdown-item-inner" }, labelPosition === "inside" ? /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-countdown-digit" }, "00"), /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-countdown-label" }, daysLabel || "Days")) : /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-countdown-digit" }, "00")), labelPosition !== "inside" && /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-countdown-label" }, daysLabel || "Days")), displaySeparator && (showHours || showMinutes || showSeconds) && /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-countdown-separator" })), showHours && /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-countdown-item digiblocks-countdown-hours" }, /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-countdown-item-inner" }, labelPosition === "inside" ? /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-countdown-digit" }, "00"), /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-countdown-label" }, hoursLabel || "Hours")) : /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-countdown-digit" }, "00")), labelPosition !== "inside" && /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-countdown-label" }, hoursLabel || "Hours")), displaySeparator && (showMinutes || showSeconds) && /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-countdown-separator" })), showMinutes && /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-countdown-item digiblocks-countdown-minutes" }, /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-countdown-item-inner" }, labelPosition === "inside" ? /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-countdown-digit" }, "00"), /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-countdown-label" }, minutesLabel || "Minutes")) : /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-countdown-digit" }, "00")), labelPosition !== "inside" && /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-countdown-label" }, minutesLabel || "Minutes")), displaySeparator && showSeconds && /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-countdown-separator" })), showSeconds && /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-countdown-item digiblocks-countdown-seconds" }, /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-countdown-item-inner" }, labelPosition === "inside" ? /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-countdown-digit" }, "00"), /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-countdown-label" }, secondsLabel || "Seconds")) : /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-countdown-digit" }, "00")), labelPosition !== "inside" && /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-countdown-label" }, secondsLabel || "Seconds"))), /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-countdown-expired", style: { display: "none" } }, expiredMessage || "Time's up!"));
  };
  var save_default7 = CountdownSave;

  // blocks/counter/edit.js
  var { __: __10 } = window.wp.i18n;
  var {
    useBlockProps: useBlockProps15,
    InspectorControls: InspectorControls8,
    PanelColorSettings: PanelColorSettings7,
    BlockControls: BlockControls3,
    AlignmentToolbar: AlignmentToolbar3
  } = window.wp.blockEditor;
  var {
    TabPanel: TabPanel5,
    SelectControl: SelectControl9,
    RangeControl: RangeControl7,
    TextControl: TextControl3,
    ToggleControl: ToggleControl8,
    Button: Button7,
    __experimentalToggleGroupControl: ToggleGroupControl7,
    __experimentalToggleGroupControlOption: ToggleGroupControlOption7
  } = window.wp.components;
  var { useState: useState8, useEffect: useEffect8, useRef: useRef5 } = window.wp.element;
  var { useBlockId: useBlockId8, getDimensionCSS: getDimensionCSS6, animations: animations6, animationPreview: animationPreview6 } = digi.utils;
  var { tabIcons: tabIcons8 } = digi.icons;
  var { ResponsiveControl: ResponsiveControl8, DimensionControl: DimensionControl7, TypographyControl: TypographyControl5, BoxShadowControl: BoxShadowControl7, CustomTabPanel: CustomTabPanel8, TabPanelBody: TabPanelBody9 } = digi.components;
  var CounterEdit = ({ attributes, setAttributes, clientId }) => {
    const {
      id,
      anchor,
      visibility,
      customClasses,
      iconValue,
      startNumber,
      endNumber,
      title,
      description,
      counterColor,
      counterHoverColor,
      titleColor,
      titleHoverColor,
      textColor,
      textHoverColor,
      backgroundColor,
      backgroundHoverColor,
      iconColor,
      iconHoverColor,
      iconBackgroundColor,
      iconHoverBackgroundColor,
      iconSize,
      iconPadding,
      iconMargin,
      iconBorderStyle,
      iconBorderWidth,
      iconBorderRadius,
      iconBorderColor,
      iconHoverBorderColor,
      typography,
      titleTypography,
      contentTypography,
      padding,
      margin,
      align,
      animation,
      boxShadow,
      boxShadowHover,
      borderStyle,
      borderWidth,
      borderRadius,
      borderColor,
      hoverEffect,
      animationDuration,
      animationDelay,
      thousandSeparator,
      decimalPlaces,
      decimalSeparator,
      layoutStyle,
      verticalSpacing,
      counterPrefix,
      counterPrefixSpacing,
      counterSuffix,
      counterSuffixSpacing,
      numberWithCommas,
      displayIcon
    } = attributes;
    useBlockId8(id, clientId, setAttributes);
    const [localActiveDevice, setLocalActiveDevice] = useState8(window.digi.responsiveState.activeDevice);
    const [isAnimating, setIsAnimating] = useState8(false);
    const [counterValue, setCounterValue] = useState8(startNumber || 0);
    const [isCounterAnimating, setIsCounterAnimating] = useState8(false);
    const [activeColorTab, setActiveColorTab] = useState8("normal");
    useEffect8(() => {
      const unsubscribe = window.digi.responsiveState.subscribe((device) => {
        setLocalActiveDevice(device);
      });
      return unsubscribe;
    }, []);
    const [activeTab, setActiveTab] = useState8(() => {
      if (window.digi.uiState) {
        const savedTab = window.digi.uiState.getActiveTab(clientId);
        if (savedTab)
          return savedTab;
      }
      return "options";
    });
    const [componentsLoaded, setComponentsLoaded] = useState8(false);
    useEffect8(() => {
      const checkComponents = () => {
        if (window.digi && window.digi.components && window.digi.components.FontAwesomeControl) {
          setComponentsLoaded(true);
          return true;
        }
        return false;
      };
      if (!checkComponents()) {
        const timeout = setTimeout(() => {
          if (checkComponents()) {
            clearTimeout(timeout);
          }
        }, 500);
        return () => clearTimeout(timeout);
      }
    }, []);
    const setIconValue = (newIcon) => {
      setAttributes({ iconValue: newIcon });
    };
    const previewTimeoutRef = useRef5(null);
    useEffect8(() => {
      if (animation && animation !== "none") {
        const timeoutId = setTimeout(() => {
          animationPreview6(id, animation, animations6, previewTimeoutRef);
        }, 100);
        return () => clearTimeout(timeoutId);
      }
    }, [animation]);
    const handlePreviewClick = () => {
      animationPreview6(id, animation, animations6, previewTimeoutRef);
    };
    const animateCounter = () => {
      if (isCounterAnimating)
        return;
      const startValue = parseInt(startNumber) || 0;
      const endValue = parseInt(endNumber) || 0;
      const duration = animationDuration || 2e3;
      const steps = 50;
      const stepDuration = duration / steps;
      const increment = (endValue - startValue) / steps;
      setIsCounterAnimating(true);
      setCounterValue(startValue);
      let currentStep = 0;
      const intervalId = setInterval(() => {
        currentStep++;
        if (currentStep >= steps) {
          setCounterValue(endValue);
          clearInterval(intervalId);
          setIsCounterAnimating(false);
        } else {
          const newValue = startValue + increment * currentStep;
          setCounterValue(Math.round(newValue));
        }
      }, stepDuration);
      return () => clearInterval(intervalId);
    };
    const formatNumber = (number) => {
      if (typeof number !== "number") {
        number = parseFloat(number) || 0;
      }
      let formattedNumber = number;
      if (decimalPlaces && decimalPlaces > 0) {
        formattedNumber = number.toFixed(decimalPlaces);
      } else {
        formattedNumber = Math.round(number);
      }
      let numberStr = formattedNumber.toString();
      if (decimalPlaces > 0 && decimalSeparator && decimalSeparator !== ".") {
        numberStr = numberStr.replace(".", decimalSeparator);
      }
      if (numberWithCommas && thousandSeparator) {
        let parts = numberStr.split(decimalSeparator || ".");
        parts[0] = parts[0].replace(/\B(?=(\d{3})+(?!\d))/g, thousandSeparator);
        numberStr = parts.join(decimalSeparator || ".");
      }
      return numberStr;
    };
    const borderStyleOptions = [
      { label: __10("Default", "digiblocks"), value: "default" },
      { label: __10("None", "digiblocks"), value: "none" },
      { label: __10("Solid", "digiblocks"), value: "solid" },
      { label: __10("Dotted", "digiblocks"), value: "dotted" },
      { label: __10("Dashed", "digiblocks"), value: "dashed" },
      { label: __10("Double", "digiblocks"), value: "double" },
      { label: __10("Groove", "digiblocks"), value: "groove" },
      { label: __10("Inset", "digiblocks"), value: "inset" },
      { label: __10("Outset", "digiblocks"), value: "outset" },
      { label: __10("Ridge", "digiblocks"), value: "ridge" }
    ];
    const hoverEffectOptions = [
      { label: __10("None", "digiblocks"), value: "none" },
      { label: __10("Lift", "digiblocks"), value: "lift" },
      { label: __10("Scale", "digiblocks"), value: "scale" },
      { label: __10("Glow", "digiblocks"), value: "glow" }
    ];
    const animationOptions = [
      { label: __10("None", "digiblocks"), value: "none" },
      ...Object.keys(animations6).map((animation2) => ({
        label: animation2.replace(/-/g, " ").replace(/\b\w/g, (l) => l.toUpperCase()),
        value: animation2
      }))
    ];
    const layoutOptions = [
      { label: __10("Stacked", "digiblocks"), value: "stacked" },
      { label: __10("Inline", "digiblocks"), value: "inline" },
      { label: __10("Centered", "digiblocks"), value: "centered" }
    ];
    const tabList = [
      {
        name: "options",
        title: __10("Options", "digiblocks"),
        icon: tabIcons8.optionsIcon
      },
      {
        name: "style",
        title: __10("Style", "digiblocks"),
        icon: tabIcons8.styleIcon
      },
      {
        name: "advanced",
        title: __10("Advanced", "digiblocks"),
        icon: tabIcons8.advancedIcon
      }
    ];
    const stateTabList = [
      {
        name: "normal",
        title: __10("Normal", "digiblocks"),
        className: "digiblocks-tab-1 normal"
      },
      {
        name: "hover",
        title: __10("Hover", "digiblocks"),
        className: "digiblocks-tab-2 hover"
      }
    ];
    const generateCSS = () => {
      const activeDevice = window.digi.responsiveState.activeDevice;
      let borderCSS = "";
      if (borderStyle && borderStyle !== "default" && borderStyle !== "none") {
        borderCSS = `
                border-style: ${borderStyle};
                border-color: ${borderColor || "#e0e0e0"};
				${getDimensionCSS6(borderWidth, "border-width", activeDevice)}
				${getDimensionCSS6(borderRadius, "border-radius", activeDevice)}
            `;
      } else {
        borderCSS = "border-style: none;";
      }
      let boxShadowCSS = "box-shadow: none;";
      if (boxShadow && boxShadow.enable) {
        const inset = boxShadow.position === "inset" ? "inset " : "";
        boxShadowCSS = `box-shadow: ${inset}${boxShadow.horizontal}px ${boxShadow.vertical}px ${boxShadow.blur}px ${boxShadow.spread}px ${boxShadow.color};`;
      }
      const paddingCSS = `${getDimensionCSS6(padding, "padding", activeDevice)}`;
      const marginCSS = `${getDimensionCSS6(margin, "margin", activeDevice)}`;
      let titleTypographyCSS = "";
      if (titleTypography) {
        if (titleTypography.fontFamily) {
          titleTypographyCSS += `font-family: ${titleTypography.fontFamily};`;
        }
        if (titleTypography.fontSize && titleTypography.fontSize[activeDevice]) {
          titleTypographyCSS += `font-size: ${titleTypography.fontSize[activeDevice]}${titleTypography.fontSizeUnit || "px"};`;
        }
        if (titleTypography.fontWeight) {
          titleTypographyCSS += `font-weight: ${titleTypography.fontWeight};`;
        }
        if (titleTypography.fontStyle) {
          titleTypographyCSS += `font-style: ${titleTypography.fontStyle};`;
        }
        if (titleTypography.textTransform) {
          titleTypographyCSS += `text-transform: ${titleTypography.textTransform};`;
        }
        if (titleTypography.textDecoration) {
          titleTypographyCSS += `text-decoration: ${titleTypography.textDecoration};`;
        }
        if (titleTypography.lineHeight && titleTypography.lineHeight[activeDevice]) {
          titleTypographyCSS += `line-height: ${titleTypography.lineHeight[activeDevice]}${titleTypography.lineHeightUnit || "em"};`;
        }
        if (titleTypography.letterSpacing && titleTypography.letterSpacing[activeDevice]) {
          titleTypographyCSS += `letter-spacing: ${titleTypography.letterSpacing[activeDevice]}${titleTypography.letterSpacingUnit || "px"};`;
        }
      }
      let contentTypographyCSS = "";
      if (contentTypography) {
        if (contentTypography.fontFamily) {
          contentTypographyCSS += `font-family: ${contentTypography.fontFamily};`;
        }
        if (contentTypography.fontSize && contentTypography.fontSize[activeDevice]) {
          contentTypographyCSS += `font-size: ${contentTypography.fontSize[activeDevice]}${contentTypography.fontSizeUnit || "px"};`;
        }
        if (contentTypography.fontWeight) {
          contentTypographyCSS += `font-weight: ${contentTypography.fontWeight};`;
        }
        if (contentTypography.fontStyle) {
          contentTypographyCSS += `font-style: ${contentTypography.fontStyle};`;
        }
        if (contentTypography.textTransform) {
          contentTypographyCSS += `text-transform: ${contentTypography.textTransform};`;
        }
        if (contentTypography.textDecoration) {
          contentTypographyCSS += `text-decoration: ${contentTypography.textDecoration};`;
        }
        if (contentTypography.lineHeight && contentTypography.lineHeight[activeDevice]) {
          contentTypographyCSS += `line-height: ${contentTypography.lineHeight[activeDevice]}${contentTypography.lineHeightUnit || "em"};`;
        }
        if (contentTypography.letterSpacing && contentTypography.letterSpacing[activeDevice]) {
          contentTypographyCSS += `letter-spacing: ${contentTypography.letterSpacing[activeDevice]}${contentTypography.letterSpacingUnit || "px"};`;
        }
      }
      let typographyCSS = "";
      if (typography) {
        if (typography.fontFamily) {
          typographyCSS += `font-family: ${typography.fontFamily};`;
        }
        if (typography.fontSize && typography.fontSize[activeDevice]) {
          typographyCSS += `font-size: ${typography.fontSize[activeDevice]}${typography.fontSizeUnit || "px"};`;
        }
        if (typography.fontWeight) {
          typographyCSS += `font-weight: ${typography.fontWeight};`;
        }
        if (typography.fontStyle) {
          typographyCSS += `font-style: ${typography.fontStyle};`;
        }
        if (typography.textTransform) {
          typographyCSS += `text-transform: ${typography.textTransform};`;
        }
        if (typography.textDecoration) {
          typographyCSS += `text-decoration: ${typography.textDecoration};`;
        }
        if (typography.lineHeight && typography.lineHeight[activeDevice]) {
          typographyCSS += `line-height: ${typography.lineHeight[activeDevice]}${typography.lineHeightUnit || "em"};`;
        }
        if (typography.letterSpacing && typography.letterSpacing[activeDevice]) {
          typographyCSS += `letter-spacing: ${typography.letterSpacing[activeDevice]}${typography.letterSpacingUnit || "px"};`;
        }
      }
      let iconCSS = "";
      let iconHoverCSS = "";
      let iconMarginCSS = "";
      if (displayIcon && iconValue && iconValue.svg) {
        if (iconBackgroundColor) {
          iconCSS += `background-color: ${iconBackgroundColor};`;
        }
        if (iconBorderStyle && iconBorderStyle !== "default" && iconBorderStyle !== "none") {
          iconCSS += `
                    border-style: ${iconBorderStyle};
                    border-color: ${iconBorderColor || "#e0e0e0"};
					${getDimensionCSS6(iconBorderWidth, "border-width", activeDevice)}
					${getDimensionCSS6(iconBorderRadius, "border-radius", activeDevice)}
                `;
        }
        if (iconPadding && iconPadding[activeDevice]) {
          iconCSS += `${getDimensionCSS6(iconPadding, "padding", activeDevice)}`;
        }
        if (iconHoverColor) {
          iconHoverCSS += `fill: ${iconHoverColor} !important; color: ${iconHoverColor} !important;`;
        }
        if (iconHoverBackgroundColor) {
          iconHoverCSS += `background-color: ${iconHoverBackgroundColor};`;
        }
        if (iconHoverBorderColor) {
          iconHoverCSS += `border-color: ${iconHoverBorderColor};`;
        }
        if (iconMargin && iconMargin[activeDevice]) {
          iconMarginCSS = `${getDimensionCSS6(iconMargin, "margin", activeDevice)}`;
        } else {
          const defaultBottom = activeDevice === "desktop" ? 20 : activeDevice === "tablet" ? 15 : 10;
          iconMarginCSS = `margin: 0px 0px ${defaultBottom}px 0px;`;
        }
      }
      let hoverCSS = "";
      if (boxShadowHover && boxShadowHover.enable) {
        const insetHover = boxShadowHover.position === "inset" ? "inset " : "";
        hoverCSS += `box-shadow: ${insetHover}${boxShadowHover.horizontal}px ${boxShadowHover.vertical}px ${boxShadowHover.blur}px ${boxShadowHover.spread}px ${boxShadowHover.color};`;
      }
      if (hoverEffect === "lift") {
        hoverCSS += "transform: translateY(-10px);";
      } else if (hoverEffect === "scale") {
        hoverCSS += "transform: scale(1.05);";
      } else if (hoverEffect === "glow") {
        hoverCSS += "filter: brightness(1.1);";
      }
      return `
            /* Main block styles */
            .${id} {
                background-color: ${backgroundColor || "transparent"};
                ${boxShadowCSS}
                ${paddingCSS}
                ${marginCSS}
                ${borderCSS}
                transition: all 0.3s ease;
                text-align: ${align || "center"};
            }
            
            /* Hover effects */
            .${id}:hover {
                ${backgroundHoverColor ? `background-color: ${backgroundHoverColor};` : ""}
                ${hoverCSS}
            }
            
            /* Layout styles */
            .${id} .digiblocks-counter-inner {
                display: flex;
                flex-direction: ${layoutStyle === "inline" ? "row" : "column"};
                align-items: ${layoutStyle === "inline" ? "center" : align === "left" ? "flex-start" : align === "right" ? "flex-end" : "center"};
                justify-content: ${layoutStyle === "inline" ? "flex-start" : "center"};
                gap: ${verticalSpacing || 15}px;
                ${layoutStyle === "centered" ? "text-align: center;" : ""}
            }
            
            ${displayIcon && iconValue && iconValue.svg ? `
            /* Icon styles */
            .${id} .digiblocks-counter-icon {
				${iconMarginCSS}
                display: inline-flex;
                align-items: center;
                justify-content: center;
                ${iconCSS}
                transition: all 0.3s ease;
            }

            .${id} .digiblocks-counter-icon span {
                display: flex;
            }

            .${id} .digiblocks-counter-icon svg {
                width: ${iconSize && iconSize[activeDevice] ? iconSize[activeDevice] : 32}px;
                height: 100%;
                fill: ${iconColor || "inherit"};
                transition: all 0.3s ease;
            }
            
            /* Icon hover styles */
            .${id}:hover .digiblocks-counter-icon {
                ${iconHoverCSS}
            }
            
            .${id}:hover .digiblocks-counter-icon svg {
                ${iconHoverColor ? `fill: ${iconHoverColor};` : ""}
            }
            ` : ""}
            
            /* Counter styles */
            .${id} .digiblocks-counter-number-wrapper {
                display: flex;
                align-items: center;
                justify-content: ${align === "left" ? "flex-start" : align === "right" ? "flex-end" : "center"};
                margin-bottom: 10px;
            }
            
            .${id} .digiblocks-counter-prefix {
                margin-right: ${counterPrefixSpacing || 5}px;
                color: ${counterColor || "#333333"};
                ${typographyCSS}
                transition: color 0.3s ease;
            }
            
            .${id} .digiblocks-counter-suffix {
                margin-left: ${counterSuffixSpacing || 5}px;
                color: ${counterColor || "#333333"};
                ${typographyCSS}
                transition: color 0.3s ease;
            }
            
            .${id} .digiblocks-counter-number {
                color: ${counterColor || "#333333"};
                ${typographyCSS}
                transition: color 0.3s ease;
            }
            
            /* Counter hover styles */
            .${id}:hover .digiblocks-counter-number,
            .${id}:hover .digiblocks-counter-prefix,
            .${id}:hover .digiblocks-counter-suffix {
                ${counterHoverColor ? `color: ${counterHoverColor};` : ""}
            }
            
            /* Title styles */
            .${id} .digiblocks-counter-title {
                color: ${titleColor || "inherit"};
                margin-bottom: 10px;
                ${titleTypographyCSS}
                transition: color 0.3s ease;
            }
            
            /* Title hover styles */
            .${id}:hover .digiblocks-counter-title {
                ${titleHoverColor ? `color: ${titleHoverColor};` : ""}
            }
            
            /* Content styles */
            .${id} .digiblocks-counter-description {
                color: ${textColor || "inherit"};
                ${contentTypographyCSS}
                transition: color 0.3s ease;
            }
            
            /* Content hover styles */
            .${id}:hover .digiblocks-counter-description {
                ${textHoverColor ? `color: ${textHoverColor};` : ""}
            }

			/* Visibility Controls */
			${visibility.desktop ? `
				@media (min-width: 992px) {
					.${id} {
						opacity: 0.5 !important;
					}
				}
			` : ""}

			${visibility.tablet ? `
				@media (min-width: 768px) and (max-width: 991px) {
					.${id} {
						opacity: 0.5 !important;
					}
				}
			` : ""}

			${visibility.mobile ? `
				@media (max-width: 767px) {
					.${id} {
						opacity: 0.5 !important;
					}
				}
			` : ""}
        `;
    };
    const FontAwesomeControl6 = componentsLoaded ? window.digi.components.FontAwesomeControl : null;
    const renderIcon = () => {
      if (!displayIcon || !iconValue || !iconValue.svg || iconValue.svg.trim() === "") {
        return null;
      }
      return /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-counter-icon" }, /* @__PURE__ */ wp.element.createElement(
        "span",
        {
          dangerouslySetInnerHTML: {
            __html: iconValue.svg
          }
        }
      ));
    };
    const renderColorTabContent = (tabName) => {
      if (tabName === "normal") {
        return /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(
          PanelColorSettings7,
          {
            title: __10("Counter Colors", "digiblocks"),
            initialOpen: true,
            enableAlpha: true,
            colorSettings: [
              {
                value: counterColor,
                onChange: (value) => setAttributes({ counterColor: value }),
                label: __10("Counter Color", "digiblocks")
              }
            ]
          }
        ), /* @__PURE__ */ wp.element.createElement(
          PanelColorSettings7,
          {
            title: __10("Content Colors", "digiblocks"),
            initialOpen: false,
            enableAlpha: true,
            colorSettings: [
              {
                value: titleColor,
                onChange: (value) => setAttributes({ titleColor: value }),
                label: __10("Title Color", "digiblocks")
              },
              {
                value: textColor,
                onChange: (value) => setAttributes({ textColor: value }),
                label: __10("Description Color", "digiblocks")
              }
            ]
          }
        ), displayIcon && /* @__PURE__ */ wp.element.createElement(
          PanelColorSettings7,
          {
            title: __10("Icon Colors", "digiblocks"),
            initialOpen: false,
            enableAlpha: true,
            colorSettings: [
              {
                value: iconColor,
                onChange: (value) => setAttributes({ iconColor: value }),
                label: __10("Icon Color", "digiblocks")
              },
              {
                value: iconBackgroundColor,
                onChange: (value) => setAttributes({ iconBackgroundColor: value }),
                label: __10("Icon Background", "digiblocks")
              }
            ]
          }
        ), /* @__PURE__ */ wp.element.createElement(
          PanelColorSettings7,
          {
            title: __10("Block Colors", "digiblocks"),
            initialOpen: false,
            enableAlpha: true,
            colorSettings: [
              {
                value: backgroundColor,
                onChange: (value) => setAttributes({ backgroundColor: value }),
                label: __10("Background Color", "digiblocks")
              }
            ]
          }
        ));
      } else if (tabName === "hover") {
        return /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(
          PanelColorSettings7,
          {
            title: __10("Counter Hover Colors", "digiblocks"),
            initialOpen: true,
            enableAlpha: true,
            colorSettings: [
              {
                value: counterHoverColor,
                onChange: (value) => setAttributes({ counterHoverColor: value }),
                label: __10("Counter Hover Color", "digiblocks")
              }
            ]
          }
        ), /* @__PURE__ */ wp.element.createElement(
          PanelColorSettings7,
          {
            title: __10("Content Hover Colors", "digiblocks"),
            initialOpen: false,
            enableAlpha: true,
            colorSettings: [
              {
                value: titleHoverColor,
                onChange: (value) => setAttributes({ titleHoverColor: value }),
                label: __10("Title Hover Color", "digiblocks")
              },
              {
                value: textHoverColor,
                onChange: (value) => setAttributes({ textHoverColor: value }),
                label: __10("Description Hover Color", "digiblocks")
              }
            ]
          }
        ), displayIcon && /* @__PURE__ */ wp.element.createElement(
          PanelColorSettings7,
          {
            title: __10("Icon Hover Colors", "digiblocks"),
            initialOpen: false,
            enableAlpha: true,
            colorSettings: [
              {
                value: iconHoverColor,
                onChange: (value) => setAttributes({ iconHoverColor: value }),
                label: __10("Icon Hover Color", "digiblocks")
              },
              {
                value: iconHoverBackgroundColor,
                onChange: (value) => setAttributes({ iconHoverBackgroundColor: value }),
                label: __10("Icon Hover Background", "digiblocks")
              }
            ]
          }
        ), /* @__PURE__ */ wp.element.createElement(
          PanelColorSettings7,
          {
            title: __10("Block Hover Colors", "digiblocks"),
            initialOpen: false,
            enableAlpha: true,
            colorSettings: [
              {
                value: backgroundHoverColor,
                onChange: (value) => setAttributes({ backgroundHoverColor: value }),
                label: __10("Background Hover Color", "digiblocks")
              }
            ]
          }
        ));
      }
      return null;
    };
    const renderTabContent = () => {
      switch (activeTab) {
        case "options":
          return /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement("div", { className: "components-panel__body is-opened" }, /* @__PURE__ */ wp.element.createElement(
            ToggleControl8,
            {
              label: __10("Display Icon", "digiblocks"),
              checked: displayIcon,
              onChange: (value) => setAttributes({ displayIcon: value }),
              __nextHasNoMarginBottom: true
            }
          ), displayIcon && /* @__PURE__ */ wp.element.createElement("div", { style: { marginBottom: "2rem" } }, !componentsLoaded ? /* @__PURE__ */ wp.element.createElement("div", { style: { textAlign: "center", padding: "20px 0" } }, /* @__PURE__ */ wp.element.createElement("div", { className: "components-spinner" }), /* @__PURE__ */ wp.element.createElement("p", null, __10("Loading icon selector...", "digiblocks"))) : /* @__PURE__ */ wp.element.createElement(
            FontAwesomeControl6,
            {
              label: __10("Select Icon", "digiblocks"),
              value: iconValue,
              onChange: setIconValue
            }
          ), iconValue && componentsLoaded && /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement("div", { style: { marginTop: "15px", marginBottom: "15px", padding: "10px", background: "#f0f0f1", borderRadius: "3px" } }, /* @__PURE__ */ wp.element.createElement("p", { style: { margin: "0 0 5px 0" } }, /* @__PURE__ */ wp.element.createElement("strong", null, __10("Selected Icon:", "digiblocks")), " ", iconValue.name), /* @__PURE__ */ wp.element.createElement("p", { style: { margin: "0 0 5px 0" } }, /* @__PURE__ */ wp.element.createElement("strong", null, __10("Style:", "digiblocks")), " ", iconValue.style), iconValue.categories && iconValue.categories.length > 0 && /* @__PURE__ */ wp.element.createElement("p", { style: { margin: "0" } }, /* @__PURE__ */ wp.element.createElement("strong", null, __10("Categories:", "digiblocks")), " ", iconValue.categories.join(", "))))), /* @__PURE__ */ wp.element.createElement(
            SelectControl9,
            {
              label: __10("Layout Style", "digiblocks"),
              value: layoutStyle || "stacked",
              options: layoutOptions,
              onChange: (value) => setAttributes({ layoutStyle: value }),
              __next40pxDefaultSize: true,
              __nextHasNoMarginBottom: true
            }
          ), /* @__PURE__ */ wp.element.createElement(
            RangeControl7,
            {
              label: __10("Spacing", "digiblocks"),
              value: verticalSpacing || 15,
              onChange: (value) => setAttributes({ verticalSpacing: value }),
              min: 0,
              max: 100,
              __next40pxDefaultSize: true,
              __nextHasNoMarginBottom: true
            }
          ), /* @__PURE__ */ wp.element.createElement(
            TextControl3,
            {
              label: __10("Starting Number", "digiblocks"),
              type: "number",
              value: startNumber,
              onChange: (value) => setAttributes({ startNumber: value }),
              __next40pxDefaultSize: true,
              __nextHasNoMarginBottom: true
            }
          ), /* @__PURE__ */ wp.element.createElement(
            TextControl3,
            {
              label: __10("Ending Number", "digiblocks"),
              type: "number",
              value: endNumber,
              onChange: (value) => setAttributes({ endNumber: value }),
              __next40pxDefaultSize: true,
              __nextHasNoMarginBottom: true
            }
          ), /* @__PURE__ */ wp.element.createElement(
            TextControl3,
            {
              label: __10("Counter Prefix", "digiblocks"),
              value: counterPrefix || "",
              onChange: (value) => setAttributes({ counterPrefix: value }),
              __next40pxDefaultSize: true,
              __nextHasNoMarginBottom: true
            }
          ), counterPrefix && /* @__PURE__ */ wp.element.createElement(
            RangeControl7,
            {
              label: __10("Prefix Spacing", "digiblocks"),
              value: counterPrefixSpacing || 5,
              onChange: (value) => setAttributes({ counterPrefixSpacing: value }),
              min: 0,
              max: 30,
              __next40pxDefaultSize: true,
              __nextHasNoMarginBottom: true
            }
          ), /* @__PURE__ */ wp.element.createElement(
            TextControl3,
            {
              label: __10("Counter Suffix", "digiblocks"),
              value: counterSuffix || "",
              onChange: (value) => setAttributes({ counterSuffix: value }),
              __next40pxDefaultSize: true,
              __nextHasNoMarginBottom: true
            }
          ), counterSuffix && /* @__PURE__ */ wp.element.createElement(
            RangeControl7,
            {
              label: __10("Suffix Spacing", "digiblocks"),
              value: counterSuffixSpacing || 5,
              onChange: (value) => setAttributes({ counterSuffixSpacing: value }),
              min: 0,
              max: 30,
              __next40pxDefaultSize: true,
              __nextHasNoMarginBottom: true
            }
          ), /* @__PURE__ */ wp.element.createElement(
            TextControl3,
            {
              label: __10("Title", "digiblocks"),
              value: title || "",
              onChange: (value) => setAttributes({ title: value }),
              __next40pxDefaultSize: true,
              __nextHasNoMarginBottom: true
            }
          ), /* @__PURE__ */ wp.element.createElement(
            TextControl3,
            {
              label: __10("Description", "digiblocks"),
              value: description || "",
              onChange: (value) => setAttributes({ description: value }),
              __next40pxDefaultSize: true,
              __nextHasNoMarginBottom: true
            }
          ), /* @__PURE__ */ wp.element.createElement(
            ToggleControl8,
            {
              label: __10("Use Thousand Separator", "digiblocks"),
              checked: numberWithCommas,
              onChange: (value) => setAttributes({ numberWithCommas: value }),
              __nextHasNoMarginBottom: true
            }
          ), numberWithCommas && /* @__PURE__ */ wp.element.createElement(
            TextControl3,
            {
              label: __10("Thousand Separator", "digiblocks"),
              value: thousandSeparator || ",",
              onChange: (value) => setAttributes({ thousandSeparator: value }),
              __next40pxDefaultSize: true,
              __nextHasNoMarginBottom: true
            }
          ), /* @__PURE__ */ wp.element.createElement(
            RangeControl7,
            {
              label: __10("Decimal Places", "digiblocks"),
              value: decimalPlaces || 0,
              onChange: (value) => setAttributes({ decimalPlaces: value }),
              min: 0,
              max: 10,
              __next40pxDefaultSize: true,
              __nextHasNoMarginBottom: true
            }
          ), decimalPlaces > 0 && /* @__PURE__ */ wp.element.createElement(
            TextControl3,
            {
              label: __10("Decimal Separator", "digiblocks"),
              value: decimalSeparator || ".",
              onChange: (value) => setAttributes({ decimalSeparator: value }),
              __next40pxDefaultSize: true,
              __nextHasNoMarginBottom: true
            }
          ), /* @__PURE__ */ wp.element.createElement("div", { style: { marginTop: "10px" } }, /* @__PURE__ */ wp.element.createElement(
            Button7,
            {
              isPrimary: true,
              onClick: animateCounter,
              disabled: isCounterAnimating
            },
            __10("Preview Counter Animation", "digiblocks")
          ))));
        case "style":
          return /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(
            TabPanelBody9,
            {
              tab: "style",
              name: "colors",
              title: __10("Colors", "digiblocks"),
              initialOpen: true
            },
            /* @__PURE__ */ wp.element.createElement(
              TabPanel5,
              {
                className: "digiblocks-control-tabs",
                activeClass: "active-tab",
                tabs: stateTabList,
                onSelect: (tab) => setActiveColorTab(tab.name)
              },
              (tab) => renderColorTabContent(tab.name)
            )
          ), /* @__PURE__ */ wp.element.createElement(
            TabPanelBody9,
            {
              tab: "style",
              name: "typography",
              title: __10("Typography", "digiblocks"),
              initialOpen: false
            },
            /* @__PURE__ */ wp.element.createElement(
              TypographyControl5,
              {
                label: __10("Counter Typography", "digiblocks"),
                value: typography || {},
                onChange: (value) => setAttributes({ typography: value }),
                defaults: {
                  fontSize: { desktop: 48, tablet: 42, mobile: 36 },
                  fontSizeUnit: "px",
                  lineHeight: { desktop: 1.2, tablet: 1.2, mobile: 1.2 },
                  lineHeightUnit: "em"
                }
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              TypographyControl5,
              {
                label: __10("Title Typography", "digiblocks"),
                value: titleTypography || {},
                onChange: (value) => setAttributes({ titleTypography: value }),
                defaults: {
                  fontSize: { desktop: 20, tablet: 18, mobile: 16 },
                  fontSizeUnit: "px",
                  lineHeight: { desktop: 1.4, tablet: 1.3, mobile: 1.2 },
                  lineHeightUnit: "em"
                }
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              TypographyControl5,
              {
                label: __10("Description Typography", "digiblocks"),
                value: contentTypography || {},
                onChange: (value) => setAttributes({ contentTypography: value }),
                defaults: {
                  fontSize: { desktop: 16, tablet: 15, mobile: 14 },
                  fontSizeUnit: "px",
                  lineHeight: { desktop: 1.5, tablet: 1.4, mobile: 1.3 },
                  lineHeightUnit: "em"
                }
              }
            )
          ), displayIcon && /* @__PURE__ */ wp.element.createElement(
            TabPanelBody9,
            {
              tab: "style",
              name: "icon",
              title: __10("Icon", "digiblocks"),
              initialOpen: false
            },
            /* @__PURE__ */ wp.element.createElement(
              ResponsiveControl8,
              {
                label: __10("Icon Size", "digiblocks")
              },
              /* @__PURE__ */ wp.element.createElement(
                RangeControl7,
                {
                  value: iconSize && iconSize[localActiveDevice] ? iconSize[localActiveDevice] : 32,
                  onChange: (value) => setAttributes({
                    iconSize: {
                      ...iconSize || { desktop: 32, tablet: 28, mobile: 24 },
                      [localActiveDevice]: value
                    }
                  }),
                  min: 8,
                  max: 200,
                  __next40pxDefaultSize: true,
                  __nextHasNoMarginBottom: true
                }
              )
            ),
            /* @__PURE__ */ wp.element.createElement(
              SelectControl9,
              {
                label: __10("Border Style", "digiblocks"),
                value: iconBorderStyle || "default",
                options: borderStyleOptions,
                onChange: (value) => {
                  if (value !== "default" && value !== "none" && (iconBorderStyle === "default" || iconBorderStyle === "none" || !iconBorderStyle)) {
                    if (!iconBorderWidth || Object.keys(iconBorderWidth).length === 0) {
                      setAttributes({
                        iconBorderWidth: {
                          desktop: { top: 1, right: 1, bottom: 1, left: 1, unit: "px" },
                          tablet: { top: "", right: "", bottom: "", left: "", unit: "px" },
                          mobile: { top: "", right: "", bottom: "", left: "", unit: "px" }
                        }
                      });
                    }
                  }
                  setAttributes({ iconBorderStyle: value });
                },
                __next40pxDefaultSize: true,
                __nextHasNoMarginBottom: true
              }
            ),
            iconBorderStyle && iconBorderStyle !== "default" && iconBorderStyle !== "none" && /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(
              PanelColorSettings7,
              {
                title: __10("Border Colors", "digiblocks"),
                enableAlpha: true,
                colorSettings: [
                  {
                    value: iconBorderColor,
                    onChange: (value) => setAttributes({ iconBorderColor: value }),
                    label: __10("Border Color", "digiblocks")
                  },
                  {
                    value: iconHoverBorderColor,
                    onChange: (value) => setAttributes({ iconHoverBorderColor: value }),
                    label: __10("Border Hover Color", "digiblocks")
                  }
                ]
              }
            ), /* @__PURE__ */ wp.element.createElement(
              ResponsiveControl8,
              {
                label: __10("Border Width", "digiblocks")
              },
              /* @__PURE__ */ wp.element.createElement(
                DimensionControl7,
                {
                  values: iconBorderWidth[localActiveDevice],
                  onChange: (value) => setAttributes({
                    iconBorderWidth: {
                      ...iconBorderWidth || {},
                      [localActiveDevice]: value
                    }
                  })
                }
              )
            ), /* @__PURE__ */ wp.element.createElement(
              ResponsiveControl8,
              {
                label: __10("Border Radius", "digiblocks")
              },
              /* @__PURE__ */ wp.element.createElement(
                DimensionControl7,
                {
                  values: iconBorderRadius[localActiveDevice],
                  onChange: (value) => setAttributes({
                    iconBorderRadius: {
                      ...iconBorderRadius || {},
                      [localActiveDevice]: value
                    }
                  }),
                  units: [
                    { label: "px", value: "px" },
                    { label: "%", value: "%" }
                  ]
                }
              )
            )),
            /* @__PURE__ */ wp.element.createElement(
              ResponsiveControl8,
              {
                label: __10("Icon Padding", "digiblocks")
              },
              /* @__PURE__ */ wp.element.createElement(
                DimensionControl7,
                {
                  values: iconPadding[localActiveDevice],
                  onChange: (value) => setAttributes({
                    iconPadding: {
                      ...iconPadding || {},
                      [localActiveDevice]: value
                    }
                  })
                }
              )
            ),
            /* @__PURE__ */ wp.element.createElement(
              ResponsiveControl8,
              {
                label: __10("Icon Margin", "digiblocks")
              },
              /* @__PURE__ */ wp.element.createElement(
                DimensionControl7,
                {
                  values: iconMargin && iconMargin[localActiveDevice] ? iconMargin[localActiveDevice] : {
                    top: 0,
                    right: 0,
                    bottom: localActiveDevice === "desktop" ? 20 : localActiveDevice === "tablet" ? 15 : 10,
                    left: 0,
                    unit: "px"
                  },
                  onChange: (value) => setAttributes({
                    iconMargin: {
                      ...iconMargin || {
                        desktop: { top: 0, right: 0, bottom: 20, left: 0, unit: "px" },
                        tablet: { top: 0, right: 0, bottom: 15, left: 0, unit: "px" },
                        mobile: { top: 0, right: 0, bottom: 10, left: 0, unit: "px" }
                      },
                      [localActiveDevice]: value
                    }
                  })
                }
              )
            )
          ), /* @__PURE__ */ wp.element.createElement(
            TabPanelBody9,
            {
              tab: "style",
              name: "animation",
              title: __10("Counter Animation", "digiblocks"),
              initialOpen: false
            },
            /* @__PURE__ */ wp.element.createElement(
              RangeControl7,
              {
                label: __10("Animation Duration (ms)", "digiblocks"),
                value: animationDuration || 2e3,
                onChange: (value) => setAttributes({ animationDuration: value }),
                min: 100,
                max: 1e4,
                step: 100,
                __next40pxDefaultSize: true,
                __nextHasNoMarginBottom: true
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              RangeControl7,
              {
                label: __10("Animation Delay (ms)", "digiblocks"),
                value: animationDelay || 0,
                onChange: (value) => setAttributes({ animationDelay: value }),
                min: 0,
                max: 1e4,
                step: 100,
                __next40pxDefaultSize: true,
                __nextHasNoMarginBottom: true
              }
            )
          ), /* @__PURE__ */ wp.element.createElement(
            TabPanelBody9,
            {
              tab: "style",
              name: "border",
              title: __10("Border & Shadow", "digiblocks"),
              initialOpen: false
            },
            /* @__PURE__ */ wp.element.createElement(
              SelectControl9,
              {
                label: __10("Border Style", "digiblocks"),
                value: borderStyle || "default",
                options: borderStyleOptions,
                onChange: (value) => {
                  if (value !== "default" && value !== "none" && (borderStyle === "default" || borderStyle === "none" || !borderStyle)) {
                    if (!borderWidth || Object.keys(borderWidth).length === 0) {
                      setAttributes({
                        borderWidth: {
                          desktop: { top: 1, right: 1, bottom: 1, left: 1, unit: "px" },
                          tablet: { top: "", right: "", bottom: "", left: "", unit: "px" },
                          mobile: { top: "", right: "", bottom: "", left: "", unit: "px" }
                        }
                      });
                    }
                    if (!borderRadius || Object.keys(borderRadius).length === 0) {
                      setAttributes({
                        borderRadius: {
                          desktop: { top: 8, right: 8, bottom: 8, left: 8, unit: "px" },
                          tablet: { top: "", right: "", bottom: "", left: "", unit: "px" },
                          mobile: { top: "", right: "", bottom: "", left: "", unit: "px" }
                        }
                      });
                    }
                  }
                  setAttributes({ borderStyle: value });
                },
                __next40pxDefaultSize: true,
                __nextHasNoMarginBottom: true
              }
            ),
            borderStyle && borderStyle !== "default" && borderStyle !== "none" && /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(
              PanelColorSettings7,
              {
                title: __10("Border Color", "digiblocks"),
                enableAlpha: true,
                colorSettings: [
                  {
                    value: borderColor,
                    onChange: (value) => setAttributes({ borderColor: value }),
                    label: __10("Border Color", "digiblocks")
                  }
                ]
              }
            ), /* @__PURE__ */ wp.element.createElement(
              ResponsiveControl8,
              {
                label: __10("Border Width", "digiblocks")
              },
              /* @__PURE__ */ wp.element.createElement(
                DimensionControl7,
                {
                  values: borderWidth[localActiveDevice],
                  onChange: (value) => setAttributes({
                    borderWidth: {
                      ...borderWidth,
                      [localActiveDevice]: value
                    }
                  })
                }
              )
            ), /* @__PURE__ */ wp.element.createElement(
              ResponsiveControl8,
              {
                label: __10("Border Radius", "digiblocks")
              },
              /* @__PURE__ */ wp.element.createElement(
                DimensionControl7,
                {
                  values: borderRadius[localActiveDevice],
                  onChange: (value) => setAttributes({
                    borderRadius: {
                      ...borderRadius,
                      [localActiveDevice]: value
                    }
                  }),
                  units: [
                    { label: "px", value: "px" },
                    { label: "%", value: "%" }
                  ]
                }
              )
            )),
            /* @__PURE__ */ wp.element.createElement(
              SelectControl9,
              {
                label: __10("Hover Effect", "digiblocks"),
                value: hoverEffect || "none",
                options: hoverEffectOptions,
                onChange: (value) => setAttributes({ hoverEffect: value }),
                __next40pxDefaultSize: true,
                __nextHasNoMarginBottom: true
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              BoxShadowControl7,
              {
                normalValue: boxShadow,
                hoverValue: boxShadowHover,
                onNormalChange: (value) => setAttributes({ boxShadow: value }),
                onHoverChange: (value) => setAttributes({ boxShadowHover: value })
              }
            )
          ), /* @__PURE__ */ wp.element.createElement(
            TabPanelBody9,
            {
              tab: "style",
              name: "spacing",
              title: __10("Spacing", "digiblocks"),
              initialOpen: false
            },
            /* @__PURE__ */ wp.element.createElement(
              ResponsiveControl8,
              {
                label: __10("Padding", "digiblocks")
              },
              /* @__PURE__ */ wp.element.createElement(
                DimensionControl7,
                {
                  values: padding && padding[localActiveDevice] ? padding[localActiveDevice] : { top: 30, right: 30, bottom: 30, left: 30, unit: "px" },
                  onChange: (value) => setAttributes({
                    padding: {
                      ...padding,
                      [localActiveDevice]: value
                    }
                  })
                }
              )
            ),
            /* @__PURE__ */ wp.element.createElement(
              ResponsiveControl8,
              {
                label: __10("Margin", "digiblocks")
              },
              /* @__PURE__ */ wp.element.createElement(
                DimensionControl7,
                {
                  values: margin && margin[localActiveDevice] ? margin[localActiveDevice] : { top: 0, right: 0, bottom: 30, left: 0, unit: "px" },
                  onChange: (value) => setAttributes({
                    margin: {
                      ...margin,
                      [localActiveDevice]: value
                    }
                  })
                }
              )
            )
          ));
        case "advanced":
          return /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(
            TabPanelBody9,
            {
              tab: "advanced",
              name: "animation",
              title: __10("Animation", "digiblocks"),
              initialOpen: true
            },
            /* @__PURE__ */ wp.element.createElement(
              SelectControl9,
              {
                label: __10("Animation Effect", "digiblocks"),
                value: animation,
                options: animationOptions,
                onChange: (value) => setAttributes({ animation: value }),
                __next40pxDefaultSize: true,
                __nextHasNoMarginBottom: true
              }
            ),
            animation && animation !== "none" && /* @__PURE__ */ wp.element.createElement("div", { style: { marginTop: "10px" } }, /* @__PURE__ */ wp.element.createElement(
              Button7,
              {
                variant: "secondary",
                isSecondary: true,
                onClick: handlePreviewClick,
                style: { width: "100%" }
              },
              __10("Preview Animation", "digiblocks")
            ))
          ), /* @__PURE__ */ wp.element.createElement(
            TabPanelBody9,
            {
              tab: "advanced",
              name: "visibility",
              title: __10("Visibility", "digiblocks"),
              initialOpen: false
            },
            /* @__PURE__ */ wp.element.createElement("div", { className: "components-base-control__help", style: {
              padding: "12px",
              backgroundColor: "#f0f6fc",
              border: "1px solid #c3ddfd",
              borderRadius: "4px",
              marginBottom: "16px"
            } }, /* @__PURE__ */ wp.element.createElement("strong", null, __10("Editor Note:", "digiblocks")), /* @__PURE__ */ wp.element.createElement("br", null), __10("Hidden elements appear with reduced opacity in the editor for easy editing. Visibility changes only take effect on the frontend.", "digiblocks")),
            /* @__PURE__ */ wp.element.createElement(
              ToggleControl8,
              {
                label: __10("Hide on Desktop", "digiblocks"),
                checked: visibility.desktop,
                onChange: (value) => setAttributes({
                  visibility: {
                    ...visibility,
                    desktop: value
                  }
                }),
                __nextHasNoMarginBottom: true
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              ToggleControl8,
              {
                label: __10("Hide on Tablet", "digiblocks"),
                checked: visibility.tablet,
                onChange: (value) => setAttributes({
                  visibility: {
                    ...visibility,
                    tablet: value
                  }
                }),
                __nextHasNoMarginBottom: true
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              ToggleControl8,
              {
                label: __10("Hide on Mobile", "digiblocks"),
                checked: visibility.mobile,
                onChange: (value) => setAttributes({
                  visibility: {
                    ...visibility,
                    mobile: value
                  }
                }),
                __nextHasNoMarginBottom: true
              }
            )
          ), /* @__PURE__ */ wp.element.createElement(
            TabPanelBody9,
            {
              tab: "advanced",
              name: "additional",
              title: __10("Additional", "digiblocks"),
              initialOpen: false
            },
            /* @__PURE__ */ wp.element.createElement("div", { className: "components-base-control html-anchor-control" }, /* @__PURE__ */ wp.element.createElement("div", { className: "components-base-control__field" }, /* @__PURE__ */ wp.element.createElement("label", { className: "components-base-control__label", htmlFor: "html-anchor" }, __10("HTML anchor", "digiblocks")), /* @__PURE__ */ wp.element.createElement(
              "input",
              {
                className: "components-text-control__input",
                type: "text",
                id: "html-anchor",
                value: anchor || "",
                onChange: (e) => setAttributes({ anchor: e.target.value }),
                "aria-describedby": "html-anchor-help",
                autoCapitalize: "none",
                autoComplete: "off"
              }
            )), /* @__PURE__ */ wp.element.createElement("p", { id: "html-anchor-help", className: "components-base-control__help" }, __10(`Enter a word or two \u2014 without spaces \u2014 to make a unique web address just for this block, called an "anchor". Then, you'll be able to link directly to this section of your page.`, "digiblocks"), " ", /* @__PURE__ */ wp.element.createElement(
              "a",
              {
                className: "components-external-link",
                href: "https://wordpress.org/documentation/article/page-jumps/",
                target: "_blank",
                rel: "external noreferrer noopener"
              },
              /* @__PURE__ */ wp.element.createElement("span", { className: "components-external-link__contents" }, __10("Learn more about anchors", "digiblocks")),
              /* @__PURE__ */ wp.element.createElement("span", { className: "components-external-link__icon", "aria-label": "(opens in a new tab)" }, "\u2197")
            ))),
            /* @__PURE__ */ wp.element.createElement("div", { className: "components-base-control" }, /* @__PURE__ */ wp.element.createElement("div", { className: "components-base-control__field" }, /* @__PURE__ */ wp.element.createElement("label", { className: "components-base-control__label", htmlFor: "additional-css-classes" }, __10("Additional CSS class(es)", "digiblocks")), /* @__PURE__ */ wp.element.createElement(
              "input",
              {
                className: "components-text-control__input",
                type: "text",
                id: "additional-css-classes",
                value: customClasses || "",
                onChange: (e) => setAttributes({ customClasses: e.target.value }),
                "aria-describedby": "additional-css-classes-help",
                autoComplete: "off"
              }
            )), /* @__PURE__ */ wp.element.createElement("p", { id: "additional-css-classes-help", className: "components-base-control__help" }, __10("Separate multiple classes with spaces.", "digiblocks")))
          ));
        default:
          return null;
      }
    };
    const blockProps = useBlockProps15({
      className: `digiblocks-counter ${id} align-${align} ${customClasses || ""}`,
      id: anchor || null
      // Set the anchor as ID if provided
    });
    const formattedCounter = formatNumber(counterValue);
    return /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(BlockControls3, null, /* @__PURE__ */ wp.element.createElement(
      AlignmentToolbar3,
      {
        value: align,
        onChange: (value) => setAttributes({ align: value })
      }
    )), /* @__PURE__ */ wp.element.createElement(InspectorControls8, null, /* @__PURE__ */ wp.element.createElement(
      CustomTabPanel8,
      {
        tabs: tabList,
        activeTab,
        onSelect: setActiveTab
      },
      renderTabContent()
    )), /* @__PURE__ */ wp.element.createElement("style", { dangerouslySetInnerHTML: { __html: generateCSS() } }), /* @__PURE__ */ wp.element.createElement("div", { ...blockProps }, /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-counter-inner" }, displayIcon && renderIcon(), /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-counter-content" }, /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-counter-number-wrapper" }, counterPrefix && /* @__PURE__ */ wp.element.createElement("span", { className: "digiblocks-counter-prefix" }, counterPrefix), /* @__PURE__ */ wp.element.createElement("span", { className: "digiblocks-counter-number" }, formattedCounter), counterSuffix && /* @__PURE__ */ wp.element.createElement("span", { className: "digiblocks-counter-suffix" }, counterSuffix)), title && /* @__PURE__ */ wp.element.createElement("h3", { className: "digiblocks-counter-title" }, title), description && /* @__PURE__ */ wp.element.createElement("p", { className: "digiblocks-counter-description" }, description)))));
  };
  var edit_default8 = CounterEdit;

  // blocks/counter/save.js
  var { useBlockProps: useBlockProps16 } = window.wp.blockEditor;
  var CounterSave = ({ attributes }) => {
    const {
      id,
      anchor,
      customClasses,
      iconValue,
      startNumber,
      endNumber,
      counterPrefix,
      counterSuffix,
      title,
      description,
      align,
      animation,
      layoutStyle,
      displayIcon,
      numberWithCommas,
      thousandSeparator,
      decimalPlaces,
      decimalSeparator,
      animationDuration,
      animationDelay
    } = attributes;
    const blockClasses = [
      "digiblocks-counter",
      id,
      `align-${align || "center"}`,
      `layout-${layoutStyle || "stacked"}`,
      animation !== "none" ? `animate-${animation}` : "",
      customClasses || ""
    ].filter(Boolean).join(" ");
    const blockProps = useBlockProps16.save({
      className: blockClasses,
      id: anchor || null,
      "data-start-value": startNumber || 0,
      "data-end-value": endNumber || 0,
      "data-animation-duration": animationDuration || 2e3,
      "data-animation-delay": animationDelay || 0,
      "data-thousand-separator": numberWithCommas ? thousandSeparator || "," : "",
      "data-decimal-places": decimalPlaces || 0,
      "data-decimal-separator": decimalSeparator || "."
    });
    const renderIcon = () => {
      if (!displayIcon || !iconValue || !iconValue.svg || iconValue.svg.trim() === "") {
        return null;
      }
      return /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-counter-icon" }, /* @__PURE__ */ wp.element.createElement("span", { dangerouslySetInnerHTML: { __html: iconValue.svg } }));
    };
    return /* @__PURE__ */ wp.element.createElement("div", { ...blockProps }, /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-counter-inner" }, displayIcon && renderIcon(), /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-counter-content" }, /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-counter-number-wrapper" }, counterPrefix && /* @__PURE__ */ wp.element.createElement("span", { className: "digiblocks-counter-prefix" }, counterPrefix), /* @__PURE__ */ wp.element.createElement("span", { className: "digiblocks-counter-number" }, startNumber || 0), counterSuffix && /* @__PURE__ */ wp.element.createElement("span", { className: "digiblocks-counter-suffix" }, counterSuffix)), title && /* @__PURE__ */ wp.element.createElement("h3", { className: "digiblocks-counter-title" }, title), description && /* @__PURE__ */ wp.element.createElement("p", { className: "digiblocks-counter-description" }, description))));
  };
  var save_default8 = CounterSave;

  // blocks/digi-products/edit.js
  var { __: __11 } = window.wp.i18n;
  var {
    useBlockProps: useBlockProps17,
    InspectorControls: InspectorControls9,
    PanelColorSettings: PanelColorSettings8
  } = window.wp.blockEditor;
  var {
    TextControl: TextControl4,
    ToggleControl: ToggleControl9,
    SelectControl: SelectControl10,
    RangeControl: RangeControl8,
    Placeholder,
    Spinner,
    TabPanel: TabPanel6,
    Button: Button8,
    __experimentalToggleGroupControl: ToggleGroupControl8,
    __experimentalToggleGroupControlOption: ToggleGroupControlOption8
  } = window.wp.components;
  var { useState: useState9, useEffect: useEffect9, useMemo, useRef: useRef6 } = window.wp.element;
  var { useSelect: useSelect3 } = window.wp.data;
  var { useBlockId: useBlockId9, getDimensionCSS: getDimensionCSS7, animations: animations7, animationPreview: animationPreview7 } = digi.utils;
  var { tabIcons: tabIcons9 } = digi.icons;
  var { ResponsiveControl: ResponsiveControl9, DimensionControl: DimensionControl8, TypographyControl: TypographyControl6, BoxShadowControl: BoxShadowControl8, CustomTabPanel: CustomTabPanel9, TabPanelBody: TabPanelBody10 } = digi.components;
  var DigiProductsEdit = ({ attributes, setAttributes, clientId }) => {
    const {
      id,
      anchor,
      visibility,
      customClasses,
      productsToShow,
      columns,
      productStyle,
      displayFeaturedImage,
      displayTitle,
      displayPrice,
      displayRating,
      displayCategories,
      displayExcerpt,
      displayViewProductButton,
      excerptLength,
      viewProductText,
      order,
      orderBy,
      categories,
      enablePagination,
      paginationAlign,
      paginationBackgroundColor,
      paginationTextColor,
      paginationActiveBackgroundColor,
      paginationActiveTextColor,
      titleColor,
      titleHoverColor,
      excerptColor,
      priceColor,
      salePriceColor,
      catBackgroundColor,
      catColor,
      catHoverBackgroundColor,
      catHoverColor,
      buttonBackgroundColor,
      buttonTextColor,
      buttonBackgroundHoverColor,
      buttonTextHoverColor,
      imageMargin,
      contentMargin,
      padding,
      margin,
      itemSpacing,
      titleTypography,
      headingTypography,
      textTypography,
      contentTypography,
      buttonTypography,
      buttonPadding,
      buttonBorderRadius,
      imageSize,
      imageBorderRadius,
      cardStyle,
      cardBackgroundColor,
      cardPadding,
      cardBorderRadius,
      cardBorderStyle,
      cardBorderWidth,
      cardBorderColor,
      cardShadow,
      cardShadowHover,
      animation
    } = attributes;
    useBlockId9(id, clientId, setAttributes);
    const [localActiveDevice, setLocalActiveDevice] = useState9(window.digi.responsiveState.activeDevice);
    const [activeTab, setActiveTab] = useState9(() => {
      if (window.digi.uiState) {
        const savedTab = window.digi.uiState.getActiveTab(clientId);
        if (savedTab)
          return savedTab;
      }
      return "options";
    });
    useEffect9(() => {
      const unsubscribe = window.digi.responsiveState.subscribe((device) => {
        setLocalActiveDevice(device);
      });
      return unsubscribe;
    }, []);
    const productQueryObject = useMemo(() => {
      const query = {
        post_type: "digi_product",
        per_page: productsToShow,
        order,
        orderby: orderBy,
        _embed: true
      };
      if (categories && categories.length > 0 && !categories.includes(0)) {
        query["digi_product_cat"] = categories.join(",");
      }
      if (orderBy === "meta_value_num") {
        query.meta_key = "digi_price";
      }
      return query;
    }, [productsToShow, order, orderBy, categories]);
    const queryParams = useMemo(() => ({
      productsToShow,
      order,
      orderBy,
      categories: categories && categories.length > 0 ? categories.join(",") : ""
    }), [productsToShow, order, orderBy, categories]);
    const allCategories = useSelect3((select) => {
      const { getEntityRecords } = select("core");
      return getEntityRecords("taxonomy", "digi_product_cat", { per_page: -1 }) || [];
    }, []);
    const formattedCategories = useMemo(() => {
      return [
        { label: __11("All Categories", "digiblocks"), value: "0" },
        ...(allCategories || []).map((category) => ({
          label: category.name,
          value: category.id.toString()
        }))
      ];
    }, [allCategories]);
    const products = useSelect3((select) => {
      const { getEntityRecords } = select("core");
      return getEntityRecords("postType", "digi_product", productQueryObject);
    }, [JSON.stringify(queryParams)]);
    const previewTimeoutRef = useRef6(null);
    useEffect9(() => {
      if (animation && animation !== "none") {
        const timeoutId = setTimeout(() => {
          animationPreview7(id, animation, animations7, previewTimeoutRef);
        }, 100);
        return () => clearTimeout(timeoutId);
      }
    }, [animation]);
    const handlePreviewClick = () => {
      animationPreview7(id, animation, animations7, previewTimeoutRef);
    };
    const animationOptions = [
      { label: __11("None", "digiblocks"), value: "none" },
      ...Object.keys(animations7).map((animation2) => ({
        label: animation2.replace(/-/g, " ").replace(/\b\w/g, (l) => l.toUpperCase()),
        value: animation2
      }))
    ];
    const tabList = [
      {
        name: "options",
        title: __11("Options", "digiblocks"),
        icon: tabIcons9.optionsIcon
      },
      {
        name: "style",
        title: __11("Style", "digiblocks"),
        icon: tabIcons9.styleIcon
      },
      {
        name: "advanced",
        title: __11("Advanced", "digiblocks"),
        icon: tabIcons9.advancedIcon
      }
    ];
    const stateTabList = [
      {
        name: "normal",
        title: __11("Normal", "digiblocks"),
        className: "digiblocks-tab-1 normal"
      },
      {
        name: "hover",
        title: __11("Hover", "digiblocks"),
        className: "digiblocks-tab-2 hover"
      }
    ];
    const imageSizes = [
      { label: __11("Thumbnail", "digiblocks"), value: "thumbnail" },
      { label: __11("Medium", "digiblocks"), value: "medium" },
      { label: __11("Large", "digiblocks"), value: "large" },
      { label: __11("Full", "digiblocks"), value: "full" }
    ];
    const orderOptions = [
      { label: __11("Ascending", "digiblocks"), value: "asc" },
      { label: __11("Descending", "digiblocks"), value: "desc" }
    ];
    const orderByOptions = [
      { label: __11("Date", "digiblocks"), value: "date" },
      { label: __11("Title", "digiblocks"), value: "title" },
      { label: __11("Price", "digiblocks"), value: "meta_value_num" },
      { label: __11("Modified Date", "digiblocks"), value: "modified" }
    ];
    const borderStyleOptions = [
      { label: __11("None", "digiblocks"), value: "none" },
      { label: __11("Solid", "digiblocks"), value: "solid" },
      { label: __11("Dashed", "digiblocks"), value: "dashed" },
      { label: __11("Dotted", "digiblocks"), value: "dotted" },
      { label: __11("Double", "digiblocks"), value: "double" }
    ];
    const generateCSS = () => {
      const activeDevice = localActiveDevice;
      let animationCSS = "";
      if (animation && animation !== "none" && animations7[animation]) {
        animationCSS = animations7[animation].keyframes;
      }
      return `
            /* Digi Products Block - ${id} */
            .${id} {
                ${getDimensionCSS7(margin, "margin", activeDevice)}
                ${getDimensionCSS7(padding, "padding", activeDevice)}
                width: 100%;
            }
            
            /* Grid layout */
            .${id} .digiblocks-products-container {
                display: ${productStyle === "list" ? "flex" : "grid"};
                ${productStyle === "list" ? `flex-direction: column;` : ""}
                ${productStyle !== "list" ? `grid-template-columns: repeat(${columns[activeDevice]}, 1fr);` : ""}
                gap: ${itemSpacing[activeDevice]}px;
            }
            
            /* List layout */
            .${id}.style-list .digiblocks-product-item {
                flex-direction: row;
                flex-wrap: wrap;
                align-items: stretch;
            }
            
            .${id}.style-list .digiblocks-product-image {
                max-width: 35%;
                width: auto;
            }
            
            .${id}.style-list .digiblocks-product-image img {
                height: 100%;
                object-fit: cover;
            }
            
            .${id}.style-list .digiblocks-product-content {
                flex: 1;
            }
            
            /* Product item */
            .${id} .digiblocks-product-item {
                display: flex;
                flex-direction: column;
                gap: ${imageMargin[activeDevice]}px;
                ${cardStyle ? `
                background-color: ${cardBackgroundColor};
                ${getDimensionCSS7(cardPadding, "padding", activeDevice)}
                ${getDimensionCSS7(cardBorderRadius, "border-radius", activeDevice)}
                ` : ""}
                
                ${cardStyle && cardBorderStyle !== "none" ? `
                border-style: ${cardBorderStyle};
                border-color: ${cardBorderColor};
                ${getDimensionCSS7(cardBorderWidth, "border-width", activeDevice)}
                ` : ""}
                
                ${cardStyle && cardShadow?.enable ? `box-shadow: ${cardShadow.horizontal}px ${cardShadow.vertical}px ${cardShadow.blur}px ${cardShadow.spread}px ${cardShadow.color};` : ""}
                transition: all 0.3s ease;
            }
            
            /* Featured image */
            .${id} .digiblocks-product-image {
                width: 100%;
                overflow: hidden;
                ${getDimensionCSS7(imageBorderRadius, "border-radius", activeDevice)}
            }
            
            .${id} .digiblocks-product-image img {
                width: 100%;
                height: auto;
                display: block;
                transition: transform 0.3s ease;
            }

            /* Content */
            .${id} .digiblocks-product-content {
                display: flex;
                flex-direction: column;
                gap: ${contentMargin[activeDevice]}px;
            }
            
            /* Product title */
            .${id} .digiblocks-product-title {
                margin: 0;
                color: ${titleColor};
                ${titleTypography.fontFamily ? `font-family: ${titleTypography.fontFamily};` : ""}
                ${titleTypography.fontSize?.[activeDevice] ? `font-size: ${titleTypography.fontSize[activeDevice]}${titleTypography.fontSizeUnit || "px"};` : ""}
                ${titleTypography.fontWeight ? `font-weight: ${titleTypography.fontWeight};` : ""}
                ${titleTypography.fontStyle ? `font-style: ${titleTypography.fontStyle};` : ""}
                ${titleTypography.textTransform ? `text-transform: ${titleTypography.textTransform};` : ""}
                ${titleTypography.textDecoration ? `text-decoration: ${titleTypography.textDecoration};` : ""}
                ${titleTypography.lineHeight?.[activeDevice] ? `line-height: ${titleTypography.lineHeight[activeDevice]}${titleTypography.lineHeightUnit || "em"};` : ""}
                ${titleTypography.letterSpacing?.[activeDevice] ? `letter-spacing: ${titleTypography.letterSpacing[activeDevice]}${titleTypography.letterSpacingUnit || "px"};` : ""}
            }
            
            .${id} .digiblocks-product-title a {
                color: ${titleColor};
                text-decoration: none;
            }
            
            /* Product excerpt */
            .${id} .digiblocks-product-excerpt {
                color: ${excerptColor};
                ${contentTypography.fontFamily ? `font-family: ${contentTypography.fontFamily};` : ""}
                ${contentTypography.fontSize?.[activeDevice] ? `font-size: ${contentTypography.fontSize[activeDevice]}${contentTypography.fontSizeUnit || "px"};` : ""}
                ${contentTypography.fontWeight ? `font-weight: ${contentTypography.fontWeight};` : ""}
                ${contentTypography.fontStyle ? `font-style: ${contentTypography.fontStyle};` : ""}
                ${contentTypography.textTransform ? `text-transform: ${contentTypography.textTransform};` : ""}
                ${contentTypography.textDecoration ? `text-decoration: ${contentTypography.textDecoration};` : ""}
                ${contentTypography.lineHeight?.[activeDevice] ? `line-height: ${contentTypography.lineHeight[activeDevice]}${contentTypography.lineHeightUnit || "em"};` : ""}
                ${contentTypography.letterSpacing?.[activeDevice] ? `letter-spacing: ${contentTypography.letterSpacing[activeDevice]}${contentTypography.letterSpacingUnit || "px"};` : ""}
            }
            
            /* Price */
            .${id} .digiblocks-product-price {
                display: flex;
                gap: 8px;
                align-items: center;
				color: ${priceColor};
                ${headingTypography.fontFamily ? `font-family: ${headingTypography.fontFamily};` : ""}
                ${headingTypography.fontSize?.[activeDevice] ? `font-size: ${headingTypography.fontSize[activeDevice]}${headingTypography.fontSizeUnit || "px"};` : ""}
                ${headingTypography.fontWeight ? `font-weight: ${headingTypography.fontWeight};` : ""}
                ${headingTypography.fontStyle ? `font-style: ${headingTypography.fontStyle};` : ""}
                ${headingTypography.textTransform ? `text-transform: ${headingTypography.textTransform};` : ""}
                ${headingTypography.lineHeight?.[activeDevice] ? `line-height: ${headingTypography.lineHeight[activeDevice]}${headingTypography.lineHeightUnit || "em"};` : ""}
                ${headingTypography.letterSpacing?.[activeDevice] ? `letter-spacing: ${headingTypography.letterSpacing[activeDevice]}${headingTypography.letterSpacingUnit || "px"};` : ""}
            }
            
            .${id} .digiblocks-product-price .regular-price {
                color: ${priceColor};
            }
            
            .${id} .digiblocks-product-price .regular-price.del {
                text-decoration: line-through;
            }
            
            .${id} .digiblocks-product-price .sale-price {
                color: ${salePriceColor};
            }
            
            /* Categories */
            .${id} .digiblocks-product-categories {
                display: flex;
                flex-wrap: wrap;
                gap: .5rem;
                ${textTypography.fontFamily ? `font-family: ${textTypography.fontFamily};` : ""}
                ${textTypography.fontSize?.[activeDevice] ? `font-size: ${textTypography.fontSize[activeDevice]}${textTypography.fontSizeUnit || "px"};` : ""}
                ${textTypography.fontWeight ? `font-weight: ${textTypography.fontWeight};` : ""}
                ${textTypography.fontStyle ? `font-style: ${textTypography.fontStyle};` : ""}
                ${textTypography.textTransform ? `text-transform: ${textTypography.textTransform};` : ""}
                ${textTypography.textDecoration ? `text-decoration: ${textTypography.textDecoration};` : ""}
                ${textTypography.lineHeight?.[activeDevice] ? `line-height: ${textTypography.lineHeight[activeDevice]}${textTypography.lineHeightUnit || "em"};` : ""}
                ${textTypography.letterSpacing?.[activeDevice] ? `letter-spacing: ${textTypography.letterSpacing[activeDevice]}${textTypography.letterSpacingUnit || "px"};` : ""}
            }
            
            .${id} .digiblocks-product-categories a {
                display: inline-flex;
                border-radius: 3px;
                padding: 3px 5px;
                background-color: ${catBackgroundColor};
                color: ${catColor};
                text-decoration: none;
                transition: all 0.3s ease;
            }
            
            .${id} .digiblocks-product-categories a:hover {
                background-color: ${catHoverBackgroundColor};
                color: ${catHoverColor};
            }
            
            /* Rating */
            .${id} .digiblocks-product-rating {
                display: flex;
                align-items: center;
                gap: 5px;
            }
            
            .${id} .digiblocks-product-rating .star-rating {
                color: #ffc107;
            }
            
            /* View product button */
            .${id} .digiblocks-product-view {
                display: flex;
				justify-content: center;
                background-color: ${buttonBackgroundColor};
                color: ${buttonTextColor};
                ${buttonTypography.fontFamily ? `font-family: ${buttonTypography.fontFamily};` : ""}
                ${buttonTypography.fontSize?.[activeDevice] ? `font-size: ${buttonTypography.fontSize[activeDevice]}${buttonTypography.fontSizeUnit || "px"};` : ""}
                ${buttonTypography.fontWeight ? `font-weight: ${buttonTypography.fontWeight};` : ""}
                ${buttonTypography.fontStyle ? `font-style: ${buttonTypography.fontStyle};` : ""}
                ${buttonTypography.textTransform ? `text-transform: ${buttonTypography.textTransform};` : ""}
                ${buttonTypography.textDecoration ? `text-decoration: ${buttonTypography.textDecoration};` : ""}
                ${buttonTypography.lineHeight?.[activeDevice] ? `line-height: ${buttonTypography.lineHeight[activeDevice]}${buttonTypography.lineHeightUnit || "em"};` : ""}
                ${buttonTypography.letterSpacing?.[activeDevice] ? `letter-spacing: ${buttonTypography.letterSpacing[activeDevice]}${buttonTypography.letterSpacingUnit || "px"};` : ""}
                text-decoration: none;
				${getDimensionCSS7(buttonPadding, "padding", activeDevice)}
				${getDimensionCSS7(buttonBorderRadius, "border-radius", activeDevice)}
                transition: all 0.3s ease;
            }

            .${id} .digiblocks-product-view:hover {
                background-color: ${buttonBackgroundHoverColor || buttonBackgroundColor};
                color: ${buttonTextHoverColor || buttonTextColor};
            }

            /* Pagination */
            .${id} .digiblocks-pagination {
                margin-top: 30px;
                display: flex;
                flex-wrap: wrap;
                gap: 5px;
                justify-content: ${paginationAlign};
            }

            .${id} .digiblocks-pagination .page-numbers {
                display: inline-flex;
                align-items: center;
                justify-content: center;
                min-width: 36px;
                height: 36px;
                padding: 0 10px;
                background-color: ${paginationBackgroundColor};
                color: ${paginationTextColor};
                border-radius: 4px;
                text-decoration: none;
                transition: all 0.3s ease;
            }

            .${id} .digiblocks-pagination .page-numbers.current {
                background-color: ${paginationActiveBackgroundColor};
                color: ${paginationActiveTextColor};
            }

            .${id} .digiblocks-pagination .page-numbers:hover:not(.current) {
                background-color: ${paginationActiveBackgroundColor}40;
            }

            .${id} .digiblocks-pagination .page-numbers svg {
                width: 1em;
                height: 1em;
                fill: currentColor;
            }
            
            /* Animation keyframes */
            ${animationCSS}

			/* Visibility Controls */
			${visibility.desktop ? `
				@media (min-width: 992px) {
					.${id} {
						opacity: 0.5 !important;
					}
				}
			` : ""}

			${visibility.tablet ? `
				@media (min-width: 768px) and (max-width: 991px) {
					.${id} {
						opacity: 0.5 !important;
					}
				}
			` : ""}

			${visibility.mobile ? `
				@media (max-width: 767px) {
					.${id} {
						opacity: 0.5 !important;
					}
				}
			` : ""}
        `;
    };
    const renderTabContent = () => {
      switch (activeTab) {
        case "options":
          return /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(
            TabPanelBody10,
            {
              tab: "options",
              name: "layout",
              title: __11("Layout", "digiblocks"),
              initialOpen: true
            },
            /* @__PURE__ */ wp.element.createElement(
              ToggleGroupControl8,
              {
                label: __11("Product Style", "digiblocks"),
                value: productStyle,
                onChange: (value) => setAttributes({ productStyle: value }),
                isBlock: true,
                __next40pxDefaultSize: true,
                __nextHasNoMarginBottom: true
              },
              /* @__PURE__ */ wp.element.createElement(
                ToggleGroupControlOption8,
                {
                  value: "grid",
                  label: __11("Grid", "digiblocks")
                }
              ),
              /* @__PURE__ */ wp.element.createElement(
                ToggleGroupControlOption8,
                {
                  value: "list",
                  label: __11("List", "digiblocks")
                }
              )
            ),
            /* @__PURE__ */ wp.element.createElement(
              RangeControl8,
              {
                label: __11("Products to Show", "digiblocks"),
                value: productsToShow,
                onChange: (value) => setAttributes({ productsToShow: value }),
                min: 1,
                max: 20,
                __next40pxDefaultSize: true,
                __nextHasNoMarginBottom: true
              }
            ),
            productStyle === "grid" && /* @__PURE__ */ wp.element.createElement(
              ResponsiveControl9,
              {
                label: __11("Columns", "digiblocks")
              },
              /* @__PURE__ */ wp.element.createElement(
                RangeControl8,
                {
                  value: columns[localActiveDevice],
                  onChange: (value) => setAttributes({
                    columns: {
                      ...columns,
                      [localActiveDevice]: value
                    }
                  }),
                  min: 1,
                  max: localActiveDevice === "desktop" ? 6 : localActiveDevice === "tablet" ? 4 : 2,
                  __next40pxDefaultSize: true,
                  __nextHasNoMarginBottom: true
                }
              )
            ),
            /* @__PURE__ */ wp.element.createElement(
              ResponsiveControl9,
              {
                label: __11("Item Spacing", "digiblocks")
              },
              /* @__PURE__ */ wp.element.createElement(
                RangeControl8,
                {
                  value: itemSpacing[localActiveDevice],
                  onChange: (value) => setAttributes({
                    itemSpacing: {
                      ...itemSpacing,
                      [localActiveDevice]: value
                    }
                  }),
                  min: 0,
                  max: 80,
                  __next40pxDefaultSize: true,
                  __nextHasNoMarginBottom: true
                }
              )
            ),
            /* @__PURE__ */ wp.element.createElement(
              ToggleControl9,
              {
                label: __11("Card Style", "digiblocks"),
                checked: cardStyle,
                onChange: (value) => setAttributes({ cardStyle: value }),
                help: __11("Enable to show products as cards with backgrounds and borders", "digiblocks"),
                __nextHasNoMarginBottom: true
              }
            )
          ), /* @__PURE__ */ wp.element.createElement(
            TabPanelBody10,
            {
              tab: "options",
              name: "content",
              title: __11("Content", "digiblocks"),
              initialOpen: false
            },
            /* @__PURE__ */ wp.element.createElement(
              ToggleControl9,
              {
                label: __11("Display Featured Image", "digiblocks"),
                checked: displayFeaturedImage,
                onChange: (value) => setAttributes({ displayFeaturedImage: value }),
                __nextHasNoMarginBottom: true
              }
            ),
            displayFeaturedImage && /* @__PURE__ */ wp.element.createElement(
              SelectControl10,
              {
                label: __11("Image Size", "digiblocks"),
                value: imageSize,
                options: imageSizes,
                onChange: (value) => setAttributes({ imageSize: value }),
                __next40pxDefaultSize: true,
                __nextHasNoMarginBottom: true
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              ToggleControl9,
              {
                label: __11("Display Title", "digiblocks"),
                checked: displayTitle,
                onChange: (value) => setAttributes({ displayTitle: value }),
                __nextHasNoMarginBottom: true
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              ToggleControl9,
              {
                label: __11("Display Price", "digiblocks"),
                checked: displayPrice,
                onChange: (value) => setAttributes({ displayPrice: value }),
                __nextHasNoMarginBottom: true
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              ToggleControl9,
              {
                label: __11("Display Rating", "digiblocks"),
                checked: displayRating,
                onChange: (value) => setAttributes({ displayRating: value }),
                __nextHasNoMarginBottom: true
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              ToggleControl9,
              {
                label: __11("Display Categories", "digiblocks"),
                checked: displayCategories,
                onChange: (value) => setAttributes({ displayCategories: value }),
                __nextHasNoMarginBottom: true
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              ToggleControl9,
              {
                label: __11("Display Excerpt", "digiblocks"),
                checked: displayExcerpt,
                onChange: (value) => setAttributes({ displayExcerpt: value }),
                __nextHasNoMarginBottom: true
              }
            ),
            displayExcerpt && /* @__PURE__ */ wp.element.createElement(
              RangeControl8,
              {
                label: __11("Excerpt Length (words)", "digiblocks"),
                value: excerptLength,
                onChange: (value) => setAttributes({ excerptLength: value }),
                min: 5,
                max: 100,
                __next40pxDefaultSize: true,
                __nextHasNoMarginBottom: true
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              ToggleControl9,
              {
                label: __11("Display View Product Button", "digiblocks"),
                checked: displayViewProductButton,
                onChange: (value) => setAttributes({ displayViewProductButton: value }),
                __nextHasNoMarginBottom: true
              }
            ),
            displayViewProductButton && /* @__PURE__ */ wp.element.createElement(
              TextControl4,
              {
                label: __11("Button Text", "digiblocks"),
                value: viewProductText,
                onChange: (value) => setAttributes({ viewProductText: value }),
                __next40pxDefaultSize: true,
                __nextHasNoMarginBottom: true
              }
            )
          ), /* @__PURE__ */ wp.element.createElement(
            TabPanelBody10,
            {
              tab: "options",
              name: "pagination",
              title: __11("Pagination", "digiblocks"),
              initialOpen: false
            },
            /* @__PURE__ */ wp.element.createElement(
              ToggleControl9,
              {
                label: __11("Enable Pagination", "digiblocks"),
                checked: enablePagination,
                onChange: (value) => setAttributes({ enablePagination: value }),
                __nextHasNoMarginBottom: true
              }
            ),
            enablePagination && /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(
              ToggleGroupControl8,
              {
                label: __11("Pagination Alignment", "digiblocks"),
                value: paginationAlign,
                onChange: (value) => setAttributes({ paginationAlign: value }),
                isBlock: true,
                __next40pxDefaultSize: true,
                __nextHasNoMarginBottom: true
              },
              /* @__PURE__ */ wp.element.createElement(
                ToggleGroupControlOption8,
                {
                  value: "flex-start",
                  label: __11("Left", "digiblocks")
                }
              ),
              /* @__PURE__ */ wp.element.createElement(
                ToggleGroupControlOption8,
                {
                  value: "center",
                  label: __11("Center", "digiblocks")
                }
              ),
              /* @__PURE__ */ wp.element.createElement(
                ToggleGroupControlOption8,
                {
                  value: "flex-end",
                  label: __11("Right", "digiblocks")
                }
              )
            ))
          ), /* @__PURE__ */ wp.element.createElement(
            TabPanelBody10,
            {
              tab: "options",
              name: "query",
              title: __11("Query", "digiblocks"),
              initialOpen: false
            },
            /* @__PURE__ */ wp.element.createElement(
              SelectControl10,
              {
                label: __11("Order By", "digiblocks"),
                value: orderBy,
                options: orderByOptions,
                onChange: (value) => setAttributes({ orderBy: value }),
                __next40pxDefaultSize: true,
                __nextHasNoMarginBottom: true
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              SelectControl10,
              {
                label: __11("Order", "digiblocks"),
                value: order,
                options: orderOptions,
                onChange: (value) => setAttributes({ order: value }),
                __next40pxDefaultSize: true,
                __nextHasNoMarginBottom: true
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              SelectControl10,
              {
                label: __11("Category", "digiblocks"),
                value: categories.length === 0 ? "0" : categories[0].toString(),
                options: formattedCategories,
                onChange: (value) => {
                  const selectedValue = parseInt(value, 10);
                  if (selectedValue === 0) {
                    setAttributes({ categories: [] });
                  } else {
                    setAttributes({ categories: [selectedValue] });
                  }
                },
                __next40pxDefaultSize: true,
                __nextHasNoMarginBottom: true
              }
            )
          ));
        case "style":
          return /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(
            TabPanelBody10,
            {
              tab: "style",
              name: "colors",
              title: __11("Colors", "digiblocks"),
              initialOpen: true
            },
            /* @__PURE__ */ wp.element.createElement(
              TabPanel6,
              {
                className: "digiblocks-control-tabs",
                activeClass: "active-tab",
                tabs: stateTabList
              },
              (tab) => {
                if (tab.name === "normal") {
                  return /* @__PURE__ */ wp.element.createElement(
                    PanelColorSettings8,
                    {
                      title: __11("Colors", "digiblocks"),
                      initialOpen: true,
                      enableAlpha: true,
                      colorSettings: [
                        {
                          value: titleColor,
                          onChange: (value) => setAttributes({ titleColor: value }),
                          label: __11("Title Color", "digiblocks")
                        },
                        {
                          value: excerptColor,
                          onChange: (value) => setAttributes({ excerptColor: value }),
                          label: __11("Excerpt Color", "digiblocks")
                        },
                        {
                          value: priceColor,
                          onChange: (value) => setAttributes({ priceColor: value }),
                          label: __11("Price Color", "digiblocks")
                        },
                        {
                          value: salePriceColor,
                          onChange: (value) => setAttributes({ salePriceColor: value }),
                          label: __11("Sale Price Color", "digiblocks")
                        },
                        {
                          value: catBackgroundColor,
                          onChange: (value) => setAttributes({ catBackgroundColor: value }),
                          label: __11("Categories Background Color", "digiblocks")
                        },
                        {
                          value: catColor,
                          onChange: (value) => setAttributes({ catColor: value }),
                          label: __11("Categories Color", "digiblocks")
                        },
                        {
                          value: buttonBackgroundColor,
                          onChange: (value) => setAttributes({ buttonBackgroundColor: value }),
                          label: __11("Button Background", "digiblocks")
                        },
                        {
                          value: buttonTextColor,
                          onChange: (value) => setAttributes({ buttonTextColor: value }),
                          label: __11("Button Text", "digiblocks")
                        },
                        {
                          value: paginationBackgroundColor,
                          onChange: (value) => setAttributes({ paginationBackgroundColor: value }),
                          label: __11("Pagination Background", "digiblocks")
                        },
                        {
                          value: paginationTextColor,
                          onChange: (value) => setAttributes({ paginationTextColor: value }),
                          label: __11("Pagination Color", "digiblocks")
                        },
                        {
                          value: paginationActiveBackgroundColor,
                          onChange: (value) => setAttributes({ paginationActiveBackgroundColor: value }),
                          label: __11("Pagination Active Background", "digiblocks")
                        },
                        {
                          value: paginationActiveTextColor,
                          onChange: (value) => setAttributes({ paginationActiveTextColor: value }),
                          label: __11("Pagination Active Color", "digiblocks")
                        }
                      ]
                    }
                  );
                } else {
                  return /* @__PURE__ */ wp.element.createElement(
                    PanelColorSettings8,
                    {
                      title: __11("Hover Colors", "digiblocks"),
                      initialOpen: true,
                      enableAlpha: true,
                      colorSettings: [
                        {
                          value: titleHoverColor,
                          onChange: (value) => setAttributes({ titleHoverColor: value }),
                          label: __11("Title Hover Color", "digiblocks")
                        },
                        {
                          value: catHoverBackgroundColor,
                          onChange: (value) => setAttributes({ catHoverBackgroundColor: value }),
                          label: __11("Categories Hover Background Color", "digiblocks")
                        },
                        {
                          value: catHoverColor,
                          onChange: (value) => setAttributes({ catHoverColor: value }),
                          label: __11("Categories Hover Color", "digiblocks")
                        },
                        {
                          value: buttonBackgroundHoverColor,
                          onChange: (value) => setAttributes({ buttonBackgroundHoverColor: value }),
                          label: __11("Button Background Hover", "digiblocks")
                        },
                        {
                          value: buttonTextHoverColor,
                          onChange: (value) => setAttributes({ buttonTextHoverColor: value }),
                          label: __11("Button Text Hover", "digiblocks")
                        }
                      ]
                    }
                  );
                }
              }
            ),
            cardStyle && /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement("h3", null, __11("Card Colors", "digiblocks")), /* @__PURE__ */ wp.element.createElement(
              PanelColorSettings8,
              {
                title: "",
                enableAlpha: true,
                colorSettings: [
                  {
                    value: cardBackgroundColor,
                    onChange: (value) => setAttributes({ cardBackgroundColor: value }),
                    label: __11("Card Background", "digiblocks")
                  },
                  {
                    value: cardBorderColor,
                    onChange: (value) => setAttributes({ cardBorderColor: value }),
                    label: __11("Card Border", "digiblocks")
                  }
                ]
              }
            ))
          ), /* @__PURE__ */ wp.element.createElement(
            TabPanelBody10,
            {
              tab: "style",
              name: "typography",
              title: __11("Typography", "digiblocks"),
              initialOpen: false
            },
            /* @__PURE__ */ wp.element.createElement(
              TypographyControl6,
              {
                label: __11("Title Typography", "digiblocks"),
                value: titleTypography,
                onChange: (value) => setAttributes({ titleTypography: value }),
                defaults: {
                  fontSize: { desktop: 20, tablet: 18, mobile: 16 },
                  fontWeight: "600",
                  lineHeight: { desktop: 1.4, tablet: 1.3, mobile: 1.2 }
                }
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              TypographyControl6,
              {
                label: __11("Price Typography", "digiblocks"),
                value: headingTypography,
                onChange: (value) => setAttributes({ headingTypography: value }),
                defaults: {
                  fontSize: { desktop: 18, tablet: 16, mobile: 15 },
                  fontWeight: "700",
                  lineHeight: { desktop: 1.4, tablet: 1.3, mobile: 1.2 }
                }
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              TypographyControl6,
              {
                label: __11("Category Typography", "digiblocks"),
                value: textTypography,
                onChange: (value) => setAttributes({ textTypography: value }),
                defaults: {
                  fontSize: { desktop: 14, tablet: 13, mobile: 12 },
                  lineHeight: { desktop: 1.4, tablet: 1.3, mobile: 1.2 }
                }
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              TypographyControl6,
              {
                label: __11("Excerpt Typography", "digiblocks"),
                value: contentTypography,
                onChange: (value) => setAttributes({ contentTypography: value }),
                defaults: {
                  fontSize: { desktop: 16, tablet: 15, mobile: 14 },
                  lineHeight: { desktop: 1.5, tablet: 1.4, mobile: 1.3 }
                }
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              TypographyControl6,
              {
                label: __11("Button Typography", "digiblocks"),
                value: buttonTypography,
                onChange: (value) => setAttributes({ buttonTypography: value }),
                defaults: {
                  fontSize: { desktop: 16, tablet: 15, mobile: 14 },
                  fontWeight: "500",
                  lineHeight: { desktop: 1.5, tablet: 1.4, mobile: 1.3 }
                }
              }
            )
          ), /* @__PURE__ */ wp.element.createElement(
            TabPanelBody10,
            {
              tab: "style",
              name: "spacing",
              title: __11("Spacing", "digiblocks"),
              initialOpen: false
            },
            /* @__PURE__ */ wp.element.createElement(
              ResponsiveControl9,
              {
                label: __11("Padding", "digiblocks")
              },
              /* @__PURE__ */ wp.element.createElement(
                DimensionControl8,
                {
                  values: padding[localActiveDevice],
                  onChange: (value) => setAttributes({
                    padding: {
                      ...padding,
                      [localActiveDevice]: value
                    }
                  })
                }
              )
            ),
            /* @__PURE__ */ wp.element.createElement(
              ResponsiveControl9,
              {
                label: __11("Margin", "digiblocks")
              },
              /* @__PURE__ */ wp.element.createElement(
                DimensionControl8,
                {
                  values: margin[localActiveDevice],
                  onChange: (value) => setAttributes({
                    margin: {
                      ...margin,
                      [localActiveDevice]: value
                    }
                  })
                }
              )
            ),
            /* @__PURE__ */ wp.element.createElement(
              ResponsiveControl9,
              {
                label: __11("Image Margin", "digiblocks")
              },
              /* @__PURE__ */ wp.element.createElement(
                RangeControl8,
                {
                  value: imageMargin[localActiveDevice],
                  onChange: (value) => setAttributes({
                    imageMargin: {
                      ...imageMargin,
                      [localActiveDevice]: value
                    }
                  }),
                  min: 1,
                  max: 100,
                  __next40pxDefaultSize: true,
                  __nextHasNoMarginBottom: true
                }
              )
            ),
            /* @__PURE__ */ wp.element.createElement(
              ResponsiveControl9,
              {
                label: __11("Content Margin", "digiblocks")
              },
              /* @__PURE__ */ wp.element.createElement(
                RangeControl8,
                {
                  value: contentMargin[localActiveDevice],
                  onChange: (value) => setAttributes({
                    contentMargin: {
                      ...contentMargin,
                      [localActiveDevice]: value
                    }
                  }),
                  min: 1,
                  max: 100,
                  __next40pxDefaultSize: true,
                  __nextHasNoMarginBottom: true
                }
              )
            ),
            /* @__PURE__ */ wp.element.createElement(
              ResponsiveControl9,
              {
                label: __11("Button Padding", "digiblocks")
              },
              /* @__PURE__ */ wp.element.createElement(
                DimensionControl8,
                {
                  values: buttonPadding[localActiveDevice],
                  onChange: (value) => setAttributes({
                    buttonPadding: {
                      ...buttonPadding,
                      [localActiveDevice]: value
                    }
                  })
                }
              )
            )
          ), /* @__PURE__ */ wp.element.createElement(
            TabPanelBody10,
            {
              tab: "style",
              name: "borders",
              title: __11("Borders & Radius", "digiblocks"),
              initialOpen: false
            },
            /* @__PURE__ */ wp.element.createElement(
              ResponsiveControl9,
              {
                label: __11("Image Border Radius", "digiblocks")
              },
              /* @__PURE__ */ wp.element.createElement(
                DimensionControl8,
                {
                  values: imageBorderRadius[localActiveDevice],
                  onChange: (value) => setAttributes({
                    imageBorderRadius: {
                      ...imageBorderRadius,
                      [localActiveDevice]: value
                    }
                  }),
                  units: [
                    { label: "px", value: "px" },
                    { label: "%", value: "%" }
                  ]
                }
              )
            ),
            /* @__PURE__ */ wp.element.createElement(
              ResponsiveControl9,
              {
                label: __11("Button Border Radius", "digiblocks")
              },
              /* @__PURE__ */ wp.element.createElement(
                DimensionControl8,
                {
                  values: buttonBorderRadius[localActiveDevice],
                  onChange: (value) => setAttributes({
                    buttonBorderRadius: {
                      ...buttonBorderRadius,
                      [localActiveDevice]: value
                    }
                  }),
                  units: [
                    { label: "px", value: "px" },
                    { label: "%", value: "%" }
                  ]
                }
              )
            ),
            cardStyle && /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(
              SelectControl10,
              {
                label: __11("Card Border Style", "digiblocks"),
                value: cardBorderStyle,
                options: borderStyleOptions,
                onChange: (value) => setAttributes({ cardBorderStyle: value }),
                __next40pxDefaultSize: true,
                __nextHasNoMarginBottom: true
              }
            ), cardBorderStyle !== "none" && /* @__PURE__ */ wp.element.createElement(
              ResponsiveControl9,
              {
                label: __11("Card Border Width", "digiblocks")
              },
              /* @__PURE__ */ wp.element.createElement(
                DimensionControl8,
                {
                  values: cardBorderWidth[localActiveDevice],
                  onChange: (value) => setAttributes({
                    cardBorderWidth: {
                      ...cardBorderWidth,
                      [localActiveDevice]: value
                    }
                  })
                }
              )
            ), /* @__PURE__ */ wp.element.createElement(
              ResponsiveControl9,
              {
                label: __11("Card Border Radius", "digiblocks")
              },
              /* @__PURE__ */ wp.element.createElement(
                DimensionControl8,
                {
                  values: cardBorderRadius[localActiveDevice],
                  onChange: (value) => setAttributes({
                    cardBorderRadius: {
                      ...cardBorderRadius,
                      [localActiveDevice]: value
                    }
                  }),
                  units: [
                    { label: "px", value: "px" },
                    { label: "%", value: "%" }
                  ]
                }
              )
            ), /* @__PURE__ */ wp.element.createElement(
              BoxShadowControl8,
              {
                label: __11("Card Shadow", "digiblocks"),
                normalValue: cardShadow,
                hoverValue: cardShadowHover,
                onNormalChange: (value) => setAttributes({ cardShadow: value }),
                onHoverChange: (value) => setAttributes({ cardShadowHover: value })
              }
            ))
          ));
        case "advanced":
          return /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(
            TabPanelBody10,
            {
              tab: "advanced",
              name: "animation",
              title: __11("Animation", "digiblocks"),
              initialOpen: true
            },
            /* @__PURE__ */ wp.element.createElement(
              SelectControl10,
              {
                label: __11("Animation Effect", "digiblocks"),
                value: animation,
                options: animationOptions,
                onChange: (value) => setAttributes({ animation: value }),
                __next40pxDefaultSize: true,
                __nextHasNoMarginBottom: true
              }
            ),
            animation && animation !== "none" && /* @__PURE__ */ wp.element.createElement("div", { style: { marginTop: "10px" } }, /* @__PURE__ */ wp.element.createElement(
              Button8,
              {
                variant: "secondary",
                isSecondary: true,
                onClick: handlePreviewClick,
                style: { width: "100%" }
              },
              __11("Preview Animation", "digiblocks")
            ))
          ), /* @__PURE__ */ wp.element.createElement(
            TabPanelBody10,
            {
              tab: "advanced",
              name: "visibility",
              title: __11("Visibility", "digiblocks"),
              initialOpen: false
            },
            /* @__PURE__ */ wp.element.createElement("div", { className: "components-base-control__help", style: {
              padding: "12px",
              backgroundColor: "#f0f6fc",
              border: "1px solid #c3ddfd",
              borderRadius: "4px",
              marginBottom: "16px"
            } }, /* @__PURE__ */ wp.element.createElement("strong", null, __11("Editor Note:", "digiblocks")), /* @__PURE__ */ wp.element.createElement("br", null), __11("Hidden elements appear with reduced opacity in the editor for easy editing. Visibility changes only take effect on the frontend.", "digiblocks")),
            /* @__PURE__ */ wp.element.createElement(
              ToggleControl9,
              {
                label: __11("Hide on Desktop", "digiblocks"),
                checked: visibility.desktop,
                onChange: (value) => setAttributes({
                  visibility: {
                    ...visibility,
                    desktop: value
                  }
                }),
                __nextHasNoMarginBottom: true
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              ToggleControl9,
              {
                label: __11("Hide on Tablet", "digiblocks"),
                checked: visibility.tablet,
                onChange: (value) => setAttributes({
                  visibility: {
                    ...visibility,
                    tablet: value
                  }
                }),
                __nextHasNoMarginBottom: true
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              ToggleControl9,
              {
                label: __11("Hide on Mobile", "digiblocks"),
                checked: visibility.mobile,
                onChange: (value) => setAttributes({
                  visibility: {
                    ...visibility,
                    mobile: value
                  }
                }),
                __nextHasNoMarginBottom: true
              }
            )
          ), /* @__PURE__ */ wp.element.createElement(
            TabPanelBody10,
            {
              tab: "advanced",
              name: "additional",
              title: __11("Additional", "digiblocks"),
              initialOpen: false
            },
            /* @__PURE__ */ wp.element.createElement("div", { className: "components-base-control html-anchor-control" }, /* @__PURE__ */ wp.element.createElement("div", { className: "components-base-control__field" }, /* @__PURE__ */ wp.element.createElement("label", { className: "components-base-control__label", htmlFor: "html-anchor" }, __11("HTML anchor", "digiblocks")), /* @__PURE__ */ wp.element.createElement(
              "input",
              {
                className: "components-text-control__input",
                type: "text",
                id: "html-anchor",
                value: anchor || "",
                onChange: (e) => setAttributes({ anchor: e.target.value }),
                "aria-describedby": "html-anchor-help",
                autoCapitalize: "none",
                autoComplete: "off"
              }
            )), /* @__PURE__ */ wp.element.createElement("p", { id: "html-anchor-help", className: "components-base-control__help" }, __11(`Enter a word or two \u2014 without spaces \u2014 to make a unique web address just for this block, called an "anchor". Then, you'll be able to link directly to this section of your page.`, "digiblocks"), " ", /* @__PURE__ */ wp.element.createElement(
              "a",
              {
                className: "components-external-link",
                href: "https://wordpress.org/documentation/article/page-jumps/",
                target: "_blank",
                rel: "external noreferrer noopener"
              },
              /* @__PURE__ */ wp.element.createElement("span", { className: "components-external-link__contents" }, __11("Learn more about anchors", "digiblocks")),
              /* @__PURE__ */ wp.element.createElement("span", { className: "components-external-link__icon", "aria-label": "(opens in a new tab)" }, "\u2197")
            ))),
            /* @__PURE__ */ wp.element.createElement("div", { className: "components-base-control" }, /* @__PURE__ */ wp.element.createElement("div", { className: "components-base-control__field" }, /* @__PURE__ */ wp.element.createElement("label", { className: "components-base-control__label", htmlFor: "additional-css-classes" }, __11("Additional CSS class(es)", "digiblocks")), /* @__PURE__ */ wp.element.createElement(
              "input",
              {
                className: "components-text-control__input",
                type: "text",
                id: "additional-css-classes",
                value: customClasses || "",
                onChange: (e) => setAttributes({ customClasses: e.target.value }),
                "aria-describedby": "additional-css-classes-help",
                autoComplete: "off"
              }
            )), /* @__PURE__ */ wp.element.createElement("p", { id: "additional-css-classes-help", className: "components-base-control__help" }, __11("Separate multiple classes with spaces.", "digiblocks")))
          ));
        default:
          return null;
      }
    };
    const trimExcerpt = (excerpt, wordCount) => {
      if (!excerpt)
        return "";
      const temp = document.createElement("div");
      temp.innerHTML = excerpt;
      const decodedExcerpt = temp.textContent || temp.innerText || "";
      const words = decodedExcerpt.split(" ");
      if (words.length <= wordCount)
        return decodedExcerpt;
      return words.slice(0, wordCount).join(" ") + "...";
    };
    const formatPrice = (price, salePrice = null) => {
      if (!window.digiBlocksData) {
        return price ? `$${parseFloat(price).toFixed(2)}` : "";
      }
      const currencySymbol = window.digiBlocksData.digiCurrency || "$";
      const currencyPosition = window.digiBlocksData.digiCurrencyPosition || "left";
      const formatDisplay = (value) => {
        if (!value || isNaN(parseFloat(value)))
          return "";
        const formatted = parseFloat(value).toFixed(2);
        switch (currencyPosition) {
          case "left":
            return currencySymbol + formatted;
          case "right":
            return formatted + currencySymbol;
          case "left_space":
            return currencySymbol + " " + formatted;
          case "right_space":
            return formatted + " " + currencySymbol;
          default:
            return currencySymbol + formatted;
        }
      };
      if (salePrice && price && parseFloat(salePrice) < parseFloat(price)) {
        return {
          regular: formatDisplay(price),
          sale: formatDisplay(salePrice),
          hasDiscount: true
        };
      }
      return {
        regular: formatDisplay(price),
        hasDiscount: false
      };
    };
    const blockClasses = `digiblocks-products ${id} style-${productStyle} ${customClasses || ""}`;
    const blockProps = useBlockProps17({
      className: blockClasses,
      id: anchor || null
    });
    return /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(InspectorControls9, null, /* @__PURE__ */ wp.element.createElement(
      CustomTabPanel9,
      {
        tabs: tabList,
        activeTab,
        onSelect: setActiveTab
      },
      renderTabContent()
    )), /* @__PURE__ */ wp.element.createElement("style", { dangerouslySetInnerHTML: { __html: generateCSS() } }), /* @__PURE__ */ wp.element.createElement("div", { ...blockProps }, !products ? /* @__PURE__ */ wp.element.createElement(
      Placeholder,
      {
        icon: "cart",
        label: __11("DigiCommerce Products", "digiblocks")
      },
      /* @__PURE__ */ wp.element.createElement(Spinner, null)
    ) : products.length === 0 ? /* @__PURE__ */ wp.element.createElement("p", { className: "digiblocks-products-no-results" }, __11("No products found.", "digiblocks")) : /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement("div", { className: `digiblocks-products-container layout-${productStyle}` }, products.map((product) => /* @__PURE__ */ wp.element.createElement("div", { key: product.id, className: "digiblocks-product-item" }, displayFeaturedImage && product._embedded?.["wp:featuredmedia"] && product._embedded["wp:featuredmedia"][0] && /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-product-image" }, /* @__PURE__ */ wp.element.createElement("a", { href: "#", onClick: (e) => e.preventDefault() }, product._embedded["wp:featuredmedia"][0].source_url && /* @__PURE__ */ wp.element.createElement(
      "img",
      {
        src: product._embedded["wp:featuredmedia"][0].source_url,
        alt: product._embedded["wp:featuredmedia"][0].alt_text || product.title.rendered
      }
    ))), /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-product-content" }, displayCategories && product._embedded?.["wp:term"]?.[0] && /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-product-categories" }, product._embedded["wp:term"][0].map((category) => /* @__PURE__ */ wp.element.createElement(
      "a",
      {
        key: category.id,
        href: "#",
        onClick: (e) => e.preventDefault(),
        className: "digiblocks-category-link"
      },
      category.name
    ))), displayTitle && /* @__PURE__ */ wp.element.createElement("h3", { className: "digiblocks-product-title" }, /* @__PURE__ */ wp.element.createElement("a", { href: "#", onClick: (e) => e.preventDefault() }, product.title.rendered)), displayRating && /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-product-rating" }, /* @__PURE__ */ wp.element.createElement("div", { className: "star-rating" }, "\u2605\u2605\u2605\u2605\u2605".split("").map((star, index) => /* @__PURE__ */ wp.element.createElement("span", { key: index, className: "star" }, "\u2605"))), /* @__PURE__ */ wp.element.createElement("span", { className: "rating-count" }, "(5)")), displayPrice && /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-product-price" }, product.meta?.digi_price || product.meta?.digi_sale_price ? (() => {
      const priceData = formatPrice(
        product.meta.digi_price,
        product.meta.digi_sale_price
      );
      return /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, priceData.hasDiscount ? /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement("span", { className: "regular-price del" }, priceData.regular), /* @__PURE__ */ wp.element.createElement("span", { className: "sale-price" }, priceData.sale)) : /* @__PURE__ */ wp.element.createElement("span", { className: "regular-price" }, priceData.regular));
    })() : /* @__PURE__ */ wp.element.createElement("span", { className: "regular-price" }, "$0.00")), displayExcerpt && /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-product-excerpt" }, trimExcerpt(product.excerpt.rendered.replace(/<[^>]*>/g, ""), excerptLength)), displayViewProductButton && /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-product-view-wrapper" }, /* @__PURE__ */ wp.element.createElement("a", { href: "#", onClick: (e) => e.preventDefault(), className: "digiblocks-product-view" }, viewProductText)))))), enablePagination && /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-pagination" }, /* @__PURE__ */ wp.element.createElement("a", { className: "page-numbers", href: "#", onClick: (e) => e.preventDefault() }, /* @__PURE__ */ wp.element.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 320 512", width: "1em", height: "1em" }, /* @__PURE__ */ wp.element.createElement("path", { d: "M47 239c-9.4 9.4-9.4 24.6 0 33.9L207 433c9.4 9.4 24.6 9.4 33.9 0s9.4-24.6 0-33.9L97.9 256 241 113c9.4-9.4 9.4-24.6 0-33.9s-24.6-9.4-33.9 0L47 239z" }))), /* @__PURE__ */ wp.element.createElement("a", { className: "page-numbers", href: "#", onClick: (e) => e.preventDefault() }, "1"), /* @__PURE__ */ wp.element.createElement("span", { className: "page-numbers current" }, "2"), /* @__PURE__ */ wp.element.createElement("a", { className: "page-numbers", href: "#", onClick: (e) => e.preventDefault() }, "3"), /* @__PURE__ */ wp.element.createElement("span", { className: "page-numbers dots" }, "\u2026"), /* @__PURE__ */ wp.element.createElement("a", { className: "page-numbers", href: "#", onClick: (e) => e.preventDefault() }, "8"), /* @__PURE__ */ wp.element.createElement("a", { className: "page-numbers", href: "#", onClick: (e) => e.preventDefault() }, /* @__PURE__ */ wp.element.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 320 512", width: "1em", height: "1em" }, /* @__PURE__ */ wp.element.createElement("path", { d: "M273 239c9.4 9.4 9.4 24.6 0 33.9L113 433c-9.4 9.4-24.6 9.4-33.9 0s-9.4-24.6 0-33.9l143-143L79 113c-9.4-9.4-9.4-24.6 0-33.9s24.6-9.4 33.9 0L273 239z" })))))));
  };
  var edit_default9 = DigiProductsEdit;

  // blocks/digi-products/save.js
  var DigiProductsSave = () => {
    return null;
  };
  var save_default9 = DigiProductsSave;

  // blocks/faq/edit.js
  var { __: __12 } = window.wp.i18n;
  var {
    useBlockProps: useBlockProps18,
    RichText: RichText7,
    InspectorControls: InspectorControls10,
    PanelColorSettings: PanelColorSettings9
  } = window.wp.blockEditor;
  var {
    SelectControl: SelectControl11,
    RangeControl: RangeControl9,
    ToggleControl: ToggleControl10,
    Button: Button9,
    TextControl: TextControl5,
    Tooltip: Tooltip3,
    TabPanel: TabPanel7,
    __experimentalToggleGroupControl: ToggleGroupControl9,
    __experimentalToggleGroupControlOption: ToggleGroupControlOption9
  } = window.wp.components;
  var { useState: useState10, useEffect: useEffect10, useRef: useRef7 } = window.wp.element;
  var { useBlockId: useBlockId10, getDimensionCSS: getDimensionCSS8, animations: animations8, animationPreview: animationPreview8 } = digi.utils;
  var { tabIcons: tabIcons10 } = digi.icons;
  var { ResponsiveControl: ResponsiveControl10, DimensionControl: DimensionControl9, TypographyControl: TypographyControl7, BoxShadowControl: BoxShadowControl9, CustomTabPanel: CustomTabPanel10, TabPanelBody: TabPanelBody11 } = digi.components;
  var FAQEdit = ({ attributes, setAttributes, clientId }) => {
    const {
      id,
      anchor,
      visibility,
      customClasses,
      items,
      titleColor,
      titleHoverColor,
      titleActiveColor,
      backgroundColor,
      backgroundHoverColor,
      backgroundActiveColor,
      contentColor,
      contentBackgroundColor,
      borderColor,
      borderHoverColor,
      borderRadius,
      borderWidth,
      borderStyle,
      boxShadow,
      boxShadowHover,
      padding,
      margin,
      titleTypography,
      contentTypography,
      iconPosition,
      iconColor,
      iconHoverColor,
      iconActiveColor,
      iconSize,
      animation,
      allowMultipleOpen,
      iconType,
      titleTag,
      questionPrefix,
      questionPrefixColor,
      answerPrefix,
      answerPrefixColor,
      layout,
      itemsSpacing,
      schemaEnabled,
      schemaType,
      schemaName
    } = attributes;
    useBlockId10(id, clientId, setAttributes);
    const [activeTab, setActiveTab] = useState10(() => {
      if (window.digi.uiState) {
        const savedTab = window.digi.uiState.getActiveTab(clientId);
        if (savedTab)
          return savedTab;
      }
      return "options";
    });
    const [localActiveDevice, setLocalActiveDevice] = useState10(window.digi.responsiveState.activeDevice);
    const [isAnimating, setIsAnimating] = useState10(false);
    useEffect10(() => {
      const unsubscribe = window.digi.responsiveState.subscribe((device) => {
        setLocalActiveDevice(device);
      });
      return unsubscribe;
    }, []);
    useEffect10(() => {
      if (items && items.length > 0) {
        const updatedItems = items.map((item, index) => {
          if (!item.id) {
            return { ...item, id: `faq-item-${clientId.substr(0, 8)}-${index}` };
          }
          return item;
        });
        if (JSON.stringify(updatedItems) !== JSON.stringify(items)) {
          setAttributes({ items: updatedItems });
        }
      }
    }, [clientId, items, setAttributes]);
    const previewTimeoutRef = useRef7(null);
    useEffect10(() => {
      if (animation && animation !== "none") {
        const timeoutId = setTimeout(() => {
          animationPreview8(id, animation, animations8, previewTimeoutRef);
        }, 100);
        return () => clearTimeout(timeoutId);
      }
    }, [animation]);
    const handlePreviewClick = () => {
      animationPreview8(id, animation, animations8, previewTimeoutRef);
    };
    const borderStyleOptions = [
      { label: __12("Default", "digiblocks"), value: "default" },
      { label: __12("None", "digiblocks"), value: "none" },
      { label: __12("Solid", "digiblocks"), value: "solid" },
      { label: __12("Dotted", "digiblocks"), value: "dotted" },
      { label: __12("Dashed", "digiblocks"), value: "dashed" },
      { label: __12("Double", "digiblocks"), value: "double" },
      { label: __12("Groove", "digiblocks"), value: "groove" },
      { label: __12("Inset", "digiblocks"), value: "inset" },
      { label: __12("Outset", "digiblocks"), value: "outset" },
      { label: __12("Ridge", "digiblocks"), value: "ridge" }
    ];
    const animationOptions = [
      { label: __12("None", "digiblocks"), value: "none" },
      ...Object.keys(animations8).map((animation2) => ({
        label: animation2.replace(/-/g, " ").replace(/\b\w/g, (l) => l.toUpperCase()),
        value: animation2
      }))
    ];
    const iconTypeOptions = [
      { label: __12("Plus/Minus", "digiblocks"), value: "plusMinus" },
      { label: __12("Arrow", "digiblocks"), value: "arrow" },
      { label: __12("Chevron", "digiblocks"), value: "chevron" },
      { label: __12("Triangle", "digiblocks"), value: "triangle" },
      { label: __12("Circle Plus/Minus", "digiblocks"), value: "circlePlusMinus" }
    ];
    const iconPositionOptions = [
      { label: __12("Right", "digiblocks"), value: "right" },
      { label: __12("Left", "digiblocks"), value: "left" }
    ];
    const titleTagOptions = [
      { label: __12("H2", "digiblocks"), value: "h2" },
      { label: __12("H3", "digiblocks"), value: "h3" },
      { label: __12("H4", "digiblocks"), value: "h4" },
      { label: __12("H5", "digiblocks"), value: "h5" },
      { label: __12("H6", "digiblocks"), value: "h6" },
      { label: __12("p", "digiblocks"), value: "p" },
      { label: __12("div", "digiblocks"), value: "div" }
    ];
    const layoutOptions = [
      { label: __12("Boxed", "digiblocks"), value: "boxed" },
      { label: __12("Classic", "digiblocks"), value: "classic" },
      { label: __12("Separated", "digiblocks"), value: "separated" },
      { label: __12("Minimalist", "digiblocks"), value: "minimalist" },
      { label: __12("Bordered", "digiblocks"), value: "bordered" }
    ];
    const schemaTypeOptions = [
      { label: __12("Default FAQ Schema", "digiblocks"), value: "FAQPage" },
      { label: __12("Q&A Schema", "digiblocks"), value: "QAPage" }
    ];
    const tabList = [
      {
        name: "options",
        title: __12("Options", "digiblocks"),
        icon: tabIcons10.optionsIcon
      },
      {
        name: "style",
        title: __12("Style", "digiblocks"),
        icon: tabIcons10.styleIcon
      },
      {
        name: "advanced",
        title: __12("Advanced", "digiblocks"),
        icon: tabIcons10.advancedIcon
      }
    ];
    const stateTabList = [
      {
        name: "normal",
        title: __12("Normal", "digiblocks"),
        className: "digiblocks-tab-1 normal"
      },
      {
        name: "hover",
        title: __12("Hover", "digiblocks"),
        className: "digiblocks-tab-2 hover"
      },
      {
        name: "active",
        title: __12("Active", "digiblocks"),
        className: "digiblocks-tab-3 active"
      }
    ];
    const addNewItem = () => {
      const newItemIndex = items.length;
      const newItem = {
        id: `faq-item-${clientId.substr(0, 8)}-${newItemIndex}`,
        title: __12("New FAQ Question", "digiblocks"),
        content: __12("Add your answer here. Edit or remove this text inline or in the module Content settings.", "digiblocks"),
        isOpen: false
      };
      setAttributes({
        items: [...items, newItem]
      });
    };
    const removeItem = (index) => {
      const newItems = [...items];
      newItems.splice(index, 1);
      setAttributes({
        items: newItems
      });
    };
    const duplicateItem = (index) => {
      const itemToDuplicate = items[index];
      const timestamp = Date.now();
      const newItem = {
        ...itemToDuplicate,
        id: `faq-item-${clientId.substr(0, 8)}-${timestamp}`,
        isOpen: false
      };
      const newItems = [...items];
      newItems.splice(index + 1, 0, newItem);
      setAttributes({
        items: newItems
      });
    };
    const moveItemUp = (index) => {
      if (index === 0)
        return;
      const newItems = [...items];
      const item = newItems[index];
      newItems.splice(index, 1);
      newItems.splice(index - 1, 0, item);
      setAttributes({
        items: newItems
      });
    };
    const moveItemDown = (index) => {
      if (index === items.length - 1)
        return;
      const newItems = [...items];
      const item = newItems[index];
      newItems.splice(index, 1);
      newItems.splice(index + 1, 0, item);
      setAttributes({
        items: newItems
      });
    };
    const toggleItem = (index) => {
      const newItems = items.map((item, i) => {
        if (i === index) {
          return { ...item, isOpen: !item.isOpen };
        }
        if (!allowMultipleOpen && i !== index && item.isOpen) {
          return { ...item, isOpen: false };
        }
        return item;
      });
      setAttributes({
        items: newItems
      });
    };
    const updateItemTitle = (value, index) => {
      const newItems = [...items];
      newItems[index].title = value;
      setAttributes({
        items: newItems
      });
    };
    const updateItemContent = (value, index) => {
      const newItems = [...items];
      newItems[index].content = value;
      setAttributes({
        items: newItems
      });
    };
    const getIcon = (isOpen, type = iconType) => {
      switch (type) {
        case "plusMinus":
          return isOpen ? /* @__PURE__ */ wp.element.createElement("span", { className: "digiblocks-faq-icon-minus" }, /* @__PURE__ */ wp.element.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 16 16", width: "1em", height: "1em" }, /* @__PURE__ */ wp.element.createElement("path", { fillRule: "evenodd", d: "M2 8a.5.5 0 0 1 .5-.5h11a.5.5 0 0 1 0 1h-11A.5.5 0 0 1 2 8Z" }))) : /* @__PURE__ */ wp.element.createElement("span", { className: "digiblocks-faq-icon-plus" }, /* @__PURE__ */ wp.element.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 16 16", width: "1em", height: "1em" }, /* @__PURE__ */ wp.element.createElement("path", { fillRule: "evenodd", d: "M8 2a.5.5 0 0 1 .5.5v5h5a.5.5 0 0 1 0 1h-5v5a.5.5 0 0 1-1 0v-5h-5a.5.5 0 0 1 0-1h5v-5A.5.5 0 0 1 8 2Z" })));
        case "arrow":
          return /* @__PURE__ */ wp.element.createElement("span", { className: `digiblocks-faq-icon-arrow ${isOpen ? "is-open" : ""}` }, /* @__PURE__ */ wp.element.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 16 16", width: "1em", height: "1em" }, /* @__PURE__ */ wp.element.createElement("path", { fillRule: "evenodd", d: "M1.646 4.646a.5.5 0 0 1 .708 0L8 10.293l5.646-5.647a.5.5 0 0 1 .708.708l-6 6a.5.5 0 0 1-.708 0l-6-6a.5.5 0 0 1 0-.708z" })));
        case "chevron":
          return /* @__PURE__ */ wp.element.createElement("span", { className: `digiblocks-faq-icon-chevron ${isOpen ? "is-open" : ""}` }, /* @__PURE__ */ wp.element.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 16 16", width: "1em", height: "1em" }, /* @__PURE__ */ wp.element.createElement("path", { fillRule: "evenodd", d: "M1.553 6.776a.5.5 0 0 1 .67-.223L8 9.44l5.776-2.888a.5.5 0 1 1 .448.894l-6 3a.5.5 0 0 1-.448 0l-6-3a.5.5 0 0 1-.223-.67z" })));
        case "triangle":
          return /* @__PURE__ */ wp.element.createElement("span", { className: `digiblocks-faq-icon-triangle ${isOpen ? "is-open" : ""}` }, /* @__PURE__ */ wp.element.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 16 16", width: "1em", height: "1em" }, /* @__PURE__ */ wp.element.createElement("path", { d: "m12.14 8.753-5.482 4.796c-.646.566-1.658.106-1.658-.753V3.204a1 1 0 0 1 1.659-.753l5.48 4.796a1 1 0 0 1 0 1.506z" })));
        case "circlePlusMinus":
          return isOpen ? /* @__PURE__ */ wp.element.createElement("span", { className: "digiblocks-faq-icon-circle-minus" }, /* @__PURE__ */ wp.element.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 16 16", width: "1em", height: "1em" }, /* @__PURE__ */ wp.element.createElement("path", { d: "M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z" }), /* @__PURE__ */ wp.element.createElement("path", { d: "M4 8a.5.5 0 0 1 .5-.5h7a.5.5 0 0 1 0 1h-7A.5.5 0 0 1 4 8z" }))) : /* @__PURE__ */ wp.element.createElement("span", { className: "digiblocks-faq-icon-circle-plus" }, /* @__PURE__ */ wp.element.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 16 16", width: "1em", height: "1em" }, /* @__PURE__ */ wp.element.createElement("path", { d: "M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z" }), /* @__PURE__ */ wp.element.createElement("path", { d: "M8 4a.5.5 0 0 1 .5.5v3h3a.5.5 0 0 1 0 1h-3v3a.5.5 0 0 1-1 0v-3h-3a.5.5 0 0 1 0-1h3v-3A.5.5 0 0 1 8 4z" })));
        default:
          return isOpen ? /* @__PURE__ */ wp.element.createElement("span", { className: "digiblocks-faq-icon-minus" }, "\u2014") : /* @__PURE__ */ wp.element.createElement("span", { className: "digiblocks-faq-icon-plus" }, "+");
      }
    };
    const generateCSS = () => {
      const activeDevice = window.digi.responsiveState.activeDevice;
      const itemSpacing = itemsSpacing[activeDevice] !== void 0 ? itemsSpacing[activeDevice] : 16;
      let borderCSS = "";
      if (borderStyle && borderStyle !== "default" && borderStyle !== "none") {
        borderCSS = `
				border-style: ${borderStyle};
				border-color: ${borderColor || "#e0e0e0"};
				${getDimensionCSS8(borderWidth, "border-width", activeDevice)}
				${getDimensionCSS8(borderRadius, "border-radius", activeDevice)}
			`;
      } else {
        borderCSS = "border: none;";
      }
      let boxShadowCSS = "box-shadow: none;";
      if (boxShadow && boxShadow.enable) {
        const inset = boxShadow.position === "inset" ? "inset " : "";
        boxShadowCSS = `box-shadow: ${inset}${boxShadow.horizontal}px ${boxShadow.vertical}px ${boxShadow.blur}px ${boxShadow.spread}px ${boxShadow.color};`;
      }
      const paddingCSS = `${getDimensionCSS8(padding, "padding", activeDevice)}`;
      let titleTypographyCSS = "";
      if (titleTypography) {
        if (titleTypography.fontFamily) {
          titleTypographyCSS += `font-family: ${titleTypography.fontFamily};`;
        }
        if (titleTypography.fontSize && titleTypography.fontSize[activeDevice]) {
          titleTypographyCSS += `font-size: ${titleTypography.fontSize[activeDevice]}${titleTypography.fontSizeUnit || "px"};`;
        }
        if (titleTypography.fontWeight) {
          titleTypographyCSS += `font-weight: ${titleTypography.fontWeight};`;
        }
        if (titleTypography.fontStyle) {
          titleTypographyCSS += `font-style: ${titleTypography.fontStyle};`;
        }
        if (titleTypography.textTransform) {
          titleTypographyCSS += `text-transform: ${titleTypography.textTransform};`;
        }
        if (titleTypography.textDecoration) {
          titleTypographyCSS += `text-decoration: ${titleTypography.textDecoration};`;
        }
        if (titleTypography.lineHeight && titleTypography.lineHeight[activeDevice]) {
          titleTypographyCSS += `line-height: ${titleTypography.lineHeight[activeDevice]}${titleTypography.lineHeightUnit || "em"};`;
        }
        if (titleTypography.letterSpacing && titleTypography.letterSpacing[activeDevice]) {
          titleTypographyCSS += `letter-spacing: ${titleTypography.letterSpacing[activeDevice]}${titleTypography.letterSpacingUnit || "px"};`;
        }
      }
      let contentTypographyCSS = "";
      if (contentTypography) {
        if (contentTypography.fontFamily) {
          contentTypographyCSS += `font-family: ${contentTypography.fontFamily};`;
        }
        if (contentTypography.fontSize && contentTypography.fontSize[activeDevice]) {
          contentTypographyCSS += `font-size: ${contentTypography.fontSize[activeDevice]}${contentTypography.fontSizeUnit || "px"};`;
        }
        if (contentTypography.fontWeight) {
          contentTypographyCSS += `font-weight: ${contentTypography.fontWeight};`;
        }
        if (contentTypography.fontStyle) {
          contentTypographyCSS += `font-style: ${contentTypography.fontStyle};`;
        }
        if (contentTypography.textTransform) {
          contentTypographyCSS += `text-transform: ${contentTypography.textTransform};`;
        }
        if (contentTypography.textDecoration) {
          contentTypographyCSS += `text-decoration: ${contentTypography.textDecoration};`;
        }
        if (contentTypography.lineHeight && contentTypography.lineHeight[activeDevice]) {
          contentTypographyCSS += `line-height: ${contentTypography.lineHeight[activeDevice]}${contentTypography.lineHeightUnit || "em"};`;
        }
        if (contentTypography.letterSpacing && contentTypography.letterSpacing[activeDevice]) {
          contentTypographyCSS += `letter-spacing: ${contentTypography.letterSpacing[activeDevice]}${contentTypography.letterSpacingUnit || "px"};`;
        }
      }
      let boxShadowHoverCSS = "";
      if (boxShadowHover && boxShadowHover.enable) {
        const insetHover = boxShadowHover.position === "inset" ? "inset " : "";
        boxShadowHoverCSS = `box-shadow: ${insetHover}${boxShadowHover.horizontal}px ${boxShadowHover.vertical}px ${boxShadowHover.blur}px ${boxShadowHover.spread}px ${boxShadowHover.color};`;
      }
      const baseCSS = `
			/* FAQ Block - ${id} */
			.${id} {
				${getDimensionCSS8(margin, "margin", activeDevice)}
				width: 100%;
			}
			
			/* Base styles for questions and answers */
			.${id} .digiblocks-faq-question {
				cursor: pointer;
				-webkit-user-select: none;
				-moz-user-select: none;
				-ms-user-select: none;
				user-select: none;
				display: flex;
				align-items: center;
				${iconPosition === "left" ? "flex-direction: row-reverse; justify-content: flex-end;" : "justify-content: space-between;"}
			}
			
			.${id} .digiblocks-faq-question-text {
				color: ${titleColor};
				${titleTypographyCSS}
				margin: 0;
				flex: 1;
				${questionPrefix ? "display: flex; align-items: center; gap: .5rem;" : ""}
				transition: color 0.3s ease;
			}
			
			.${id} .digiblocks-faq-question-prefix {
				${questionPrefixColor ? `color: ${questionPrefixColor};` : ""}
				font-weight: bold;
			}
			
			.${id} .digiblocks-faq-answer-prefix {
				${answerPrefixColor ? `color: ${answerPrefixColor};` : ""}
				font-weight: bold;
			}
			
			.${id} .digiblocks-faq-answer-content {
				display: flex;
				${answerPrefix ? "display: flex; gap: .5rem;" : ""}
				color: ${contentColor};
				${contentTypographyCSS}
			}
			
			/* Handle answer display states */
			.${id} .digiblocks-faq-answer {
				overflow: hidden;
				display: none;
				transition: height 0.3s ease;
			}
			
			.${id} .digiblocks-faq-item.is-active .digiblocks-faq-answer {
				display: block;
			}
			
			/* Icon styles */
			.${id} .digiblocks-faq-question {
				gap: 15px;
			}

			.${id} .digiblocks-faq-question-icon {
				display: flex;
				align-items: center;
				justify-content: center;
				color: ${iconColor};
				transition: all 0.3s ease;
				font-size: ${iconSize[activeDevice]}px;
			}
			
			.${id} .digiblocks-faq-question-icon span {
				display: flex;
				align-items: center;
				justify-content: center;
			}
			
			.${id} .digiblocks-faq-question-icon svg {
				width: ${iconSize[activeDevice]}px;
				height: ${iconSize[activeDevice]}px;
				transition: transform 0.3s ease;
				fill: currentColor;
			}
			
			/* Rotate icons when active */
			.${id} .digiblocks-faq-item.is-active .digiblocks-faq-question-icon .digiblocks-faq-icon-arrow,
			.${id} .digiblocks-faq-item.is-active .digiblocks-faq-question-icon .digiblocks-faq-icon-chevron,
			.${id} .digiblocks-faq-item.is-active .digiblocks-faq-question-icon .digiblocks-faq-icon-triangle {
				transform: rotate(180deg);
			}
			
			.${id} .digiblocks-faq-icon-arrow,
			.${id} .digiblocks-faq-icon-chevron,
			.${id} .digiblocks-faq-icon-triangle {
				display: inline-flex;
				transition: transform 0.3s ease;
			}
			
			/* Handle hover state */
			.${id} .digiblocks-faq-question:hover .digiblocks-faq-question-text {
				${titleHoverColor ? `color: ${titleHoverColor};` : ""}
			}
			
			.${id} .digiblocks-faq-question:hover .digiblocks-faq-question-icon {
				${iconHoverColor ? `color: ${iconHoverColor};` : ""}
			}
			
			/* Handle active state */
			.${id} .digiblocks-faq-item.is-active .digiblocks-faq-question-text {
				color: ${titleActiveColor};
			}
			
			.${id} .digiblocks-faq-item.is-active .digiblocks-faq-question-icon {
				color: ${iconActiveColor};
			}

			/* Visibility Controls */
			${visibility.desktop ? `
				@media (min-width: 992px) {
					.${id} {
						opacity: 0.5 !important;
					}
				}
			` : ""}

			${visibility.tablet ? `
				@media (min-width: 768px) and (max-width: 991px) {
					.${id} {
						opacity: 0.5 !important;
					}
				}
			` : ""}

			${visibility.mobile ? `
				@media (max-width: 767px) {
					.${id} {
						opacity: 0.5 !important;
					}
				}
			` : ""}
		`;
      let layoutCSS = "";
      switch (layout) {
        case "boxed":
          layoutCSS = `
					.${id} .digiblocks-faq-item {
						${borderCSS}
						${boxShadowCSS}
						background-color: ${backgroundColor || "#ffffff"};
						transition: all 0.3s ease;
						margin-bottom: ${itemSpacing}px;
					}
					
					.${id} .digiblocks-faq-item:hover {
						${boxShadowHoverCSS}
						${backgroundHoverColor ? `background-color: ${backgroundHoverColor};` : ""}
						${borderHoverColor ? `border-color: ${borderHoverColor};` : ""}
					}
					
					.${id} .digiblocks-faq-question {
						${paddingCSS}
					}
					
					.${id} .digiblocks-faq-answer {
						${paddingCSS}
						border-top: 1px solid ${borderColor || "#e0e0e0"};
						${contentBackgroundColor ? `background-color: ${contentBackgroundColor};` : ""}
					}
					
					.${id} .digiblocks-faq-item.is-active {
						${backgroundActiveColor ? `background-color: ${backgroundActiveColor};` : ""}
					}
				`;
          break;
        case "classic":
          layoutCSS = `
					.${id} .digiblocks-faq-item {
						border: none;
						border-bottom: 1px solid ${borderColor || "#e0e0e0"};
						background-color: transparent;
						margin-bottom: ${itemSpacing}px;
						transition: all 0.3s ease;
					}
					
					.${id} .digiblocks-faq-question {
						${paddingCSS}
					}
					
					.${id} .digiblocks-faq-answer {
						${getDimensionCSS8(padding, "padding", activeDevice)}
						padding-top: 0;
					}
				`;
          break;
        case "separated":
          layoutCSS = `
					.${id} .digiblocks-faq-item {
						margin-bottom: ${itemSpacing}px;
						transition: all 0.3s ease;
					}
					
					.${id} .digiblocks-faq-question {
						${paddingCSS}
						${borderCSS}
						${boxShadowCSS}
						background-color: ${backgroundColor || "#ffffff"};
					}
					
					.${id} .digiblocks-faq-question:hover {
						${titleHoverColor ? `color: ${titleHoverColor};` : ""}
						${backgroundHoverColor ? `background-color: ${backgroundHoverColor};` : ""}
						${borderHoverColor ? `border-color: ${borderHoverColor};` : ""}
						${boxShadowHoverCSS}
					}
					
					.${id} .digiblocks-faq-item.is-active .digiblocks-faq-question {
						${titleActiveColor ? `color: ${titleActiveColor};` : ""}
						${backgroundActiveColor ? `background-color: ${backgroundActiveColor};` : ""}
					}
					
					.${id} .digiblocks-faq-answer {
						${paddingCSS}
						${contentBackgroundColor ? `background-color: ${contentBackgroundColor};` : ""}
						${borderCSS}
						border-top: none;
						border-top-left-radius: 0;
						border-top-right-radius: 0;
						border-bottom-left-radius: ${borderRadius && borderRadius[activeDevice] ? borderRadius[activeDevice].left + borderRadius[activeDevice].unit : "8px"};
						border-bottom-right-radius: ${borderRadius && borderRadius[activeDevice] ? borderRadius[activeDevice].right + borderRadius[activeDevice].unit : "8px"};
						margin-top: -1px;
					}
				`;
          break;
        case "minimalist":
          layoutCSS = `
					.${id} .digiblocks-faq-item {
						margin-bottom: ${itemSpacing}px;
						transition: all 0.3s ease;
						background-color: transparent;
					}
					
					.${id} .digiblocks-faq-question {
						${paddingCSS}
						border-bottom: 2px solid ${borderColor || "#e0e0e0"};
					}
					
					.${id} .digiblocks-faq-question:hover {
						${titleHoverColor ? `color: ${titleHoverColor};` : ""}
						border-color: ${titleHoverColor || borderHoverColor || "#cccccc"};
					}
					
					.${id} .digiblocks-faq-item.is-active .digiblocks-faq-question {
						${titleActiveColor ? `color: ${titleActiveColor};` : ""}
						border-color: ${titleActiveColor || "#1e73be"};
					}
					
					.${id} .digiblocks-faq-answer {
						${getDimensionCSS8(padding, "padding", activeDevice)}
					}
				`;
          break;
        case "bordered":
          layoutCSS = `
					.${id} .digiblocks-faq-item {
						${borderCSS}
						background-color: transparent;
						margin-bottom: ${itemSpacing}px;
						transition: all 0.3s ease;
						overflow: hidden;
					}
					
					.${id} .digiblocks-faq-item:hover {
						${borderHoverColor ? `border-color: ${borderHoverColor};` : ""}
					}
					
					.${id} .digiblocks-faq-question {
						${paddingCSS}
						background-color: ${backgroundColor || "#f8f9fa"};
					}
					
					.${id} .digiblocks-faq-question:hover {
						${titleHoverColor ? `color: ${titleHoverColor};` : ""}
						${backgroundHoverColor ? `background-color: ${backgroundHoverColor};` : ""}
					}
					
					.${id} .digiblocks-faq-item.is-active .digiblocks-faq-question {
						${titleActiveColor ? `color: ${titleActiveColor};` : ""}
						${backgroundActiveColor ? `background-color: ${backgroundActiveColor};` : ""}
					}
					
					.${id} .digiblocks-faq-answer {
						${paddingCSS}
						${contentBackgroundColor ? `background-color: ${contentBackgroundColor};` : ""}
					}
					
					.${id} .digiblocks-faq-item.is-active {
						border-color: ${titleActiveColor || borderColor || "#1e73be"};
					}
				`;
          break;
        default:
          layoutCSS = `
					.${id} .digiblocks-faq-item {
						${borderCSS}
						${boxShadowCSS}
						background-color: ${backgroundColor || "#ffffff"};
						transition: all 0.3s ease;
						margin-bottom: ${itemSpacing}px;
					}
					
					.${id} .digiblocks-faq-question {
						${paddingCSS}
					}
					
					.${id} .digiblocks-faq-answer {
						${paddingCSS}
						border-top: 1px solid #e0e0e0;
					}
				`;
      }
      const editorCSS = `
			.${id} .digiblocks-faq-item {
				position: relative;
			}
			
			.${id} .digiblocks-faq-item-controls {
				display: flex;
				gap: 5px;
				position: absolute;
				right: 10px;
				top: -28px;
				background-color: #fff;
				padding: 2px;
				border-radius: 3px;
				box-shadow: 0 1px 3px rgba(0,0,0,0.12);
				z-index: 10;
			}
		
			/* Respect the is-active class for showing/hiding answers */
			.${id} .digiblocks-faq-answer {
				display: none;
				transition: height 0.3s ease;
			}
			
			.${id} .digiblocks-faq-item.is-active .digiblocks-faq-answer {
				display: block;
			}
			
			.${id} .digiblocks-faq-schema {
				margin-top: 15px;
			}
		`;
      const tabletStyles = `
			@media (max-width: 991px) {
				.${id} {
					${margin.tablet ? `${getDimensionCSS8(margin, "margin", "tablet")}` : ""}
				}
				
				.${id} .digiblocks-faq-item {
					margin-bottom: ${itemsSpacing.tablet !== void 0 ? itemsSpacing.tablet : itemSpacing}px;
				}
				
				.${id} .digiblocks-faq-question,
				.${id} .digiblocks-faq-answer {
					${padding.tablet ? `${getDimensionCSS8(padding, "padding", "tablet")}` : ""}
				}
				
				${layout === "minimalist" ? `
				.${id} .digiblocks-faq-answer {
					${getDimensionCSS8(padding, "padding", "tablet")}
					padding-left: 0;
					padding-right: 0;
				}
				` : ""}
				
				${iconSize && iconSize.tablet ? `
				.${id} .digiblocks-faq-question-icon {
					font-size: ${iconSize.tablet}px;
				}
				
				.${id} .digiblocks-faq-question-icon svg {
					width: ${iconSize.tablet}px;
					height: ${iconSize.tablet}px;
				}
				` : ""}
				
				${titleTypography && titleTypography.fontSize && titleTypography.fontSize.tablet ? `
				.${id} .digiblocks-faq-question-text {
					font-size: ${titleTypography.fontSize.tablet}${titleTypography.fontSizeUnit || "px"};
					${titleTypography.lineHeight && titleTypography.lineHeight.tablet ? `line-height: ${titleTypography.lineHeight.tablet}${titleTypography.lineHeightUnit || "em"};` : ""}
				}
				` : ""}
				
				${contentTypography && contentTypography.fontSize && contentTypography.fontSize.tablet ? `
				.${id} .digiblocks-faq-answer-content {
					font-size: ${contentTypography.fontSize.tablet}${contentTypography.fontSizeUnit || "px"};
					${contentTypography.lineHeight && contentTypography.lineHeight.tablet ? `line-height: ${contentTypography.lineHeight.tablet}${contentTypography.lineHeightUnit || "em"};` : ""}
				}
				` : ""}
			}
		`;
      const mobileStyles = `
			@media (max-width: 767px) {
				.${id} {
					${margin.mobile ? `${getDimensionCSS8(margin, "margin", "mobile")}` : ""}
				}
				
				.${id} .digiblocks-faq-item {
					margin-bottom: ${itemsSpacing.mobile !== void 0 ? itemsSpacing.mobile : itemSpacing}px;
				}
				
				.${id} .digiblocks-faq-question,
				.${id} .digiblocks-faq-answer {
					${padding.mobile ? `${getDimensionCSS8(padding, "padding", "mobile")}` : ""}
				}
				
				${layout === "minimalist" ? `
				.${id} .digiblocks-faq-answer {
					${getDimensionCSS8(padding, "padding", "mobile")}
					padding-left: 0;
					padding-right: 0;
				}
				` : ""}
				
				${iconSize && iconSize.mobile ? `
				.${id} .digiblocks-faq-question-icon {
					font-size: ${iconSize.mobile}px;
				}
				
				.${id} .digiblocks-faq-question-icon svg {
					width: ${iconSize.mobile}px;
					height: ${iconSize.mobile}px;
				}
				` : ""}
				
				${titleTypography && titleTypography.fontSize && titleTypography.fontSize.mobile ? `
				.${id} .digiblocks-faq-question-text {
					font-size: ${titleTypography.fontSize.mobile}${titleTypography.fontSizeUnit || "px"};
					${titleTypography.lineHeight && titleTypography.lineHeight.mobile ? `line-height: ${titleTypography.lineHeight.mobile}${titleTypography.lineHeightUnit || "em"};` : ""}
				}
				` : ""}
				
				${contentTypography && contentTypography.fontSize && contentTypography.fontSize.mobile ? `
				.${id} .digiblocks-faq-answer-content {
					font-size: ${contentTypography.fontSize.mobile}${contentTypography.fontSizeUnit || "px"};
					${contentTypography.lineHeight && contentTypography.lineHeight.mobile ? `line-height: ${contentTypography.lineHeight.mobile}${contentTypography.lineHeightUnit || "em"};` : ""}
				}
				` : ""}
			}
		`;
      let animationCSS = "";
      if (animation && animation !== "none" && animations8[animation]) {
        animationCSS = animations8[animation].keyframes;
      }
      return `
			${baseCSS}
			${layoutCSS}
			${editorCSS}
			${tabletStyles}
			${mobileStyles}
			${animationCSS}
		`;
    };
    const renderTitleTabContent = (tabName) => {
      if (tabName === "normal") {
        return /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(
          PanelColorSettings9,
          {
            title: __12(
              "Question Colors",
              "digiblocks"
            ),
            initialOpen: true,
            enableAlpha: true,
            colorSettings: [
              {
                value: titleColor,
                onChange: (value) => setAttributes({
                  titleColor: value
                }),
                label: __12(
                  "Text Color",
                  "digiblocks"
                )
              },
              {
                value: backgroundColor,
                onChange: (value) => setAttributes({
                  backgroundColor: value
                }),
                label: __12(
                  "Background Color",
                  "digiblocks"
                )
              },
              {
                value: questionPrefixColor,
                onChange: (value) => setAttributes({
                  questionPrefixColor: value
                }),
                label: __12(
                  "Prefix Color",
                  "digiblocks"
                ),
                disableCustomColors: !questionPrefix
              }
            ]
          }
        ));
      } else if (tabName === "hover") {
        return /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(
          PanelColorSettings9,
          {
            title: __12(
              "Question Hover Colors",
              "digiblocks"
            ),
            initialOpen: true,
            enableAlpha: true,
            colorSettings: [
              {
                value: titleHoverColor,
                onChange: (value) => setAttributes({
                  titleHoverColor: value
                }),
                label: __12(
                  "Text Color",
                  "digiblocks"
                )
              },
              {
                value: backgroundHoverColor,
                onChange: (value) => setAttributes({
                  backgroundHoverColor: value
                }),
                label: __12(
                  "Background Color",
                  "digiblocks"
                )
              }
            ]
          }
        ));
      } else if (tabName === "active") {
        return /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(
          PanelColorSettings9,
          {
            title: __12(
              "Question Active Colors",
              "digiblocks"
            ),
            initialOpen: true,
            enableAlpha: true,
            colorSettings: [
              {
                value: titleActiveColor,
                onChange: (value) => setAttributes({
                  titleActiveColor: value
                }),
                label: __12(
                  "Text Color",
                  "digiblocks"
                )
              },
              {
                value: backgroundActiveColor,
                onChange: (value) => setAttributes({
                  backgroundActiveColor: value
                }),
                label: __12(
                  "Background Color",
                  "digiblocks"
                )
              }
            ]
          }
        ));
      }
      return null;
    };
    const renderIconTabContent = (tabName) => {
      if (tabName === "normal") {
        return /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(
          PanelColorSettings9,
          {
            title: __12(
              "Icon Colors",
              "digiblocks"
            ),
            initialOpen: true,
            enableAlpha: true,
            colorSettings: [
              {
                value: iconColor,
                onChange: (value) => setAttributes({
                  iconColor: value
                }),
                label: __12(
                  "Icon Color",
                  "digiblocks"
                )
              }
            ]
          }
        ));
      } else if (tabName === "hover") {
        return /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(
          PanelColorSettings9,
          {
            title: __12(
              "Icon Hover Colors",
              "digiblocks"
            ),
            initialOpen: true,
            enableAlpha: true,
            colorSettings: [
              {
                value: iconHoverColor,
                onChange: (value) => setAttributes({
                  iconHoverColor: value
                }),
                label: __12(
                  "Icon Color",
                  "digiblocks"
                )
              }
            ]
          }
        ));
      } else if (tabName === "active") {
        return /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(
          PanelColorSettings9,
          {
            title: __12(
              "Icon Active Colors",
              "digiblocks"
            ),
            initialOpen: true,
            enableAlpha: true,
            colorSettings: [
              {
                value: iconActiveColor,
                onChange: (value) => setAttributes({
                  iconActiveColor: value
                }),
                label: __12(
                  "Icon Color",
                  "digiblocks"
                )
              }
            ]
          }
        ));
      }
      return null;
    };
    const renderContentTabContent = () => {
      return /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(
        PanelColorSettings9,
        {
          title: __12(
            "Answer Colors",
            "digiblocks"
          ),
          initialOpen: true,
          enableAlpha: true,
          colorSettings: [
            {
              value: contentColor,
              onChange: (value) => setAttributes({
                contentColor: value
              }),
              label: __12(
                "Text Color",
                "digiblocks"
              )
            },
            {
              value: contentBackgroundColor,
              onChange: (value) => setAttributes({
                contentBackgroundColor: value
              }),
              label: __12(
                "Background Color",
                "digiblocks"
              )
            },
            {
              value: answerPrefixColor,
              onChange: (value) => setAttributes({
                answerPrefixColor: value
              }),
              label: __12(
                "Prefix Color",
                "digiblocks"
              ),
              disableCustomColors: !answerPrefix
            }
          ]
        }
      ));
    };
    const renderTabContent = () => {
      switch (activeTab) {
        case "options":
          return /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(
            TabPanelBody11,
            {
              tab: "options",
              name: "content-settings",
              title: __12("Items", "digiblocks"),
              initialOpen: true
            },
            /* @__PURE__ */ wp.element.createElement(
              ToggleControl10,
              {
                label: __12("Allow Multiple Open", "digiblocks"),
                checked: allowMultipleOpen,
                onChange: () => setAttributes({ allowMultipleOpen: !allowMultipleOpen }),
                help: __12("When enabled, multiple FAQ items can be open at the same time.", "digiblocks"),
                __nextHasNoMarginBottom: true
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              SelectControl11,
              {
                label: __12("Layout", "digiblocks"),
                value: layout,
                options: layoutOptions,
                onChange: (value) => setAttributes({ layout: value }),
                __next40pxDefaultSize: true,
                __nextHasNoMarginBottom: true
              }
            ),
            /* @__PURE__ */ wp.element.createElement("div", { className: "components-base-control" }, /* @__PURE__ */ wp.element.createElement("div", { className: "components-base-control__field" }, /* @__PURE__ */ wp.element.createElement("label", { htmlFor: "question-prefix", className: "components-base-control__label" }, __12("Question Prefix", "digiblocks")), /* @__PURE__ */ wp.element.createElement(
              TextControl5,
              {
                id: "question-prefix",
                value: questionPrefix || "",
                onChange: (value) => setAttributes({ questionPrefix: value }),
                placeholder: __12("Example: Q:", "digiblocks"),
                __next40pxDefaultSize: true,
                __nextHasNoMarginBottom: true
              }
            ), /* @__PURE__ */ wp.element.createElement("p", { className: "components-base-control__help" }, __12("Add a prefix to questions (e.g., 'Q:').", "digiblocks")))),
            /* @__PURE__ */ wp.element.createElement("div", { className: "components-base-control" }, /* @__PURE__ */ wp.element.createElement("div", { className: "components-base-control__field" }, /* @__PURE__ */ wp.element.createElement("label", { htmlFor: "answer-prefix", className: "components-base-control__label" }, __12("Answer Prefix", "digiblocks")), /* @__PURE__ */ wp.element.createElement(
              TextControl5,
              {
                id: "answer-prefix",
                value: answerPrefix || "",
                onChange: (value) => setAttributes({ answerPrefix: value }),
                placeholder: __12("Example: A:", "digiblocks"),
                __next40pxDefaultSize: true,
                __nextHasNoMarginBottom: true
              }
            ), /* @__PURE__ */ wp.element.createElement("p", { className: "components-base-control__help" }, __12("Add a prefix to answers (e.g., 'A:').", "digiblocks")))),
            /* @__PURE__ */ wp.element.createElement(
              ResponsiveControl10,
              {
                label: __12("Items Spacing", "digiblocks")
              },
              /* @__PURE__ */ wp.element.createElement(
                RangeControl9,
                {
                  value: itemsSpacing[localActiveDevice],
                  onChange: (value) => setAttributes({
                    itemsSpacing: {
                      ...itemsSpacing,
                      [localActiveDevice]: value
                    }
                  }),
                  min: 0,
                  max: 100,
                  step: 1,
                  __next40pxDefaultSize: true,
                  __nextHasNoMarginBottom: true
                }
              )
            )
          ), /* @__PURE__ */ wp.element.createElement(
            TabPanelBody11,
            {
              tab: "options",
              name: "icon-settings",
              title: __12("Icon Settings", "digiblocks"),
              initialOpen: false
            },
            /* @__PURE__ */ wp.element.createElement(
              SelectControl11,
              {
                label: __12("Icon Type", "digiblocks"),
                value: iconType,
                options: iconTypeOptions,
                onChange: (value) => setAttributes({ iconType: value }),
                __next40pxDefaultSize: true,
                __nextHasNoMarginBottom: true
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              SelectControl11,
              {
                label: __12("Icon Position", "digiblocks"),
                value: iconPosition,
                options: iconPositionOptions,
                onChange: (value) => setAttributes({ iconPosition: value }),
                __next40pxDefaultSize: true,
                __nextHasNoMarginBottom: true
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              ResponsiveControl10,
              {
                label: __12("Icon Size", "digiblocks")
              },
              /* @__PURE__ */ wp.element.createElement(
                RangeControl9,
                {
                  value: iconSize[localActiveDevice],
                  onChange: (value) => setAttributes({
                    iconSize: {
                      ...iconSize,
                      [localActiveDevice]: value
                    }
                  }),
                  min: 8,
                  max: 100,
                  step: 1,
                  __next40pxDefaultSize: true,
                  __nextHasNoMarginBottom: true
                }
              )
            )
          ), /* @__PURE__ */ wp.element.createElement(
            TabPanelBody11,
            {
              tab: "options",
              name: "schema-settings",
              title: __12("SEO Schema", "digiblocks"),
              initialOpen: false
            },
            /* @__PURE__ */ wp.element.createElement(
              ToggleControl10,
              {
                label: __12("Enable Schema Markup", "digiblocks"),
                checked: schemaEnabled,
                onChange: () => setAttributes({ schemaEnabled: !schemaEnabled }),
                help: __12("Add JSON-LD schema markup for better SEO results.", "digiblocks"),
                __nextHasNoMarginBottom: true
              }
            ),
            schemaEnabled && /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(
              SelectControl11,
              {
                label: __12("Schema Type", "digiblocks"),
                value: schemaType,
                options: schemaTypeOptions,
                onChange: (value) => setAttributes({ schemaType: value }),
                __next40pxDefaultSize: true,
                __nextHasNoMarginBottom: true
              }
            ), /* @__PURE__ */ wp.element.createElement(
              TextControl5,
              {
                label: __12("Schema Name", "digiblocks"),
                value: schemaName,
                onChange: (value) => setAttributes({ schemaName: value }),
                placeholder: __12("Example: Product FAQ", "digiblocks"),
                help: __12("Name for your FAQ schema (e.g., Company FAQ, Product FAQ).", "digiblocks"),
                __next40pxDefaultSize: true,
                __nextHasNoMarginBottom: true
              }
            ))
          ), /* @__PURE__ */ wp.element.createElement(
            TabPanelBody11,
            {
              tab: "options",
              name: "heading-settings",
              title: __12("HTML Settings", "digiblocks"),
              initialOpen: false
            },
            /* @__PURE__ */ wp.element.createElement(
              SelectControl11,
              {
                label: __12("Question Tag", "digiblocks"),
                value: titleTag,
                options: titleTagOptions,
                onChange: (value) => setAttributes({ titleTag: value }),
                help: __12("HTML tag for questions. Default is h3.", "digiblocks"),
                __next40pxDefaultSize: true,
                __nextHasNoMarginBottom: true
              }
            )
          ));
        case "style":
          return /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(
            TabPanelBody11,
            {
              tab: "style",
              name: "question-styles",
              title: __12("Question Styles", "digiblocks"),
              initialOpen: true
            },
            /* @__PURE__ */ wp.element.createElement(
              TabPanel7,
              {
                className: "digiblocks-control-tabs",
                activeClass: "active-tab",
                tabs: stateTabList
              },
              (tab) => renderTitleTabContent(tab.name)
            ),
            /* @__PURE__ */ wp.element.createElement(
              TypographyControl7,
              {
                label: __12(
                  "Question Typography",
                  "digiblocks"
                ),
                value: titleTypography,
                onChange: (value) => setAttributes({
                  titleTypography: value
                }),
                defaults: {
                  fontSize: { desktop: 18, tablet: 16, mobile: 15 },
                  fontSizeUnit: "px",
                  lineHeight: { desktop: 1.5, tablet: 1.4, mobile: 1.3 },
                  lineHeightUnit: "em"
                }
              }
            )
          ), /* @__PURE__ */ wp.element.createElement(
            TabPanelBody11,
            {
              tab: "style",
              name: "answer-styles",
              title: __12("Answer Styles", "digiblocks"),
              initialOpen: false
            },
            renderContentTabContent(),
            /* @__PURE__ */ wp.element.createElement(
              TypographyControl7,
              {
                label: __12(
                  "Answer Typography",
                  "digiblocks"
                ),
                value: contentTypography,
                onChange: (value) => setAttributes({
                  contentTypography: value
                }),
                defaults: {
                  fontSize: { desktop: 16, tablet: 15, mobile: 14 },
                  fontSizeUnit: "px",
                  lineHeight: { desktop: 1.5, tablet: 1.4, mobile: 1.3 },
                  lineHeightUnit: "em"
                }
              }
            )
          ), /* @__PURE__ */ wp.element.createElement(
            TabPanelBody11,
            {
              tab: "style",
              name: "icon-styles",
              title: __12("Icon Styles", "digiblocks"),
              initialOpen: false
            },
            /* @__PURE__ */ wp.element.createElement(
              TabPanel7,
              {
                className: "digiblocks-control-tabs",
                activeClass: "active-tab",
                tabs: stateTabList
              },
              (tab) => renderIconTabContent(tab.name)
            )
          ), /* @__PURE__ */ wp.element.createElement(
            TabPanelBody11,
            {
              tab: "style",
              name: "border-box",
              title: __12("Border & Shadow", "digiblocks"),
              initialOpen: false
            },
            layout !== "classic" && layout !== "minimalist" && /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(
              SelectControl11,
              {
                label: __12("Border Style", "digiblocks"),
                value: borderStyle || "default",
                options: borderStyleOptions,
                onChange: (value) => {
                  if (value !== "default" && value !== "none" && (borderStyle === "default" || borderStyle === "none" || !borderStyle)) {
                    if (!borderWidth || Object.keys(borderWidth).length === 0) {
                      setAttributes({
                        borderWidth: {
                          desktop: { top: 1, right: 1, bottom: 1, left: 1, unit: "px" },
                          tablet: { top: 1, right: 1, bottom: 1, left: 1, unit: "px" },
                          mobile: { top: 1, right: 1, bottom: 1, left: 1, unit: "px" }
                        }
                      });
                    }
                    if (!borderRadius || Object.keys(borderRadius).length === 0) {
                      setAttributes({
                        borderRadius: {
                          desktop: { top: 8, right: 8, bottom: 8, left: 8, unit: "px" },
                          tablet: { top: 8, right: 8, bottom: 8, left: 8, unit: "px" },
                          mobile: { top: 8, right: 8, bottom: 8, left: 8, unit: "px" }
                        }
                      });
                    }
                  }
                  setAttributes({
                    borderStyle: value
                  });
                },
                __next40pxDefaultSize: true,
                __nextHasNoMarginBottom: true
              }
            ), borderStyle && borderStyle !== "default" && borderStyle !== "none" && /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(
              PanelColorSettings9,
              {
                title: __12(
                  "Border Colors",
                  "digiblocks"
                ),
                enableAlpha: true,
                colorSettings: [
                  {
                    value: borderColor,
                    onChange: (value) => setAttributes({
                      borderColor: value
                    }),
                    label: __12(
                      "Border Color",
                      "digiblocks"
                    )
                  },
                  {
                    value: borderHoverColor,
                    onChange: (value) => setAttributes({
                      borderHoverColor: value
                    }),
                    label: __12(
                      "Border Hover Color",
                      "digiblocks"
                    )
                  }
                ]
              }
            ), /* @__PURE__ */ wp.element.createElement(
              ResponsiveControl10,
              {
                label: __12("Border Width", "digiblocks")
              },
              /* @__PURE__ */ wp.element.createElement(
                DimensionControl9,
                {
                  values: borderWidth && borderWidth[localActiveDevice] ? borderWidth[localActiveDevice] : {
                    top: 1,
                    right: 1,
                    bottom: 1,
                    left: 1,
                    unit: "px"
                  },
                  onChange: (value) => setAttributes({
                    borderWidth: {
                      ...borderWidth,
                      [localActiveDevice]: value
                    }
                  })
                }
              )
            ), /* @__PURE__ */ wp.element.createElement(
              ResponsiveControl10,
              {
                label: __12("Border Radius", "digiblocks")
              },
              /* @__PURE__ */ wp.element.createElement(
                DimensionControl9,
                {
                  values: borderRadius && borderRadius[localActiveDevice] ? borderRadius[localActiveDevice] : {
                    top: 8,
                    right: 8,
                    bottom: 8,
                    left: 8,
                    unit: "px"
                  },
                  onChange: (value) => setAttributes({
                    borderRadius: {
                      ...borderRadius,
                      [localActiveDevice]: value
                    }
                  }),
                  units: [
                    { label: "px", value: "px" },
                    { label: "%", value: "%" }
                  ]
                }
              )
            ))),
            /* @__PURE__ */ wp.element.createElement(
              BoxShadowControl9,
              {
                normalValue: boxShadow,
                hoverValue: boxShadowHover,
                onNormalChange: (value) => setAttributes({
                  boxShadow: value
                }),
                onHoverChange: (value) => setAttributes({
                  boxShadowHover: value
                })
              }
            )
          ), /* @__PURE__ */ wp.element.createElement(
            TabPanelBody11,
            {
              tab: "style",
              name: "spacing",
              title: __12("Spacing", "digiblocks"),
              initialOpen: false
            },
            /* @__PURE__ */ wp.element.createElement(
              ResponsiveControl10,
              {
                label: __12("Padding", "digiblocks")
              },
              /* @__PURE__ */ wp.element.createElement(
                DimensionControl9,
                {
                  values: padding[localActiveDevice],
                  onChange: (value) => setAttributes({
                    padding: {
                      ...padding,
                      [localActiveDevice]: value
                    }
                  })
                }
              )
            ),
            /* @__PURE__ */ wp.element.createElement(
              ResponsiveControl10,
              {
                label: __12("Margin", "digiblocks")
              },
              /* @__PURE__ */ wp.element.createElement(
                DimensionControl9,
                {
                  values: margin[localActiveDevice],
                  onChange: (value) => setAttributes({
                    margin: {
                      ...margin,
                      [localActiveDevice]: value
                    }
                  })
                }
              )
            )
          ));
        case "advanced":
          return /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(
            TabPanelBody11,
            {
              tab: "advanced",
              name: "animation",
              title: __12("Animation", "digiblocks"),
              initialOpen: true
            },
            /* @__PURE__ */ wp.element.createElement(
              SelectControl11,
              {
                label: __12("Animation Effect", "digiblocks"),
                value: animation,
                options: animationOptions,
                onChange: (value) => setAttributes({ animation: value }),
                __next40pxDefaultSize: true,
                __nextHasNoMarginBottom: true
              }
            ),
            animation && animation !== "none" && /* @__PURE__ */ wp.element.createElement("div", { style: { marginTop: "10px" } }, /* @__PURE__ */ wp.element.createElement(
              Button9,
              {
                variant: "secondary",
                isSecondary: true,
                onClick: handlePreviewClick,
                style: { width: "100%" }
              },
              __12("Preview Animation", "digiblocks")
            ))
          ), /* @__PURE__ */ wp.element.createElement(
            TabPanelBody11,
            {
              tab: "advanced",
              name: "visibility",
              title: __12("Visibility", "digiblocks"),
              initialOpen: false
            },
            /* @__PURE__ */ wp.element.createElement("div", { className: "components-base-control__help", style: {
              padding: "12px",
              backgroundColor: "#f0f6fc",
              border: "1px solid #c3ddfd",
              borderRadius: "4px",
              marginBottom: "16px"
            } }, /* @__PURE__ */ wp.element.createElement("strong", null, __12("Editor Note:", "digiblocks")), /* @__PURE__ */ wp.element.createElement("br", null), __12("Hidden elements appear with reduced opacity in the editor for easy editing. Visibility changes only take effect on the frontend.", "digiblocks")),
            /* @__PURE__ */ wp.element.createElement(
              ToggleControl10,
              {
                label: __12("Hide on Desktop", "digiblocks"),
                checked: visibility.desktop,
                onChange: (value) => setAttributes({
                  visibility: {
                    ...visibility,
                    desktop: value
                  }
                }),
                __nextHasNoMarginBottom: true
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              ToggleControl10,
              {
                label: __12("Hide on Tablet", "digiblocks"),
                checked: visibility.tablet,
                onChange: (value) => setAttributes({
                  visibility: {
                    ...visibility,
                    tablet: value
                  }
                }),
                __nextHasNoMarginBottom: true
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              ToggleControl10,
              {
                label: __12("Hide on Mobile", "digiblocks"),
                checked: visibility.mobile,
                onChange: (value) => setAttributes({
                  visibility: {
                    ...visibility,
                    mobile: value
                  }
                }),
                __nextHasNoMarginBottom: true
              }
            )
          ), /* @__PURE__ */ wp.element.createElement(
            TabPanelBody11,
            {
              tab: "advanced",
              name: "additional",
              title: __12("Additional", "digiblocks"),
              initialOpen: false
            },
            /* @__PURE__ */ wp.element.createElement("div", { className: "components-base-control html-anchor-control" }, /* @__PURE__ */ wp.element.createElement("div", { className: "components-base-control__field" }, /* @__PURE__ */ wp.element.createElement("label", { className: "components-base-control__label", htmlFor: "html-anchor" }, __12("HTML anchor", "digiblocks")), /* @__PURE__ */ wp.element.createElement(
              "input",
              {
                className: "components-text-control__input",
                type: "text",
                id: "html-anchor",
                value: anchor || "",
                onChange: (e) => setAttributes({ anchor: e.target.value }),
                "aria-describedby": "html-anchor-help",
                autoCapitalize: "none",
                autoComplete: "off"
              }
            )), /* @__PURE__ */ wp.element.createElement("p", { id: "html-anchor-help", className: "components-base-control__help" }, __12(`Enter a word or two \u2014 without spaces \u2014 to make a unique web address just for this block, called an "anchor". Then, you'll be able to link directly to this section of your page.`, "digiblocks"), " ", /* @__PURE__ */ wp.element.createElement(
              "a",
              {
                className: "components-external-link",
                href: "https://wordpress.org/documentation/article/page-jumps/",
                target: "_blank",
                rel: "external noreferrer noopener"
              },
              /* @__PURE__ */ wp.element.createElement("span", { className: "components-external-link__contents" }, __12("Learn more about anchors", "digiblocks")),
              /* @__PURE__ */ wp.element.createElement("span", { className: "components-external-link__icon", "aria-label": "(opens in a new tab)" }, "\u2197")
            ))),
            /* @__PURE__ */ wp.element.createElement("div", { className: "components-base-control" }, /* @__PURE__ */ wp.element.createElement("div", { className: "components-base-control__field" }, /* @__PURE__ */ wp.element.createElement("label", { className: "components-base-control__label", htmlFor: "additional-css-classes" }, __12("Additional CSS class(es)", "digiblocks")), /* @__PURE__ */ wp.element.createElement(
              "input",
              {
                className: "components-text-control__input",
                type: "text",
                id: "additional-css-classes",
                value: customClasses || "",
                onChange: (e) => setAttributes({ customClasses: e.target.value }),
                "aria-describedby": "additional-css-classes-help",
                autoComplete: "off"
              }
            )), /* @__PURE__ */ wp.element.createElement("p", { id: "additional-css-classes-help", className: "components-base-control__help" }, __12("Separate multiple classes with spaces.", "digiblocks")))
          ));
      }
    };
    const renderFAQItems = () => {
      if (!items || items.length === 0) {
        return /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-no-items" }, /* @__PURE__ */ wp.element.createElement("p", null, __12("No FAQ items found. Please add some items.", "digiblocks")));
      }
      return items.map((item, index) => {
        const isLast = index === items.length - 1;
        return /* @__PURE__ */ wp.element.createElement(
          "div",
          {
            key: item.id,
            className: `digiblocks-faq-item ${item.isOpen ? "is-active" : ""}`,
            style: isLast ? { marginBottom: 0 } : {}
          },
          /* @__PURE__ */ wp.element.createElement(
            "div",
            {
              className: "digiblocks-faq-question",
              onClick: () => toggleItem(index)
            },
            /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-faq-question-text" }, questionPrefix && /* @__PURE__ */ wp.element.createElement("span", { className: "digiblocks-faq-question-prefix" }, questionPrefix), /* @__PURE__ */ wp.element.createElement(
              RichText7,
              {
                tagName: "span",
                value: item.title,
                onChange: (value) => updateItemTitle(value, index),
                placeholder: __12("Enter question...", "digiblocks"),
                allowedFormats: ["core/bold", "core/italic"],
                className: "digiblocks-faq-question-text-content"
              }
            )),
            /* @__PURE__ */ wp.element.createElement("span", { className: "digiblocks-faq-question-icon" }, getIcon(item.isOpen))
          ),
          /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-faq-answer" }, /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-faq-answer-content" }, answerPrefix && /* @__PURE__ */ wp.element.createElement("span", { className: "digiblocks-faq-answer-prefix" }, answerPrefix), /* @__PURE__ */ wp.element.createElement(
            RichText7,
            {
              tagName: "div",
              value: item.content,
              onChange: (value) => updateItemContent(value, index),
              placeholder: __12("Enter answer...", "digiblocks"),
              allowedFormats: ["core/bold", "core/italic", "core/link", "core/image", "core/list"],
              className: "digiblocks-faq-answer-text"
            }
          ))),
          /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-faq-item-controls" }, /* @__PURE__ */ wp.element.createElement(Tooltip3, { text: __12("Move Up", "digiblocks") }, /* @__PURE__ */ wp.element.createElement(
            Button9,
            {
              className: "digiblocks-faq-item-move-up",
              onClick: () => moveItemUp(index),
              icon: "arrow-up-alt2",
              disabled: index === 0,
              isSmall: true
            }
          )), /* @__PURE__ */ wp.element.createElement(Tooltip3, { text: __12("Move Down", "digiblocks") }, /* @__PURE__ */ wp.element.createElement(
            Button9,
            {
              className: "digiblocks-faq-item-move-down",
              onClick: () => moveItemDown(index),
              icon: "arrow-down-alt2",
              disabled: index === items.length - 1,
              isSmall: true
            }
          )), /* @__PURE__ */ wp.element.createElement(Tooltip3, { text: __12("Duplicate", "digiblocks") }, /* @__PURE__ */ wp.element.createElement(
            Button9,
            {
              className: "digiblocks-faq-item-duplicate",
              onClick: () => duplicateItem(index),
              icon: "admin-page",
              isSmall: true
            }
          )), /* @__PURE__ */ wp.element.createElement(Tooltip3, { text: __12("Remove", "digiblocks") }, /* @__PURE__ */ wp.element.createElement(
            Button9,
            {
              className: "digiblocks-faq-item-remove",
              onClick: () => removeItem(index),
              icon: "trash",
              isSmall: true
            }
          )))
        );
      });
    };
    const blockProps = useBlockProps18({
      className: `digiblocks-faq-block ${id} ${layout || "boxed"} ${customClasses || ""}`,
      id: anchor || null
      // Set the anchor as ID if provided
    });
    return /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(InspectorControls10, null, /* @__PURE__ */ wp.element.createElement(
      CustomTabPanel10,
      {
        tabs: tabList,
        activeTab,
        onSelect: setActiveTab
      },
      renderTabContent()
    )), /* @__PURE__ */ wp.element.createElement("style", { dangerouslySetInnerHTML: { __html: generateCSS() } }), /* @__PURE__ */ wp.element.createElement("div", { ...blockProps }, /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-faq-items" }, renderFAQItems()), /* @__PURE__ */ wp.element.createElement(
      Button9,
      {
        variant: "primary",
        icon: "plus",
        onClick: addNewItem,
        style: { width: "100%", marginTop: "20px", justifyContent: "center" }
      },
      __12("Add FAQ Item", "digiblocks")
    )));
  };
  var edit_default10 = FAQEdit;

  // blocks/faq/save.js
  var { useBlockProps: useBlockProps19, RichText: RichText8 } = window.wp.blockEditor;
  var FAQSave = ({ attributes }) => {
    const {
      id,
      anchor,
      customClasses,
      items,
      titleTag,
      layout,
      questionPrefix,
      answerPrefix,
      animation,
      allowMultipleOpen,
      iconType,
      iconPosition,
      schemaEnabled
    } = attributes;
    const blockClasses = [
      "digiblocks-faq-block",
      id,
      layout || "boxed",
      customClasses || "",
      animation !== "none" ? `animate-${animation}` : ""
    ].filter(Boolean).join(" ");
    const getIcon = (isOpen, type = iconType) => {
      switch (type) {
        case "plusMinus":
          return isOpen ? /* @__PURE__ */ wp.element.createElement("span", { className: "digiblocks-faq-icon-minus" }, /* @__PURE__ */ wp.element.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 16 16", width: "1em", height: "1em" }, /* @__PURE__ */ wp.element.createElement("path", { fillRule: "evenodd", d: "M2 8a.5.5 0 0 1 .5-.5h11a.5.5 0 0 1 0 1h-11A.5.5 0 0 1 2 8Z" }))) : /* @__PURE__ */ wp.element.createElement("span", { className: "digiblocks-faq-icon-plus" }, /* @__PURE__ */ wp.element.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 16 16", width: "1em", height: "1em" }, /* @__PURE__ */ wp.element.createElement("path", { fillRule: "evenodd", d: "M8 2a.5.5 0 0 1 .5.5v5h5a.5.5 0 0 1 0 1h-5v5a.5.5 0 0 1-1 0v-5h-5a.5.5 0 0 1 0-1h5v-5A.5.5 0 0 1 8 2Z" })));
        case "arrow":
          return /* @__PURE__ */ wp.element.createElement("span", { className: `digiblocks-faq-icon-arrow ${isOpen ? "is-open" : ""}` }, /* @__PURE__ */ wp.element.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 16 16", width: "1em", height: "1em" }, /* @__PURE__ */ wp.element.createElement("path", { fillRule: "evenodd", d: "M1.646 4.646a.5.5 0 0 1 .708 0L8 10.293l5.646-5.647a.5.5 0 0 1 .708.708l-6 6a.5.5 0 0 1-.708 0l-6-6a.5.5 0 0 1 0-.708z" })));
        case "chevron":
          return /* @__PURE__ */ wp.element.createElement("span", { className: `digiblocks-faq-icon-chevron ${isOpen ? "is-open" : ""}` }, /* @__PURE__ */ wp.element.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 16 16", width: "1em", height: "1em" }, /* @__PURE__ */ wp.element.createElement("path", { fillRule: "evenodd", d: "M1.553 6.776a.5.5 0 0 1 .67-.223L8 9.44l5.776-2.888a.5.5 0 1 1 .448.894l-6 3a.5.5 0 0 1-.448 0l-6-3a.5.5 0 0 1-.223-.67z" })));
        case "triangle":
          return /* @__PURE__ */ wp.element.createElement("span", { className: `digiblocks-faq-icon-triangle ${isOpen ? "is-open" : ""}` }, /* @__PURE__ */ wp.element.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 16 16", width: "1em", height: "1em" }, /* @__PURE__ */ wp.element.createElement("path", { d: "m12.14 8.753-5.482 4.796c-.646.566-1.658.106-1.658-.753V3.204a1 1 0 0 1 1.659-.753l5.48 4.796a1 1 0 0 1 0 1.506z" })));
        case "circlePlusMinus":
          return isOpen ? /* @__PURE__ */ wp.element.createElement("span", { className: "digiblocks-faq-icon-circle-minus" }, /* @__PURE__ */ wp.element.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 16 16", width: "1em", height: "1em" }, /* @__PURE__ */ wp.element.createElement("path", { d: "M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z" }), /* @__PURE__ */ wp.element.createElement("path", { d: "M4 8a.5.5 0 0 1 .5-.5h7a.5.5 0 0 1 0 1h-7A.5.5 0 0 1 4 8z" }))) : /* @__PURE__ */ wp.element.createElement("span", { className: "digiblocks-faq-icon-circle-plus" }, /* @__PURE__ */ wp.element.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 16 16", width: "1em", height: "1em" }, /* @__PURE__ */ wp.element.createElement("path", { d: "M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z" }), /* @__PURE__ */ wp.element.createElement("path", { d: "M8 4a.5.5 0 0 1 .5.5v3h3a.5.5 0 0 1 0 1h-3v3a.5.5 0 0 1-1 0v-3h-3a.5.5 0 0 1 0-1h3v-3A.5.5 0 0 1 8 4z" })));
        default:
          return isOpen ? /* @__PURE__ */ wp.element.createElement("span", { className: "digiblocks-faq-icon-minus" }, "\u2014") : /* @__PURE__ */ wp.element.createElement("span", { className: "digiblocks-faq-icon-plus" }, "+");
      }
    };
    const blockProps = useBlockProps19.save({
      className: blockClasses,
      id: anchor || null,
      "data-allow-multiple": allowMultipleOpen ? "true" : "false"
    });
    const renderFAQItems = () => {
      if (!items || items.length === 0) {
        return null;
      }
      return items.map((item, index) => {
        return /* @__PURE__ */ wp.element.createElement(
          "div",
          {
            key: item.id,
            className: `digiblocks-faq-item ${item.isOpen ? "is-active" : ""}`,
            "data-item-id": item.id
          },
          /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-faq-question" }, /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-faq-question-text" }, questionPrefix && /* @__PURE__ */ wp.element.createElement("span", { className: "digiblocks-faq-question-prefix" }, questionPrefix), /* @__PURE__ */ wp.element.createElement(
            RichText8.Content,
            {
              tagName: titleTag || "h3",
              value: item.title,
              className: "digiblocks-faq-question-text-content"
            }
          )), /* @__PURE__ */ wp.element.createElement("span", { className: "digiblocks-faq-question-icon" }, getIcon(item.isOpen))),
          /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-faq-answer" }, /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-faq-answer-content" }, answerPrefix && /* @__PURE__ */ wp.element.createElement("span", { className: "digiblocks-faq-answer-prefix" }, answerPrefix), /* @__PURE__ */ wp.element.createElement(
            RichText8.Content,
            {
              tagName: "div",
              className: "digiblocks-faq-answer-text",
              value: item.content
            }
          )))
        );
      });
    };
    return /* @__PURE__ */ wp.element.createElement("div", { ...blockProps }, /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-faq-items" }, renderFAQItems()));
  };
  var save_default10 = FAQSave;

  // blocks/forms/edit.js
  var { __: __13 } = window.wp.i18n;
  var {
    useBlockProps: useBlockProps20,
    InspectorControls: InspectorControls11,
    PanelColorSettings: PanelColorSettings10,
    MediaUpload: MediaUpload4,
    MediaUploadCheck: MediaUploadCheck4
  } = window.wp.blockEditor;
  var {
    SelectControl: SelectControl12,
    RangeControl: RangeControl10,
    ToggleControl: ToggleControl11,
    TextControl: TextControl6,
    Button: Button10,
    TextareaControl,
    PanelBody,
    Tooltip: Tooltip4,
    Dashicon,
    __experimentalToggleGroupControl: ToggleGroupControl10,
    __experimentalToggleGroupControlOption: ToggleGroupControlOption10
  } = window.wp.components;
  var { useState: useState11, useEffect: useEffect11, useRef: useRef8 } = window.wp.element;
  var { useDispatch: useDispatch3, useSelect: useSelect4 } = window.wp.data;
  var { useBlockId: useBlockId11, getDimensionCSS: getDimensionCSS9, animations: animations9, animationPreview: animationPreview9 } = digi.utils;
  var { tabIcons: tabIcons11 } = digi.icons;
  var { ResponsiveControl: ResponsiveControl11, DimensionControl: DimensionControl10, TypographyControl: TypographyControl8, BoxShadowControl: BoxShadowControl10, CustomTabPanel: CustomTabPanel11, TabPanelBody: TabPanelBody12 } = digi.components;
  var FormsEdit = ({ attributes, setAttributes, clientId }) => {
    const {
      id,
      anchor,
      visibility,
      customClasses,
      formName,
      recipientEmail,
      successMessage,
      errorMessage,
      enableRecaptcha,
      emailSubject,
      useSiteLogo,
      customLogo,
      businessName,
      emailHeader,
      emailFooter,
      businessAddress,
      submitButtonText,
      buttonAlign,
      backgroundColor,
      textColor,
      labelColor,
      buttonBackgroundColor,
      buttonTextColor,
      buttonBackgroundHoverColor,
      buttonTextHoverColor,
      borderStyle,
      borderColor,
      borderWidth,
      borderRadius,
      padding,
      margin,
      typography,
      textTypography,
      buttonTypography,
      boxShadow,
      boxShadowHover,
      inputBorderStyle,
      inputBorderColor,
      inputBorderWidth,
      inputBorderRadius,
      inputPadding,
      inputBackgroundColor,
      inputTextColor,
      inputFocusBorderColor,
      animation,
      fieldGap,
      labelMargin,
      fields
    } = attributes;
    useBlockId11(id, clientId, setAttributes);
    const [localActiveDevice, setLocalActiveDevice] = useState11(window.digi.responsiveState.activeDevice);
    const [activeTab, setActiveTab] = useState11(() => {
      if (window.digi.uiState) {
        const savedTab = window.digi.uiState.getActiveTab(clientId);
        if (savedTab)
          return savedTab;
      }
      return "options";
    });
    const [selectedFieldIndex, setSelectedFieldIndex] = useState11(-1);
    const { selectBlock } = useDispatch3("core/block-editor");
    const selectedBlockId = useSelect4(
      (select) => select("core/block-editor").getSelectedBlockClientId()
    );
    useEffect11(() => {
      if (selectedBlockId === clientId && selectedFieldIndex === -1 && fields.length > 0) {
        setSelectedFieldIndex(0);
      } else if (selectedBlockId !== clientId) {
        setSelectedFieldIndex(-1);
      }
    }, [selectedBlockId, clientId, fields.length]);
    useEffect11(() => {
      const unsubscribe = window.digi.responsiveState.subscribe((device) => {
        setLocalActiveDevice(device);
      });
      return unsubscribe;
    }, []);
    const previewTimeoutRef = useRef8(null);
    useEffect11(() => {
      if (animation && animation !== "none") {
        const timeoutId = setTimeout(() => {
          animationPreview9(id, animation, animations9, previewTimeoutRef);
        }, 100);
        return () => clearTimeout(timeoutId);
      }
    }, [animation]);
    const handlePreviewClick = () => {
      animationPreview9(id, animation, animations9, previewTimeoutRef);
    };
    const animationOptions = [
      { label: __13("None", "digiblocks"), value: "none" },
      ...Object.keys(animations9).map((animation2) => ({
        label: animation2.replace(/-/g, " ").replace(/\b\w/g, (l) => l.toUpperCase()),
        value: animation2
      }))
    ];
    const fieldTypeOptions = [
      { label: __13("Text", "digiblocks"), value: "text" },
      { label: __13("Email", "digiblocks"), value: "email" },
      { label: __13("Number", "digiblocks"), value: "number" },
      { label: __13("Phone", "digiblocks"), value: "tel" },
      { label: __13("URL", "digiblocks"), value: "url" },
      { label: __13("Date", "digiblocks"), value: "date" },
      { label: __13("Textarea", "digiblocks"), value: "textarea" },
      { label: __13("Select", "digiblocks"), value: "select" },
      { label: __13("Checkbox", "digiblocks"), value: "checkbox" },
      { label: __13("Radio", "digiblocks"), value: "radio" },
      { label: __13("Hidden", "digiblocks"), value: "hidden" }
    ];
    const borderStyleOptions = [
      { label: __13("None", "digiblocks"), value: "none" },
      { label: __13("Solid", "digiblocks"), value: "solid" },
      { label: __13("Dotted", "digiblocks"), value: "dotted" },
      { label: __13("Dashed", "digiblocks"), value: "dashed" },
      { label: __13("Double", "digiblocks"), value: "double" },
      { label: __13("Groove", "digiblocks"), value: "groove" },
      { label: __13("Inset", "digiblocks"), value: "inset" },
      { label: __13("Outset", "digiblocks"), value: "outset" },
      { label: __13("Ridge", "digiblocks"), value: "ridge" }
    ];
    const tabList = [
      {
        name: "options",
        title: __13("Options", "digiblocks"),
        icon: tabIcons11.optionsIcon
      },
      {
        name: "fields",
        title: __13("Fields", "digiblocks"),
        icon: tabIcons11.fieldIcon
      },
      {
        name: "style",
        title: __13("Style", "digiblocks"),
        icon: tabIcons11.styleIcon
      },
      {
        name: "advanced",
        title: __13("Advanced", "digiblocks"),
        icon: tabIcons11.advancedIcon
      }
    ];
    const addField = (type = "text") => {
      const newId = `field-${Date.now()}`;
      const newField = {
        id: newId,
        type,
        label: `New ${type.charAt(0).toUpperCase() + type.slice(1)} Field`,
        placeholder: `Enter value`,
        required: false,
        width: 100,
        options: type === "select" || type === "radio" ? [
          { label: "Option 1", value: "option1" },
          { label: "Option 2", value: "option2" }
        ] : []
      };
      const newFields = [...fields, newField];
      setAttributes({ fields: newFields });
      setSelectedFieldIndex(newFields.length - 1);
    };
    const removeField = (index) => {
      const newFields = [...fields];
      newFields.splice(index, 1);
      setAttributes({ fields: newFields });
      if (selectedFieldIndex === index) {
        setSelectedFieldIndex(-1);
      } else if (selectedFieldIndex > index) {
        setSelectedFieldIndex(selectedFieldIndex - 1);
      }
    };
    const duplicateField = (index) => {
      const field = fields[index];
      const newField = {
        ...field,
        id: `field-${Date.now()}`
      };
      const newFields = [...fields];
      newFields.splice(index + 1, 0, newField);
      setAttributes({ fields: newFields });
      setSelectedFieldIndex(index + 1);
    };
    const updateField = (index, property, value) => {
      const newFields = [...fields];
      newFields[index] = {
        ...newFields[index],
        [property]: value
      };
      setAttributes({ fields: newFields });
    };
    const updateFieldOption = (fieldIndex, optionIndex, property, value) => {
      const newFields = [...fields];
      if (!newFields[fieldIndex].options) {
        newFields[fieldIndex].options = [];
      }
      newFields[fieldIndex].options[optionIndex] = {
        ...newFields[fieldIndex].options[optionIndex],
        [property]: value
      };
      setAttributes({ fields: newFields });
    };
    const addFieldOption = (fieldIndex) => {
      const newFields = [...fields];
      if (!newFields[fieldIndex].options) {
        newFields[fieldIndex].options = [];
      }
      const optionIndex = newFields[fieldIndex].options.length;
      newFields[fieldIndex].options.push({
        label: `Option ${optionIndex + 1}`,
        value: `option${optionIndex + 1}`
      });
      setAttributes({ fields: newFields });
    };
    const removeFieldOption = (fieldIndex, optionIndex) => {
      const newFields = [...fields];
      newFields[fieldIndex].options.splice(optionIndex, 1);
      setAttributes({ fields: newFields });
    };
    const moveFieldUp = (index) => {
      if (index <= 0)
        return;
      const newFields = [...fields];
      const temp = newFields[index];
      newFields[index] = newFields[index - 1];
      newFields[index - 1] = temp;
      setAttributes({ fields: newFields });
      if (selectedFieldIndex === index) {
        setSelectedFieldIndex(index - 1);
      } else if (selectedFieldIndex === index - 1) {
        setSelectedFieldIndex(index);
      }
    };
    const moveFieldDown = (index) => {
      if (index >= fields.length - 1)
        return;
      const newFields = [...fields];
      const temp = newFields[index];
      newFields[index] = newFields[index + 1];
      newFields[index + 1] = temp;
      setAttributes({ fields: newFields });
      if (selectedFieldIndex === index) {
        setSelectedFieldIndex(index + 1);
      } else if (selectedFieldIndex === index + 1) {
        setSelectedFieldIndex(index);
      }
    };
    const generateCSS = () => {
      const activeDevice = localActiveDevice;
      let animationCSS = "";
      if (animation && animation !== "none" && animations9[animation]) {
        animationCSS = animations9[animation].keyframes;
      }
      let borderCSS = "";
      if (borderStyle && borderStyle !== "none") {
        borderCSS = `
				border-style: ${borderStyle};
				border-color: ${borderColor};
				${getDimensionCSS9(borderWidth, "border-width", activeDevice)}
				${getDimensionCSS9(borderRadius, "border-radius", activeDevice)}
            `;
      } else {
        borderCSS = "border: none;";
      }
      let boxShadowCSS = "box-shadow: none;";
      if (boxShadow && boxShadow.enable) {
        const inset = boxShadow.position === "inset" ? "inset " : "";
        boxShadowCSS = `box-shadow: ${inset}${boxShadow.horizontal}px ${boxShadow.vertical}px ${boxShadow.blur}px ${boxShadow.spread}px ${boxShadow.color};`;
      }
      let boxShadowHoverCSS = "";
      if (boxShadowHover && boxShadowHover.enable) {
        const insetHover = boxShadowHover.position === "inset" ? "inset " : "";
        boxShadowHoverCSS = `box-shadow: ${insetHover}${boxShadowHover.horizontal}px ${boxShadowHover.vertical}px ${boxShadowHover.blur}px ${boxShadowHover.spread}px ${boxShadowHover.color};`;
      }
      const paddingCSS = `${getDimensionCSS9(padding, "padding", activeDevice)}`;
      const marginCSS = `${getDimensionCSS9(margin, "margin", activeDevice)}`;
      const inputPaddingCSS = `${getDimensionCSS9(inputPadding, "padding", activeDevice)}`;
      const inputBorderRadiusCSS = `${getDimensionCSS9(inputBorderRadius, "border-radius", activeDevice)}`;
      let mainTypographyCSS = "";
      if (typography) {
        if (typography.fontFamily) {
          mainTypographyCSS += `font-family: ${typography.fontFamily};`;
        }
        if (typography.fontSize && typography.fontSize[activeDevice]) {
          mainTypographyCSS += `font-size: ${typography.fontSize[activeDevice]}${typography.fontSizeUnit || "px"};`;
        }
        if (typography.fontWeight) {
          mainTypographyCSS += `font-weight: ${typography.fontWeight};`;
        }
        if (typography.fontStyle) {
          mainTypographyCSS += `font-style: ${typography.fontStyle};`;
        }
        if (typography.textTransform) {
          mainTypographyCSS += `text-transform: ${typography.textTransform};`;
        }
        if (typography.lineHeight && typography.lineHeight[activeDevice]) {
          mainTypographyCSS += `line-height: ${typography.lineHeight[activeDevice]}${typography.lineHeightUnit || "em"};`;
        }
        if (typography.letterSpacing && typography.letterSpacing[activeDevice]) {
          mainTypographyCSS += `letter-spacing: ${typography.letterSpacing[activeDevice]}${typography.letterSpacingUnit || "px"};`;
        }
      }
      let textTypographyCSS = "";
      if (textTypography) {
        if (textTypography.fontFamily) {
          textTypographyCSS += `font-family: ${textTypography.fontFamily};`;
        }
        if (textTypography.fontSize && textTypography.fontSize[activeDevice]) {
          textTypographyCSS += `font-size: ${textTypography.fontSize[activeDevice]}${textTypography.fontSizeUnit || "px"};`;
        }
        if (textTypography.fontWeight) {
          textTypographyCSS += `font-weight: ${textTypography.fontWeight};`;
        }
        if (textTypography.fontStyle) {
          textTypographyCSS += `font-style: ${textTypography.fontStyle};`;
        }
        if (textTypography.textTransform) {
          textTypographyCSS += `text-transform: ${textTypography.textTransform};`;
        }
        if (textTypography.lineHeight && textTypography.lineHeight[activeDevice]) {
          textTypographyCSS += `line-height: ${textTypography.lineHeight[activeDevice]}${textTypography.lineHeightUnit || "em"};`;
        }
        if (textTypography.letterSpacing && textTypography.letterSpacing[activeDevice]) {
          textTypographyCSS += `letter-spacing: ${textTypography.letterSpacing[activeDevice]}${textTypography.letterSpacingUnit || "px"};`;
        }
      }
      let buttonTypographyCSS = "";
      if (buttonTypography) {
        if (buttonTypography.fontFamily) {
          buttonTypographyCSS += `font-family: ${buttonTypography.fontFamily};`;
        }
        if (buttonTypography.fontSize && buttonTypography.fontSize[activeDevice]) {
          buttonTypographyCSS += `font-size: ${buttonTypography.fontSize[activeDevice]}${buttonTypography.fontSizeUnit || "px"};`;
        }
        if (buttonTypography.fontWeight) {
          buttonTypographyCSS += `font-weight: ${buttonTypography.fontWeight};`;
        }
        if (buttonTypography.fontStyle) {
          buttonTypographyCSS += `font-style: ${buttonTypography.fontStyle};`;
        }
        if (buttonTypography.textTransform) {
          buttonTypographyCSS += `text-transform: ${buttonTypography.textTransform};`;
        }
        if (buttonTypography.lineHeight && buttonTypography.lineHeight[activeDevice]) {
          buttonTypographyCSS += `line-height: ${buttonTypography.lineHeight[activeDevice]}${buttonTypography.lineHeightUnit || "em"};`;
        }
        if (buttonTypography.letterSpacing && buttonTypography.letterSpacing[activeDevice]) {
          buttonTypographyCSS += `letter-spacing: ${buttonTypography.letterSpacing[activeDevice]}${buttonTypography.letterSpacingUnit || "px"};`;
        }
      }
      const buttonAlignCSS = buttonAlign === "full" ? "width: 100%;" : `text-align: ${buttonAlign};`;
      const currentFieldGap = fieldGap && fieldGap[activeDevice] ? fieldGap[activeDevice] : 20;
      const currentLabelMargin = labelMargin && labelMargin[activeDevice] ? labelMargin[activeDevice] : 8;
      let animationKeyframes = "";
      if (animation && animation !== "none" && animations9[animation]) {
        animationKeyframes = animations9[animation].keyframes;
      }
      return `
            /* Forms Block - ${id} */
            .${id} {
                ${paddingCSS}
                ${marginCSS}
                ${boxShadowCSS}
                ${borderCSS}
                background-color: ${backgroundColor};
                color: ${textColor};
                width: 100%;
                transition: all 0.3s ease;
                ${mainTypographyCSS}
            }
            
            /* Form container */
            .${id} .digiblocks-form {
                width: 100%;
                position: relative;
            }
            
            /* Form fields */
            .${id} .digiblocks-form-fields {
                display: flex;
                flex-wrap: wrap;
                gap: ${currentFieldGap}px;
                margin-bottom: ${currentFieldGap}px;
            }
            
            /* Form field */
            .${id} .digiblocks-form-field {
                margin-bottom: 0;
                transition: all 0.3s ease;
                position: relative;
            }
            
            /* Form field label */
            .${id} .digiblocks-form-field-label {
                display: block;
                margin-bottom: ${currentLabelMargin}px;
                color: ${labelColor};
                ${textTypographyCSS}
            }
            
            /* Required indicator */
            .${id} .digiblocks-form-field-required {
                color: #e53e3e;
                margin-left: 4px;
            }
            
            /* Form inputs */
            .${id} .digiblocks-form-input,
            .${id} .digiblocks-form-textarea,
            .${id} .digiblocks-form-select {
                width: 100%;
                ${inputPaddingCSS}
                ${inputBorderRadiusCSS}
				border-style: ${inputBorderStyle};
				border-color: ${inputBorderColor};
				${getDimensionCSS9(inputBorderWidth, "border-width", activeDevice)}
                background-color: ${inputBackgroundColor};
                color: ${inputTextColor};
                transition: all 0.3s ease;
                ${mainTypographyCSS}
            }
            
            .${id} .digiblocks-form-textarea {
                min-height: 150px;
                resize: vertical;
            }
            
            /* Focus styles */
            .${id} .digiblocks-form-input:focus,
            .${id} .digiblocks-form-textarea:focus,
            .${id} .digiblocks-form-select:focus {
                outline: none;
                border-color: ${inputFocusBorderColor};
            }
            
            /* Checkbox and radio styles */
            .${id} .digiblocks-form-checkbox-label,
            .${id} .digiblocks-form-radio-label {
                display: flex;
                align-items: center;
                cursor: pointer;
                margin-bottom: 8px;
            }
            
            .${id} .digiblocks-form-checkbox,
            .${id} .digiblocks-form-radio {
                margin-right: 8px;
            }
            
            /* Submit button container */
            .${id} .digiblocks-form-submit {
                ${buttonAlignCSS}
                margin-top: ${currentFieldGap}px;
            }
            
            /* Submit button */
            .${id} .digiblocks-form-submit-button {
                background-color: ${buttonBackgroundColor};
                color: ${buttonTextColor};
                border: none;
                ${inputBorderRadiusCSS}
                padding: 12px 24px;
                cursor: pointer;
                transition: all 0.3s ease;
                ${buttonTypographyCSS}
                ${buttonAlign === "full" ? "width: 100%;" : ""}
            }
            
            /* Submit button hover */
            .${id} .digiblocks-form-submit-button:hover {
                background-color: ${buttonBackgroundHoverColor};
                color: ${buttonTextHoverColor};
            }
            
            /* Success message */
            .${id} .digiblocks-form-success {
                color: #38a169;
                padding: 10px;
                margin-top: 20px;
                border-radius: 4px;
                background-color: #f0fff4;
                border: 1px solid #c6f6d5;
                display: none;
            }
            
            /* Error message */
            .${id} .digiblocks-form-error {
                color: #e53e3e;
                padding: 10px;
                margin-top: 20px;
                border-radius: 4px;
                background-color: #fff5f5;
                border: 1px solid #fed7d7;
                display: none;
            }
            
            /* Field error message */
            .${id} .digiblocks-form-field-error {
                color: #e53e3e;
                font-size: 12px;
                margin-top: 4px;
                display: none;
            }
            
            /* Editor specific styles */
            .${id} .digiblocks-form-field.is-selected {
                outline: 2px dashed #4a6cf7;
            }
            
            .${id} .digiblocks-field-actions {
                position: absolute;
                right: 5px;
                top: 5px;
                display: flex;
                gap: 5px;
                z-index: 10;
            }
            
            .${id} .digiblocks-field-action-button {
                padding: 2px !important;
                min-width: auto !important;
                width: 24px !important;
                height: 24px !important;
            }
            
            .${id} .digiblocks-field-width-100 {
                width: 100%;
            }
            
            .${id} .digiblocks-field-width-75 {
				width: calc(75% - (${currentFieldGap}px * 0.25));
			}
			
			.${id} .digiblocks-field-width-66 {
				width: calc(66.66% - (${currentFieldGap}px * 0.33));
			}
			
			.${id} .digiblocks-field-width-50 {
				width: calc(50% - (${currentFieldGap}px * 0.5));
			}
			
			.${id} .digiblocks-field-width-33 {
				width: calc(33.33% - (${currentFieldGap}px * 0.67));
			}
			
			.${id} .digiblocks-field-width-25 {
				width: calc(25% - (${currentFieldGap}px * 0.75));
			}
            
            .${id} .digiblocks-form-fields-empty {
                padding: 20px;
                border: 2px dashed #ddd;
                text-align: center;
                border-radius: 4px;
            }
            
            /* Animation keyframes */
            ${animationKeyframes}
            
            /* Responsive styles */
            @media (max-width: 767px) {
                .${id} .digiblocks-field-width-25,
                .${id} .digiblocks-field-width-33,
                .${id} .digiblocks-field-width-50,
                .${id} .digiblocks-field-width-66,
                .${id} .digiblocks-field-width-75 {
                    width: 100%;
                }
            }

            /* Animation keyframes */
            ${animationCSS}

			/* Editor field selection */
			.digi-field-select {
				display: grid;
				grid-template-columns: repeat(3, 1fr);
				grid-gap: 12px;
				margin-bottom: 16px;
				width: 100%;
			}

			.digi-field-select button {
				font-size: .7rem;
				padding: 12px 8px;
				border-radius: 6px;
				border: 1px solid #e2e8f0;
				background-color: #f8fafc;
				color: #334155;
				transition: all 0.3s ease;
				font-weight: 500;
				box-shadow: 0 1px 2px rgba(0, 0, 0, 0.05);
				text-align: center;
				display: flex;
				flex-direction: column;
				align-items: center;
				justify-content: center;
				gap: .5rem;
				height: 60px;
			}

			.digi-field-select button:hover:not(:disabled,[aria-disabled=true]) {
				background-color: #4a6cf7;
				color: white;
				transform: translateY(-2px);
				box-shadow: 0 4px 6px rgba(74, 108, 247, 0.2);
			}

			.digi-field-select button:not(:disabled,[aria-disabled=true]):active {
				transform: translateY(0);
				box-shadow: 0 1px 3px rgba(74, 108, 247, 0.2);
			}

			.block-editor-block-inspector .digiblocks-field-option .components-base-control {
				margin: 0;
			}

			/* Make the last button (Hidden) take up the full width */
			.digi-field-select button:last-child {
				grid-column: 1 / -1; /* Span all columns */
				margin-top: 4px;
				background-color: #f1f5f9;
			}

			.digi-field-select button svg {
				display: flex;
				width: 1.4rem;
				height: 1.4rem;
			}

			/* Visibility Controls */
			${visibility.desktop ? `
				@media (min-width: 992px) {
					.${id} {
						opacity: 0.5 !important;
					}
				}
			` : ""}

			${visibility.tablet ? `
				@media (min-width: 768px) and (max-width: 991px) {
					.${id} {
						opacity: 0.5 !important;
					}
				}
			` : ""}

			${visibility.mobile ? `
				@media (max-width: 767px) {
					.${id} {
						opacity: 0.5 !important;
					}
				}
			` : ""}
        `;
    };
    const renderFieldActions = (index) => {
      return /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-field-actions" }, /* @__PURE__ */ wp.element.createElement(Tooltip4, { text: __13("Move Up", "digiblocks") }, /* @__PURE__ */ wp.element.createElement(
        Button10,
        {
          className: "digiblocks-field-action-button",
          onClick: (e) => {
            e.stopPropagation();
            moveFieldUp(index);
          },
          icon: "arrow-up-alt2",
          disabled: index === 0,
          isSmall: true
        }
      )), /* @__PURE__ */ wp.element.createElement(Tooltip4, { text: __13("Move Down", "digiblocks") }, /* @__PURE__ */ wp.element.createElement(
        Button10,
        {
          className: "digiblocks-field-action-button",
          onClick: (e) => {
            e.stopPropagation();
            moveFieldDown(index);
          },
          icon: "arrow-down-alt2",
          disabled: index === fields.length - 1,
          isSmall: true
        }
      )), /* @__PURE__ */ wp.element.createElement(Tooltip4, { text: __13("Duplicate", "digiblocks") }, /* @__PURE__ */ wp.element.createElement(
        Button10,
        {
          className: "digiblocks-field-action-button",
          onClick: (e) => {
            e.stopPropagation();
            duplicateField(index);
          },
          icon: "admin-page",
          isSmall: true
        }
      )), /* @__PURE__ */ wp.element.createElement(Tooltip4, { text: __13("Remove", "digiblocks") }, /* @__PURE__ */ wp.element.createElement(
        Button10,
        {
          className: "digiblocks-field-action-button",
          onClick: (e) => {
            e.stopPropagation();
            removeField(index);
          },
          icon: "trash",
          isDestructive: true,
          isSmall: true
        }
      )));
    };
    const renderFieldSettings = (fieldIndex) => {
      if (fieldIndex < 0 || fieldIndex >= fields.length) {
        return null;
      }
      const field = fields[fieldIndex];
      return /* @__PURE__ */ wp.element.createElement(
        PanelBody,
        {
          title: __13("Field Settings", "digiblocks"),
          initialOpen: true
        },
        /* @__PURE__ */ wp.element.createElement(
          TextControl6,
          {
            label: __13("Field Label", "digiblocks"),
            value: field.label || "",
            onChange: (value) => updateField(fieldIndex, "label", value),
            __next40pxDefaultSize: true,
            __nextHasNoMarginBottom: true
          }
        ),
        /* @__PURE__ */ wp.element.createElement(
          SelectControl12,
          {
            label: __13("Field Type", "digiblocks"),
            value: field.type,
            options: fieldTypeOptions,
            onChange: (value) => {
              if ((value === "select" || value === "radio") && (!field.options || field.options.length === 0)) {
                updateField(fieldIndex, "options", [
                  { label: "Option 1", value: "option1" },
                  { label: "Option 2", value: "option2" }
                ]);
              }
              updateField(fieldIndex, "type", value);
            },
            __next40pxDefaultSize: true,
            __nextHasNoMarginBottom: true
          }
        ),
        field.type !== "hidden" && field.type !== "checkbox" && field.type !== "radio" && /* @__PURE__ */ wp.element.createElement(
          TextControl6,
          {
            label: __13("Placeholder", "digiblocks"),
            value: field.placeholder || "",
            onChange: (value) => updateField(fieldIndex, "placeholder", value),
            __next40pxDefaultSize: true,
            __nextHasNoMarginBottom: true
          }
        ),
        field.type === "hidden" && /* @__PURE__ */ wp.element.createElement(
          TextControl6,
          {
            label: __13("Value", "digiblocks"),
            value: field.value || "",
            onChange: (value) => updateField(fieldIndex, "value", value),
            __next40pxDefaultSize: true,
            __nextHasNoMarginBottom: true
          }
        ),
        /* @__PURE__ */ wp.element.createElement(
          ToggleControl11,
          {
            label: __13("Required Field", "digiblocks"),
            checked: field.required || false,
            onChange: (value) => updateField(fieldIndex, "required", value),
            __nextHasNoMarginBottom: true
          }
        ),
        /* @__PURE__ */ wp.element.createElement(
          ToggleGroupControl10,
          {
            label: __13("Field Width (%)", "digiblocks"),
            value: field.width?.toString() || "100",
            onChange: (value) => updateField(fieldIndex, "width", parseInt(value)),
            isBlock: true,
            __next40pxDefaultSize: true,
            __nextHasNoMarginBottom: true
          },
          /* @__PURE__ */ wp.element.createElement(
            ToggleGroupControlOption10,
            {
              value: "100",
              label: __13("100", "digiblocks")
            }
          ),
          /* @__PURE__ */ wp.element.createElement(
            ToggleGroupControlOption10,
            {
              value: "75",
              label: __13("75", "digiblocks")
            }
          ),
          /* @__PURE__ */ wp.element.createElement(
            ToggleGroupControlOption10,
            {
              value: "66",
              label: __13("66", "digiblocks")
            }
          ),
          /* @__PURE__ */ wp.element.createElement(
            ToggleGroupControlOption10,
            {
              value: "50",
              label: __13("50", "digiblocks")
            }
          ),
          /* @__PURE__ */ wp.element.createElement(
            ToggleGroupControlOption10,
            {
              value: "33",
              label: __13("33", "digiblocks")
            }
          ),
          /* @__PURE__ */ wp.element.createElement(
            ToggleGroupControlOption10,
            {
              value: "25",
              label: __13("25", "digiblocks")
            }
          )
        ),
        (field.type === "select" || field.type === "radio") && field.options && /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-field-options" }, /* @__PURE__ */ wp.element.createElement("p", { className: "components-base-control__label" }, __13("Options", "digiblocks")), field.options.map((option, optionIndex) => /* @__PURE__ */ wp.element.createElement("div", { key: optionIndex, className: "digiblocks-field-option" }, /* @__PURE__ */ wp.element.createElement("div", { style: { display: "flex", alignItems: "center", marginBottom: "15px" } }, /* @__PURE__ */ wp.element.createElement(
          TextControl6,
          {
            label: __13("Label", "digiblocks"),
            value: option.label || "",
            onChange: (value) => updateFieldOption(fieldIndex, optionIndex, "label", value),
            style: { flexGrow: 1, marginRight: "8px" },
            __next40pxDefaultSize: true,
            __nextHasNoMarginBottom: true
          }
        ), /* @__PURE__ */ wp.element.createElement(
          TextControl6,
          {
            label: __13("Value", "digiblocks"),
            value: option.value || "",
            onChange: (value) => updateFieldOption(fieldIndex, optionIndex, "value", value),
            style: { flexGrow: 1, marginRight: "8px" },
            __next40pxDefaultSize: true,
            __nextHasNoMarginBottom: true
          }
        ), /* @__PURE__ */ wp.element.createElement(Tooltip4, { text: __13("Remove Option", "digiblocks") }, /* @__PURE__ */ wp.element.createElement(
          Button10,
          {
            isDestructive: true,
            isSmall: true,
            icon: "trash",
            onClick: () => removeFieldOption(fieldIndex, optionIndex),
            style: { alignSelf: "flex-end", marginBottom: "8px" }
          }
        ))))), /* @__PURE__ */ wp.element.createElement(
          Button10,
          {
            isSecondary: true,
            onClick: () => addFieldOption(fieldIndex),
            style: { marginTop: "8px", width: "100%" }
          },
          __13("Add Option", "digiblocks")
        ))
      );
    };
    const renderFormField = (field, index) => {
      const isSelected = selectedFieldIndex === index;
      const baseClassName = `digiblocks-form-field digiblocks-field-width-${field.width || "100"} ${isSelected ? "is-selected" : ""}`;
      const commonInputProps = {
        readOnly: true,
        tabIndex: -1,
        // Make not focusable
        style: { pointerEvents: "none" }
        // Prevent interaction
      };
      const SelectableWrapper = ({ children }) => /* @__PURE__ */ wp.element.createElement(
        "div",
        {
          className: baseClassName,
          onClick: () => setSelectedFieldIndex(index)
        },
        isSelected && renderFieldActions(index),
        children
      );
      switch (field.type) {
        case "text":
        case "email":
        case "number":
        case "tel":
        case "url":
        case "date":
          return /* @__PURE__ */ wp.element.createElement(SelectableWrapper, { key: field.id, index }, /* @__PURE__ */ wp.element.createElement("label", { className: "digiblocks-form-field-label" }, field.label, field.required && /* @__PURE__ */ wp.element.createElement("span", { className: "digiblocks-form-field-required" }, "*")), /* @__PURE__ */ wp.element.createElement(
            "input",
            {
              type: field.type,
              className: "digiblocks-form-input",
              placeholder: field.placeholder || "",
              ...commonInputProps
            }
          ), /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-form-field-error" }));
        case "textarea":
          return /* @__PURE__ */ wp.element.createElement(SelectableWrapper, { key: field.id, index }, /* @__PURE__ */ wp.element.createElement("label", { className: "digiblocks-form-field-label" }, field.label, field.required && /* @__PURE__ */ wp.element.createElement("span", { className: "digiblocks-form-field-required" }, "*")), /* @__PURE__ */ wp.element.createElement(
            "textarea",
            {
              className: "digiblocks-form-textarea",
              placeholder: field.placeholder || "",
              ...commonInputProps
            }
          ), /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-form-field-error" }));
        case "select":
          return /* @__PURE__ */ wp.element.createElement(SelectableWrapper, { key: field.id, index }, /* @__PURE__ */ wp.element.createElement("label", { className: "digiblocks-form-field-label" }, field.label, field.required && /* @__PURE__ */ wp.element.createElement("span", { className: "digiblocks-form-field-required" }, "*")), /* @__PURE__ */ wp.element.createElement(
            "select",
            {
              className: "digiblocks-form-select",
              ...commonInputProps
            },
            /* @__PURE__ */ wp.element.createElement("option", { value: "" }, field.placeholder || __13("Select an option", "digiblocks")),
            field.options && field.options.map((option, optionIndex) => /* @__PURE__ */ wp.element.createElement("option", { key: optionIndex, value: option.value }, option.label))
          ), /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-form-field-error" }));
        case "checkbox":
          return /* @__PURE__ */ wp.element.createElement(SelectableWrapper, { key: field.id, index }, /* @__PURE__ */ wp.element.createElement("label", { className: "digiblocks-form-checkbox-label" }, /* @__PURE__ */ wp.element.createElement(
            "input",
            {
              type: "checkbox",
              className: "digiblocks-form-checkbox",
              ...commonInputProps
            }
          ), /* @__PURE__ */ wp.element.createElement("span", null, field.label, field.required && /* @__PURE__ */ wp.element.createElement("span", { className: "digiblocks-form-field-required" }, "*"))), /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-form-field-error" }));
        case "radio":
          return /* @__PURE__ */ wp.element.createElement(SelectableWrapper, { key: field.id, index }, /* @__PURE__ */ wp.element.createElement("label", { className: "digiblocks-form-field-label" }, field.label, field.required && /* @__PURE__ */ wp.element.createElement("span", { className: "digiblocks-form-field-required" }, "*")), field.options && field.options.map((option, optionIndex) => /* @__PURE__ */ wp.element.createElement("label", { key: optionIndex, className: "digiblocks-form-radio-label" }, /* @__PURE__ */ wp.element.createElement(
            "input",
            {
              type: "radio",
              className: "digiblocks-form-radio",
              name: `radio-${field.id}`,
              value: option.value,
              ...commonInputProps
            }
          ), /* @__PURE__ */ wp.element.createElement("span", null, option.label))), /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-form-field-error" }));
        case "hidden":
          return /* @__PURE__ */ wp.element.createElement(SelectableWrapper, { key: field.id, index }, /* @__PURE__ */ wp.element.createElement("div", { style: { padding: "10px", background: "#f7f7f7", borderRadius: "4px" } }, /* @__PURE__ */ wp.element.createElement("div", { style: { display: "flex", alignItems: "center" } }, /* @__PURE__ */ wp.element.createElement(Dashicon, { icon: "hidden", style: { marginRight: "8px" } }), /* @__PURE__ */ wp.element.createElement("span", null, /* @__PURE__ */ wp.element.createElement("strong", null, __13("Hidden Field:", "digiblocks")), " ", field.label, /* @__PURE__ */ wp.element.createElement("br", null), /* @__PURE__ */ wp.element.createElement("small", { style: { opacity: 0.7 } }, __13("Value:", "digiblocks"), " ", field.value || __13("Not set", "digiblocks"))))));
        default:
          return null;
      }
    };
    const renderTabContent = () => {
      switch (activeTab) {
        case "options":
          return /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(
            TabPanelBody12,
            {
              tab: "options",
              name: "form-settings",
              title: __13("Form Settings", "digiblocks"),
              initialOpen: true
            },
            /* @__PURE__ */ wp.element.createElement(
              TextControl6,
              {
                label: __13("Form Name", "digiblocks"),
                value: formName,
                onChange: (value) => setAttributes({ formName: value }),
                __next40pxDefaultSize: true,
                __nextHasNoMarginBottom: true
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              TextControl6,
              {
                label: __13("Recipient Email", "digiblocks"),
                value: recipientEmail,
                onChange: (value) => setAttributes({ recipientEmail: value }),
                help: __13("Leave empty to use the admin email", "digiblocks"),
                __next40pxDefaultSize: true,
                __nextHasNoMarginBottom: true
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              TextControl6,
              {
                label: __13("Button Text", "digiblocks"),
                value: submitButtonText,
                onChange: (value) => setAttributes({ submitButtonText: value }),
                __next40pxDefaultSize: true,
                __nextHasNoMarginBottom: true
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              ToggleGroupControl10,
              {
                label: __13("Button Alignment", "digiblocks"),
                value: buttonAlign,
                onChange: (value) => setAttributes({ buttonAlign: value }),
                isBlock: true,
                __next40pxDefaultSize: true,
                __nextHasNoMarginBottom: true
              },
              /* @__PURE__ */ wp.element.createElement(
                ToggleGroupControlOption10,
                {
                  value: "left",
                  label: __13("Left", "digiblocks")
                }
              ),
              /* @__PURE__ */ wp.element.createElement(
                ToggleGroupControlOption10,
                {
                  value: "center",
                  label: __13("Center", "digiblocks")
                }
              ),
              /* @__PURE__ */ wp.element.createElement(
                ToggleGroupControlOption10,
                {
                  value: "right",
                  label: __13("Right", "digiblocks")
                }
              ),
              /* @__PURE__ */ wp.element.createElement(
                ToggleGroupControlOption10,
                {
                  value: "full",
                  label: __13("Full", "digiblocks")
                }
              )
            )
          ), /* @__PURE__ */ wp.element.createElement(
            TabPanelBody12,
            {
              tab: "options",
              name: "messages",
              title: __13("Messages", "digiblocks"),
              initialOpen: false
            },
            /* @__PURE__ */ wp.element.createElement(
              TextareaControl,
              {
                label: __13("Success Message", "digiblocks"),
                value: successMessage,
                onChange: (value) => setAttributes({ successMessage: value }),
                __next40pxDefaultSize: true,
                __nextHasNoMarginBottom: true
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              TextareaControl,
              {
                label: __13("Error Message", "digiblocks"),
                value: errorMessage,
                onChange: (value) => setAttributes({ errorMessage: value }),
                __next40pxDefaultSize: true,
                __nextHasNoMarginBottom: true
              }
            )
          ), /* @__PURE__ */ wp.element.createElement(
            TabPanelBody12,
            {
              tab: "options",
              name: "security",
              title: __13("Security", "digiblocks"),
              initialOpen: false
            },
            /* @__PURE__ */ wp.element.createElement(
              ToggleControl11,
              {
                label: __13("Enable reCAPTCHA", "digiblocks"),
                checked: enableRecaptcha,
                onChange: (value) => setAttributes({ enableRecaptcha: value }),
                help: __13("Enable Google reCAPTCHA to protect your form from spam.", "digiblocks"),
                __nextHasNoMarginBottom: true
              }
            )
          ), /* @__PURE__ */ wp.element.createElement(
            TabPanelBody12,
            {
              tab: "options",
              name: "email-settings",
              title: __13("Email Settings", "digiblocks"),
              initialOpen: false
            },
            /* @__PURE__ */ wp.element.createElement(
              TextControl6,
              {
                label: __13("Email Subject", "digiblocks"),
                value: emailSubject,
                onChange: (value) => setAttributes({ emailSubject: value }),
                __next40pxDefaultSize: true,
                __nextHasNoMarginBottom: true
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              ToggleControl11,
              {
                label: __13("Use Site Logo", "digiblocks"),
                checked: useSiteLogo,
                onChange: (value) => setAttributes({ useSiteLogo: value }),
                help: __13("Display the site logo in email header", "digiblocks"),
                __nextHasNoMarginBottom: true
              }
            ),
            !useSiteLogo && /* @__PURE__ */ wp.element.createElement("div", { className: "components-base-control" }, /* @__PURE__ */ wp.element.createElement("label", { className: "components-base-control__label" }, __13("Custom Logo", "digiblocks")), /* @__PURE__ */ wp.element.createElement("div", { className: "editor-post-featured-image" }, /* @__PURE__ */ wp.element.createElement(MediaUploadCheck4, null, /* @__PURE__ */ wp.element.createElement(
              MediaUpload4,
              {
                onSelect: (media) => {
                  setAttributes({
                    customLogo: media.url
                  });
                },
                allowedTypes: ["image"],
                value: customLogo,
                render: ({ open }) => /* @__PURE__ */ wp.element.createElement("div", { className: "components-base-control__field" }, !customLogo ? /* @__PURE__ */ wp.element.createElement(
                  Button10,
                  {
                    onClick: open,
                    variant: "secondary",
                    className: "editor-post-featured-image__toggle"
                  },
                  __13("Upload Logo", "digiblocks")
                ) : /* @__PURE__ */ wp.element.createElement("div", null, /* @__PURE__ */ wp.element.createElement(
                  "img",
                  {
                    src: customLogo,
                    alt: __13("Logo", "digiblocks"),
                    style: {
                      maxWidth: "100%",
                      maxHeight: "100px",
                      marginBottom: "8px",
                      display: "block"
                    }
                  }
                ), /* @__PURE__ */ wp.element.createElement("div", { className: "components-button-group", style: { display: "flex" } }, /* @__PURE__ */ wp.element.createElement(
                  Button10,
                  {
                    onClick: open,
                    variant: "secondary",
                    isSmall: true
                  },
                  __13("Replace", "digiblocks")
                ), /* @__PURE__ */ wp.element.createElement(
                  Button10,
                  {
                    onClick: () => setAttributes({ customLogo: "" }),
                    variant: "secondary",
                    isDestructive: true,
                    isSmall: true,
                    style: { marginLeft: "8px" }
                  },
                  __13("Remove", "digiblocks")
                ))))
              }
            )))),
            /* @__PURE__ */ wp.element.createElement(
              TextControl6,
              {
                label: __13("Business Name", "digiblocks"),
                value: businessName,
                onChange: (value) => setAttributes({ businessName: value }),
                help: __13("Leave empty to use the site name", "digiblocks"),
                __next40pxDefaultSize: true,
                __nextHasNoMarginBottom: true
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              TextareaControl,
              {
                label: __13("Email Header Text", "digiblocks"),
                value: emailHeader,
                onChange: (value) => setAttributes({ emailHeader: value }),
                help: __13("Optional text to display above the form data", "digiblocks"),
                __next40pxDefaultSize: true,
                __nextHasNoMarginBottom: true
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              TextareaControl,
              {
                label: __13("Email Footer Text", "digiblocks"),
                value: emailFooter,
                onChange: (value) => setAttributes({ emailFooter: value }),
                help: __13("Optional text for the email footer (e.g., business address)", "digiblocks"),
                __next40pxDefaultSize: true,
                __nextHasNoMarginBottom: true
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              TextareaControl,
              {
                label: __13("Business Address", "digiblocks"),
                value: businessAddress,
                onChange: (value) => setAttributes({ businessAddress: value }),
                help: __13("Business address to display in email footer", "digiblocks"),
                __next40pxDefaultSize: true,
                __nextHasNoMarginBottom: true
              }
            )
          ));
        case "fields":
          return /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(
            TabPanelBody12,
            {
              tab: "fields",
              name: "field-types",
              title: __13("Add Fields", "digiblocks"),
              initialOpen: true
            },
            /* @__PURE__ */ wp.element.createElement("div", { className: "digi-field-select" }, /* @__PURE__ */ wp.element.createElement(Button10, { onClick: () => addField("text") }, /* @__PURE__ */ wp.element.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 448 512" }, /* @__PURE__ */ wp.element.createElement("path", { d: "M64 96l0 32c0 17.7-14.3 32-32 32s-32-14.3-32-32L0 80C0 53.5 21.5 32 48 32l176 0 176 0c26.5 0 48 21.5 48 48l0 48c0 17.7-14.3 32-32 32s-32-14.3-32-32l0-32L256 96l0 320 48 0c17.7 0 32 14.3 32 32s-14.3 32-32 32l-160 0c-17.7 0-32-14.3-32-32s14.3-32 32-32l48 0 0-320L64 96z" })), /* @__PURE__ */ wp.element.createElement("span", null, __13("Text", "digiblocks"))), /* @__PURE__ */ wp.element.createElement(Button10, { onClick: () => addField("email") }, /* @__PURE__ */ wp.element.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 512 512" }, /* @__PURE__ */ wp.element.createElement("path", { d: "M48 64C21.5 64 0 85.5 0 112c0 15.1 7.1 29.3 19.2 38.4L236.8 313.6c11.4 8.5 27 8.5 38.4 0L492.8 150.4c12.1-9.1 19.2-23.3 19.2-38.4c0-26.5-21.5-48-48-48L48 64zM0 176L0 384c0 35.3 28.7 64 64 64l384 0c35.3 0 64-28.7 64-64l0-208L294.4 339.2c-22.8 17.1-54 17.1-76.8 0L0 176z" })), /* @__PURE__ */ wp.element.createElement("span", null, __13("Email", "digiblocks"))), /* @__PURE__ */ wp.element.createElement(Button10, { onClick: () => addField("number") }, /* @__PURE__ */ wp.element.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 448 512" }, /* @__PURE__ */ wp.element.createElement("path", { d: "M181.3 32.4c17.4 2.9 29.2 19.4 26.3 36.8L197.8 128l95.1 0 11.5-69.3c2.9-17.4 19.4-29.2 36.8-26.3s29.2 19.4 26.3 36.8L357.8 128l58.2 0c17.7 0 32 14.3 32 32s-14.3 32-32 32l-68.9 0L325.8 320l58.2 0c17.7 0 32 14.3 32 32s-14.3 32-32 32l-68.9 0-11.5 69.3c-2.9 17.4-19.4 29.2-36.8 26.3s-29.2-19.4-26.3-36.8l9.8-58.7-95.1 0-11.5 69.3c-2.9 17.4-19.4 29.2-36.8 26.3s-29.2-19.4-26.3-36.8L90.2 384 32 384c-17.7 0-32-14.3-32-32s14.3-32 32-32l68.9 0 21.3-128L64 192c-17.7 0-32-14.3-32-32s14.3-32 32-32l68.9 0 11.5-69.3c2.9-17.4 19.4-29.2 36.8-26.3zM187.1 192L165.8 320l95.1 0 21.3-128-95.1 0z" })), /* @__PURE__ */ wp.element.createElement("span", null, __13("Number", "digiblocks"))), /* @__PURE__ */ wp.element.createElement(Button10, { onClick: () => addField("tel") }, /* @__PURE__ */ wp.element.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 512 512" }, /* @__PURE__ */ wp.element.createElement("path", { d: "M164.9 24.6c-7.7-18.6-28-28.5-47.4-23.2l-88 24C12.1 30.2 0 46 0 64C0 311.4 200.6 512 448 512c18 0 33.8-12.1 38.6-29.5l24-88c5.3-19.4-4.6-39.7-23.2-47.4l-96-40c-16.3-6.8-35.2-2.1-46.3 11.6L304.7 368C234.3 334.7 177.3 277.7 144 207.3L193.3 167c13.7-11.2 18.4-30 11.6-46.3l-40-96z" })), /* @__PURE__ */ wp.element.createElement("span", null, __13("Phone", "digiblocks"))), /* @__PURE__ */ wp.element.createElement(Button10, { onClick: () => addField("date") }, /* @__PURE__ */ wp.element.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 448 512" }, /* @__PURE__ */ wp.element.createElement("path", { d: "M96 32l0 32L48 64C21.5 64 0 85.5 0 112l0 48 448 0 0-48c0-26.5-21.5-48-48-48l-48 0 0-32c0-17.7-14.3-32-32-32s-32 14.3-32 32l0 32L160 64l0-32c0-17.7-14.3-32-32-32S96 14.3 96 32zM448 192L0 192 0 464c0 26.5 21.5 48 48 48l352 0c26.5 0 48-21.5 48-48l0-272z" })), /* @__PURE__ */ wp.element.createElement("span", null, __13("Date", "digiblocks"))), /* @__PURE__ */ wp.element.createElement(Button10, { onClick: () => addField("textarea") }, /* @__PURE__ */ wp.element.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 448 512" }, /* @__PURE__ */ wp.element.createElement("path", { d: "M192 32l64 0 160 0c17.7 0 32 14.3 32 32s-14.3 32-32 32l-32 0 0 352c0 17.7-14.3 32-32 32s-32-14.3-32-32l0-352-32 0 0 352c0 17.7-14.3 32-32 32s-32-14.3-32-32l0-96-32 0c-88.4 0-160-71.6-160-160s71.6-160 160-160z" })), /* @__PURE__ */ wp.element.createElement("span", null, __13("Textarea", "digiblocks"))), /* @__PURE__ */ wp.element.createElement(Button10, { onClick: () => addField("select") }, /* @__PURE__ */ wp.element.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 448 512" }, /* @__PURE__ */ wp.element.createElement("path", { d: "M384 480c35.3 0 64-28.7 64-64l0-320c0-35.3-28.7-64-64-64L64 32C28.7 32 0 60.7 0 96L0 416c0 35.3 28.7 64 64 64l320 0zM224 352c-6.7 0-13-2.8-17.6-7.7l-104-112c-6.5-7-8.2-17.2-4.4-25.9s12.5-14.4 22-14.4l208 0c9.5 0 18.2 5.7 22 14.4s2.1 18.9-4.4 25.9l-104 112c-4.5 4.9-10.9 7.7-17.6 7.7z" })), /* @__PURE__ */ wp.element.createElement("span", null, __13("Select", "digiblocks"))), /* @__PURE__ */ wp.element.createElement(Button10, { onClick: () => addField("checkbox") }, /* @__PURE__ */ wp.element.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 448 512" }, /* @__PURE__ */ wp.element.createElement("path", { d: "M64 32C28.7 32 0 60.7 0 96L0 416c0 35.3 28.7 64 64 64l320 0c35.3 0 64-28.7 64-64l0-320c0-35.3-28.7-64-64-64L64 32zM337 209L209 337c-9.4 9.4-24.6 9.4-33.9 0l-64-64c-9.4-9.4-9.4-24.6 0-33.9s24.6-9.4 33.9 0l47 47L303 175c9.4-9.4 24.6-9.4 33.9 0s9.4 24.6 0 33.9z" })), /* @__PURE__ */ wp.element.createElement("span", null, __13("Checkbox", "digiblocks"))), /* @__PURE__ */ wp.element.createElement(Button10, { onClick: () => addField("radio") }, /* @__PURE__ */ wp.element.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 512 512" }, /* @__PURE__ */ wp.element.createElement("path", { d: "M256 512A256 256 0 1 0 256 0a256 256 0 1 0 0 512zm0-352a96 96 0 1 1 0 192 96 96 0 1 1 0-192z" })), /* @__PURE__ */ wp.element.createElement("span", null, __13("Radio", "digiblocks"))), /* @__PURE__ */ wp.element.createElement(Button10, { onClick: () => addField("hidden") }, /* @__PURE__ */ wp.element.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 640 512" }, /* @__PURE__ */ wp.element.createElement("path", { d: "M38.8 5.1C28.4-3.1 13.3-1.2 5.1 9.2S-1.2 34.7 9.2 42.9l592 464c10.4 8.2 25.5 6.3 33.7-4.1s6.3-25.5-4.1-33.7L525.6 386.7c39.6-40.6 66.4-86.1 79.9-118.4c3.3-7.9 3.3-16.7 0-24.6c-14.9-35.7-46.2-87.7-93-131.1C465.5 68.8 400.8 32 320 32c-68.2 0-125 26.3-169.3 60.8L38.8 5.1zM223.1 149.5C248.6 126.2 282.7 112 320 112c79.5 0 144 64.5 144 144c0 24.9-6.3 48.3-17.4 68.7L408 294.5c8.4-19.3 10.6-41.4 4.8-63.3c-11.1-41.5-47.8-69.4-88.6-71.1c-5.8-.2-9.2 6.1-7.4 11.7c2.1 6.4 3.3 13.2 3.3 20.3c0 10.2-2.4 19.8-6.6 28.3l-90.3-70.8zM373 389.9c-16.4 6.5-34.3 10.1-53 10.1c-79.5 0-144-64.5-144-144c0-6.9 .5-13.6 1.4-20.2L83.1 161.5C60.3 191.2 44 220.8 34.5 243.7c-3.3 7.9-3.3 16.7 0 24.6c14.9 35.7 46.2 87.7 93 131.1C174.5 443.2 239.2 480 320 480c47.8 0 89.9-12.9 126.2-32.5L373 389.9z" })), /* @__PURE__ */ wp.element.createElement("span", null, __13("Hidden", "digiblocks")))),
            /* @__PURE__ */ wp.element.createElement(
              ResponsiveControl11,
              {
                label: __13("Field Gap", "digiblocks")
              },
              /* @__PURE__ */ wp.element.createElement(
                RangeControl10,
                {
                  value: fieldGap[localActiveDevice],
                  onChange: (value) => setAttributes({
                    fieldGap: {
                      ...fieldGap,
                      [localActiveDevice]: value
                    }
                  }),
                  min: 0,
                  max: 50,
                  step: 1,
                  __next40pxDefaultSize: true,
                  __nextHasNoMarginBottom: true
                }
              )
            ),
            /* @__PURE__ */ wp.element.createElement(
              ResponsiveControl11,
              {
                label: __13("Label Margin", "digiblocks")
              },
              /* @__PURE__ */ wp.element.createElement(
                RangeControl10,
                {
                  value: labelMargin[localActiveDevice],
                  onChange: (value) => setAttributes({
                    labelMargin: {
                      ...labelMargin,
                      [localActiveDevice]: value
                    }
                  }),
                  min: 0,
                  max: 30,
                  step: 1,
                  __next40pxDefaultSize: true,
                  __nextHasNoMarginBottom: true
                }
              )
            )
          ), selectedFieldIndex >= 0 && renderFieldSettings(selectedFieldIndex));
        case "style":
          return /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(
            TabPanelBody12,
            {
              tab: "style",
              name: "colors",
              title: __13("Colors", "digiblocks"),
              initialOpen: true
            },
            /* @__PURE__ */ wp.element.createElement(
              PanelColorSettings10,
              {
                title: __13("Form Colors", "digiblocks"),
                initialOpen: true,
                enableAlpha: true,
                colorSettings: [
                  {
                    value: backgroundColor,
                    onChange: (value) => setAttributes({ backgroundColor: value }),
                    label: __13("Background Color", "digiblocks")
                  },
                  {
                    value: textColor,
                    onChange: (value) => setAttributes({ textColor: value }),
                    label: __13("Text Color", "digiblocks")
                  },
                  {
                    value: labelColor,
                    onChange: (value) => setAttributes({ labelColor: value }),
                    label: __13("Label Color", "digiblocks")
                  }
                ]
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              PanelColorSettings10,
              {
                title: __13("Input Colors", "digiblocks"),
                initialOpen: false,
                enableAlpha: true,
                colorSettings: [
                  {
                    value: inputBackgroundColor,
                    onChange: (value) => setAttributes({ inputBackgroundColor: value }),
                    label: __13("Input Background", "digiblocks")
                  },
                  {
                    value: inputTextColor,
                    onChange: (value) => setAttributes({ inputTextColor: value }),
                    label: __13("Input Text", "digiblocks")
                  },
                  {
                    value: inputBorderColor,
                    onChange: (value) => setAttributes({ inputBorderColor: value }),
                    label: __13("Input Border", "digiblocks")
                  },
                  {
                    value: inputFocusBorderColor,
                    onChange: (value) => setAttributes({ inputFocusBorderColor: value }),
                    label: __13("Input Focus Border", "digiblocks")
                  }
                ]
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              PanelColorSettings10,
              {
                title: __13("Button Colors", "digiblocks"),
                initialOpen: true,
                enableAlpha: true,
                colorSettings: [
                  {
                    value: buttonBackgroundColor,
                    onChange: (value) => setAttributes({ buttonBackgroundColor: value }),
                    label: __13("Background Color", "digiblocks")
                  },
                  {
                    value: buttonTextColor,
                    onChange: (value) => setAttributes({ buttonTextColor: value }),
                    label: __13("Text Color", "digiblocks")
                  },
                  {
                    value: buttonBackgroundHoverColor,
                    onChange: (value) => setAttributes({ buttonBackgroundHoverColor: value }),
                    label: __13("Hover Background Color", "digiblocks")
                  },
                  {
                    value: buttonTextHoverColor,
                    onChange: (value) => setAttributes({ buttonTextHoverColor: value }),
                    label: __13("Hover Text Color", "digiblocks")
                  }
                ]
              }
            )
          ), /* @__PURE__ */ wp.element.createElement(
            TabPanelBody12,
            {
              tab: "style",
              name: "typography",
              title: __13("Typography", "digiblocks"),
              initialOpen: false
            },
            /* @__PURE__ */ wp.element.createElement(
              TypographyControl8,
              {
                label: __13("Form Typography", "digiblocks"),
                value: typography,
                onChange: (value) => setAttributes({ typography: value }),
                defaults: {
                  fontSize: { desktop: 16, tablet: 15, mobile: 14 },
                  fontSizeUnit: "px",
                  lineHeight: { desktop: 1.5, tablet: 1.4, mobile: 1.3 },
                  lineHeightUnit: "em"
                }
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              TypographyControl8,
              {
                label: __13("Label Typography", "digiblocks"),
                value: textTypography,
                onChange: (value) => setAttributes({ textTypography: value }),
                defaults: {
                  fontSize: { desktop: 16, tablet: 15, mobile: 14 },
                  fontSizeUnit: "px",
                  lineHeight: { desktop: 1.5, tablet: 1.4, mobile: 1.3 },
                  lineHeightUnit: "em"
                }
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              TypographyControl8,
              {
                label: __13("Button Typography", "digiblocks"),
                value: buttonTypography,
                onChange: (value) => setAttributes({ buttonTypography: value }),
                defaults: {
                  fontSize: { desktop: 16, tablet: 15, mobile: 14 },
                  fontSizeUnit: "px",
                  lineHeight: { desktop: 1.5, tablet: 1.4, mobile: 1.3 },
                  lineHeightUnit: "em"
                }
              }
            )
          ), /* @__PURE__ */ wp.element.createElement(
            TabPanelBody12,
            {
              tab: "style",
              name: "form-border",
              title: __13("Form Border", "digiblocks"),
              initialOpen: false
            },
            /* @__PURE__ */ wp.element.createElement(
              SelectControl12,
              {
                label: __13("Border Style", "digiblocks"),
                value: borderStyle,
                options: borderStyleOptions,
                onChange: (value) => setAttributes({ borderStyle: value }),
                __next40pxDefaultSize: true,
                __nextHasNoMarginBottom: true
              }
            ),
            borderStyle !== "none" && /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(
              ResponsiveControl11,
              {
                label: __13("Border Width", "digiblocks")
              },
              /* @__PURE__ */ wp.element.createElement(
                DimensionControl10,
                {
                  values: borderWidth[localActiveDevice],
                  onChange: (value) => setAttributes({
                    borderWidth: {
                      ...borderWidth,
                      [localActiveDevice]: value
                    }
                  }),
                  units: [
                    { label: "px", value: "px" },
                    { label: "rem", value: "rem" },
                    { label: "em", value: "em" },
                    { label: "%", value: "%" }
                  ]
                }
              )
            ), /* @__PURE__ */ wp.element.createElement(
              PanelColorSettings10,
              {
                title: __13("Border Color", "digiblocks"),
                initialOpen: true,
                enableAlpha: true,
                colorSettings: [
                  {
                    value: borderColor,
                    onChange: (value) => setAttributes({ borderColor: value }),
                    label: __13("Border Color", "digiblocks")
                  }
                ]
              }
            ), /* @__PURE__ */ wp.element.createElement(
              ResponsiveControl11,
              {
                label: __13("Border Radius", "digiblocks")
              },
              /* @__PURE__ */ wp.element.createElement(
                DimensionControl10,
                {
                  values: borderRadius[localActiveDevice],
                  onChange: (value) => setAttributes({
                    borderRadius: {
                      ...borderRadius,
                      [localActiveDevice]: value
                    }
                  }),
                  units: [
                    { label: "px", value: "px" },
                    { label: "%", value: "%" }
                  ]
                }
              )
            )),
            /* @__PURE__ */ wp.element.createElement(
              BoxShadowControl10,
              {
                normalValue: boxShadow,
                hoverValue: boxShadowHover,
                onNormalChange: (value) => setAttributes({ boxShadow: value }),
                onHoverChange: (value) => setAttributes({ boxShadowHover: value })
              }
            )
          ), /* @__PURE__ */ wp.element.createElement(
            TabPanelBody12,
            {
              tab: "style",
              name: "input-style",
              title: __13("Input Style", "digiblocks"),
              initialOpen: false
            },
            /* @__PURE__ */ wp.element.createElement(
              SelectControl12,
              {
                label: __13("Input Border Style", "digiblocks"),
                value: inputBorderStyle,
                options: borderStyleOptions,
                onChange: (value) => setAttributes({ inputBorderStyle: value }),
                __next40pxDefaultSize: true,
                __nextHasNoMarginBottom: true
              }
            ),
            inputBorderStyle !== "none" && /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(
              ResponsiveControl11,
              {
                label: __13("Input Border Width", "digiblocks")
              },
              /* @__PURE__ */ wp.element.createElement(
                DimensionControl10,
                {
                  values: inputBorderWidth[localActiveDevice],
                  onChange: (value) => setAttributes({
                    inputBorderWidth: {
                      ...inputBorderWidth,
                      [localActiveDevice]: value
                    }
                  }),
                  units: [
                    { label: "px", value: "px" },
                    { label: "rem", value: "rem" },
                    { label: "em", value: "em" },
                    { label: "%", value: "%" }
                  ]
                }
              )
            ), /* @__PURE__ */ wp.element.createElement(
              ResponsiveControl11,
              {
                label: __13("Input Border Radius", "digiblocks")
              },
              /* @__PURE__ */ wp.element.createElement(
                DimensionControl10,
                {
                  values: inputBorderRadius && inputBorderRadius[localActiveDevice] ? inputBorderRadius[localActiveDevice] : {
                    top: 4,
                    right: 4,
                    bottom: 4,
                    left: 4,
                    unit: "px"
                  },
                  onChange: (value) => setAttributes({
                    inputBorderRadius: {
                      ...inputBorderRadius,
                      [localActiveDevice]: value
                    }
                  }),
                  units: [
                    { label: "px", value: "px" },
                    { label: "%", value: "%" }
                  ]
                }
              )
            )),
            /* @__PURE__ */ wp.element.createElement(
              ResponsiveControl11,
              {
                label: __13("Input Padding", "digiblocks")
              },
              /* @__PURE__ */ wp.element.createElement(
                DimensionControl10,
                {
                  values: inputPadding && inputPadding[localActiveDevice] ? inputPadding[localActiveDevice] : {
                    top: 12,
                    right: 15,
                    bottom: 12,
                    left: 15,
                    unit: "px"
                  },
                  onChange: (value) => setAttributes({
                    inputPadding: {
                      ...inputPadding,
                      [localActiveDevice]: value
                    }
                  })
                }
              )
            )
          ), /* @__PURE__ */ wp.element.createElement(
            TabPanelBody12,
            {
              tab: "style",
              name: "spacing",
              title: __13("Spacing", "digiblocks"),
              initialOpen: false
            },
            /* @__PURE__ */ wp.element.createElement(
              ResponsiveControl11,
              {
                label: __13("Padding", "digiblocks")
              },
              /* @__PURE__ */ wp.element.createElement(
                DimensionControl10,
                {
                  values: padding && padding[localActiveDevice] ? padding[localActiveDevice] : {
                    top: 30,
                    right: 30,
                    bottom: 30,
                    left: 30,
                    unit: "px"
                  },
                  onChange: (value) => setAttributes({
                    padding: {
                      ...padding,
                      [localActiveDevice]: value
                    }
                  })
                }
              )
            ),
            /* @__PURE__ */ wp.element.createElement(
              ResponsiveControl11,
              {
                label: __13("Margin", "digiblocks")
              },
              /* @__PURE__ */ wp.element.createElement(
                DimensionControl10,
                {
                  values: margin && margin[localActiveDevice] ? margin[localActiveDevice] : {
                    top: 0,
                    right: 0,
                    bottom: 30,
                    left: 0,
                    unit: "px"
                  },
                  onChange: (value) => setAttributes({
                    margin: {
                      ...margin,
                      [localActiveDevice]: value
                    }
                  })
                }
              )
            )
          ));
        case "advanced":
          return /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(
            TabPanelBody12,
            {
              tab: "advanced",
              name: "animation",
              title: __13("Animation", "digiblocks"),
              initialOpen: true
            },
            /* @__PURE__ */ wp.element.createElement(
              SelectControl12,
              {
                label: __13("Animation Effect", "digiblocks"),
                value: animation,
                options: animationOptions,
                onChange: (value) => setAttributes({ animation: value }),
                __next40pxDefaultSize: true,
                __nextHasNoMarginBottom: true
              }
            ),
            animation && animation !== "none" && /* @__PURE__ */ wp.element.createElement("div", { style: { marginTop: "10px" } }, /* @__PURE__ */ wp.element.createElement(
              Button10,
              {
                variant: "secondary",
                isSecondary: true,
                onClick: handlePreviewClick,
                style: { width: "100%" }
              },
              __13("Preview Animation", "digiblocks")
            ))
          ), /* @__PURE__ */ wp.element.createElement(
            TabPanelBody12,
            {
              tab: "advanced",
              name: "visibility",
              title: __13("Visibility", "digiblocks"),
              initialOpen: false
            },
            /* @__PURE__ */ wp.element.createElement("div", { className: "components-base-control__help", style: {
              padding: "12px",
              backgroundColor: "#f0f6fc",
              border: "1px solid #c3ddfd",
              borderRadius: "4px",
              marginBottom: "16px"
            } }, /* @__PURE__ */ wp.element.createElement("strong", null, __13("Editor Note:", "digiblocks")), /* @__PURE__ */ wp.element.createElement("br", null), __13("Hidden elements appear with reduced opacity in the editor for easy editing. Visibility changes only take effect on the frontend.", "digiblocks")),
            /* @__PURE__ */ wp.element.createElement(
              ToggleControl11,
              {
                label: __13("Hide on Desktop", "digiblocks"),
                checked: visibility.desktop,
                onChange: (value) => setAttributes({
                  visibility: {
                    ...visibility,
                    desktop: value
                  }
                }),
                __nextHasNoMarginBottom: true
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              ToggleControl11,
              {
                label: __13("Hide on Tablet", "digiblocks"),
                checked: visibility.tablet,
                onChange: (value) => setAttributes({
                  visibility: {
                    ...visibility,
                    tablet: value
                  }
                }),
                __nextHasNoMarginBottom: true
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              ToggleControl11,
              {
                label: __13("Hide on Mobile", "digiblocks"),
                checked: visibility.mobile,
                onChange: (value) => setAttributes({
                  visibility: {
                    ...visibility,
                    mobile: value
                  }
                }),
                __nextHasNoMarginBottom: true
              }
            )
          ), /* @__PURE__ */ wp.element.createElement(
            TabPanelBody12,
            {
              tab: "advanced",
              name: "additional",
              title: __13("Additional", "digiblocks"),
              initialOpen: false
            },
            /* @__PURE__ */ wp.element.createElement("div", { className: "components-base-control html-anchor-control" }, /* @__PURE__ */ wp.element.createElement("div", { className: "components-base-control__field" }, /* @__PURE__ */ wp.element.createElement("label", { className: "components-base-control__label", htmlFor: "html-anchor" }, __13("HTML anchor", "digiblocks")), /* @__PURE__ */ wp.element.createElement(
              "input",
              {
                className: "components-text-control__input",
                type: "text",
                id: "html-anchor",
                value: anchor || "",
                onChange: (e) => setAttributes({ anchor: e.target.value }),
                "aria-describedby": "html-anchor-help",
                autoCapitalize: "none",
                autoComplete: "off"
              }
            )), /* @__PURE__ */ wp.element.createElement("p", { id: "html-anchor-help", className: "components-base-control__help" }, __13(`Enter a word or two \u2014 without spaces \u2014 to make a unique web address just for this block, called an "anchor". Then, you'll be able to link directly to this section of your page.`, "digiblocks"), " ", /* @__PURE__ */ wp.element.createElement(
              "a",
              {
                className: "components-external-link",
                href: "https://wordpress.org/documentation/article/page-jumps/",
                target: "_blank",
                rel: "external noreferrer noopener"
              },
              /* @__PURE__ */ wp.element.createElement("span", { className: "components-external-link__contents" }, __13("Learn more about anchors", "digiblocks")),
              /* @__PURE__ */ wp.element.createElement("span", { className: "components-external-link__icon", "aria-label": "(opens in a new tab)" }, "\u2197")
            ))),
            /* @__PURE__ */ wp.element.createElement("div", { className: "components-base-control" }, /* @__PURE__ */ wp.element.createElement("div", { className: "components-base-control__field" }, /* @__PURE__ */ wp.element.createElement("label", { className: "components-base-control__label", htmlFor: "additional-css-classes" }, __13("Additional CSS class(es)", "digiblocks")), /* @__PURE__ */ wp.element.createElement(
              "input",
              {
                className: "components-text-control__input",
                type: "text",
                id: "additional-css-classes",
                value: customClasses || "",
                onChange: (e) => setAttributes({ customClasses: e.target.value }),
                "aria-describedby": "additional-css-classes-help",
                autoComplete: "off"
              }
            )), /* @__PURE__ */ wp.element.createElement("p", { id: "additional-css-classes-help", className: "components-base-control__help" }, __13("Separate multiple classes with spaces.", "digiblocks")))
          ));
        default:
          return null;
      }
    };
    const blockProps = useBlockProps20({
      className: `digiblocks-forms ${id} ${customClasses || ""}`,
      id: anchor || null
      // Set the anchor as ID if provided
    });
    return /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(InspectorControls11, null, /* @__PURE__ */ wp.element.createElement(
      CustomTabPanel11,
      {
        tabs: tabList,
        activeTab,
        onSelect: setActiveTab,
        customClass: "four"
      },
      renderTabContent()
    )), /* @__PURE__ */ wp.element.createElement("style", { dangerouslySetInnerHTML: { __html: generateCSS() } }), /* @__PURE__ */ wp.element.createElement("div", { ...blockProps }, /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-form" }, /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-form-fields" }, fields && fields.length > 0 ? fields.map((field, index) => renderFormField(field, index)) : /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-form-fields-empty" }, __13('No fields added yet. Click the "Fields" tab to add form fields.', "digiblocks"))), /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-form-submit", style: { textAlign: buttonAlign === "full" ? "center" : buttonAlign } }, /* @__PURE__ */ wp.element.createElement("button", { className: "digiblocks-form-submit-button" }, submitButtonText)), /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-form-messages" }, /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-form-success" }, successMessage), /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-form-error" }, errorMessage)))));
  };
  var edit_default11 = FormsEdit;

  // blocks/forms/save.js
  var { useBlockProps: useBlockProps21 } = window.wp.blockEditor;
  var FormsSave = ({ attributes }) => {
    const {
      id,
      anchor,
      customClasses,
      animation,
      successMessage,
      errorMessage,
      submitButtonText,
      buttonAlign,
      fields
    } = attributes;
    const blockClass = `digiblocks-forms ${id} ${animation !== "none" ? `animate-${animation}` : ""} ${customClasses || ""}`;
    const blockProps = useBlockProps21.save({
      className: blockClass,
      id: anchor || null
    });
    const renderFormField = (field, index) => {
      const fieldWidthClass = `digiblocks-field-width-${field.width || "100"}`;
      switch (field.type) {
        case "text":
        case "email":
        case "number":
        case "tel":
        case "url":
        case "date":
          return /* @__PURE__ */ wp.element.createElement("div", { key: field.id, className: `digiblocks-form-field ${fieldWidthClass}`, "data-field-id": field.id, "data-field-type": field.type }, /* @__PURE__ */ wp.element.createElement("label", { className: "digiblocks-form-field-label", htmlFor: `${id}-${field.id}` }, field.label, field.required && /* @__PURE__ */ wp.element.createElement("span", { className: "digiblocks-form-field-required" }, "*")), /* @__PURE__ */ wp.element.createElement(
            "input",
            {
              type: field.type,
              id: `${id}-${field.id}`,
              name: field.id,
              className: "digiblocks-form-input",
              placeholder: field.placeholder || "",
              required: field.required
            }
          ), /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-form-field-error" }));
        case "textarea":
          return /* @__PURE__ */ wp.element.createElement("div", { key: field.id, className: `digiblocks-form-field ${fieldWidthClass}`, "data-field-id": field.id, "data-field-type": field.type }, /* @__PURE__ */ wp.element.createElement("label", { className: "digiblocks-form-field-label", htmlFor: `${id}-${field.id}` }, field.label, field.required && /* @__PURE__ */ wp.element.createElement("span", { className: "digiblocks-form-field-required" }, "*")), /* @__PURE__ */ wp.element.createElement(
            "textarea",
            {
              id: `${id}-${field.id}`,
              name: field.id,
              className: "digiblocks-form-textarea",
              placeholder: field.placeholder || "",
              required: field.required
            }
          ), /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-form-field-error" }));
        case "select":
          return /* @__PURE__ */ wp.element.createElement("div", { key: field.id, className: `digiblocks-form-field ${fieldWidthClass}`, "data-field-id": field.id, "data-field-type": field.type }, /* @__PURE__ */ wp.element.createElement("label", { className: "digiblocks-form-field-label", htmlFor: `${id}-${field.id}` }, field.label, field.required && /* @__PURE__ */ wp.element.createElement("span", { className: "digiblocks-form-field-required" }, "*")), /* @__PURE__ */ wp.element.createElement(
            "select",
            {
              id: `${id}-${field.id}`,
              name: field.id,
              className: "digiblocks-form-select",
              required: field.required
            },
            /* @__PURE__ */ wp.element.createElement("option", { value: "" }, field.placeholder || "Select an option"),
            field.options && field.options.map((option, optionIndex) => /* @__PURE__ */ wp.element.createElement("option", { key: optionIndex, value: option.value }, option.label))
          ), /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-form-field-error" }));
        case "checkbox":
          return /* @__PURE__ */ wp.element.createElement("div", { key: field.id, className: `digiblocks-form-field ${fieldWidthClass}`, "data-field-id": field.id, "data-field-type": field.type }, /* @__PURE__ */ wp.element.createElement("label", { className: "digiblocks-form-checkbox-label" }, /* @__PURE__ */ wp.element.createElement(
            "input",
            {
              type: "checkbox",
              id: `${id}-${field.id}`,
              name: field.id,
              className: "digiblocks-form-checkbox",
              value: "1",
              required: field.required
            }
          ), /* @__PURE__ */ wp.element.createElement("span", null, field.label, field.required && /* @__PURE__ */ wp.element.createElement("span", { className: "digiblocks-form-field-required" }, "*"))), /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-form-field-error" }));
        case "radio":
          return /* @__PURE__ */ wp.element.createElement("div", { key: field.id, className: `digiblocks-form-field ${fieldWidthClass}`, "data-field-id": field.id, "data-field-type": field.type }, /* @__PURE__ */ wp.element.createElement("label", { className: "digiblocks-form-field-label" }, field.label, field.required && /* @__PURE__ */ wp.element.createElement("span", { className: "digiblocks-form-field-required" }, "*")), field.options && field.options.map((option, optionIndex) => /* @__PURE__ */ wp.element.createElement("label", { key: optionIndex, className: "digiblocks-form-radio-label" }, /* @__PURE__ */ wp.element.createElement(
            "input",
            {
              type: "radio",
              id: `${id}-${field.id}-${optionIndex}`,
              name: field.id,
              className: "digiblocks-form-radio",
              value: option.value,
              required: field.required && optionIndex === 0
            }
          ), /* @__PURE__ */ wp.element.createElement("span", null, option.label))), /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-form-field-error" }));
        case "hidden":
          return /* @__PURE__ */ wp.element.createElement(
            "input",
            {
              key: field.id,
              type: "hidden",
              id: `${id}-${field.id}`,
              name: field.id,
              value: field.value || "",
              "data-field-id": field.id,
              "data-field-type": field.type
            }
          );
        default:
          return null;
      }
    };
    return /* @__PURE__ */ wp.element.createElement("div", { ...blockProps }, /* @__PURE__ */ wp.element.createElement(
      "form",
      {
        className: "digiblocks-form",
        id: `${id}-form`,
        "data-form-id": id,
        onSubmit: "return false;"
      },
      /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-form-fields" }, fields && fields.map((field, index) => renderFormField(field, index))),
      /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-form-submit", style: { textAlign: buttonAlign === "full" ? "center" : buttonAlign } }, /* @__PURE__ */ wp.element.createElement(
        "button",
        {
          type: "submit",
          className: "digiblocks-form-submit-button",
          style: buttonAlign === "full" ? { width: "100%" } : {}
        },
        submitButtonText
      )),
      /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-form-messages" }, /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-form-success" }, successMessage), /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-form-error" }, errorMessage))
    ));
  };
  var save_default11 = FormsSave;

  // blocks/google-map/edit.js
  var { __: __14 } = window.wp.i18n;
  var {
    useBlockProps: useBlockProps22,
    InspectorControls: InspectorControls12,
    PanelColorSettings: PanelColorSettings11
  } = window.wp.blockEditor;
  var {
    TextControl: TextControl7,
    TextareaControl: TextareaControl2,
    RangeControl: RangeControl11,
    SelectControl: SelectControl13,
    Button: Button11,
    Placeholder: Placeholder2,
    Spinner: Spinner2,
    ToggleControl: ToggleControl12,
    BaseControl: BaseControl3,
    __experimentalToggleGroupControl: ToggleGroupControl11,
    __experimentalToggleGroupControlOption: ToggleGroupControlOption11
  } = window.wp.components;
  var { useState: useState12, useEffect: useEffect12, useRef: useRef9 } = window.wp.element;
  var { useBlockId: useBlockId12, getDimensionCSS: getDimensionCSS10, animations: animations10, animationPreview: animationPreview10 } = digi.utils;
  var { tabIcons: tabIcons12 } = digi.icons;
  var {
    ResponsiveControl: ResponsiveControl12,
    DimensionControl: DimensionControl11,
    CustomTabPanel: CustomTabPanel12,
    BoxShadowControl: BoxShadowControl11,
    TabPanelBody: TabPanelBody13
  } = digi.components;
  var GoogleMapEdit = ({ attributes, setAttributes, clientId }) => {
    const {
      id,
      anchor,
      visibility,
      customClasses,
      mapHeight,
      zoom,
      mapType,
      mapStyle,
      customMapStyle,
      markers,
      address,
      animation,
      enableZoom,
      enableScroll,
      enableFullscreenControl,
      enableStreetViewControl,
      enableMapTypeControl,
      borderStyle,
      borderWidth,
      borderRadius,
      borderColor,
      boxShadow,
      boxShadowHover
    } = attributes;
    useBlockId12(id, clientId, setAttributes);
    const [localActiveDevice, setLocalActiveDevice] = useState12(window.digi.responsiveState.activeDevice);
    const [isLoading, setIsLoading] = useState12(false);
    const [geocodeError, setGeocodeError] = useState12(null);
    const [mapLoaded, setMapLoaded] = useState12(false);
    const [mapInstance, setMapInstance] = useState12(null);
    const [markerInstances, setMarkerInstances] = useState12([]);
    const mapContainerRef = useRef9(null);
    const geocoder = useRef9(null);
    const [activeTab, setActiveTab] = useState12(() => {
      if (window.digi.uiState) {
        const savedTab = window.digi.uiState.getActiveTab(clientId);
        if (savedTab)
          return savedTab;
      }
      return "options";
    });
    useEffect12(() => {
      const unsubscribe = window.digi.responsiveState.subscribe((device) => {
        setLocalActiveDevice(device);
      });
      return unsubscribe;
    }, []);
    useEffect12(() => {
      if (!markers) {
        setAttributes({ markers: [] });
      }
    }, [setAttributes]);
    useEffect12(() => {
      if (!mapLoaded && typeof google === "undefined" && !window.googleMapsLoading) {
        if (!digiBlocksData.googleMapsApiKey) {
          setGeocodeError(__14("Google Maps API key not found. Please add it in the DigiBlocks settings.", "digiblocks"));
          return;
        }
        window.googleMapsLoading = true;
        window.digiblocksGoogleMapsCallbacks = window.digiblocksGoogleMapsCallbacks || [];
        const ourCallback = () => {
          setMapLoaded(true);
          geocoder.current = new google.maps.Geocoder();
        };
        window.digiblocksGoogleMapsCallbacks.push(ourCallback);
        if (typeof window.digiblocksGoogleMapsCallback !== "function") {
          window.digiblocksGoogleMapsCallback = () => {
            window.googleMapsInitialized = true;
            window.googleMapsLoading = false;
            window.digiblocksGoogleMapsCallbacks.forEach((callback) => {
              if (typeof callback === "function") {
                callback();
              }
            });
          };
        }
        const script = document.createElement("script");
        script.src = `https://maps.googleapis.com/maps/api/js?key=${digiBlocksData.googleMapsApiKey}&callback=digiblocksGoogleMapsCallback&loading=async`;
        script.async = true;
        script.defer = true;
        document.head.appendChild(script);
        return () => {
          const index = window.digiblocksGoogleMapsCallbacks.indexOf(ourCallback);
          if (index > -1) {
            window.digiblocksGoogleMapsCallbacks.splice(index, 1);
          }
        };
      } else if (!mapLoaded && typeof google !== "undefined") {
        setMapLoaded(true);
        geocoder.current = new google.maps.Geocoder();
      } else if (!mapLoaded && window.googleMapsLoading) {
        const ourCallback = () => {
          setMapLoaded(true);
          geocoder.current = new google.maps.Geocoder();
        };
        window.digiblocksGoogleMapsCallbacks = window.digiblocksGoogleMapsCallbacks || [];
        window.digiblocksGoogleMapsCallbacks.push(ourCallback);
        return () => {
          const index = window.digiblocksGoogleMapsCallbacks.indexOf(ourCallback);
          if (index > -1) {
            window.digiblocksGoogleMapsCallbacks.splice(index, 1);
          }
        };
      }
    }, [mapLoaded]);
    useEffect12(() => {
      if (mapLoaded && mapContainerRef.current && !mapInstance) {
        const center = { lat: 40.7128, lng: -74.006 };
        const mapOptions = {
          center,
          zoom: zoom || 10,
          mapTypeId: mapType || "roadmap",
          zoomControl: enableZoom,
          scrollwheel: enableScroll,
          fullscreenControl: enableFullscreenControl,
          streetViewControl: enableStreetViewControl,
          mapTypeControl: enableMapTypeControl
        };
        const hasMarkers = markers && markers.length > 0;
        if (hasMarkers && digiBlocksData.googleMapsMapId) {
          mapOptions.mapId = digiBlocksData.googleMapsMapId;
        } else if (mapStyle && mapStyle !== "default") {
          if (mapStyle === "custom" && customMapStyle) {
            try {
              const customStyleObj = JSON.parse(customMapStyle);
              mapOptions.styles = customStyleObj;
            } catch (error) {
              console.error("Invalid map style JSON:", error);
            }
          } else if (predefinedMapStyles[mapStyle]) {
            mapOptions.styles = predefinedMapStyles[mapStyle];
          }
        }
        const map = new google.maps.Map(mapContainerRef.current, mapOptions);
        setMapInstance(map);
        if (!geocoder.current) {
          geocoder.current = new google.maps.Geocoder();
        }
        if (address) {
          geocodeAddress(address, map);
        }
        if (hasMarkers) {
          addMarkers(markers, map);
        }
      }
    }, [mapLoaded, mapContainerRef, mapInstance, zoom, mapType, mapStyle, customMapStyle, address, markers, enableZoom, enableScroll, enableFullscreenControl, enableStreetViewControl, enableMapTypeControl]);
    useEffect12(() => {
      if (mapInstance) {
        mapInstance.setZoom(zoom);
        mapInstance.setMapTypeId(mapType);
        if (mapStyle && mapStyle !== "default") {
          if (mapStyle === "custom" && customMapStyle) {
            try {
              const customStyleObj = JSON.parse(customMapStyle);
              mapInstance.setOptions({ styles: customStyleObj });
            } catch (error) {
              console.error("Invalid map style JSON:", error);
            }
          } else if (predefinedMapStyles[mapStyle]) {
            mapInstance.setOptions({ styles: predefinedMapStyles[mapStyle] });
          }
        } else {
          mapInstance.setOptions({ styles: [] });
        }
        mapInstance.setOptions({
          zoomControl: enableZoom,
          scrollwheel: enableScroll,
          fullscreenControl: enableFullscreenControl,
          streetViewControl: enableStreetViewControl,
          mapTypeControl: enableMapTypeControl
        });
      }
    }, [mapInstance, zoom, mapType, mapStyle, customMapStyle, enableZoom, enableScroll, enableFullscreenControl, enableStreetViewControl, enableMapTypeControl]);
    const geocodeAddress = (address2, map, markerIndex = -1) => {
      if (!geocoder.current)
        return;
      setIsLoading(true);
      setGeocodeError(null);
      geocoder.current.geocode({ address: address2 }, (results, status) => {
        setIsLoading(false);
        if (status === "OK" && results && results.length > 0) {
          const location = results[0].geometry.location;
          if (markerIndex >= 0) {
            const updatedMarkers = [...markers];
            updatedMarkers[markerIndex] = {
              ...updatedMarkers[markerIndex],
              latitude: location.lat(),
              longitude: location.lng()
            };
            setAttributes({ markers: updatedMarkers });
            if (mapInstance) {
              addMarkers(updatedMarkers, mapInstance);
            }
          } else {
            map.setCenter(location);
            if (markers && markers.length > 0) {
              const updatedMarkers = [...markers];
              updatedMarkers[0] = {
                ...updatedMarkers[0],
                address: address2,
                latitude: location.lat(),
                longitude: location.lng()
              };
              setAttributes({ markers: updatedMarkers });
              if (mapInstance) {
                addMarkers(updatedMarkers, mapInstance);
              }
            }
          }
        } else {
          setGeocodeError(__14("Could not find address. Please try a different one or use the map to position your marker.", "digiblocks"));
        }
      });
    };
    const addNewMarker = () => {
      const newMarkers = [...markers || []];
      const markerId = `marker-${Date.now()}`;
      const center = mapInstance ? mapInstance.getCenter() : { lat: 40.7128, lng: -74.006 };
      newMarkers.push({
        id: markerId,
        address: "",
        latitude: typeof center.lat === "function" ? center.lat() : center.lat,
        longitude: typeof center.lng === "function" ? center.lng() : center.lng,
        title: ""
      });
      setAttributes({ markers: newMarkers });
      if (newMarkers.length === 1 && mapInstance && digiBlocksData.googleMapsMapId) {
        const currentCenter = mapInstance.getCenter();
        const currentZoom = mapInstance.getZoom();
        const mapOptions = {
          center: currentCenter,
          zoom: currentZoom,
          mapTypeId: mapInstance.getMapTypeId(),
          zoomControl: enableZoom,
          scrollwheel: enableScroll,
          fullscreenControl: enableFullscreenControl,
          streetViewControl: enableStreetViewControl,
          mapTypeControl: enableMapTypeControl,
          mapId: digiBlocksData.googleMapsMapId
          // Add Map ID
        };
        if (markerInstances.length > 0) {
          markerInstances.forEach((marker) => marker.map = null);
          setMarkerInstances([]);
        }
        const newMap = new google.maps.Map(mapContainerRef.current, mapOptions);
        setMapInstance(newMap);
        setTimeout(() => {
          addMarkers(newMarkers, newMap);
        }, 100);
      } else if (mapInstance) {
        addMarkers(newMarkers, mapInstance);
      }
    };
    const updateMarker = (index, field, value) => {
      const updatedMarkers = [...markers];
      updatedMarkers[index] = {
        ...updatedMarkers[index],
        [field]: value
      };
      setAttributes({ markers: updatedMarkers });
      if (field === "address" && value && geocoder.current && mapInstance) {
        geocodeAddress(value, mapInstance);
      }
    };
    const removeMarker = (index) => {
      const updatedMarkers = [...markers];
      updatedMarkers.splice(index, 1);
      setAttributes({ markers: updatedMarkers });
      if (updatedMarkers.length === 0 && mapInstance) {
        mapInstance.mapId = null;
        if (mapStyle && mapStyle !== "default") {
          if (mapStyle === "custom" && customMapStyle) {
            try {
              const customStyleObj = JSON.parse(customMapStyle);
              mapInstance.setOptions({ styles: customStyleObj });
            } catch (error) {
              console.error("Invalid map style JSON:", error);
            }
          } else if (predefinedMapStyles[mapStyle]) {
            mapInstance.setOptions({ styles: predefinedMapStyles[mapStyle] });
          }
        }
      }
    };
    const applyMapStyle = (map, style, customStyle) => {
      if (!map)
        return;
      if (style && style !== "default") {
        if (style === "custom" && customStyle) {
          try {
            const customStyleObj = JSON.parse(customStyle);
            map.setOptions({ styles: customStyleObj });
          } catch (error) {
            console.error("Invalid map style JSON:", error);
          }
        } else if (predefinedMapStyles[style]) {
          map.setOptions({ styles: predefinedMapStyles[style] });
        }
      } else {
        map.setOptions({ styles: [] });
      }
    };
    const addMarkers = async (markers2, map) => {
      if (!markers2 || markers2.length === 0) {
        return;
      }
      if (markerInstances.length > 0) {
        markerInstances.forEach((marker) => marker.map = null);
        setMarkerInstances([]);
      }
      try {
        if (!google.maps.marker) {
          await google.maps.importLibrary("marker");
        }
        const newMarkerInstances = markers2.map((marker) => {
          if (!marker.latitude || !marker.longitude)
            return null;
          const position = { lat: marker.latitude, lng: marker.longitude };
          const title = marker.title || "";
          const description = marker.description || "";
          const advancedMarker = new google.maps.marker.AdvancedMarkerElement({
            map,
            position,
            title
          });
          if (description) {
            const infoContent = document.createElement("div");
            infoContent.className = "digiblocks-map-info-content";
            infoContent.style.cssText = "min-width: 200px; max-width: 300px; padding: 10px; background-color: white; border-radius: 8px; box-shadow: 0 2px 7px 1px rgba(0,0,0,0.3);";
            if (title) {
              const titleElement = document.createElement("div");
              titleElement.className = "digiblocks-map-info-title";
              titleElement.style.cssText = "font-weight: bold; margin-bottom: 5px; font-size: 16px;";
              titleElement.textContent = title;
              infoContent.appendChild(titleElement);
            }
            const descElement = document.createElement("div");
            descElement.className = "digiblocks-map-info-description";
            descElement.style.cssText = "font-size: 14px;";
            descElement.innerHTML = description;
            infoContent.appendChild(descElement);
            const infoWindow = new google.maps.InfoWindow({
              content: infoContent
            });
            google.maps.event.addListener(advancedMarker, "click", function() {
              infoWindow.open({
                anchor: advancedMarker,
                map
              });
            });
            if (markers2.length === 1) {
              infoWindow.open({
                anchor: advancedMarker,
                map
              });
            }
          }
          return advancedMarker;
        }).filter(Boolean);
        setMarkerInstances(newMarkerInstances);
      } catch (error) {
        console.error("Error creating advanced markers:", error);
      }
    };
    const previewTimeoutRef = useRef9(null);
    useEffect12(() => {
      if (animation && animation !== "none") {
        const timeoutId = setTimeout(() => {
          animationPreview10(id, animation, animations10, previewTimeoutRef);
        }, 100);
        return () => clearTimeout(timeoutId);
      }
    }, [animation]);
    const handlePreviewClick = () => {
      animationPreview10(id, animation, animations10, previewTimeoutRef);
    };
    const borderStyleOptions = [
      { label: __14("None", "digiblocks"), value: "none" },
      { label: __14("Solid", "digiblocks"), value: "solid" },
      { label: __14("Dotted", "digiblocks"), value: "dotted" },
      { label: __14("Dashed", "digiblocks"), value: "dashed" },
      { label: __14("Double", "digiblocks"), value: "double" },
      { label: __14("Groove", "digiblocks"), value: "groove" },
      { label: __14("Ridge", "digiblocks"), value: "ridge" },
      { label: __14("Inset", "digiblocks"), value: "inset" },
      { label: __14("Outset", "digiblocks"), value: "outset" }
    ];
    const mapTypeOptions = [
      { label: __14("Roadmap", "digiblocks"), value: "roadmap" },
      { label: __14("Satellite", "digiblocks"), value: "satellite" },
      { label: __14("Hybrid", "digiblocks"), value: "hybrid" },
      { label: __14("Terrain", "digiblocks"), value: "terrain" }
    ];
    const mapStyleOptions = [
      { label: __14("Default", "digiblocks"), value: "default" },
      { label: __14("Silver", "digiblocks"), value: "silver" },
      { label: __14("Retro", "digiblocks"), value: "retro" },
      { label: __14("Dark", "digiblocks"), value: "dark" },
      { label: __14("Night", "digiblocks"), value: "night" },
      { label: __14("Aubergine", "digiblocks"), value: "aubergine" },
      { label: __14("Custom", "digiblocks"), value: "custom" }
    ];
    const predefinedMapStyles = {
      default: [],
      silver: [
        { elementType: "geometry", stylers: [{ color: "#f5f5f5" }] },
        { elementType: "labels.icon", stylers: [{ visibility: "off" }] },
        { elementType: "labels.text.fill", stylers: [{ color: "#616161" }] },
        { elementType: "labels.text.stroke", stylers: [{ color: "#f5f5f5" }] },
        { featureType: "administrative.land_parcel", elementType: "labels.text.fill", stylers: [{ color: "#bdbdbd" }] },
        { featureType: "poi", elementType: "geometry", stylers: [{ color: "#eeeeee" }] },
        { featureType: "poi", elementType: "labels.text.fill", stylers: [{ color: "#757575" }] },
        { featureType: "poi.park", elementType: "geometry", stylers: [{ color: "#e5e5e5" }] },
        { featureType: "poi.park", elementType: "labels.text.fill", stylers: [{ color: "#9e9e9e" }] },
        { featureType: "road", elementType: "geometry", stylers: [{ color: "#ffffff" }] },
        { featureType: "road.arterial", elementType: "labels.text.fill", stylers: [{ color: "#757575" }] },
        { featureType: "road.highway", elementType: "geometry", stylers: [{ color: "#dadada" }] },
        { featureType: "road.highway", elementType: "labels.text.fill", stylers: [{ color: "#616161" }] },
        { featureType: "road.local", elementType: "labels.text.fill", stylers: [{ color: "#9e9e9e" }] },
        { featureType: "transit.line", elementType: "geometry", stylers: [{ color: "#e5e5e5" }] },
        { featureType: "transit.station", elementType: "geometry", stylers: [{ color: "#eeeeee" }] },
        { featureType: "water", elementType: "geometry", stylers: [{ color: "#c9c9c9" }] },
        { featureType: "water", elementType: "labels.text.fill", stylers: [{ color: "#9e9e9e" }] }
      ],
      retro: [
        { elementType: "geometry", stylers: [{ color: "#ebe3cd" }] },
        { elementType: "labels.text.fill", stylers: [{ color: "#523735" }] },
        { elementType: "labels.text.stroke", stylers: [{ color: "#f5f1e6" }] },
        { featureType: "administrative", elementType: "geometry.stroke", stylers: [{ color: "#c9b2a6" }] },
        { featureType: "administrative.land_parcel", elementType: "geometry.stroke", stylers: [{ color: "#dcd2be" }] },
        { featureType: "administrative.land_parcel", elementType: "labels.text.fill", stylers: [{ color: "#ae9e90" }] },
        { featureType: "landscape.natural", elementType: "geometry", stylers: [{ color: "#dfd2ae" }] },
        { featureType: "poi", elementType: "geometry", stylers: [{ color: "#dfd2ae" }] },
        { featureType: "poi", elementType: "labels.text.fill", stylers: [{ color: "#93817c" }] },
        { featureType: "poi.park", elementType: "geometry.fill", stylers: [{ color: "#a5b076" }] },
        { featureType: "poi.park", elementType: "labels.text.fill", stylers: [{ color: "#447530" }] },
        { featureType: "road", elementType: "geometry", stylers: [{ color: "#f5f1e6" }] },
        { featureType: "road.arterial", elementType: "geometry", stylers: [{ color: "#fdfcf8" }] },
        { featureType: "road.highway", elementType: "geometry", stylers: [{ color: "#f8c967" }] },
        { featureType: "road.highway", elementType: "geometry.stroke", stylers: [{ color: "#e9bc62" }] },
        { featureType: "road.highway.controlled_access", elementType: "geometry", stylers: [{ color: "#e98d58" }] },
        { featureType: "road.highway.controlled_access", elementType: "geometry.stroke", stylers: [{ color: "#db8555" }] },
        { featureType: "road.local", elementType: "labels.text.fill", stylers: [{ color: "#806b63" }] },
        { featureType: "transit.line", elementType: "geometry", stylers: [{ color: "#dfd2ae" }] },
        { featureType: "transit.line", elementType: "labels.text.fill", stylers: [{ color: "#8f7d77" }] },
        { featureType: "transit.line", elementType: "labels.text.stroke", stylers: [{ color: "#ebe3cd" }] },
        { featureType: "transit.station", elementType: "geometry", stylers: [{ color: "#dfd2ae" }] },
        { featureType: "water", elementType: "geometry.fill", stylers: [{ color: "#b9d3c2" }] },
        { featureType: "water", elementType: "labels.text.fill", stylers: [{ color: "#92998d" }] }
      ],
      dark: [
        { elementType: "geometry", stylers: [{ color: "#212121" }] },
        { elementType: "labels.icon", stylers: [{ visibility: "off" }] },
        { elementType: "labels.text.fill", stylers: [{ color: "#757575" }] },
        { elementType: "labels.text.stroke", stylers: [{ color: "#212121" }] },
        { featureType: "administrative", elementType: "geometry", stylers: [{ color: "#757575" }] },
        { featureType: "administrative.country", elementType: "labels.text.fill", stylers: [{ color: "#9e9e9e" }] },
        { featureType: "administrative.land_parcel", stylers: [{ visibility: "off" }] },
        { featureType: "administrative.locality", elementType: "labels.text.fill", stylers: [{ color: "#bdbdbd" }] },
        { featureType: "poi", elementType: "labels.text.fill", stylers: [{ color: "#757575" }] },
        { featureType: "poi.park", elementType: "geometry", stylers: [{ color: "#181818" }] },
        { featureType: "poi.park", elementType: "labels.text.fill", stylers: [{ color: "#616161" }] },
        { featureType: "poi.park", elementType: "labels.text.stroke", stylers: [{ color: "#1b1b1b" }] },
        { featureType: "road", elementType: "geometry.fill", stylers: [{ color: "#2c2c2c" }] },
        { featureType: "road", elementType: "labels.text.fill", stylers: [{ color: "#8a8a8a" }] },
        { featureType: "road.arterial", elementType: "geometry", stylers: [{ color: "#373737" }] },
        { featureType: "road.highway", elementType: "geometry", stylers: [{ color: "#3c3c3c" }] },
        { featureType: "road.highway.controlled_access", elementType: "geometry", stylers: [{ color: "#4e4e4e" }] },
        { featureType: "road.local", elementType: "labels.text.fill", stylers: [{ color: "#616161" }] },
        { featureType: "transit", elementType: "labels.text.fill", stylers: [{ color: "#757575" }] },
        { featureType: "water", elementType: "geometry", stylers: [{ color: "#000000" }] },
        { featureType: "water", elementType: "labels.text.fill", stylers: [{ color: "#3d3d3d" }] }
      ],
      night: [
        { elementType: "geometry", stylers: [{ color: "#242f3e" }] },
        { elementType: "labels.text.fill", stylers: [{ color: "#746855" }] },
        { elementType: "labels.text.stroke", stylers: [{ color: "#242f3e" }] },
        { featureType: "administrative.locality", elementType: "labels.text.fill", stylers: [{ color: "#d59563" }] },
        { featureType: "poi", elementType: "labels.text.fill", stylers: [{ color: "#d59563" }] },
        { featureType: "poi.park", elementType: "geometry", stylers: [{ color: "#263c3f" }] },
        { featureType: "poi.park", elementType: "labels.text.fill", stylers: [{ color: "#6b9a76" }] },
        { featureType: "road", elementType: "geometry", stylers: [{ color: "#38414e" }] },
        { featureType: "road", elementType: "geometry.stroke", stylers: [{ color: "#212a37" }] },
        { featureType: "road", elementType: "labels.text.fill", stylers: [{ color: "#9ca5b3" }] },
        { featureType: "road.highway", elementType: "geometry", stylers: [{ color: "#746855" }] },
        { featureType: "road.highway", elementType: "geometry.stroke", stylers: [{ color: "#1f2835" }] },
        { featureType: "road.highway", elementType: "labels.text.fill", stylers: [{ color: "#f3d19c" }] },
        { featureType: "transit", elementType: "geometry", stylers: [{ color: "#2f3948" }] },
        { featureType: "transit.station", elementType: "labels.text.fill", stylers: [{ color: "#d59563" }] },
        { featureType: "water", elementType: "geometry", stylers: [{ color: "#17263c" }] },
        { featureType: "water", elementType: "labels.text.fill", stylers: [{ color: "#515c6d" }] },
        { featureType: "water", elementType: "labels.text.stroke", stylers: [{ color: "#17263c" }] }
      ],
      aubergine: [
        { elementType: "geometry", stylers: [{ color: "#1d2c4d" }] },
        { elementType: "labels.text.fill", stylers: [{ color: "#8ec3b9" }] },
        { elementType: "labels.text.stroke", stylers: [{ color: "#1a3646" }] },
        { featureType: "administrative.country", elementType: "geometry.stroke", stylers: [{ color: "#4b6878" }] },
        { featureType: "administrative.land_parcel", elementType: "labels.text.fill", stylers: [{ color: "#64779e" }] },
        { featureType: "administrative.province", elementType: "geometry.stroke", stylers: [{ color: "#4b6878" }] },
        { featureType: "landscape.man_made", elementType: "geometry.stroke", stylers: [{ color: "#334e87" }] },
        { featureType: "landscape.natural", elementType: "geometry", stylers: [{ color: "#023e58" }] },
        { featureType: "poi", elementType: "geometry", stylers: [{ color: "#283d6a" }] },
        { featureType: "poi", elementType: "labels.text.fill", stylers: [{ color: "#6f9ba5" }] },
        { featureType: "poi", elementType: "labels.text.stroke", stylers: [{ color: "#1d2c4d" }] },
        { featureType: "poi.park", elementType: "geometry.fill", stylers: [{ color: "#023e58" }] },
        { featureType: "poi.park", elementType: "labels.text.fill", stylers: [{ color: "#3C7680" }] },
        { featureType: "road", elementType: "geometry", stylers: [{ color: "#304a7d" }] },
        { featureType: "road", elementType: "labels.text.fill", stylers: [{ color: "#98a5be" }] },
        { featureType: "road", elementType: "labels.text.stroke", stylers: [{ color: "#1d2c4d" }] },
        { featureType: "road.highway", elementType: "geometry", stylers: [{ color: "#2c6675" }] },
        { featureType: "road.highway", elementType: "geometry.stroke", stylers: [{ color: "#255763" }] },
        { featureType: "road.highway", elementType: "labels.text.fill", stylers: [{ color: "#b0d5ce" }] },
        { featureType: "road.highway", elementType: "labels.text.stroke", stylers: [{ color: "#023e58" }] },
        { featureType: "transit", elementType: "labels.text.fill", stylers: [{ color: "#98a5be" }] },
        { featureType: "transit", elementType: "labels.text.stroke", stylers: [{ color: "#1d2c4d" }] },
        { featureType: "transit.line", elementType: "geometry.fill", stylers: [{ color: "#283d6a" }] },
        { featureType: "transit.station", elementType: "geometry", stylers: [{ color: "#3a4762" }] },
        { featureType: "water", elementType: "geometry", stylers: [{ color: "#0e1626" }] },
        { featureType: "water", elementType: "labels.text.fill", stylers: [{ color: "#4e6d70" }] }
      ]
    };
    const animationOptions = [
      { label: __14("None", "digiblocks"), value: "none" },
      ...Object.keys(animations10).map((animation2) => ({
        label: animation2.replace(/-/g, " ").replace(/\b\w/g, (l) => l.toUpperCase()),
        value: animation2
      }))
    ];
    const tabList = [
      {
        name: "options",
        title: __14("Options", "digiblocks"),
        icon: tabIcons12.optionsIcon
      },
      {
        name: "style",
        title: __14("Style", "digiblocks"),
        icon: tabIcons12.styleIcon
      },
      {
        name: "advanced",
        title: __14("Advanced", "digiblocks"),
        icon: tabIcons12.advancedIcon
      }
    ];
    const generateCSS = () => {
      const activeDevice = window.digi.responsiveState.activeDevice;
      const currentHeight = mapHeight && mapHeight[activeDevice] ? mapHeight[activeDevice] : activeDevice === "desktop" ? 400 : activeDevice === "tablet" ? 350 : 300;
      let borderCSS = "";
      if (borderStyle && borderStyle !== "none") {
        borderCSS = `
                border-style: ${borderStyle};
                border-color: ${borderColor || "#e0e0e0"};
				${getDimensionCSS10(borderWidth, "border-width", activeDevice)}
				${getDimensionCSS10(borderRadius, "border-radius", activeDevice)}
            `;
      }
      let boxShadowCSS = "";
      if (boxShadow && boxShadow.enable) {
        const inset = boxShadow.position === "inset" ? "inset " : "";
        boxShadowCSS = `box-shadow: ${inset}${boxShadow.horizontal}px ${boxShadow.vertical}px ${boxShadow.blur}px ${boxShadow.spread}px ${boxShadow.color};`;
      }
      let boxShadowHoverCSS = "";
      if (boxShadowHover && boxShadowHover.enable) {
        const inset = boxShadowHover.position === "inset" ? "inset " : "";
        boxShadowHoverCSS = `box-shadow: ${inset}${boxShadowHover.horizontal}px ${boxShadowHover.vertical}px ${boxShadowHover.blur}px ${boxShadowHover.spread}px ${boxShadowHover.color};`;
      }
      let animationCSS = "";
      if (animation && animation !== "none" && animations10[animation]) {
        animationCSS = animations10[animation].keyframes;
      }
      return `
            /* Google Map Block - ${id} */
            .${id} {
                height: ${currentHeight}px;
                width: 100%;
                overflow: hidden;
                ${borderCSS}
                ${boxShadowCSS}
				transition: all .3s ease;
            }

            .${id}:hover {
                ${boxShadowHoverCSS}
            }
            
            /* Animation keyframes */
            ${animationCSS}
            
            /* Responsive styles */
            @media (max-width: 991px) {
                .${id} {
                    height: ${mapHeight && mapHeight.tablet ? mapHeight.tablet : 350}px;
                }
            }
            
            @media (max-width: 767px) {
                .${id} {
                    height: ${mapHeight && mapHeight.mobile ? mapHeight.mobile : 300}px;
                }
            }

			/* Visibility Controls */
			${visibility.desktop ? `
				@media (min-width: 992px) {
					.${id} {
						opacity: 0.5 !important;
					}
				}
			` : ""}

			${visibility.tablet ? `
				@media (min-width: 768px) and (max-width: 991px) {
					.${id} {
						opacity: 0.5 !important;
					}
				}
			` : ""}

			${visibility.mobile ? `
				@media (max-width: 767px) {
					.${id} {
						opacity: 0.5 !important;
					}
				}
			` : ""}
        `;
    };
    const renderMarkerSettings = () => {
      const markerCount = Array.isArray(markers) ? markers.length : 0;
      const hasMapId = !!digiBlocksData.googleMapsMapId;
      if (markerCount > 0 && !hasMapId) {
        return /* @__PURE__ */ wp.element.createElement("div", { className: "components-notice is-warning", style: { margin: "0 0 16px 0" } }, /* @__PURE__ */ wp.element.createElement("div", { className: "components-notice__content" }, /* @__PURE__ */ wp.element.createElement("p", null, __14("A Map ID is required to use markers with the Google Maps block.", "digiblocks")), /* @__PURE__ */ wp.element.createElement("p", null, __14("Please configure a Map ID in the DigiBlocks settings before adding markers.", "digiblocks")), /* @__PURE__ */ wp.element.createElement(
          Button11,
          {
            isPrimary: true,
            href: `${window.ajaxurl ? window.ajaxurl.replace("admin-ajax.php", "") : "/wp-admin/"}admin.php?page=digiblocks-settings`,
            target: "_blank",
            style: { marginTop: "10px" }
          },
          __14("Go to Settings", "digiblocks")
        )));
      }
      return /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, Array.isArray(markers) && markers.length > 0 ? /* @__PURE__ */ wp.element.createElement("div", null, markers.map((marker, index) => /* @__PURE__ */ wp.element.createElement(
        "div",
        {
          key: marker.id || `marker-${index}`,
          className: "digiblocks-google-map-marker",
          style: {
            marginBottom: "16px",
            padding: "16px",
            backgroundColor: "#f0f0f0",
            borderRadius: "4px"
          }
        },
        /* @__PURE__ */ wp.element.createElement("h3", { style: { margin: "0 0 10px 0" } }, __14("Marker", "digiblocks"), " #", index + 1),
        /* @__PURE__ */ wp.element.createElement(
          TextControl7,
          {
            label: __14("Title", "digiblocks"),
            value: marker.title || "",
            onChange: (value) => updateMarker(index, "title", value),
            placeholder: __14("Enter marker title", "digiblocks"),
            __next40pxDefaultSize: true,
            __nextHasNoMarginBottom: true
          }
        ),
        /* @__PURE__ */ wp.element.createElement(
          TextareaControl2,
          {
            label: __14("Description", "digiblocks"),
            value: marker.description || "",
            onChange: (value) => updateMarker(index, "description", value),
            placeholder: __14("Enter marker description (will appear above marker)", "digiblocks"),
            __next40pxDefaultSize: true,
            __nextHasNoMarginBottom: true
          }
        ),
        /* @__PURE__ */ wp.element.createElement(
          TextControl7,
          {
            label: __14("Address", "digiblocks"),
            value: marker.address || "",
            onChange: (value) => {
              const updatedMarkers = [...markers];
              updatedMarkers[index] = {
                ...updatedMarkers[index],
                address: value
              };
              setAttributes({ markers: updatedMarkers });
            },
            onBlur: () => {
              if (markers[index]?.address && geocoder.current && mapInstance) {
                geocodeAddress(markers[index].address, mapInstance, index);
              }
            },
            placeholder: __14("Enter marker address", "digiblocks"),
            __next40pxDefaultSize: true,
            __nextHasNoMarginBottom: true
          }
        ),
        /* @__PURE__ */ wp.element.createElement("div", { style: { marginTop: "10px", display: "flex", justifyContent: "flex-end" } }, /* @__PURE__ */ wp.element.createElement(
          Button11,
          {
            isDestructive: true,
            onClick: () => removeMarker(index)
          },
          __14("Remove Marker", "digiblocks")
        ))
      )), /* @__PURE__ */ wp.element.createElement(
        Button11,
        {
          isPrimary: true,
          onClick: addNewMarker,
          style: { marginTop: "10px", width: "100%", justifyContent: "center" }
        },
        __14("Add Marker", "digiblocks")
      )) : /* @__PURE__ */ wp.element.createElement("div", null, /* @__PURE__ */ wp.element.createElement("p", null, __14("No markers added yet. Add your first marker!", "digiblocks")), /* @__PURE__ */ wp.element.createElement(
        Button11,
        {
          isPrimary: true,
          onClick: addNewMarker,
          style: { width: "100%", justifyContent: "center" }
        },
        __14("Add Marker", "digiblocks")
      )));
    };
    const renderTabContent = () => {
      switch (activeTab) {
        case "options":
          return /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(
            TabPanelBody13,
            {
              tab: "options",
              name: "map-settings",
              title: __14("Map Settings", "digiblocks"),
              initialOpen: true
            },
            /* @__PURE__ */ wp.element.createElement(
              TextControl7,
              {
                label: __14("Address", "digiblocks"),
                value: address || "",
                onChange: (value) => {
                  setAttributes({ address: value });
                  if (value && geocoder.current && mapInstance) {
                    geocodeAddress(value, mapInstance);
                  }
                },
                placeholder: __14("Enter location address", "digiblocks"),
                __next40pxDefaultSize: true,
                __nextHasNoMarginBottom: true
              }
            ),
            geocodeError && /* @__PURE__ */ wp.element.createElement("div", { className: "components-notice is-error", style: { margin: "0 0 16px 0" } }, /* @__PURE__ */ wp.element.createElement("div", { className: "components-notice__content" }, geocodeError)),
            /* @__PURE__ */ wp.element.createElement(
              SelectControl13,
              {
                label: __14("Map Type", "digiblocks"),
                value: mapType,
                options: mapTypeOptions,
                onChange: (value) => setAttributes({ mapType: value }),
                __next40pxDefaultSize: true,
                __nextHasNoMarginBottom: true
              }
            ),
            (!markers || markers.length === 0) && /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(
              SelectControl13,
              {
                label: __14("Map Style", "digiblocks"),
                value: mapStyle,
                options: mapStyleOptions,
                onChange: (value) => setAttributes({ mapStyle: value }),
                __next40pxDefaultSize: true,
                __nextHasNoMarginBottom: true
              }
            ), mapStyle === "custom" && /* @__PURE__ */ wp.element.createElement(
              TextareaControl2,
              {
                label: __14("Custom Map Style JSON", "digiblocks"),
                help: __14("Paste a valid Google Maps style JSON. You can create styles with the Google Maps Styling Wizard.", "digiblocks"),
                value: customMapStyle || "",
                onChange: (value) => setAttributes({ customMapStyle: value }),
                rows: 6,
                __next40pxDefaultSize: true,
                __nextHasNoMarginBottom: true
              }
            )),
            markers && markers.length > 0 && /* @__PURE__ */ wp.element.createElement("div", { className: "components-notice is-info", style: { margin: "0 0 16px 0" } }, /* @__PURE__ */ wp.element.createElement("div", { className: "components-notice__content" }, __14("Map Style options are not available when markers are present, as markers require a Map ID which overrides custom styling.", "digiblocks"))),
            /* @__PURE__ */ wp.element.createElement(
              RangeControl11,
              {
                label: __14("Zoom Level", "digiblocks"),
                value: zoom,
                onChange: (value) => setAttributes({ zoom: value }),
                min: 1,
                max: 20,
                __next40pxDefaultSize: true,
                __nextHasNoMarginBottom: true
              }
            )
          ), /* @__PURE__ */ wp.element.createElement(
            TabPanelBody13,
            {
              tab: "options",
              name: "marker-settings",
              title: __14("Markers", "digiblocks"),
              initialOpen: false
            },
            renderMarkerSettings()
          ), /* @__PURE__ */ wp.element.createElement(
            TabPanelBody13,
            {
              tab: "options",
              name: "map-controls",
              title: __14("Map Controls", "digiblocks"),
              initialOpen: false
            },
            /* @__PURE__ */ wp.element.createElement(
              BaseControl3,
              {
                id: `${id}-map-controls`,
                __nextHasNoMarginBottom: true
              },
              /* @__PURE__ */ wp.element.createElement(
                ToggleControl12,
                {
                  label: __14("Enable Zoom Control", "digiblocks"),
                  checked: enableZoom !== false,
                  onChange: (value) => setAttributes({ enableZoom: value }),
                  __nextHasNoMarginBottom: true
                }
              ),
              /* @__PURE__ */ wp.element.createElement(
                ToggleControl12,
                {
                  label: __14("Enable Mousewheel Zoom", "digiblocks"),
                  checked: enableScroll !== false,
                  onChange: (value) => setAttributes({ enableScroll: value }),
                  __nextHasNoMarginBottom: true
                }
              ),
              /* @__PURE__ */ wp.element.createElement(
                ToggleControl12,
                {
                  label: __14("Enable Fullscreen Control", "digiblocks"),
                  checked: enableFullscreenControl !== false,
                  onChange: (value) => setAttributes({ enableFullscreenControl: value }),
                  __nextHasNoMarginBottom: true
                }
              ),
              /* @__PURE__ */ wp.element.createElement(
                ToggleControl12,
                {
                  label: __14("Enable Street View Control", "digiblocks"),
                  checked: enableStreetViewControl !== false,
                  onChange: (value) => setAttributes({ enableStreetViewControl: value }),
                  __nextHasNoMarginBottom: true
                }
              ),
              /* @__PURE__ */ wp.element.createElement(
                ToggleControl12,
                {
                  label: __14("Enable Map Type Control", "digiblocks"),
                  checked: enableMapTypeControl !== false,
                  onChange: (value) => setAttributes({ enableMapTypeControl: value }),
                  __nextHasNoMarginBottom: true
                }
              )
            )
          ));
        case "style":
          return /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(
            TabPanelBody13,
            {
              tab: "style",
              name: "map-dimensions",
              title: __14("Map Size", "digiblocks"),
              initialOpen: true
            },
            /* @__PURE__ */ wp.element.createElement(
              ResponsiveControl12,
              {
                label: __14("Map Height", "digiblocks")
              },
              /* @__PURE__ */ wp.element.createElement(
                RangeControl11,
                {
                  value: mapHeight && mapHeight[localActiveDevice] ? mapHeight[localActiveDevice] : localActiveDevice === "desktop" ? 400 : localActiveDevice === "tablet" ? 350 : 300,
                  onChange: (value) => {
                    setAttributes({
                      mapHeight: {
                        ...mapHeight,
                        [localActiveDevice]: value
                      }
                    });
                  },
                  min: 150,
                  max: 800,
                  __next40pxDefaultSize: true,
                  __nextHasNoMarginBottom: true
                }
              )
            )
          ), /* @__PURE__ */ wp.element.createElement(
            TabPanelBody13,
            {
              tab: "style",
              name: "map-border",
              title: __14("Border", "digiblocks"),
              initialOpen: false
            },
            /* @__PURE__ */ wp.element.createElement(
              SelectControl13,
              {
                label: __14("Border Style", "digiblocks"),
                value: borderStyle || "none",
                options: borderStyleOptions,
                onChange: (value) => {
                  if (value !== "none" && (borderStyle === "none" || !borderStyle)) {
                    if (!borderWidth || Object.keys(borderWidth).length === 0) {
                      setAttributes({
                        borderWidth: {
                          desktop: { top: 1, right: 1, bottom: 1, left: 1, unit: "px" },
                          tablet: { top: 1, right: 1, bottom: 1, left: 1, unit: "px" },
                          mobile: { top: 1, right: 1, bottom: 1, left: 1, unit: "px" }
                        }
                      });
                    }
                    if (!borderRadius || Object.keys(borderRadius).length === 0) {
                      setAttributes({
                        borderRadius: {
                          desktop: { top: 0, right: 0, bottom: 0, left: 0, unit: "px" },
                          tablet: { top: 0, right: 0, bottom: 0, left: 0, unit: "px" },
                          mobile: { top: 0, right: 0, bottom: 0, left: 0, unit: "px" }
                        }
                      });
                    }
                  }
                  setAttributes({ borderStyle: value });
                },
                __next40pxDefaultSize: true,
                __nextHasNoMarginBottom: true
              }
            ),
            borderStyle && borderStyle !== "none" && /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(
              PanelColorSettings11,
              {
                title: __14("Border Color", "digiblocks"),
                enableAlpha: true,
                colorSettings: [
                  {
                    value: borderColor,
                    onChange: (value) => setAttributes({ borderColor: value }),
                    label: __14("Border Color", "digiblocks")
                  }
                ]
              }
            ), /* @__PURE__ */ wp.element.createElement(
              ResponsiveControl12,
              {
                label: __14("Border Width", "digiblocks")
              },
              /* @__PURE__ */ wp.element.createElement(
                DimensionControl11,
                {
                  values: borderWidth && borderWidth[localActiveDevice] ? borderWidth[localActiveDevice] : { top: 1, right: 1, bottom: 1, left: 1, unit: "px" },
                  onChange: (value) => setAttributes({
                    borderWidth: {
                      ...borderWidth,
                      [localActiveDevice]: value
                    }
                  })
                }
              )
            ), /* @__PURE__ */ wp.element.createElement(
              ResponsiveControl12,
              {
                label: __14("Border Radius", "digiblocks")
              },
              /* @__PURE__ */ wp.element.createElement(
                DimensionControl11,
                {
                  values: borderRadius && borderRadius[localActiveDevice] ? borderRadius[localActiveDevice] : { top: 0, right: 0, bottom: 0, left: 0, unit: "px" },
                  onChange: (value) => setAttributes({
                    borderRadius: {
                      ...borderRadius,
                      [localActiveDevice]: value
                    }
                  }),
                  units: [
                    { label: "px", value: "px" },
                    { label: "%", value: "%" }
                  ]
                }
              )
            ))
          ), /* @__PURE__ */ wp.element.createElement(
            TabPanelBody13,
            {
              tab: "style",
              name: "box-shadow",
              title: __14("Box Shadow", "digiblocks"),
              initialOpen: false
            },
            /* @__PURE__ */ wp.element.createElement(
              BoxShadowControl11,
              {
                normalValue: boxShadow,
                hoverValue: boxShadowHover,
                onNormalChange: (value) => setAttributes({
                  boxShadow: value
                }),
                onHoverChange: (value) => setAttributes({
                  boxShadowHover: value
                })
              }
            )
          ));
        case "advanced":
          return /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(
            TabPanelBody13,
            {
              tab: "advanced",
              name: "animation",
              title: __14("Animation", "digiblocks"),
              initialOpen: true
            },
            /* @__PURE__ */ wp.element.createElement(
              SelectControl13,
              {
                label: __14("Animation Effect", "digiblocks"),
                value: animation,
                options: animationOptions,
                onChange: (value) => setAttributes({ animation: value }),
                __next40pxDefaultSize: true,
                __nextHasNoMarginBottom: true
              }
            ),
            animation && animation !== "none" && /* @__PURE__ */ wp.element.createElement("div", { style: { marginTop: "10px" } }, /* @__PURE__ */ wp.element.createElement(
              Button11,
              {
                variant: "secondary",
                isSecondary: true,
                onClick: handlePreviewClick,
                style: { width: "100%" }
              },
              __14("Preview Animation", "digiblocks")
            ))
          ), /* @__PURE__ */ wp.element.createElement(
            TabPanelBody13,
            {
              tab: "advanced",
              name: "visibility",
              title: __14("Visibility", "digiblocks"),
              initialOpen: false
            },
            /* @__PURE__ */ wp.element.createElement("div", { className: "components-base-control__help", style: {
              padding: "12px",
              backgroundColor: "#f0f6fc",
              border: "1px solid #c3ddfd",
              borderRadius: "4px",
              marginBottom: "16px"
            } }, /* @__PURE__ */ wp.element.createElement("strong", null, __14("Editor Note:", "digiblocks")), /* @__PURE__ */ wp.element.createElement("br", null), __14("Hidden elements appear with reduced opacity in the editor for easy editing. Visibility changes only take effect on the frontend.", "digiblocks")),
            /* @__PURE__ */ wp.element.createElement(
              ToggleControl12,
              {
                label: __14("Hide on Desktop", "digiblocks"),
                checked: visibility.desktop,
                onChange: (value) => setAttributes({
                  visibility: {
                    ...visibility,
                    desktop: value
                  }
                }),
                __nextHasNoMarginBottom: true
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              ToggleControl12,
              {
                label: __14("Hide on Tablet", "digiblocks"),
                checked: visibility.tablet,
                onChange: (value) => setAttributes({
                  visibility: {
                    ...visibility,
                    tablet: value
                  }
                }),
                __nextHasNoMarginBottom: true
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              ToggleControl12,
              {
                label: __14("Hide on Mobile", "digiblocks"),
                checked: visibility.mobile,
                onChange: (value) => setAttributes({
                  visibility: {
                    ...visibility,
                    mobile: value
                  }
                }),
                __nextHasNoMarginBottom: true
              }
            )
          ), /* @__PURE__ */ wp.element.createElement(
            TabPanelBody13,
            {
              tab: "advanced",
              name: "additional",
              title: __14("Additional", "digiblocks"),
              initialOpen: false
            },
            /* @__PURE__ */ wp.element.createElement("div", { className: "components-base-control html-anchor-control" }, /* @__PURE__ */ wp.element.createElement("div", { className: "components-base-control__field" }, /* @__PURE__ */ wp.element.createElement("label", { className: "components-base-control__label", htmlFor: "html-anchor" }, __14("HTML anchor", "digiblocks")), /* @__PURE__ */ wp.element.createElement(
              "input",
              {
                className: "components-text-control__input",
                type: "text",
                id: "html-anchor",
                value: anchor || "",
                onChange: (e) => setAttributes({ anchor: e.target.value }),
                "aria-describedby": "html-anchor-help",
                autoCapitalize: "none",
                autoComplete: "off"
              }
            )), /* @__PURE__ */ wp.element.createElement("p", { id: "html-anchor-help", className: "components-base-control__help" }, __14(`Enter a word or two \u2014 without spaces \u2014 to make a unique web address just for this block, called an "anchor". Then, you'll be able to link directly to this section of your page.`, "digiblocks"), " ", /* @__PURE__ */ wp.element.createElement(
              "a",
              {
                className: "components-external-link",
                href: "https://wordpress.org/documentation/article/page-jumps/",
                target: "_blank",
                rel: "external noreferrer noopener"
              },
              /* @__PURE__ */ wp.element.createElement("span", { className: "components-external-link__contents" }, __14("Learn more about anchors", "digiblocks")),
              /* @__PURE__ */ wp.element.createElement("span", { className: "components-external-link__icon", "aria-label": "(opens in a new tab)" }, "\u2197")
            ))),
            /* @__PURE__ */ wp.element.createElement("div", { className: "components-base-control" }, /* @__PURE__ */ wp.element.createElement("div", { className: "components-base-control__field" }, /* @__PURE__ */ wp.element.createElement("label", { className: "components-base-control__label", htmlFor: "additional-css-classes" }, __14("Additional CSS class(es)", "digiblocks")), /* @__PURE__ */ wp.element.createElement(
              "input",
              {
                className: "components-text-control__input",
                type: "text",
                id: "additional-css-classes",
                value: customClasses || "",
                onChange: (e) => setAttributes({ customClasses: e.target.value }),
                "aria-describedby": "additional-css-classes-help",
                autoComplete: "off"
              }
            )), /* @__PURE__ */ wp.element.createElement("p", { id: "additional-css-classes-help", className: "components-base-control__help" }, __14("Separate multiple classes with spaces.", "digiblocks")))
          ));
        default:
          return null;
      }
    };
    const blockProps = useBlockProps22({
      className: `digiblocks-google-map ${id} ${animation !== "none" ? `animate-${animation}` : ""} ${customClasses || ""}`,
      id: anchor || null
      // Set the anchor as ID if provided
    });
    return /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(InspectorControls12, null, /* @__PURE__ */ wp.element.createElement(
      CustomTabPanel12,
      {
        tabs: tabList,
        activeTab,
        onSelect: setActiveTab
      },
      renderTabContent()
    )), /* @__PURE__ */ wp.element.createElement("style", { dangerouslySetInnerHTML: { __html: generateCSS() } }), /* @__PURE__ */ wp.element.createElement("div", { ...blockProps }, !digiBlocksData.googleMapsApiKey ? /* @__PURE__ */ wp.element.createElement(
      Placeholder2,
      {
        icon: "location-alt",
        label: __14("Google Map", "digiblocks"),
        instructions: __14("You need to add your Google Maps API key in the DigiBlocks settings to use this block.", "digiblocks")
      },
      /* @__PURE__ */ wp.element.createElement(
        Button11,
        {
          isPrimary: true,
          href: `${window.ajaxurl ? window.ajaxurl.replace("admin-ajax.php", "") : "/wp-admin/"}admin.php?page=digiblocks-settings`,
          target: "_blank"
        },
        __14("Go to Settings", "digiblocks")
      )
    ) : isLoading ? /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-google-map-loading", style: { display: "flex", alignItems: "center", justifyContent: "center", height: "100%" } }, /* @__PURE__ */ wp.element.createElement(Spinner2, null), /* @__PURE__ */ wp.element.createElement("span", { style: { marginLeft: "10px" } }, __14("Loading map...", "digiblocks"))) : /* @__PURE__ */ wp.element.createElement(
      "div",
      {
        ref: mapContainerRef,
        className: "digiblocks-google-map-container",
        style: { width: "100%", height: "100%" }
      }
    )));
  };
  var edit_default12 = GoogleMapEdit;

  // blocks/google-map/save.js
  var { useBlockProps: useBlockProps23 } = window.wp.blockEditor;
  var GoogleMapSave = ({ attributes }) => {
    const {
      id,
      anchor,
      customClasses,
      mapHeight,
      zoom,
      mapType,
      mapStyle,
      customMapStyle,
      mapId,
      markers,
      address,
      animation,
      enableZoom,
      enableScroll,
      enableFullscreenControl,
      enableStreetViewControl,
      enableMapTypeControl
    } = attributes;
    const blockClasses = [
      "digiblocks-google-map",
      id,
      animation !== "none" ? `animate-${animation}` : "",
      customClasses || ""
    ].filter(Boolean).join(" ");
    const blockProps = useBlockProps23.save({
      className: blockClasses,
      id: anchor || null,
      "data-map-zoom": zoom || 10,
      "data-map-type": mapType || "roadmap",
      "data-map-style": mapStyle || "default",
      "data-custom-map-style": customMapStyle || "",
      "data-map-id": mapId || "",
      "data-enable-zoom": enableZoom !== false ? "true" : "false",
      "data-enable-scroll": enableScroll !== false ? "true" : "false",
      "data-enable-fullscreen": enableFullscreenControl !== false ? "true" : "false",
      "data-enable-streetview": enableStreetViewControl !== false ? "true" : "false",
      "data-enable-maptype": enableMapTypeControl !== false ? "true" : "false"
    });
    return /* @__PURE__ */ wp.element.createElement("div", { ...blockProps }, /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-google-map-container" }), markers && markers.length > 0 && /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-google-map-markers", style: { display: "none" } }, markers.map((marker) => /* @__PURE__ */ wp.element.createElement(
      "div",
      {
        key: marker.id,
        className: "digiblocks-google-map-marker",
        "data-lat": marker.latitude,
        "data-lng": marker.longitude,
        "data-title": marker.title || "",
        "data-description": marker.description || "",
        "data-address": marker.address || ""
      }
    ))), address && /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-google-map-address", style: { display: "none" }, "data-address": address }));
  };
  var save_default12 = GoogleMapSave;

  // blocks/heading/edit.js
  var { __: __15 } = window.wp.i18n;
  var {
    useBlockProps: useBlockProps24,
    RichText: RichText9,
    InspectorControls: InspectorControls13,
    PanelColorSettings: PanelColorSettings12,
    LinkControl: LinkControl2,
    BlockControls: BlockControls4,
    AlignmentToolbar: AlignmentToolbar4
  } = window.wp.blockEditor;
  var {
    SelectControl: SelectControl14,
    RangeControl: RangeControl12,
    ToggleControl: ToggleControl13,
    Button: Button12,
    __experimentalToggleGroupControl: ToggleGroupControl12,
    __experimentalToggleGroupControlOption: ToggleGroupControlOption12,
    TabPanel: TabPanel8,
    BaseControl: BaseControl4
  } = window.wp.components;
  var { useState: useState13, useEffect: useEffect13, useRef: useRef10 } = window.wp.element;
  var { useBlockId: useBlockId13, getDimensionCSS: getDimensionCSS11, animations: animations11, animationPreview: animationPreview11 } = digi.utils;
  var { tabIcons: tabIcons13 } = digi.icons;
  var { ResponsiveControl: ResponsiveControl13, ResponsiveButtonGroup: ResponsiveButtonGroup2, DimensionControl: DimensionControl12, TypographyControl: TypographyControl9, CustomTabPanel: CustomTabPanel13, TabPanelBody: TabPanelBody14 } = digi.components;
  var HeadingEdit = ({ attributes, setAttributes, clientId }) => {
    const {
      id,
      anchor,
      visibility,
      customClasses,
      content,
      headingTag,
      textColor,
      textHoverColor,
      backgroundColor,
      backgroundHoverColor,
      typography,
      align,
      padding,
      margin,
      animation,
      highlightText,
      highlightColor,
      highlightType,
      displaySeparator,
      separatorColor,
      separatorSecondaryColor,
      separatorWidth,
      separatorHeight,
      separatorBorderRadius,
      separatorPosition,
      separatorStyle,
      separatorSpacing,
      linkEnabled,
      linkUrl,
      linkOpenInNewTab,
      linkRel,
      shadowEnabled,
      textShadow
    } = attributes;
    useBlockId13(id, clientId, setAttributes);
    const [localActiveDevice, setLocalActiveDevice] = useState13(window.digi.responsiveState.activeDevice);
    const [isAnimating, setIsAnimating] = useState13(false);
    useEffect13(() => {
      const unsubscribe = window.digi.responsiveState.subscribe((device) => {
        setLocalActiveDevice(device);
      });
      return unsubscribe;
    }, []);
    const [activeTab, setActiveTab] = useState13(() => {
      if (window.digi.uiState) {
        const savedTab = window.digi.uiState.getActiveTab(clientId);
        if (savedTab)
          return savedTab;
      }
      return "options";
    });
    const previewTimeoutRef = useRef10(null);
    useEffect13(() => {
      if (animation && animation !== "none") {
        const timeoutId = setTimeout(() => {
          animationPreview11(id, animation, animations11, previewTimeoutRef);
        }, 100);
        return () => clearTimeout(timeoutId);
      }
    }, [animation]);
    const handlePreviewClick = () => {
      animationPreview11(id, animation, animations11, previewTimeoutRef);
    };
    const animationOptions = [
      { label: __15("None", "digiblocks"), value: "none" },
      ...Object.keys(animations11).map((animation2) => ({
        label: animation2.replace(/-/g, " ").replace(/\b\w/g, (l) => l.toUpperCase()),
        value: animation2
      }))
    ];
    const headingTagOptions = [
      { label: __15("H1", "digiblocks"), value: "h1" },
      { label: __15("H2", "digiblocks"), value: "h2" },
      { label: __15("H3", "digiblocks"), value: "h3" },
      { label: __15("H4", "digiblocks"), value: "h4" },
      { label: __15("H5", "digiblocks"), value: "h5" },
      { label: __15("H6", "digiblocks"), value: "h6" },
      { label: __15("p", "digiblocks"), value: "p" },
      { label: __15("div", "digiblocks"), value: "div" },
      { label: __15("span", "digiblocks"), value: "span" }
    ];
    const highlightTypeOptions = [
      { label: __15("Background", "digiblocks"), value: "background" },
      { label: __15("Text Color", "digiblocks"), value: "color" },
      { label: __15("Underline", "digiblocks"), value: "underline" }
    ];
    const tabList = [
      {
        name: "options",
        title: __15("Options", "digiblocks"),
        icon: tabIcons13.optionsIcon
      },
      {
        name: "style",
        title: __15("Style", "digiblocks"),
        icon: tabIcons13.styleIcon
      },
      {
        name: "advanced",
        title: __15("Advanced", "digiblocks"),
        icon: tabIcons13.advancedIcon
      }
    ];
    const stateTabList = [
      {
        name: "normal",
        title: __15("Normal", "digiblocks"),
        className: "digiblocks-tab-1 normal"
      },
      {
        name: "hover",
        title: __15("Hover", "digiblocks"),
        className: "digiblocks-tab-2 hover"
      }
    ];
    const generateCSS = () => {
      const activeDevice = window.digi.responsiveState.activeDevice;
      let typographyCSS = "";
      if (typography) {
        if (typography.fontFamily) {
          typographyCSS += `font-family: ${typography.fontFamily};`;
        }
        if (typography.fontSize && typography.fontSize[activeDevice]) {
          typographyCSS += `font-size: ${typography.fontSize[activeDevice]}${typography.fontSizeUnit || "px"};`;
        }
        if (typography.fontWeight) {
          typographyCSS += `font-weight: ${typography.fontWeight};`;
        }
        if (typography.fontStyle) {
          typographyCSS += `font-style: ${typography.fontStyle};`;
        }
        if (typography.textTransform) {
          typographyCSS += `text-transform: ${typography.textTransform};`;
        }
        if (typography.textDecoration) {
          typographyCSS += `text-decoration: ${typography.textDecoration};`;
        }
        if (typography.lineHeight && typography.lineHeight[activeDevice]) {
          typographyCSS += `line-height: ${typography.lineHeight[activeDevice]}${typography.lineHeightUnit || "em"};`;
        }
        if (typography.letterSpacing && typography.letterSpacing[activeDevice]) {
          typographyCSS += `letter-spacing: ${typography.letterSpacing[activeDevice]}${typography.letterSpacingUnit || "px"};`;
        }
      }
      let textShadowCSS = "";
      if (shadowEnabled && textShadow) {
        textShadowCSS = `text-shadow: ${textShadow.horizontal}px ${textShadow.vertical}px ${textShadow.blur}px ${textShadow.color};`;
      }
      const paddingCSS = `${getDimensionCSS11(padding, "padding", activeDevice)}`;
      const marginCSS = `${getDimensionCSS11(margin, "margin", activeDevice)}`;
      let animationCSS = "";
      if (animation && animation !== "none" && animations11[animation]) {
        animationCSS = animations11[animation].keyframes;
      }
      let separatorCSS = "";
      if (displaySeparator && separatorColor) {
        const separatorWidthValue = separatorWidth[activeDevice] || 50;
        const separatorHeightValue = separatorHeight[activeDevice] || 3;
        const separatorSpacingValue = separatorSpacing[activeDevice] || 10;
        const position = separatorPosition === "top" ? "top: 0;" : "bottom: 0;";
        const alignment = align === "center" ? "left: 50%; transform: translateX(-50%);" : align === "right" ? "right: 0;" : "left: 0;";
        switch (separatorStyle) {
          case "line-solid":
            separatorCSS = `
                        .${id}::before {
                            content: '';
                            position: absolute;
                            ${position}
                            ${alignment}
                            width: ${separatorWidthValue}px;
                            height: ${separatorHeightValue}px;
                            background-color: ${separatorColor};
							${getDimensionCSS11(separatorBorderRadius, "border-radius", activeDevice)}
                            ${separatorPosition === "top" ? `margin-top: ${separatorSpacingValue}px;` : `margin-bottom: ${separatorSpacingValue}px;`}
                        }
                    `;
            break;
          case "line-gradient":
            separatorCSS = `
                        .${id}::before {
                            content: '';
                            position: absolute;
                            ${position}
                            ${alignment}
                            width: ${separatorWidthValue}px;
                            height: ${separatorHeightValue}px;
                            background: linear-gradient(to right, ${separatorColor}, ${separatorSecondaryColor || "#ffffff"}, ${separatorColor});
							${getDimensionCSS11(separatorBorderRadius, "border-radius", activeDevice)}
                            ${separatorPosition === "top" ? `margin-top: ${separatorSpacingValue}px;` : `margin-bottom: ${separatorSpacingValue}px;`}
                        }
                    `;
            break;
          case "line-double":
            separatorCSS = `
                        .${id}::before {
                            content: '';
                            position: absolute;
                            ${position}
                            ${alignment}
                            width: ${separatorWidthValue}px;
                            height: ${separatorHeightValue}px;
                            background-color: ${separatorColor};
							${getDimensionCSS11(separatorBorderRadius, "border-radius", activeDevice)}
                            ${separatorPosition === "top" ? `margin-top: ${separatorSpacingValue}px;` : `margin-bottom: ${separatorSpacingValue}px;`}
                        }
                        
                        .${id}::after {
                            content: '';
                            position: absolute;
                            ${position}
                            ${alignment}
                            width: ${separatorWidthValue}px;
                            height: ${separatorHeightValue}px;
                            background-color: ${separatorSecondaryColor || separatorColor};
							${getDimensionCSS11(separatorBorderRadius, "border-radius", activeDevice)}
                            ${separatorPosition === "top" ? `margin-top: ${separatorSpacingValue + separatorHeightValue + 3}px;` : `margin-bottom: ${separatorSpacingValue + separatorHeightValue + 3}px;`}
                        }
                    `;
            break;
          case "line-dashed":
            separatorCSS = `
                        .${id}::before {
                            content: '';
                            position: absolute;
                            ${position}
                            ${alignment}
                            width: ${separatorWidthValue}px;
                            height: ${separatorHeightValue}px;
                            background-image: repeating-linear-gradient(
                                to right, 
                                ${separatorColor}, 
                                ${separatorColor} 8px, 
                                transparent 8px, 
                                transparent 12px
                            );
							${getDimensionCSS11(separatorBorderRadius, "border-radius", activeDevice)}
                            ${separatorPosition === "top" ? `margin-top: ${separatorSpacingValue}px;` : `margin-bottom: ${separatorSpacingValue}px;`}
                        }
                    `;
            break;
          case "line-dotted":
            separatorCSS = `
                        .${id}::before {
                            content: '';
                            position: absolute;
                            ${position}
                            ${alignment}
                            width: ${separatorWidthValue}px;
                            height: ${separatorHeightValue}px;
                            background-image: repeating-linear-gradient(
                                to right, 
                                ${separatorColor}, 
                                ${separatorColor} 3px, 
                                transparent 3px, 
                                transparent 6px
                            );
							${getDimensionCSS11(separatorBorderRadius, "border-radius", activeDevice)}
                            ${separatorPosition === "top" ? `margin-top: ${separatorSpacingValue}px;` : `margin-bottom: ${separatorSpacingValue}px;`}
                        }
                    `;
            break;
          case "wave":
            separatorCSS = `
                        .${id}::before {
                            content: '';
                            position: absolute;
                            ${position}
                            ${alignment}
                            width: ${separatorWidthValue}px;
                            height: ${separatorHeightValue * 4}px;
                            background-image: repeating-linear-gradient(
                                45deg, 
                                ${separatorColor}, 
                                ${separatorColor} 5px, 
                                transparent 5px, 
                                transparent 15px
                            );
                            mask-image: linear-gradient(
                                to bottom, 
                                transparent 35%, 
                                black 35%, 
                                black 65%, 
                                transparent 65%
                            );
                            -webkit-mask-image: linear-gradient(
                                to bottom, 
                                transparent 35%, 
                                black 35%, 
                                black 65%, 
                                transparent 65%
                            );
                            ${separatorPosition === "top" ? `margin-top: ${separatorSpacingValue}px;` : `margin-bottom: ${separatorSpacingValue}px;`}
                        }
                    `;
            break;
          case "dots":
            separatorCSS = `
                        .${id}::before {
                            content: '';
                            position: absolute;
                            ${position}
                            ${alignment}
                            width: ${separatorWidthValue}px;
                            height: ${separatorHeightValue * 3}px;
                            background-image: radial-gradient(
                                circle, 
                                ${separatorColor} 25%, 
                                transparent 25%
                            );
                            background-size: ${separatorHeightValue * 3}px ${separatorHeightValue * 3}px;
                            ${separatorPosition === "top" ? `margin-top: ${separatorSpacingValue}px;` : `margin-bottom: ${separatorSpacingValue}px;`}
                        }
                    `;
            break;
          case "glow":
            separatorCSS = `
                        .${id}::before {
                            content: '';
                            position: absolute;
                            ${position}
                            ${alignment}
                            width: ${separatorWidthValue}px;
                            height: ${separatorHeightValue}px;
                            background-color: ${separatorColor};
                            box-shadow: 0 0 ${separatorHeightValue * 3}px ${separatorHeightValue}px ${separatorColor};
							${getDimensionCSS11(separatorBorderRadius, "border-radius", activeDevice)}
                            ${separatorPosition === "top" ? `margin-top: ${separatorSpacingValue}px;` : `margin-bottom: ${separatorSpacingValue}px;`}
                        }
                    `;
            break;
          case "faded":
            separatorCSS = `
                        .${id}::before {
                            content: '';
                            position: absolute;
                            ${position}
                            ${alignment}
                            width: ${separatorWidthValue}px;
                            height: ${separatorHeightValue}px;
                            background: linear-gradient(to right, transparent, ${separatorColor}, transparent);
							${getDimensionCSS11(separatorBorderRadius, "border-radius", activeDevice)}
                            ${separatorPosition === "top" ? `margin-top: ${separatorSpacingValue}px;` : `margin-bottom: ${separatorSpacingValue}px;`}
                        }
                    `;
            break;
          default:
            separatorCSS = `
                        .${id}::before {
                            content: '';
                            position: absolute;
                            ${position}
                            ${alignment}
                            width: ${separatorWidthValue}px;
                            height: ${separatorHeightValue}px;
                            background-color: ${separatorColor};
							${getDimensionCSS11(separatorBorderRadius, "border-radius", activeDevice)}
                            ${separatorPosition === "top" ? `margin-top: ${separatorSpacingValue}px;` : `margin-bottom: ${separatorSpacingValue}px;`}
                        }
                    `;
        }
      }
      let highlightCSS = "";
      if (highlightText && highlightText.trim() !== "") {
        if (highlightType === "background") {
          highlightCSS = `
                    .${id} .digiblocks-highlight {
                        background-color: ${highlightColor};
                        padding: 0 5px;
                        border-radius: 3px;
                    }
                `;
        } else if (highlightType === "color") {
          highlightCSS = `
                    .${id} .digiblocks-highlight {
                        color: ${highlightColor};
                    }
                `;
        } else if (highlightType === "underline") {
          highlightCSS = `
                    .${id} .digiblocks-highlight {
                        text-decoration: underline;
                        text-decoration-color: ${highlightColor};
                        text-decoration-thickness: 2px;
                        text-underline-offset: 2px;
                    }
                `;
        }
      }
      let linkCSS = "";
      if (linkEnabled) {
        linkCSS = `
                .${id} {
                    cursor: pointer;
                    text-decoration: none;
                    transition: color 0.3s ease, background-color 0.3s ease;
                }
                
                .${id}:hover {
                    ${textHoverColor ? `color: ${textHoverColor};` : ""}
                    ${backgroundHoverColor ? `background-color: ${backgroundHoverColor};` : ""}
                }
            `;
      }
      return `
            /* Main heading styles */
            .${id} {
                display: flex;
                flex-direction: column;
                position: relative;
                text-align: ${align[activeDevice]};
                ${backgroundColor ? `background-color: ${backgroundColor};` : ""}
                ${paddingCSS}
                ${marginCSS}
                transition: color 0.3s ease, background-color 0.3s ease;
            }

            .${id} .digiblocks-heading-text {
                ${typographyCSS}
                ${textShadowCSS}
                color: ${textColor || "inherit"};
                margin: 0;
            }
            
            /* Hover effects */
            .${id}:hover {
                ${backgroundHoverColor ? `background-color: ${backgroundHoverColor};` : ""}
            }

            .${id}:hover .digiblocks-heading-text {
                ${textHoverColor ? `color: ${textHoverColor};` : ""}
            }
            
            /* Animation keyframes */
            ${animationCSS}
            
            /* Separator styles */
            ${separatorCSS}
            
            /* Highlight styles */
            ${highlightCSS}
            
            /* Link styles */
            ${linkCSS}

			/* Visibility Controls */
			${visibility.desktop ? `
				@media (min-width: 992px) {
					.${id} {
						opacity: 0.5 !important;
					}
				}
			` : ""}

			${visibility.tablet ? `
				@media (min-width: 768px) and (max-width: 991px) {
					.${id} {
						opacity: 0.5 !important;
					}
				}
			` : ""}

			${visibility.mobile ? `
				@media (max-width: 767px) {
					.${id} {
						opacity: 0.5 !important;
					}
				}
			` : ""}
        `;
    };
    const renderHeadingWithHighlight = () => {
      if (!highlightText || highlightText.trim() === "") {
        return content;
      }
      const escapeRegExp = (string) => {
        return string.replace(/[.*+?^${}()|[\]\\]/g, "\\$&");
      };
      const parts = content.split(new RegExp(`(${escapeRegExp(highlightText)})`, "g"));
      return parts.map((part, index) => {
        if (part === highlightText) {
          return `<span class="digiblocks-highlight">${part}</span>`;
        }
        return part;
      }).join("");
    };
    const SeparatorStylePreview2 = ({ style, color, secondaryColor, isSelected, onClick }) => {
      const previewStyles = {
        container: {
          display: "inline-block",
          width: "60px",
          height: "40px",
          margin: "5px",
          padding: "5px",
          border: `1px solid ${isSelected ? "#007cba" : "#ddd"}`,
          backgroundColor: isSelected ? "rgba(0,124,186,0.1)" : "white",
          borderRadius: "4px",
          cursor: "pointer",
          position: "relative"
        },
        preview: {
          position: "absolute",
          bottom: "5px",
          left: "5px",
          right: "5px",
          height: "5px",
          display: "flex",
          justifyContent: "center",
          alignItems: "center"
        }
      };
      let previewContent = null;
      switch (style) {
        case "line-solid":
          previewContent = /* @__PURE__ */ wp.element.createElement("div", { style: { width: "100%", height: "3px", backgroundColor: color, borderRadius: "1px" } });
          break;
        case "line-gradient":
          previewContent = /* @__PURE__ */ wp.element.createElement("div", { style: { width: "100%", height: "3px", background: `linear-gradient(to right, ${color}, ${secondaryColor || "#ffffff"}, ${color})`, borderRadius: "1px" } });
          break;
        case "line-double":
          previewContent = /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement("div", { style: { width: "100%", height: "2px", backgroundColor: color, borderRadius: "1px", marginBottom: "2px" } }), /* @__PURE__ */ wp.element.createElement("div", { style: { width: "100%", height: "2px", backgroundColor: secondaryColor || color, borderRadius: "1px" } }));
          break;
        case "line-dashed":
          previewContent = /* @__PURE__ */ wp.element.createElement("div", { style: {
            width: "100%",
            height: "3px",
            backgroundImage: `repeating-linear-gradient(to right, ${color}, ${color} 6px, transparent 6px, transparent 10px)`,
            borderRadius: "1px"
          } });
          break;
        case "line-dotted":
          previewContent = /* @__PURE__ */ wp.element.createElement("div", { style: {
            width: "100%",
            height: "3px",
            backgroundImage: `repeating-linear-gradient(to right, ${color}, ${color} 2px, transparent 2px, transparent 4px)`,
            borderRadius: "1px"
          } });
          break;
        case "wave":
          previewContent = /* @__PURE__ */ wp.element.createElement("div", { style: {
            width: "100%",
            height: "3px",
            backgroundImage: `repeating-linear-gradient(45deg, ${color}, ${color} 2px, transparent 2px, transparent 6px)`,
            borderRadius: "1px"
          } });
          break;
        case "dots":
          previewContent = /* @__PURE__ */ wp.element.createElement("div", { style: {
            width: "100%",
            height: "5px",
            display: "flex",
            justifyContent: "space-between"
          } }, [...Array(5)].map((_, i) => /* @__PURE__ */ wp.element.createElement("div", { key: i, style: {
            width: "4px",
            height: "4px",
            borderRadius: "50%",
            backgroundColor: color
          } })));
          break;
        case "glow":
          previewContent = /* @__PURE__ */ wp.element.createElement("div", { style: {
            width: "50%",
            height: "3px",
            backgroundColor: color,
            boxShadow: `0 0 5px 1px ${color}`,
            borderRadius: "1px"
          } });
          break;
        case "faded":
          previewContent = /* @__PURE__ */ wp.element.createElement("div", { style: {
            width: "100%",
            height: "3px",
            background: `linear-gradient(to right, transparent, ${color}, transparent)`,
            borderRadius: "1px"
          } });
          break;
        default:
          previewContent = /* @__PURE__ */ wp.element.createElement("div", { style: { width: "100%", height: "3px", backgroundColor: color, borderRadius: "1px" } });
      }
      return /* @__PURE__ */ wp.element.createElement("div", { style: previewStyles.container, onClick }, /* @__PURE__ */ wp.element.createElement("div", { style: { textAlign: "center", fontSize: "8px", marginBottom: "5px" } }, style.replace("line-", "").charAt(0).toUpperCase() + style.replace("line-", "").slice(1)), /* @__PURE__ */ wp.element.createElement("div", { style: previewStyles.preview }, previewContent));
    };
    const renderSeparatorStyleGrid = () => {
      const separatorStyleOptions = [
        { label: __15("Solid Line", "digiblocks"), value: "line-solid" },
        { label: __15("Gradient Line", "digiblocks"), value: "line-gradient" },
        { label: __15("Double Line", "digiblocks"), value: "line-double" },
        { label: __15("Dashed Line", "digiblocks"), value: "line-dashed" },
        { label: __15("Dotted Line", "digiblocks"), value: "line-dotted" },
        { label: __15("Wave", "digiblocks"), value: "wave" },
        { label: __15("Dot Pattern", "digiblocks"), value: "dots" },
        { label: __15("Glow", "digiblocks"), value: "glow" },
        { label: __15("Faded Edges", "digiblocks"), value: "faded" }
      ];
      const containerStyle = {
        display: "flex",
        flexWrap: "wrap",
        gap: "4px",
        justifyContent: "center",
        margin: "0 -5px",
        maxHeight: "200px",
        overflow: "auto",
        padding: "4px 0",
        border: "1px solid #e0e0e0",
        borderRadius: "4px",
        backgroundColor: "#f9f9f9"
      };
      return /* @__PURE__ */ wp.element.createElement("div", { style: containerStyle }, separatorStyleOptions.map((option) => /* @__PURE__ */ wp.element.createElement(
        SeparatorStylePreview2,
        {
          key: option.value,
          style: option.value,
          color: separatorColor,
          secondaryColor: separatorSecondaryColor,
          isSelected: separatorStyle === option.value,
          onClick: () => setAttributes({ separatorStyle: option.value })
        }
      )));
    };
    const renderTabContent = () => {
      switch (activeTab) {
        case "options":
          return /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(
            TabPanelBody14,
            {
              tab: "options",
              name: "heading-settings",
              title: __15("Heading Settings", "digiblocks"),
              initialOpen: true
            },
            /* @__PURE__ */ wp.element.createElement(
              SelectControl14,
              {
                label: __15("Heading Tags", "digiblocks"),
                value: headingTag,
                options: headingTagOptions,
                onChange: (value) => setAttributes({ headingTag: value }),
                __next40pxDefaultSize: true,
                __nextHasNoMarginBottom: true
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              ResponsiveButtonGroup2,
              {
                label: __15("Alignment", "digiblocks"),
                value: align,
                onChange: (value) => setAttributes({ align: value }),
                options: [
                  { label: __15("Left", "digiblocks"), value: "left" },
                  { label: __15("Center", "digiblocks"), value: "center" },
                  { label: __15("Right", "digiblocks"), value: "right" }
                ]
              }
            ),
            !linkEnabled ? /* @__PURE__ */ wp.element.createElement("div", { className: "components-base-control" }, /* @__PURE__ */ wp.element.createElement("div", { className: "components-base-control__field" }, /* @__PURE__ */ wp.element.createElement(
              "button",
              {
                className: "components-button width-full is-primary",
                onClick: () => setAttributes({ linkEnabled: true })
              },
              __15("Add Link", "digiblocks")
            ))) : /* @__PURE__ */ wp.element.createElement(
              LinkControl2,
              {
                key: "link-control",
                value: {
                  url: linkUrl,
                  opensInNewTab: linkOpenInNewTab,
                  rel: linkRel
                },
                settings: [
                  {
                    id: "opensInNewTab",
                    title: __15("Open in new tab", "digiblocks")
                  },
                  {
                    id: "rel",
                    title: __15("Add noopener noreferrer", "digiblocks")
                  }
                ],
                onChange: (newLink) => {
                  setAttributes({
                    linkUrl: newLink.url,
                    linkOpenInNewTab: newLink.opensInNewTab,
                    linkRel: newLink.rel
                  });
                },
                onRemove: () => {
                  setAttributes({
                    linkEnabled: false,
                    linkUrl: "",
                    linkOpenInNewTab: false,
                    linkRel: ""
                  });
                },
                suggestionsQuery: {
                  type: "post",
                  subtype: "any"
                },
                forceIsEditingLink: !linkUrl
              }
            )
          ), /* @__PURE__ */ wp.element.createElement(
            TabPanelBody14,
            {
              tab: "options",
              name: "separator",
              title: __15("Separator", "digiblocks"),
              initialOpen: false
            },
            /* @__PURE__ */ wp.element.createElement(
              ToggleControl13,
              {
                label: __15("Display Separator", "digiblocks"),
                checked: displaySeparator,
                onChange: (value) => setAttributes({ displaySeparator: value }),
                __nextHasNoMarginBottom: true
              }
            ),
            displaySeparator && /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(
              BaseControl4,
              {
                label: __15("Separator Style", "digiblocks"),
                className: "digiblocks-separator-style-selector",
                __nextHasNoMarginBottom: true
              },
              renderSeparatorStyleGrid()
            ), /* @__PURE__ */ wp.element.createElement(
              ToggleGroupControl12,
              {
                label: __15("Position", "digiblocks"),
                value: separatorPosition,
                onChange: (value) => setAttributes({ separatorPosition: value }),
                isBlock: true,
                __next40pxDefaultSize: true,
                __nextHasNoMarginBottom: true
              },
              /* @__PURE__ */ wp.element.createElement(
                ToggleGroupControlOption12,
                {
                  value: "bottom",
                  label: __15("Bottom", "digiblocks")
                }
              ),
              /* @__PURE__ */ wp.element.createElement(
                ToggleGroupControlOption12,
                {
                  value: "top",
                  label: __15("Top", "digiblocks")
                }
              )
            ), /* @__PURE__ */ wp.element.createElement(
              PanelColorSettings12,
              {
                title: __15("Separator Colors", "digiblocks"),
                initialOpen: true,
                enableAlpha: true,
                colorSettings: [
                  {
                    value: separatorColor,
                    onChange: (value) => setAttributes({ separatorColor: value }),
                    label: __15("Primary Color", "digiblocks")
                  },
                  ...separatorStyle === "line-gradient" || separatorStyle === "line-double" ? [{
                    value: separatorSecondaryColor,
                    onChange: (value) => setAttributes({ separatorSecondaryColor: value }),
                    label: __15("Secondary Color", "digiblocks")
                  }] : []
                ]
              }
            ), /* @__PURE__ */ wp.element.createElement(
              ResponsiveControl13,
              {
                label: __15("Width", "digiblocks")
              },
              /* @__PURE__ */ wp.element.createElement(
                RangeControl12,
                {
                  value: separatorWidth[localActiveDevice],
                  onChange: (value) => setAttributes({
                    separatorWidth: {
                      ...separatorWidth,
                      [localActiveDevice]: value
                    }
                  }),
                  min: 10,
                  max: 300,
                  step: 1,
                  __nextHasNoMarginBottom: true,
                  __next40pxDefaultSize: true
                }
              )
            ), /* @__PURE__ */ wp.element.createElement(
              ResponsiveControl13,
              {
                label: __15("Height", "digiblocks")
              },
              /* @__PURE__ */ wp.element.createElement(
                RangeControl12,
                {
                  value: separatorHeight[localActiveDevice],
                  onChange: (value) => setAttributes({
                    separatorHeight: {
                      ...separatorHeight,
                      [localActiveDevice]: value
                    }
                  }),
                  min: 1,
                  max: 20,
                  step: 1,
                  __nextHasNoMarginBottom: true,
                  __next40pxDefaultSize: true
                }
              )
            ), /* @__PURE__ */ wp.element.createElement(
              ResponsiveControl13,
              {
                label: __15("Spacing", "digiblocks")
              },
              /* @__PURE__ */ wp.element.createElement(
                RangeControl12,
                {
                  value: separatorSpacing[localActiveDevice],
                  onChange: (value) => setAttributes({
                    separatorSpacing: {
                      ...separatorSpacing,
                      [localActiveDevice]: value
                    }
                  }),
                  min: 0,
                  max: 50,
                  step: 1,
                  __nextHasNoMarginBottom: true,
                  __next40pxDefaultSize: true
                }
              )
            ), ["line-solid", "line-gradient", "line-double", "line-dashed", "line-dotted", "glow", "faded"].includes(separatorStyle) && /* @__PURE__ */ wp.element.createElement(
              ResponsiveControl13,
              {
                label: __15("Border Radius", "digiblocks")
              },
              /* @__PURE__ */ wp.element.createElement(
                DimensionControl12,
                {
                  values: separatorBorderRadius && separatorBorderRadius[localActiveDevice] ? separatorBorderRadius[localActiveDevice] : {
                    top: 0,
                    right: 0,
                    bottom: 0,
                    left: 0,
                    unit: "px"
                  },
                  onChange: (value) => setAttributes({
                    separatorBorderRadius: {
                      ...separatorBorderRadius,
                      [localActiveDevice]: value
                    }
                  }),
                  units: [
                    { label: "px", value: "px" },
                    { label: "%", value: "%" }
                  ]
                }
              )
            ))
          ), /* @__PURE__ */ wp.element.createElement(
            TabPanelBody14,
            {
              tab: "options",
              name: "text-highlight",
              title: __15("Text Highlight", "digiblocks"),
              initialOpen: false
            },
            /* @__PURE__ */ wp.element.createElement("div", { className: "components-base-control" }, /* @__PURE__ */ wp.element.createElement("div", { className: "components-base-control__field" }, /* @__PURE__ */ wp.element.createElement("label", { className: "components-base-control__label", htmlFor: "highlight-text" }, __15("Text to Highlight", "digiblocks")), /* @__PURE__ */ wp.element.createElement(
              "input",
              {
                className: "components-text-control__input",
                type: "text",
                id: "highlight-text",
                value: highlightText || "",
                onChange: (e) => setAttributes({ highlightText: e.target.value }),
                placeholder: __15("Enter text to highlight", "digiblocks")
              }
            )), /* @__PURE__ */ wp.element.createElement("p", { className: "components-base-control__help" }, __15("The text you enter here will be highlighted in your heading.", "digiblocks"))),
            highlightText && highlightText.trim() !== "" && /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(
              ToggleGroupControl12,
              {
                label: __15("Highlight Type", "digiblocks"),
                value: highlightType,
                onChange: (value) => setAttributes({ highlightType: value }),
                isBlock: true,
                __next40pxDefaultSize: true,
                __nextHasNoMarginBottom: true
              },
              /* @__PURE__ */ wp.element.createElement(
                ToggleGroupControlOption12,
                {
                  value: "background",
                  label: __15("Background", "digiblocks")
                }
              ),
              /* @__PURE__ */ wp.element.createElement(
                ToggleGroupControlOption12,
                {
                  value: "color",
                  label: __15("Text", "digiblocks")
                }
              ),
              /* @__PURE__ */ wp.element.createElement(
                ToggleGroupControlOption12,
                {
                  value: "underline",
                  label: __15("Underline", "digiblocks")
                }
              )
            ), /* @__PURE__ */ wp.element.createElement(
              PanelColorSettings12,
              {
                title: __15("Highlight Color", "digiblocks"),
                initialOpen: true,
                colorSettings: [
                  {
                    value: highlightColor,
                    onChange: (value) => setAttributes({ highlightColor: value }),
                    label: __15("Color", "digiblocks")
                  }
                ]
              }
            ))
          ));
        case "style":
          return /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(
            TabPanelBody14,
            {
              tab: "style",
              name: "colors",
              title: __15("Colors", "digiblocks"),
              initialOpen: true
            },
            /* @__PURE__ */ wp.element.createElement(
              TabPanel8,
              {
                className: "digiblocks-control-tabs",
                activeClass: "active-tab",
                tabs: stateTabList
              },
              (tab) => {
                if (tab.name === "normal") {
                  return /* @__PURE__ */ wp.element.createElement(
                    PanelColorSettings12,
                    {
                      title: __15("Color Settings", "digiblocks"),
                      initialOpen: true,
                      enableAlpha: true,
                      colorSettings: [
                        {
                          value: textColor,
                          onChange: (value) => setAttributes({ textColor: value }),
                          label: __15("Text Color", "digiblocks")
                        },
                        {
                          value: backgroundColor,
                          onChange: (value) => setAttributes({ backgroundColor: value }),
                          label: __15("Background Color", "digiblocks")
                        }
                      ]
                    }
                  );
                } else {
                  return /* @__PURE__ */ wp.element.createElement(
                    PanelColorSettings12,
                    {
                      title: __15("Hover Color Settings", "digiblocks"),
                      initialOpen: true,
                      enableAlpha: true,
                      colorSettings: [
                        {
                          value: textHoverColor,
                          onChange: (value) => setAttributes({ textHoverColor: value }),
                          label: __15("Text Hover Color", "digiblocks")
                        },
                        {
                          value: backgroundHoverColor,
                          onChange: (value) => setAttributes({ backgroundHoverColor: value }),
                          label: __15("Background Hover Color", "digiblocks")
                        }
                      ]
                    }
                  );
                }
              }
            )
          ), /* @__PURE__ */ wp.element.createElement(
            TabPanelBody14,
            {
              tab: "style",
              name: "typo",
              title: __15("Typography", "digiblocks"),
              initialOpen: false
            },
            /* @__PURE__ */ wp.element.createElement(
              TypographyControl9,
              {
                label: __15("Typography Settings", "digiblocks"),
                value: typography,
                onChange: (value) => setAttributes({ typography: value }),
                defaults: {
                  fontSize: { desktop: 32, tablet: 28, mobile: 24 },
                  fontSizeUnit: "px",
                  lineHeight: { desktop: 1.2, tablet: 1.2, mobile: 1.2 },
                  lineHeightUnit: "em"
                }
              }
            )
          ), /* @__PURE__ */ wp.element.createElement(
            TabPanelBody14,
            {
              tab: "style",
              name: "text-shadow",
              title: __15("Text Shadow", "digiblocks"),
              initialOpen: false
            },
            /* @__PURE__ */ wp.element.createElement(
              ToggleControl13,
              {
                label: __15("Enable Text Shadow", "digiblocks"),
                checked: shadowEnabled,
                onChange: (value) => setAttributes({ shadowEnabled: value }),
                __nextHasNoMarginBottom: true
              }
            ),
            shadowEnabled && /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(
              PanelColorSettings12,
              {
                title: __15("Shadow Color", "digiblocks"),
                initialOpen: true,
                enableAlpha: true,
                colorSettings: [
                  {
                    value: textShadow.color,
                    onChange: (value) => setAttributes({
                      textShadow: {
                        ...textShadow,
                        color: value
                      }
                    }),
                    label: __15("Color", "digiblocks")
                  }
                ]
              }
            ), /* @__PURE__ */ wp.element.createElement(
              RangeControl12,
              {
                label: __15("Horizontal Offset", "digiblocks"),
                value: textShadow.horizontal,
                onChange: (value) => setAttributes({
                  textShadow: {
                    ...textShadow,
                    horizontal: value
                  }
                }),
                min: -20,
                max: 20,
                step: 1,
                __nextHasNoMarginBottom: true,
                __next40pxDefaultSize: true
              }
            ), /* @__PURE__ */ wp.element.createElement(
              RangeControl12,
              {
                label: __15("Vertical Offset", "digiblocks"),
                value: textShadow.vertical,
                onChange: (value) => setAttributes({
                  textShadow: {
                    ...textShadow,
                    vertical: value
                  }
                }),
                min: -20,
                max: 20,
                step: 1,
                __nextHasNoMarginBottom: true,
                __next40pxDefaultSize: true
              }
            ), /* @__PURE__ */ wp.element.createElement(
              RangeControl12,
              {
                label: __15("Blur Radius", "digiblocks"),
                value: textShadow.blur,
                onChange: (value) => setAttributes({
                  textShadow: {
                    ...textShadow,
                    blur: value
                  }
                }),
                min: 0,
                max: 20,
                step: 1,
                __nextHasNoMarginBottom: true,
                __next40pxDefaultSize: true
              }
            ))
          ), /* @__PURE__ */ wp.element.createElement(
            TabPanelBody14,
            {
              tab: "style",
              name: "spacing",
              title: __15("Spacing", "digiblocks"),
              initialOpen: false
            },
            /* @__PURE__ */ wp.element.createElement(
              ResponsiveControl13,
              {
                label: __15("Padding", "digiblocks")
              },
              /* @__PURE__ */ wp.element.createElement(
                DimensionControl12,
                {
                  values: padding[localActiveDevice],
                  onChange: (value) => setAttributes({
                    padding: {
                      ...padding,
                      [localActiveDevice]: value
                    }
                  })
                }
              )
            ),
            /* @__PURE__ */ wp.element.createElement(
              ResponsiveControl13,
              {
                label: __15("Margin", "digiblocks")
              },
              /* @__PURE__ */ wp.element.createElement(
                DimensionControl12,
                {
                  values: margin[localActiveDevice],
                  onChange: (value) => setAttributes({
                    margin: {
                      ...margin,
                      [localActiveDevice]: value
                    }
                  })
                }
              )
            )
          ));
        case "advanced":
          return /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(
            TabPanelBody14,
            {
              tab: "advanced",
              name: "animation",
              title: __15("Animation", "digiblocks"),
              initialOpen: true
            },
            /* @__PURE__ */ wp.element.createElement(
              SelectControl14,
              {
                label: __15("Animation Effect", "digiblocks"),
                value: animation,
                options: animationOptions,
                onChange: (value) => setAttributes({ animation: value }),
                __next40pxDefaultSize: true,
                __nextHasNoMarginBottom: true
              }
            ),
            animation && animation !== "none" && /* @__PURE__ */ wp.element.createElement("div", { style: { marginTop: "10px" } }, /* @__PURE__ */ wp.element.createElement(
              Button12,
              {
                variant: "secondary",
                isSecondary: true,
                onClick: handlePreviewClick,
                style: { width: "100%" }
              },
              __15("Preview Animation", "digiblocks")
            ))
          ), /* @__PURE__ */ wp.element.createElement(
            TabPanelBody14,
            {
              tab: "advanced",
              name: "visibility",
              title: __15("Visibility", "digiblocks"),
              initialOpen: false
            },
            /* @__PURE__ */ wp.element.createElement("div", { className: "components-base-control__help", style: {
              padding: "12px",
              backgroundColor: "#f0f6fc",
              border: "1px solid #c3ddfd",
              borderRadius: "4px",
              marginBottom: "16px"
            } }, /* @__PURE__ */ wp.element.createElement("strong", null, __15("Editor Note:", "digiblocks")), /* @__PURE__ */ wp.element.createElement("br", null), __15("Hidden elements appear with reduced opacity in the editor for easy editing. Visibility changes only take effect on the frontend.", "digiblocks")),
            /* @__PURE__ */ wp.element.createElement(
              ToggleControl13,
              {
                label: __15("Hide on Desktop", "digiblocks"),
                checked: visibility.desktop,
                onChange: (value) => setAttributes({
                  visibility: {
                    ...visibility,
                    desktop: value
                  }
                }),
                __nextHasNoMarginBottom: true
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              ToggleControl13,
              {
                label: __15("Hide on Tablet", "digiblocks"),
                checked: visibility.tablet,
                onChange: (value) => setAttributes({
                  visibility: {
                    ...visibility,
                    tablet: value
                  }
                }),
                __nextHasNoMarginBottom: true
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              ToggleControl13,
              {
                label: __15("Hide on Mobile", "digiblocks"),
                checked: visibility.mobile,
                onChange: (value) => setAttributes({
                  visibility: {
                    ...visibility,
                    mobile: value
                  }
                }),
                __nextHasNoMarginBottom: true
              }
            )
          ), /* @__PURE__ */ wp.element.createElement(
            TabPanelBody14,
            {
              tab: "advanced",
              name: "additional",
              title: __15("Additional", "digiblocks"),
              initialOpen: false
            },
            /* @__PURE__ */ wp.element.createElement("div", { className: "components-base-control html-anchor-control" }, /* @__PURE__ */ wp.element.createElement("div", { className: "components-base-control__field" }, /* @__PURE__ */ wp.element.createElement("label", { className: "components-base-control__label", htmlFor: "html-anchor" }, __15("HTML anchor", "digiblocks")), /* @__PURE__ */ wp.element.createElement(
              "input",
              {
                className: "components-text-control__input",
                type: "text",
                id: "html-anchor",
                value: anchor || "",
                onChange: (e) => setAttributes({ anchor: e.target.value }),
                "aria-describedby": "html-anchor-help",
                autoCapitalize: "none",
                autoComplete: "off"
              }
            )), /* @__PURE__ */ wp.element.createElement("p", { id: "html-anchor-help", className: "components-base-control__help" }, __15(`Enter a word or two \u2014 without spaces \u2014 to make a unique web address just for this block, called an "anchor". Then, you'll be able to link directly to this section of your page.`, "digiblocks"), " ", /* @__PURE__ */ wp.element.createElement(
              "a",
              {
                className: "components-external-link",
                href: "https://wordpress.org/documentation/article/page-jumps/",
                target: "_blank",
                rel: "external noreferrer noopener"
              },
              /* @__PURE__ */ wp.element.createElement("span", { className: "components-external-link__contents" }, __15("Learn more about anchors", "digiblocks")),
              /* @__PURE__ */ wp.element.createElement("span", { className: "components-external-link__icon", "aria-label": "(opens in a new tab)" }, "\u2197")
            ))),
            /* @__PURE__ */ wp.element.createElement("div", { className: "components-base-control" }, /* @__PURE__ */ wp.element.createElement("div", { className: "components-base-control__field" }, /* @__PURE__ */ wp.element.createElement("label", { className: "components-base-control__label", htmlFor: "additional-css-classes" }, __15("Additional CSS class(es)", "digiblocks")), /* @__PURE__ */ wp.element.createElement(
              "input",
              {
                className: "components-text-control__input",
                type: "text",
                id: "additional-css-classes",
                value: customClasses || "",
                onChange: (e) => setAttributes({ customClasses: e.target.value }),
                "aria-describedby": "additional-css-classes-help",
                autoComplete: "off"
              }
            )), /* @__PURE__ */ wp.element.createElement("p", { id: "additional-css-classes-help", className: "components-base-control__help" }, __15("Separate multiple classes with spaces.", "digiblocks")))
          ));
        default:
          return null;
      }
    };
    const blockProps = useBlockProps24({
      className: `digiblocks-heading ${id} ${customClasses || ""}`,
      id: anchor || null
      // Set the anchor as ID if provided
    });
    return /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(InspectorControls13, null, /* @__PURE__ */ wp.element.createElement(
      CustomTabPanel13,
      {
        tabs: tabList,
        activeTab,
        onSelect: setActiveTab
      },
      renderTabContent()
    )), /* @__PURE__ */ wp.element.createElement("style", { dangerouslySetInnerHTML: { __html: generateCSS() } }), /* @__PURE__ */ wp.element.createElement("div", { ...blockProps }, /* @__PURE__ */ wp.element.createElement(
      RichText9,
      {
        tagName: headingTag,
        className: "digiblocks-heading-text",
        value: content,
        onChange: (value) => setAttributes({ content: value }),
        placeholder: __15("Add Your Heading", "digiblocks"),
        allowedFormats: ["core/bold", "core/italic"]
      }
    )));
  };
  var edit_default13 = HeadingEdit;

  // blocks/heading/save.js
  var { useBlockProps: useBlockProps25, RichText: RichText10 } = window.wp.blockEditor;
  var HeadingSave = ({ attributes }) => {
    const {
      id,
      anchor,
      customClasses,
      content,
      headingTag,
      align,
      animation,
      highlightText,
      highlightType,
      displaySeparator,
      separatorStyle,
      linkEnabled,
      linkUrl,
      linkOpenInNewTab,
      linkRel
    } = attributes;
    const blockClasses = [
      "digiblocks-heading",
      id,
      `align-${align}`,
      animation !== "none" ? `animate-${animation}` : "",
      displaySeparator ? `has-separator separator-${separatorStyle}` : "",
      customClasses || ""
    ].filter(Boolean).join(" ");
    const commonProps = {
      className: blockClasses,
      id: anchor || null
    };
    const renderHeadingWithHighlight = () => {
      if (!highlightText || highlightText.trim() === "") {
        return content;
      }
      const escapeRegExp = (string) => {
        return string.replace(/[.*+?^${}()|[\]\\]/g, "\\$&");
      };
      const parts = content.split(new RegExp(`(${escapeRegExp(highlightText)})`, "g"));
      return parts.map((part, index) => {
        if (part === highlightText) {
          return `<span class="digiblocks-highlight">${part}</span>`;
        }
        return part;
      }).join("");
    };
    const TagName = headingTag;
    const processedContent = highlightText && highlightText.trim() !== "" ? /* @__PURE__ */ wp.element.createElement("span", { dangerouslySetInnerHTML: { __html: renderHeadingWithHighlight() } }) : /* @__PURE__ */ wp.element.createElement(RichText10.Content, { value: content });
    if (linkEnabled && linkUrl) {
      return /* @__PURE__ */ wp.element.createElement(
        "a",
        {
          href: linkUrl,
          target: linkOpenInNewTab ? "_blank" : "_self",
          rel: linkOpenInNewTab ? "noopener noreferrer" : void 0,
          ...commonProps
        },
        /* @__PURE__ */ wp.element.createElement(TagName, { className: "digiblocks-heading-text" }, processedContent)
      );
    }
    return /* @__PURE__ */ wp.element.createElement("div", { ...commonProps }, /* @__PURE__ */ wp.element.createElement(TagName, { className: "digiblocks-heading-text" }, processedContent));
  };
  var save_default13 = HeadingSave;

  // blocks/icon/edit.js
  var { __: __16 } = window.wp.i18n;
  var {
    useBlockProps: useBlockProps26,
    InspectorControls: InspectorControls14,
    PanelColorSettings: PanelColorSettings13,
    LinkControl: LinkControl3
  } = window.wp.blockEditor;
  var {
    ToggleControl: ToggleControl14,
    SelectControl: SelectControl15,
    RangeControl: RangeControl13,
    TabPanel: TabPanel9,
    Spinner: Spinner3,
    Button: Button13,
    __experimentalToggleGroupControl: ToggleGroupControl13,
    __experimentalToggleGroupControlOption: ToggleGroupControlOption13
  } = window.wp.components;
  var { useState: useState14, useEffect: useEffect14, useRef: useRef11 } = window.wp.element;
  var { useBlockId: useBlockId14, getDimensionCSS: getDimensionCSS12, animations: animations12, animationPreview: animationPreview12 } = digi.utils;
  var { tabIcons: tabIcons14 } = digi.icons;
  var { ResponsiveControl: ResponsiveControl14, ResponsiveButtonGroup: ResponsiveButtonGroup3, DimensionControl: DimensionControl13, BoxShadowControl: BoxShadowControl12, CustomTabPanel: CustomTabPanel14, TabPanelBody: TabPanelBody15 } = digi.components;
  var IconEdit = ({ attributes, setAttributes, clientId }) => {
    const {
      id,
      anchor,
      visibility,
      customClasses,
      iconSource,
      customSvg,
      iconValue,
      iconSize,
      iconColor,
      iconBackgroundColor,
      iconBorderStyle,
      iconBorderWidth,
      iconBorderRadius,
      iconBorderColor,
      iconPadding,
      iconMargin,
      iconHoverColor,
      iconHoverBackgroundColor,
      iconHoverBorderColor,
      backgroundColor,
      backgroundHoverColor,
      align,
      animation,
      boxShadow,
      boxShadowHover,
      borderStyle,
      borderWidth,
      borderRadius,
      borderColor,
      hoverEffect,
      linkEnabled,
      linkUrl,
      linkOpenInNewTab,
      linkRel,
      rotateIcon,
      flipHorizontal,
      flipVertical
    } = attributes;
    useBlockId14(id, clientId, setAttributes);
    const [localActiveDevice, setLocalActiveDevice] = useState14(window.digi.responsiveState.activeDevice);
    const [isAnimating, setIsAnimating] = useState14(false);
    useEffect14(() => {
      const unsubscribe = window.digi.responsiveState.subscribe((device) => {
        setLocalActiveDevice(device);
      });
      return unsubscribe;
    }, []);
    const [activeTab, setActiveTab] = useState14(() => {
      if (window.digi.uiState) {
        const savedTab = window.digi.uiState.getActiveTab(clientId);
        if (savedTab)
          return savedTab;
      }
      return "options";
    });
    useEffect14(() => {
      if (!iconMargin) {
        setAttributes({
          iconMargin: {
            desktop: { top: 0, right: 0, bottom: 0, left: 0, unit: "px" },
            tablet: { top: 0, right: 0, bottom: 0, left: 0, unit: "px" },
            mobile: { top: 0, right: 0, bottom: 0, left: 0, unit: "px" }
          }
        });
      }
    }, [iconMargin, setAttributes]);
    const [componentsLoaded, setComponentsLoaded] = useState14(false);
    useEffect14(() => {
      const checkComponents = () => {
        if (window.digi && window.digi.components && window.digi.components.FontAwesomeControl) {
          setComponentsLoaded(true);
          return true;
        }
        return false;
      };
      if (!checkComponents()) {
        const timeout = setTimeout(() => {
          if (checkComponents()) {
            clearTimeout(timeout);
          }
        }, 500);
        return () => clearTimeout(timeout);
      }
    }, []);
    const setIconValue = (newIcon) => {
      setAttributes({ iconValue: newIcon });
    };
    const previewTimeoutRef = useRef11(null);
    useEffect14(() => {
      if (animation && animation !== "none") {
        const timeoutId = setTimeout(() => {
          animationPreview12(id, animation, animations12, previewTimeoutRef);
        }, 100);
        return () => clearTimeout(timeoutId);
      }
    }, [animation]);
    const handlePreviewClick = () => {
      animationPreview12(id, animation, animations12, previewTimeoutRef);
    };
    const borderStyleOptions = [
      { label: __16("Default", "digiblocks"), value: "default" },
      { label: __16("None", "digiblocks"), value: "none" },
      { label: __16("Solid", "digiblocks"), value: "solid" },
      { label: __16("Dotted", "digiblocks"), value: "dotted" },
      { label: __16("Dashed", "digiblocks"), value: "dashed" },
      { label: __16("Double", "digiblocks"), value: "double" },
      { label: __16("Groove", "digiblocks"), value: "groove" },
      { label: __16("Inset", "digiblocks"), value: "inset" },
      { label: __16("Outset", "digiblocks"), value: "outset" },
      { label: __16("Ridge", "digiblocks"), value: "ridge" }
    ];
    const hoverEffectOptions = [
      { label: __16("None", "digiblocks"), value: "none" },
      { label: __16("Lift", "digiblocks"), value: "lift" },
      { label: __16("Scale", "digiblocks"), value: "scale" },
      { label: __16("Glow", "digiblocks"), value: "glow" },
      { label: __16("Spin", "digiblocks"), value: "spin" },
      { label: __16("Pulse", "digiblocks"), value: "pulse" },
      { label: __16("Shake", "digiblocks"), value: "shake" }
    ];
    const animationOptions = [
      { label: __16("None", "digiblocks"), value: "none" },
      ...Object.keys(animations12).map((animation2) => ({
        label: animation2.replace(/-/g, " ").replace(/\b\w/g, (l) => l.toUpperCase()),
        value: animation2
      }))
    ];
    const tabList = [
      {
        name: "options",
        title: __16("Options", "digiblocks"),
        icon: tabIcons14.optionsIcon
      },
      {
        name: "style",
        title: __16("Style", "digiblocks"),
        icon: tabIcons14.styleIcon
      },
      {
        name: "advanced",
        title: __16("Advanced", "digiblocks"),
        icon: tabIcons14.advancedIcon
      }
    ];
    const stateTabList = [
      {
        name: "normal",
        title: __16("Normal", "digiblocks"),
        className: "digiblocks-tab-1 normal"
      },
      {
        name: "hover",
        title: __16("Hover", "digiblocks"),
        className: "digiblocks-tab-2 hover"
      }
    ];
    const generateCSS = () => {
      const activeDevice = window.digi.responsiveState.activeDevice;
      let containerStyles = "";
      if (borderStyle && borderStyle !== "default" && borderStyle !== "none") {
        containerStyles += `
                border-style: ${borderStyle};
                border-color: ${borderColor || "#e0e0e0"};
				${getDimensionCSS12(borderWidth, "border-width", activeDevice)}
				${getDimensionCSS12(borderRadius, "border-radius", activeDevice)}
            `;
      }
      let boxShadowCSS = "";
      if (boxShadow && boxShadow.enable) {
        const inset = boxShadow.position === "inset" ? "inset " : "";
        boxShadowCSS = `box-shadow: ${inset}${boxShadow.horizontal}px ${boxShadow.vertical}px ${boxShadow.blur}px ${boxShadow.spread}px ${boxShadow.color};`;
      }
      let iconCSS = "";
      let iconHoverCSS = "";
      let iconTransformCSS = "";
      if (iconValue && iconValue.svg) {
        if (iconBackgroundColor) {
          iconCSS += `background-color: ${iconBackgroundColor};`;
        }
        if (iconBorderStyle && iconBorderStyle !== "default" && iconBorderStyle !== "none") {
          iconCSS += `
                    border-style: ${iconBorderStyle};
                    border-color: ${iconBorderColor || "#e0e0e0"};
					${getDimensionCSS12(iconBorderWidth, "border-width", activeDevice)}
					${getDimensionCSS12(iconBorderRadius, "border-radius", activeDevice)}
                `;
        }
        if (iconPadding && iconPadding[activeDevice]) {
          iconCSS += `${getDimensionCSS12(iconPadding, "padding", activeDevice)}`;
        }
        if (iconHoverColor) {
          iconHoverCSS += `fill: ${iconHoverColor} !important; color: ${iconHoverColor} !important;`;
        }
        if (iconHoverBackgroundColor) {
          iconHoverCSS += `background-color: ${iconHoverBackgroundColor};`;
        }
        if (iconHoverBorderColor) {
          iconHoverCSS += `border-color: ${iconHoverBorderColor};`;
        }
        const transformProps = [];
        if (rotateIcon) {
          transformProps.push(`rotate(${rotateIcon}deg)`);
        }
        if (flipHorizontal) {
          transformProps.push("scaleX(-1)");
        }
        if (flipVertical) {
          transformProps.push("scaleY(-1)");
        }
        if (transformProps.length > 0) {
          iconTransformCSS = `transform: ${transformProps.join(" ")};`;
        }
      }
      let hoverCSS = "";
      if (boxShadowHover && boxShadowHover.enable) {
        const insetHover = boxShadowHover.position === "inset" ? "inset " : "";
        hoverCSS += `box-shadow: ${insetHover}${boxShadowHover.horizontal}px ${boxShadowHover.vertical}px ${boxShadowHover.blur}px ${boxShadowHover.spread}px ${boxShadowHover.color};`;
      }
      if (hoverEffect === "lift") {
        hoverCSS += "transform: translateY(-10px);";
      } else if (hoverEffect === "scale") {
        hoverCSS += "transform: scale(1.05);";
      } else if (hoverEffect === "glow") {
        hoverCSS += "filter: brightness(1.1);";
      } else if (hoverEffect === "spin") {
        hoverCSS += "animation: digiblocks-icon-spin 2s linear infinite;";
      } else if (hoverEffect === "pulse") {
        hoverCSS += "animation: digiblocks-icon-pulse 1.5s ease-in-out infinite;";
      } else if (hoverEffect === "shake") {
        hoverCSS += "animation: digiblocks-icon-shake 0.5s ease-in-out infinite;";
      }
      let linkCSS = "";
      if (linkEnabled) {
        linkCSS = `
                cursor: pointer;
                text-decoration: none;
            `;
      }
      let marginCSS = "";
      if (iconMargin && iconMargin[activeDevice]) {
        marginCSS = `${getDimensionCSS12(iconMargin, "margin", activeDevice)}`;
      }
      return `
            /* Icon Block - ${id} */
            .${id} {
                display: flex;
				justify-content: ${align[activeDevice]};
                align-items: center;
                background-color: ${backgroundColor || "transparent"};
                ${boxShadowCSS}
                ${containerStyles}
                transition: all 0.3s ease;
                ${linkEnabled ? linkCSS : ""}
                ${marginCSS}
            }
            
            /* Hover effects */
            .${id}:hover {
                ${backgroundHoverColor ? `background-color: ${backgroundHoverColor};` : ""}
                ${hoverCSS}
            }
            
            /* Icon styles */
            .${id} .digiblocks-icon {
                display: inline-flex;
                align-items: center;
                justify-content: center;
                ${iconCSS}
                transition: all 0.3s ease;
            }
            
            .${id} .digiblocks-icon span {
                display: flex;
                ${iconTransformCSS}
            }
            
            .${id} .digiblocks-icon svg {
                width: ${iconSize[activeDevice]}px;
                height: auto;
                fill: ${iconColor || "inherit"};
                transition: all 0.3s ease;
            }
            
            /* Icon hover styles */
            .${id}:hover .digiblocks-icon {
                ${iconHoverCSS}
            }
            
            .${id}:hover .digiblocks-icon svg {
                ${iconHoverColor ? `fill: ${iconHoverColor};` : ""}
            }
            
            /* Hover effect animations */
            @keyframes digiblocks-icon-spin {
                from { transform: rotate(0deg); }
                to { transform: rotate(360deg); }
            }
            
            @keyframes digiblocks-icon-pulse {
                0% { transform: scale(1); }
                50% { transform: scale(1.1); }
                100% { transform: scale(1); }
            }
            
            @keyframes digiblocks-icon-shake {
                0% { transform: translateX(0); }
                25% { transform: translateX(-5px); }
                50% { transform: translateX(0); }
                75% { transform: translateX(5px); }
                100% { transform: translateX(0); }
            }

			/* Visibility Controls */
			${visibility.desktop ? `
				@media (min-width: 992px) {
					.${id} {
						opacity: 0.5 !important;
					}
				}
			` : ""}

			${visibility.tablet ? `
				@media (min-width: 768px) and (max-width: 991px) {
					.${id} {
						opacity: 0.5 !important;
					}
				}
			` : ""}

			${visibility.mobile ? `
				@media (max-width: 767px) {
					.${id} {
						opacity: 0.5 !important;
					}
				}
			` : ""}
        `;
    };
    const FontAwesomeControl6 = componentsLoaded ? window.digi.components.FontAwesomeControl : null;
    const renderIcon = () => {
      if (iconSource === "library" && iconValue && iconValue.svg && iconValue.svg.trim() !== "") {
        return /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-icon" }, /* @__PURE__ */ wp.element.createElement(
          "span",
          {
            dangerouslySetInnerHTML: {
              __html: iconValue.svg
            }
          }
        ));
      }
      if (iconSource === "custom" && customSvg && customSvg.trim() !== "") {
        return /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-icon" }, /* @__PURE__ */ wp.element.createElement(
          "span",
          {
            dangerouslySetInnerHTML: {
              __html: customSvg
            }
          }
        ));
      }
      return null;
    };
    const renderIconTabContent = (tabName) => {
      if (tabName === "normal") {
        return /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(
          PanelColorSettings13,
          {
            title: __16(
              "Icon Colors",
              "digiblocks"
            ),
            initialOpen: true,
            enableAlpha: true,
            colorSettings: [
              {
                value: iconColor,
                onChange: (value) => setAttributes({
                  iconColor: value
                }),
                label: __16(
                  "Icon Color",
                  "digiblocks"
                )
              },
              {
                value: iconBackgroundColor,
                onChange: (value) => setAttributes({
                  iconBackgroundColor: value
                }),
                label: __16(
                  "Background Color",
                  "digiblocks"
                )
              }
            ]
          }
        ), /* @__PURE__ */ wp.element.createElement(
          SelectControl15,
          {
            label: __16("Border Style", "digiblocks"),
            value: iconBorderStyle || "default",
            options: borderStyleOptions,
            onChange: (value) => {
              if (value !== "default" && value !== "none" && (iconBorderStyle === "default" || iconBorderStyle === "none" || !iconBorderStyle)) {
                if (!iconBorderWidth || Object.keys(iconBorderWidth).length === 0) {
                  setAttributes({
                    iconBorderWidth: {
                      desktop: { top: 1, right: 1, bottom: 1, left: 1, unit: "px" },
                      tablet: { top: 1, right: 1, bottom: 1, left: 1, unit: "px" },
                      mobile: { top: 1, right: 1, bottom: 1, left: 1, unit: "px" }
                    }
                  });
                }
              }
              setAttributes({
                iconBorderStyle: value
              });
            },
            __next40pxDefaultSize: true,
            __nextHasNoMarginBottom: true
          }
        ), iconBorderStyle && iconBorderStyle !== "default" && iconBorderStyle !== "none" && /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(
          PanelColorSettings13,
          {
            title: __16(
              "Border Color",
              "digiblocks"
            ),
            enableAlpha: true,
            colorSettings: [
              {
                value: iconBorderColor,
                onChange: (value) => setAttributes({
                  iconBorderColor: value
                }),
                label: __16(
                  "Border Color",
                  "digiblocks"
                )
              }
            ]
          }
        ), /* @__PURE__ */ wp.element.createElement(
          ResponsiveControl14,
          {
            label: __16("Border Width", "digiblocks")
          },
          /* @__PURE__ */ wp.element.createElement(
            DimensionControl13,
            {
              values: iconBorderWidth[localActiveDevice],
              onChange: (value) => setAttributes({
                iconBorderWidth: {
                  ...iconBorderWidth,
                  [localActiveDevice]: value
                }
              })
            }
          )
        ), /* @__PURE__ */ wp.element.createElement(
          ResponsiveControl14,
          {
            label: __16("Border Radius", "digiblocks")
          },
          /* @__PURE__ */ wp.element.createElement(
            DimensionControl13,
            {
              values: iconBorderRadius[localActiveDevice],
              onChange: (value) => setAttributes({
                iconBorderRadius: {
                  ...iconBorderRadius,
                  [localActiveDevice]: value
                }
              }),
              units: [
                { label: "px", value: "px" },
                { label: "%", value: "%" }
              ]
            }
          )
        )), /* @__PURE__ */ wp.element.createElement(
          ResponsiveControl14,
          {
            label: __16("Padding", "digiblocks")
          },
          /* @__PURE__ */ wp.element.createElement(
            DimensionControl13,
            {
              values: iconPadding[localActiveDevice],
              onChange: (value) => setAttributes({
                iconPadding: {
                  ...iconPadding,
                  [localActiveDevice]: value
                }
              })
            }
          )
        ), /* @__PURE__ */ wp.element.createElement(
          ResponsiveControl14,
          {
            label: __16("Margin", "digiblocks")
          },
          /* @__PURE__ */ wp.element.createElement(
            DimensionControl13,
            {
              values: iconMargin[localActiveDevice],
              onChange: (value) => setAttributes({
                iconMargin: {
                  ...iconMargin,
                  [localActiveDevice]: value
                }
              })
            }
          )
        ));
      } else if (tabName === "hover") {
        return /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(
          PanelColorSettings13,
          {
            title: __16(
              "Icon Hover Colors",
              "digiblocks"
            ),
            initialOpen: true,
            enableAlpha: true,
            colorSettings: [
              {
                value: iconHoverColor,
                onChange: (value) => setAttributes({
                  iconHoverColor: value
                }),
                label: __16(
                  "Icon Color",
                  "digiblocks"
                )
              },
              {
                value: iconHoverBackgroundColor,
                onChange: (value) => setAttributes({
                  iconHoverBackgroundColor: value
                }),
                label: __16(
                  "Background Color",
                  "digiblocks"
                )
              },
              {
                value: iconHoverBorderColor,
                onChange: (value) => setAttributes({
                  iconHoverBorderColor: value
                }),
                label: __16(
                  "Border Color",
                  "digiblocks"
                )
              }
            ]
          }
        ));
      }
      return null;
    };
    const renderContainerTabContent = (tabName) => {
      if (tabName === "normal") {
        return /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(
          PanelColorSettings13,
          {
            title: __16(
              "Container Colors",
              "digiblocks"
            ),
            initialOpen: true,
            enableAlpha: true,
            colorSettings: [
              {
                value: backgroundColor,
                onChange: (value) => setAttributes({
                  backgroundColor: value
                }),
                label: __16(
                  "Background Color",
                  "digiblocks"
                )
              }
            ]
          }
        ));
      } else if (tabName === "hover") {
        return /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(
          PanelColorSettings13,
          {
            title: __16(
              "Container Hover Colors",
              "digiblocks"
            ),
            initialOpen: true,
            enableAlpha: true,
            colorSettings: [
              {
                value: backgroundHoverColor,
                onChange: (value) => setAttributes({
                  backgroundHoverColor: value
                }),
                label: __16(
                  "Background Color",
                  "digiblocks"
                )
              }
            ]
          }
        ));
      }
      return null;
    };
    const renderTabContent = () => {
      switch (activeTab) {
        case "options":
          return /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement("div", { className: "components-panel__body is-opened" }, /* @__PURE__ */ wp.element.createElement("div", { style: { marginBottom: "2rem" } }, /* @__PURE__ */ wp.element.createElement(
            ToggleGroupControl13,
            {
              label: __16("Icon Source", "digiblocks"),
              value: iconSource || "library",
              onChange: (value) => setAttributes({ iconSource: value }),
              isBlock: true,
              __next40pxDefaultSize: true,
              __nextHasNoMarginBottom: true
            },
            /* @__PURE__ */ wp.element.createElement(
              ToggleGroupControlOption13,
              {
                value: "library",
                label: __16("Library", "digiblocks")
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              ToggleGroupControlOption13,
              {
                value: "custom",
                label: __16("Custom", "digiblocks")
              }
            )
          ), iconSource === "library" && /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, !componentsLoaded ? /* @__PURE__ */ wp.element.createElement("div", { style: { textAlign: "center", padding: "20px 0" } }, /* @__PURE__ */ wp.element.createElement(Spinner3, null), /* @__PURE__ */ wp.element.createElement("p", null, __16("Loading icon selector...", "digiblocks"))) : /* @__PURE__ */ wp.element.createElement(
            FontAwesomeControl6,
            {
              label: __16("Select Icon", "digiblocks"),
              value: iconValue,
              onChange: setIconValue
            }
          ), iconValue && componentsLoaded && /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement("div", { style: { marginTop: "15px", marginBottom: "15px", padding: "10px", background: "#f0f0f1", borderRadius: "3px" } }, /* @__PURE__ */ wp.element.createElement("p", { style: { margin: "0 0 5px 0" } }, /* @__PURE__ */ wp.element.createElement("strong", null, __16("Selected Icon:", "digiblocks")), " ", iconValue.name), /* @__PURE__ */ wp.element.createElement("p", { style: { margin: "0 0 5px 0" } }, /* @__PURE__ */ wp.element.createElement("strong", null, __16("Style:", "digiblocks")), " ", iconValue.style), iconValue.categories && iconValue.categories.length > 0 && /* @__PURE__ */ wp.element.createElement("p", { style: { margin: "0" } }, /* @__PURE__ */ wp.element.createElement("strong", null, __16("Categories:", "digiblocks")), " ", iconValue.categories.join(", "))))), iconSource === "custom" && /* @__PURE__ */ wp.element.createElement("div", { style: { marginTop: "15px" } }, /* @__PURE__ */ wp.element.createElement("div", { className: "components-base-control" }, /* @__PURE__ */ wp.element.createElement("label", { className: "components-base-control__label", htmlFor: "custom-svg-input" }, __16("Custom SVG Code", "digiblocks")), /* @__PURE__ */ wp.element.createElement(
            "textarea",
            {
              id: "custom-svg-input",
              className: "components-textarea-control__input",
              value: customSvg || "",
              onChange: (e) => {
                const newSvg = e.target.value;
                const newIconValue = {
                  id: "custom-svg",
                  name: "Custom SVG",
                  svg: newSvg,
                  style: "custom",
                  categories: ["custom"]
                };
                setAttributes({
                  customSvg: newSvg,
                  iconValue: newIconValue
                });
              },
              placeholder: __16("Paste your SVG code here...", "digiblocks"),
              rows: 10,
              style: { width: "100%", marginTop: "8px" }
            }
          ), /* @__PURE__ */ wp.element.createElement("p", { className: "components-base-control__help" }, __16("Paste your SVG code here. Make sure it only contains valid SVG markup. For security reasons, scripts and external references will be removed.", "digiblocks"))), customSvg && /* @__PURE__ */ wp.element.createElement("div", { style: { marginTop: "15px", marginBottom: "15px" } }, /* @__PURE__ */ wp.element.createElement("p", null, /* @__PURE__ */ wp.element.createElement("strong", null, __16("Preview:", "digiblocks"))), /* @__PURE__ */ wp.element.createElement("div", { style: { padding: "20px", background: "#f0f0f1", borderRadius: "3px", display: "flex", justifyContent: "center", alignItems: "center" } }, /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-custom-svg-preview", style: { width: "50px", height: "50px" }, dangerouslySetInnerHTML: { __html: customSvg } }))))), /* @__PURE__ */ wp.element.createElement(
            ResponsiveButtonGroup3,
            {
              label: __16("Alignment", "digiblocks"),
              value: align,
              onChange: (value) => setAttributes({ align: value }),
              options: [
                { label: __16("Left", "digiblocks"), value: "flex-start" },
                { label: __16("Center", "digiblocks"), value: "center" },
                { label: __16("Right", "digiblocks"), value: "flex-end" }
              ]
            }
          ), /* @__PURE__ */ wp.element.createElement("div", { className: "icon-transform-controls" }, /* @__PURE__ */ wp.element.createElement(
            RangeControl13,
            {
              label: __16("Rotate", "digiblocks"),
              value: rotateIcon || 0,
              onChange: (value) => setAttributes({ rotateIcon: value }),
              min: 0,
              max: 360,
              step: 1,
              __next40pxDefaultSize: true,
              __nextHasNoMarginBottom: true
            }
          ), /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-toggle-controls", style: { display: "flex", justifyContent: "space-between", marginBottom: "20px" } }, /* @__PURE__ */ wp.element.createElement(
            ToggleGroupControl13,
            {
              label: __16("Flip Horizontal", "digiblocks"),
              value: flipHorizontal ? "yes" : "no",
              onChange: (value) => setAttributes({ flipHorizontal: value === "yes" }),
              isBlock: true,
              __next40pxDefaultSize: true,
              __nextHasNoMarginBottom: true
            },
            /* @__PURE__ */ wp.element.createElement(
              ToggleGroupControlOption13,
              {
                value: "no",
                label: __16("Off", "digiblocks")
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              ToggleGroupControlOption13,
              {
                value: "yes",
                label: __16("On", "digiblocks")
              }
            )
          )), /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-toggle-controls", style: { display: "flex", justifyContent: "space-between", marginBottom: "20px" } }, /* @__PURE__ */ wp.element.createElement(
            ToggleGroupControl13,
            {
              label: __16("Flip Vertical", "digiblocks"),
              value: flipVertical ? "yes" : "no",
              onChange: (value) => setAttributes({ flipVertical: value === "yes" }),
              isBlock: true,
              __next40pxDefaultSize: true,
              __nextHasNoMarginBottom: true
            },
            /* @__PURE__ */ wp.element.createElement(
              ToggleGroupControlOption13,
              {
                value: "no",
                label: __16("Off", "digiblocks")
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              ToggleGroupControlOption13,
              {
                value: "yes",
                label: __16("On", "digiblocks")
              }
            )
          ))), !linkEnabled ? /* @__PURE__ */ wp.element.createElement("div", { className: "components-base-control" }, /* @__PURE__ */ wp.element.createElement("div", { className: "components-base-control__field" }, /* @__PURE__ */ wp.element.createElement(
            "button",
            {
              className: "components-button width-full is-primary",
              onClick: () => setAttributes({ linkEnabled: true })
            },
            __16("Add Link", "digiblocks")
          ))) : /* @__PURE__ */ wp.element.createElement(
            LinkControl3,
            {
              key: "link-control",
              value: {
                url: linkUrl,
                opensInNewTab: linkOpenInNewTab,
                rel: linkRel
              },
              settings: [
                {
                  id: "opensInNewTab",
                  title: __16("Open in new tab", "digiblocks")
                },
                {
                  id: "rel",
                  title: __16("Add noopener noreferrer", "digiblocks")
                }
              ],
              onChange: (newLink) => {
                setAttributes({
                  linkUrl: newLink.url,
                  linkOpenInNewTab: newLink.opensInNewTab,
                  linkRel: newLink.rel
                });
              },
              onRemove: () => {
                setAttributes({
                  linkEnabled: false,
                  linkUrl: "",
                  linkOpenInNewTab: false,
                  linkRel: ""
                });
              },
              suggestionsQuery: {
                type: "post",
                subtype: "any"
              },
              forceIsEditingLink: !linkUrl
            }
          )));
        case "style":
          return /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(
            TabPanelBody15,
            {
              tab: "style",
              name: "icon",
              title: __16("Icon", "digiblocks"),
              initialOpen: true
            },
            /* @__PURE__ */ wp.element.createElement(
              ResponsiveControl14,
              {
                label: __16(
                  "Icon Size",
                  "digiblocks"
                )
              },
              /* @__PURE__ */ wp.element.createElement(
                RangeControl13,
                {
                  value: iconSize[localActiveDevice],
                  onChange: (value) => setAttributes({
                    iconSize: {
                      ...iconSize,
                      [localActiveDevice]: value
                    }
                  }),
                  min: 8,
                  max: 500,
                  step: 1,
                  __next40pxDefaultSize: true,
                  __nextHasNoMarginBottom: true
                }
              )
            ),
            /* @__PURE__ */ wp.element.createElement(
              TabPanel9,
              {
                className: "digiblocks-control-tabs",
                activeClass: "active-tab",
                tabs: stateTabList
              },
              (tab) => renderIconTabContent(tab.name)
            )
          ), /* @__PURE__ */ wp.element.createElement(
            TabPanelBody15,
            {
              tab: "style",
              name: "container",
              title: __16("Container", "digiblocks"),
              initialOpen: false
            },
            /* @__PURE__ */ wp.element.createElement(
              TabPanel9,
              {
                className: "digiblocks-control-tabs",
                activeClass: "active-tab",
                tabs: stateTabList
              },
              (tab) => renderContainerTabContent(tab.name)
            ),
            /* @__PURE__ */ wp.element.createElement(
              SelectControl15,
              {
                label: __16("Border Style", "digiblocks"),
                value: borderStyle || "default",
                options: borderStyleOptions,
                onChange: (value) => {
                  if (value !== "default" && value !== "none" && (borderStyle === "default" || borderStyle === "none" || !borderStyle)) {
                    if (!borderWidth || Object.keys(borderWidth).length === 0) {
                      setAttributes({
                        borderWidth: {
                          desktop: { top: 1, right: 1, bottom: 1, left: 1, unit: "px" },
                          tablet: { top: 1, right: 1, bottom: 1, left: 1, unit: "px" },
                          mobile: { top: 1, right: 1, bottom: 1, left: 1, unit: "px" }
                        }
                      });
                    }
                    if (!borderRadius || Object.keys(borderRadius).length === 0) {
                      setAttributes({
                        borderRadius: {
                          desktop: { top: 8, right: 8, bottom: 8, left: 8, unit: "px" },
                          tablet: { top: 8, right: 8, bottom: 8, left: 8, unit: "px" },
                          mobile: { top: 8, right: 8, bottom: 8, left: 8, unit: "px" }
                        }
                      });
                    }
                  }
                  setAttributes({
                    borderStyle: value
                  });
                },
                __next40pxDefaultSize: true,
                __nextHasNoMarginBottom: true
              }
            ),
            borderStyle && borderStyle !== "default" && borderStyle !== "none" && /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(
              PanelColorSettings13,
              {
                title: __16(
                  "Border Color",
                  "digiblocks"
                ),
                enableAlpha: true,
                colorSettings: [
                  {
                    value: borderColor,
                    onChange: (value) => setAttributes({
                      borderColor: value
                    }),
                    label: __16(
                      "Border Color",
                      "digiblocks"
                    )
                  }
                ]
              }
            ), /* @__PURE__ */ wp.element.createElement(
              ResponsiveControl14,
              {
                label: __16("Border Width", "digiblocks")
              },
              /* @__PURE__ */ wp.element.createElement(
                DimensionControl13,
                {
                  values: borderWidth && borderWidth[localActiveDevice] ? borderWidth[localActiveDevice] : {
                    top: 1,
                    right: 1,
                    bottom: 1,
                    left: 1,
                    unit: "px"
                  },
                  onChange: (value) => setAttributes({
                    borderWidth: {
                      ...borderWidth,
                      [localActiveDevice]: value
                    }
                  })
                }
              )
            ), /* @__PURE__ */ wp.element.createElement(
              ResponsiveControl14,
              {
                label: __16("Border Radius", "digiblocks")
              },
              /* @__PURE__ */ wp.element.createElement(
                DimensionControl13,
                {
                  values: borderRadius && borderRadius[localActiveDevice] ? borderRadius[localActiveDevice] : {
                    top: 0,
                    right: 0,
                    bottom: 0,
                    left: 0,
                    unit: "px"
                  },
                  onChange: (value) => setAttributes({
                    borderRadius: {
                      ...borderRadius,
                      [localActiveDevice]: value
                    }
                  }),
                  units: [
                    { label: "px", value: "px" },
                    { label: "%", value: "%" }
                  ]
                }
              )
            )),
            /* @__PURE__ */ wp.element.createElement(
              SelectControl15,
              {
                label: __16(
                  "Hover Effect",
                  "digiblocks"
                ),
                value: hoverEffect,
                options: hoverEffectOptions,
                onChange: (value) => setAttributes({
                  hoverEffect: value
                }),
                __next40pxDefaultSize: true,
                __nextHasNoMarginBottom: true
              }
            )
          ), /* @__PURE__ */ wp.element.createElement(
            TabPanelBody15,
            {
              tab: "style",
              name: "shadow",
              title: __16("Box Shadow", "digiblocks"),
              initialOpen: false
            },
            /* @__PURE__ */ wp.element.createElement(
              BoxShadowControl12,
              {
                normalValue: boxShadow,
                hoverValue: boxShadowHover,
                onNormalChange: (value) => setAttributes({
                  boxShadow: value
                }),
                onHoverChange: (value) => setAttributes({
                  boxShadowHover: value
                })
              }
            )
          ));
        case "advanced":
          return /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(
            TabPanelBody15,
            {
              tab: "advanced",
              name: "animation",
              title: __16("Animation", "digiblocks"),
              initialOpen: true
            },
            /* @__PURE__ */ wp.element.createElement(
              SelectControl15,
              {
                label: __16(
                  "Animation Effect",
                  "digiblocks"
                ),
                value: animation,
                options: animationOptions,
                onChange: (value) => setAttributes({
                  animation: value
                }),
                __next40pxDefaultSize: true,
                __nextHasNoMarginBottom: true
              }
            ),
            animation && animation !== "none" && /* @__PURE__ */ wp.element.createElement("div", { style: { marginTop: "10px" } }, /* @__PURE__ */ wp.element.createElement(
              Button13,
              {
                variant: "secondary",
                isSecondary: true,
                onClick: handlePreviewClick,
                style: { width: "100%" }
              },
              __16("Preview Animation", "digiblocks")
            ))
          ), /* @__PURE__ */ wp.element.createElement(
            TabPanelBody15,
            {
              tab: "advanced",
              name: "visibility",
              title: __16("Visibility", "digiblocks"),
              initialOpen: false
            },
            /* @__PURE__ */ wp.element.createElement("div", { className: "components-base-control__help", style: {
              padding: "12px",
              backgroundColor: "#f0f6fc",
              border: "1px solid #c3ddfd",
              borderRadius: "4px",
              marginBottom: "16px"
            } }, /* @__PURE__ */ wp.element.createElement("strong", null, __16("Editor Note:", "digiblocks")), /* @__PURE__ */ wp.element.createElement("br", null), __16("Hidden elements appear with reduced opacity in the editor for easy editing. Visibility changes only take effect on the frontend.", "digiblocks")),
            /* @__PURE__ */ wp.element.createElement(
              ToggleControl14,
              {
                label: __16("Hide on Desktop", "digiblocks"),
                checked: visibility.desktop,
                onChange: (value) => setAttributes({
                  visibility: {
                    ...visibility,
                    desktop: value
                  }
                }),
                __nextHasNoMarginBottom: true
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              ToggleControl14,
              {
                label: __16("Hide on Tablet", "digiblocks"),
                checked: visibility.tablet,
                onChange: (value) => setAttributes({
                  visibility: {
                    ...visibility,
                    tablet: value
                  }
                }),
                __nextHasNoMarginBottom: true
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              ToggleControl14,
              {
                label: __16("Hide on Mobile", "digiblocks"),
                checked: visibility.mobile,
                onChange: (value) => setAttributes({
                  visibility: {
                    ...visibility,
                    mobile: value
                  }
                }),
                __nextHasNoMarginBottom: true
              }
            )
          ), /* @__PURE__ */ wp.element.createElement(
            TabPanelBody15,
            {
              tab: "advanced",
              name: "additional",
              title: __16("Additional", "digiblocks"),
              initialOpen: false
            },
            /* @__PURE__ */ wp.element.createElement("div", { className: "components-base-control html-anchor-control" }, /* @__PURE__ */ wp.element.createElement("div", { className: "components-base-control__field" }, /* @__PURE__ */ wp.element.createElement("label", { className: "components-base-control__label", htmlFor: "html-anchor" }, __16("HTML anchor", "digiblocks")), /* @__PURE__ */ wp.element.createElement(
              "input",
              {
                className: "components-text-control__input",
                type: "text",
                id: "html-anchor",
                value: anchor || "",
                onChange: (e) => setAttributes({ anchor: e.target.value }),
                "aria-describedby": "html-anchor-help",
                autoCapitalize: "none",
                autoComplete: "off"
              }
            )), /* @__PURE__ */ wp.element.createElement("p", { id: "html-anchor-help", className: "components-base-control__help" }, __16(`Enter a word or two \u2014 without spaces \u2014 to make a unique web address just for this block, called an "anchor". Then, you'll be able to link directly to this section of your page.`, "digiblocks"), " ", /* @__PURE__ */ wp.element.createElement(
              "a",
              {
                className: "components-external-link",
                href: "https://wordpress.org/documentation/article/page-jumps/",
                target: "_blank",
                rel: "external noreferrer noopener"
              },
              /* @__PURE__ */ wp.element.createElement("span", { className: "components-external-link__contents" }, __16("Learn more about anchors", "digiblocks")),
              /* @__PURE__ */ wp.element.createElement("span", { className: "components-external-link__icon", "aria-label": "(opens in a new tab)" }, "\u2197")
            ))),
            /* @__PURE__ */ wp.element.createElement("div", { className: "components-base-control" }, /* @__PURE__ */ wp.element.createElement("div", { className: "components-base-control__field" }, /* @__PURE__ */ wp.element.createElement("label", { className: "components-base-control__label", htmlFor: "additional-css-classes" }, __16("Additional CSS class(es)", "digiblocks")), /* @__PURE__ */ wp.element.createElement(
              "input",
              {
                className: "components-text-control__input",
                type: "text",
                id: "additional-css-classes",
                value: customClasses || "",
                onChange: (e) => setAttributes({ customClasses: e.target.value }),
                "aria-describedby": "additional-css-classes-help",
                autoComplete: "off"
              }
            )), /* @__PURE__ */ wp.element.createElement("p", { id: "additional-css-classes-help", className: "components-base-control__help" }, __16("Separate multiple classes with spaces.", "digiblocks")))
          ));
        default:
          return null;
      }
    };
    const blockProps = useBlockProps26({
      className: `digiblocks-icon ${id} ${customClasses || ""}`,
      id: anchor || null
      // Set the anchor as ID if provided
    });
    return /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(InspectorControls14, null, /* @__PURE__ */ wp.element.createElement(
      CustomTabPanel14,
      {
        tabs: tabList,
        activeTab,
        onSelect: setActiveTab
      },
      renderTabContent()
    )), /* @__PURE__ */ wp.element.createElement("style", { dangerouslySetInnerHTML: { __html: generateCSS() } }), /* @__PURE__ */ wp.element.createElement("div", { ...blockProps }, renderIcon()));
  };
  var edit_default14 = IconEdit;

  // blocks/icon/save.js
  var { useBlockProps: useBlockProps27 } = window.wp.blockEditor;
  var IconSave = ({ attributes }) => {
    const {
      id,
      iconSource,
      customSvg,
      iconValue,
      align,
      animation,
      hoverEffect,
      anchor,
      customClasses,
      linkEnabled,
      linkUrl,
      linkOpenInNewTab
    } = attributes;
    const blockClasses = [
      "digiblocks-icon",
      id,
      `align-${align}`,
      animation !== "none" ? `animate-${animation}` : "",
      hoverEffect !== "none" ? `has-hover-${hoverEffect}` : "",
      customClasses || ""
      // Add custom classes if they exist
    ].filter(Boolean).join(" ");
    const commonProps = {
      className: blockClasses,
      id: anchor || null
    };
    const renderIcon = () => {
      if (iconSource === "library" && iconValue && iconValue.svg && iconValue.svg.trim() !== "") {
        return /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-icon" }, /* @__PURE__ */ wp.element.createElement("span", { dangerouslySetInnerHTML: { __html: iconValue.svg } }));
      }
      if (iconSource === "custom" && customSvg && customSvg.trim() !== "") {
        return /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-icon" }, /* @__PURE__ */ wp.element.createElement("span", { dangerouslySetInnerHTML: { __html: customSvg } }));
      }
      return null;
    };
    if (linkEnabled && linkUrl) {
      return /* @__PURE__ */ wp.element.createElement(
        "a",
        {
          href: linkUrl,
          target: linkOpenInNewTab ? "_blank" : "_self",
          rel: linkOpenInNewTab ? "noopener noreferrer" : void 0,
          ...commonProps
        },
        renderIcon()
      );
    }
    return /* @__PURE__ */ wp.element.createElement("div", { ...commonProps }, renderIcon());
  };
  var save_default14 = IconSave;

  // blocks/icon-box/edit.js
  var { __: __17 } = window.wp.i18n;
  var {
    useBlockProps: useBlockProps28,
    RichText: RichText11,
    InspectorControls: InspectorControls15,
    PanelColorSettings: PanelColorSettings14,
    LinkControl: LinkControl4
  } = window.wp.blockEditor;
  var {
    SelectControl: SelectControl16,
    RangeControl: RangeControl14,
    ToggleControl: ToggleControl15,
    TabPanel: TabPanel10,
    Spinner: Spinner4,
    Button: Button14,
    TextControl: TextControl8,
    __experimentalToggleGroupControl: ToggleGroupControl14,
    __experimentalToggleGroupControlOption: ToggleGroupControlOption14
  } = window.wp.components;
  var { useState: useState15, useEffect: useEffect15, useRef: useRef12 } = window.wp.element;
  var { useBlockId: useBlockId15, getDimensionCSS: getDimensionCSS13, animations: animations13, animationPreview: animationPreview13 } = digi.utils;
  var { tabIcons: tabIcons15 } = digi.icons;
  var { ResponsiveControl: ResponsiveControl15, DimensionControl: DimensionControl14, TypographyControl: TypographyControl10, BoxShadowControl: BoxShadowControl13, CustomTabPanel: CustomTabPanel15, TabPanelBody: TabPanelBody16, ResponsiveButtonGroup: ResponsiveButtonGroup4, ResponsiveRangeControl: ResponsiveRangeControl2 } = digi.components;
  var IconBoxEdit = ({ attributes, setAttributes, clientId }) => {
    const {
      id,
      anchor,
      visibility,
      customClasses,
      iconSource,
      customSvg,
      iconValue,
      align,
      iconLayout,
      iconContentGap,
      showTitle,
      showContent,
      title,
      content,
      titleColor,
      titleHoverColor,
      textColor,
      textHoverColor,
      backgroundColor,
      backgroundHoverColor,
      iconSize,
      iconColor,
      iconBackgroundColor,
      iconBorderStyle,
      iconBorderWidth,
      iconBorderRadius,
      iconBorderColor,
      iconPadding,
      iconMargin,
      iconHoverColor,
      iconHoverBackgroundColor,
      iconHoverBorderColor,
      titleTypography,
      contentTypography,
      padding,
      margin,
      animation,
      boxShadow,
      boxShadowHover,
      borderStyle,
      borderWidth,
      borderRadius,
      borderColor,
      hoverEffect,
      linkEnabled,
      linkType,
      linkUrl,
      linkOpenInNewTab,
      linkRel,
      buttonText,
      buttonBackgroundColor,
      buttonBackgroundHoverColor,
      buttonTextColor,
      buttonTextHoverColor,
      buttonBorderStyle,
      buttonBorderWidth,
      buttonBorderRadius,
      buttonBorderColor,
      buttonBorderHoverColor,
      buttonBoxShadow,
      buttonBoxShadowHover,
      buttonPadding,
      buttonMargin,
      buttonTypography
    } = attributes;
    useBlockId15(id, clientId, setAttributes);
    const [localActiveDevice, setLocalActiveDevice] = useState15(window.digi.responsiveState.activeDevice);
    const [isAnimating, setIsAnimating] = useState15(false);
    useEffect15(() => {
      const unsubscribe = window.digi.responsiveState.subscribe((device) => {
        setLocalActiveDevice(device);
      });
      return unsubscribe;
    }, []);
    const [activeTab, setActiveTab] = useState15(() => {
      if (window.digi.uiState) {
        const savedTab = window.digi.uiState.getActiveTab(clientId);
        if (savedTab)
          return savedTab;
      }
      return "options";
    });
    const [componentsLoaded, setComponentsLoaded] = useState15(false);
    useEffect15(() => {
      const checkComponents = () => {
        if (window.digi && window.digi.components && window.digi.components.FontAwesomeControl) {
          setComponentsLoaded(true);
          return true;
        }
        return false;
      };
      if (!checkComponents()) {
        const timeout = setTimeout(() => {
          if (checkComponents()) {
            clearTimeout(timeout);
          }
        }, 500);
        return () => clearTimeout(timeout);
      }
    }, []);
    const setIconValue = (newIcon) => {
      setAttributes({ iconValue: newIcon });
    };
    const previewTimeoutRef = useRef12(null);
    useEffect15(() => {
      if (animation && animation !== "none") {
        const timeoutId = setTimeout(() => {
          animationPreview13(id, animation, animations13, previewTimeoutRef);
        }, 100);
        return () => clearTimeout(timeoutId);
      }
    }, [animation]);
    const handlePreviewClick = () => {
      animationPreview13(id, animation, animations13, previewTimeoutRef);
    };
    const borderStyleOptions = [
      { label: __17("Default", "digiblocks"), value: "default" },
      { label: __17("None", "digiblocks"), value: "none" },
      { label: __17("Solid", "digiblocks"), value: "solid" },
      { label: __17("Dotted", "digiblocks"), value: "dotted" },
      { label: __17("Dashed", "digiblocks"), value: "dashed" },
      { label: __17("Double", "digiblocks"), value: "double" },
      { label: __17("Groove", "digiblocks"), value: "groove" },
      { label: __17("Inset", "digiblocks"), value: "inset" },
      { label: __17("Outset", "digiblocks"), value: "outset" },
      { label: __17("Ridge", "digiblocks"), value: "ridge" }
    ];
    const hoverEffectOptions = [
      { label: __17("None", "digiblocks"), value: "none" },
      { label: __17("Lift", "digiblocks"), value: "lift" },
      { label: __17("Scale", "digiblocks"), value: "scale" },
      { label: __17("Glow", "digiblocks"), value: "glow" }
    ];
    const animationOptions = [
      { label: __17("None", "digiblocks"), value: "none" },
      ...Object.keys(animations13).map((animation2) => ({
        label: animation2.replace(/-/g, " ").replace(/\b\w/g, (l) => l.toUpperCase()),
        value: animation2
      }))
    ];
    const linkTypeOptions = [
      { label: __17("Box", "digiblocks"), value: "box" },
      { label: __17("Button", "digiblocks"), value: "button" }
    ];
    const tabList = [
      {
        name: "options",
        title: __17("Options", "digiblocks"),
        icon: tabIcons15.optionsIcon
      },
      {
        name: "style",
        title: __17("Style", "digiblocks"),
        icon: tabIcons15.styleIcon
      },
      {
        name: "advanced",
        title: __17("Advanced", "digiblocks"),
        icon: tabIcons15.advancedIcon
      }
    ];
    const stateTabList = [
      {
        name: "normal",
        title: __17("Normal", "digiblocks"),
        className: "digiblocks-tab-1 normal"
      },
      {
        name: "hover",
        title: __17("Hover", "digiblocks"),
        className: "digiblocks-tab-2 hover"
      }
    ];
    const generateCSS = () => {
      const activeDevice = window.digi.responsiveState.activeDevice;
      let alignCSS = "";
      if (align[activeDevice] === "flex-start") {
        alignCSS = `
				align-items: flex-start;
				text-align: left;
			`;
      } else if (align[activeDevice] === "center") {
        alignCSS = `
				align-items: center;
				text-align: center;
			`;
      } else if (align[activeDevice] === "flex-end") {
        alignCSS = `
				align-items: flex-end;
				text-align: right;
			`;
      }
      let borderRadiusCSS = getDimensionCSS13(borderRadius, "border-radius", activeDevice);
      let borderCSS = "";
      if (borderStyle && borderStyle !== "default" && borderStyle !== "none") {
        borderCSS = `
                border-style: ${borderStyle};
                border-color: ${borderColor || "#e0e0e0"};
                ${getDimensionCSS13(borderWidth, "border-width", activeDevice)}
            `;
      } else {
        borderCSS = "border-style: none;";
      }
      let boxShadowCSS = "box-shadow: none;";
      if (boxShadow && boxShadow.enable) {
        const inset = boxShadow.position === "inset" ? "inset " : "";
        boxShadowCSS = `box-shadow: ${inset}${boxShadow.horizontal}px ${boxShadow.vertical}px ${boxShadow.blur}px ${boxShadow.spread}px ${boxShadow.color};`;
      }
      const paddingCSS = `${getDimensionCSS13(padding, "padding", activeDevice)}`;
      const marginCSS = `${getDimensionCSS13(margin, "margin", activeDevice)}`;
      let titleTypographyCSS = "";
      if (titleTypography) {
        if (titleTypography.fontFamily) {
          titleTypographyCSS += `font-family: ${titleTypography.fontFamily};`;
        }
        if (titleTypography.fontSize && titleTypography.fontSize[activeDevice]) {
          titleTypographyCSS += `font-size: ${titleTypography.fontSize[activeDevice]}${titleTypography.fontSizeUnit || "px"};`;
        }
        if (titleTypography.fontWeight) {
          titleTypographyCSS += `font-weight: ${titleTypography.fontWeight};`;
        }
        if (titleTypography.fontStyle) {
          titleTypographyCSS += `font-style: ${titleTypography.fontStyle};`;
        }
        if (titleTypography.textTransform) {
          titleTypographyCSS += `text-transform: ${titleTypography.textTransform};`;
        }
        if (titleTypography.textDecoration) {
          titleTypographyCSS += `text-decoration: ${titleTypography.textDecoration};`;
        }
        if (titleTypography.lineHeight && titleTypography.lineHeight[activeDevice]) {
          titleTypographyCSS += `line-height: ${titleTypography.lineHeight[activeDevice]}${titleTypography.lineHeightUnit || "em"};`;
        }
        if (titleTypography.letterSpacing && titleTypography.letterSpacing[activeDevice]) {
          titleTypographyCSS += `letter-spacing: ${titleTypography.letterSpacing[activeDevice]}${titleTypography.letterSpacingUnit || "px"};`;
        }
      }
      let contentTypographyCSS = "";
      if (contentTypography) {
        if (contentTypography.fontFamily) {
          contentTypographyCSS += `font-family: ${contentTypography.fontFamily};`;
        }
        if (contentTypography.fontSize && contentTypography.fontSize[activeDevice]) {
          contentTypographyCSS += `font-size: ${contentTypography.fontSize[activeDevice]}${contentTypography.fontSizeUnit || "px"};`;
        }
        if (contentTypography.fontWeight) {
          contentTypographyCSS += `font-weight: ${contentTypography.fontWeight};`;
        }
        if (contentTypography.fontStyle) {
          contentTypographyCSS += `font-style: ${contentTypography.fontStyle};`;
        }
        if (contentTypography.textTransform) {
          contentTypographyCSS += `text-transform: ${contentTypography.textTransform};`;
        }
        if (contentTypography.textDecoration) {
          contentTypographyCSS += `text-decoration: ${contentTypography.textDecoration};`;
        }
        if (contentTypography.lineHeight && contentTypography.lineHeight[activeDevice]) {
          contentTypographyCSS += `line-height: ${contentTypography.lineHeight[activeDevice]}${contentTypography.lineHeightUnit || "em"};`;
        }
        if (contentTypography.letterSpacing && contentTypography.letterSpacing[activeDevice]) {
          contentTypographyCSS += `letter-spacing: ${contentTypography.letterSpacing[activeDevice]}${contentTypography.letterSpacingUnit || "px"};`;
        }
      }
      let buttonTypographyCSS = "";
      if (buttonTypography) {
        if (buttonTypography.fontFamily) {
          buttonTypographyCSS += `font-family: ${buttonTypography.fontFamily};`;
        }
        if (buttonTypography.fontSize && buttonTypography.fontSize[activeDevice]) {
          buttonTypographyCSS += `font-size: ${buttonTypography.fontSize[activeDevice]}${buttonTypography.fontSizeUnit || "px"};`;
        }
        if (buttonTypography.fontWeight) {
          buttonTypographyCSS += `font-weight: ${buttonTypography.fontWeight};`;
        }
        if (buttonTypography.fontStyle) {
          buttonTypographyCSS += `font-style: ${buttonTypography.fontStyle};`;
        }
        if (buttonTypography.textTransform) {
          buttonTypographyCSS += `text-transform: ${buttonTypography.textTransform};`;
        }
        if (buttonTypography.textDecoration) {
          buttonTypographyCSS += `text-decoration: ${buttonTypography.textDecoration};`;
        }
        if (buttonTypography.lineHeight && buttonTypography.lineHeight[activeDevice]) {
          buttonTypographyCSS += `line-height: ${buttonTypography.lineHeight[activeDevice]}${buttonTypography.lineHeightUnit || "em"};`;
        }
        if (buttonTypography.letterSpacing && buttonTypography.letterSpacing[activeDevice]) {
          buttonTypographyCSS += `letter-spacing: ${buttonTypography.letterSpacing[activeDevice]}${buttonTypography.letterSpacingUnit || "px"};`;
        }
      }
      let iconCSS = "";
      let iconHoverCSS = "";
      let iconMarginCSS = "";
      const hasIcon = iconValue && iconValue.svg || iconSource === "custom" && customSvg && customSvg.trim() !== "";
      if (hasIcon) {
        if (iconBackgroundColor) {
          iconCSS += `background-color: ${iconBackgroundColor};`;
        }
        if (iconBorderStyle && iconBorderStyle !== "default" && iconBorderStyle !== "none") {
          const currentIconBorderWidth = iconBorderWidth && iconBorderWidth[activeDevice] ? iconBorderWidth[activeDevice] : { top: 1, right: 1, bottom: 1, left: 1, unit: "px" };
          const currentIconBorderRadius = iconBorderRadius && iconBorderRadius[activeDevice] ? iconBorderRadius[activeDevice] : { top: 0, right: 0, bottom: 0, left: 0, unit: "px" };
          iconCSS += `
                    border-style: ${iconBorderStyle};
                    border-color: ${iconBorderColor || "#e0e0e0"};
					${getDimensionCSS13(iconBorderWidth, "border-width", activeDevice)}
					${getDimensionCSS13(iconBorderRadius, "border-radius", activeDevice)}
                `;
        }
        if (iconPadding && iconPadding[activeDevice]) {
          iconCSS += `${getDimensionCSS13(iconPadding, "padding", activeDevice)}`;
        }
        if (iconHoverColor) {
          iconHoverCSS += `fill: ${iconHoverColor} !important; color: ${iconHoverColor} !important;`;
        }
        if (iconHoverBackgroundColor) {
          iconHoverCSS += `background-color: ${iconHoverBackgroundColor};`;
        }
        if (iconHoverBorderColor) {
          iconHoverCSS += `border-color: ${iconHoverBorderColor};`;
        }
        if (iconMargin && iconMargin[activeDevice]) {
          iconMarginCSS = `${getDimensionCSS13(iconMargin, "margin", activeDevice)}`;
        }
      }
      let hoverCSS = "";
      if (boxShadowHover && boxShadowHover.enable) {
        const insetHover = boxShadowHover.position === "inset" ? "inset " : "";
        hoverCSS += `box-shadow: ${insetHover}${boxShadowHover.horizontal}px ${boxShadowHover.vertical}px ${boxShadowHover.blur}px ${boxShadowHover.spread}px ${boxShadowHover.color};`;
      }
      if (hoverEffect === "lift") {
        hoverCSS += "transform: translateY(-10px);";
      } else if (hoverEffect === "scale") {
        hoverCSS += "transform: scale(1.05);";
      } else if (hoverEffect === "glow") {
        hoverCSS += "filter: brightness(1.1);";
      }
      let linkCSS = "";
      if (linkEnabled && linkType === "box") {
        linkCSS = `
				cursor: pointer;
				text-decoration: none;
			`;
      }
      let buttonCSS = "";
      let buttonHoverCSS = "";
      if (linkEnabled && linkType === "button") {
        let buttonBorderCSS = "";
        if (buttonBorderStyle && buttonBorderStyle !== "default" && buttonBorderStyle !== "none") {
          buttonBorderCSS = `
                    border-style: ${buttonBorderStyle};
                    border-color: ${buttonBorderColor || buttonBackgroundColor};
                    ${getDimensionCSS13(buttonBorderWidth, "border-width", activeDevice)}
                `;
        } else {
          buttonBorderCSS = "border-style: none;";
        }
        let buttonBoxShadowCSS = "box-shadow: none;";
        if (buttonBoxShadow && buttonBoxShadow.enable) {
          const inset = buttonBoxShadow.position === "inset" ? "inset " : "";
          buttonBoxShadowCSS = `box-shadow: ${inset}${buttonBoxShadow.horizontal}px ${buttonBoxShadow.vertical}px ${buttonBoxShadow.blur}px ${buttonBoxShadow.spread}px ${buttonBoxShadow.color};`;
        }
        const buttonPaddingCSS = `${getDimensionCSS13(buttonPadding, "padding", activeDevice)}`;
        const buttonMarginCSS = `${getDimensionCSS13(buttonMargin, "margin", activeDevice)}`;
        if (buttonBoxShadowHover && buttonBoxShadowHover.enable) {
          const insetHover = buttonBoxShadowHover.position === "inset" ? "inset " : "";
          buttonHoverCSS += `box-shadow: ${insetHover}${buttonBoxShadowHover.horizontal}px ${buttonBoxShadowHover.vertical}px ${buttonBoxShadowHover.blur}px ${buttonBoxShadowHover.spread}px ${buttonBoxShadowHover.color};`;
        }
        if (buttonBackgroundHoverColor) {
          buttonHoverCSS += `background-color: ${buttonBackgroundHoverColor};`;
        }
        if (buttonTextHoverColor) {
          buttonHoverCSS += `color: ${buttonTextHoverColor};`;
        }
        if (buttonBorderHoverColor) {
          buttonHoverCSS += `border-color: ${buttonBorderHoverColor};`;
        }
        buttonCSS = `
                .${id} .digiblocks-button-wrapper {
                    display: flex;
                    justify-content: ${align[activeDevice] === "center" ? "center" : align[activeDevice] === "flex-end" ? "flex-end" : "flex-start"};
                    ${buttonMarginCSS}
                }
                
                .${id} .digiblocks-button {
                    display: inline-block;
                    background-color: ${buttonBackgroundColor};
                    color: ${buttonTextColor};
                    ${buttonPaddingCSS}
                    ${buttonBorderCSS}
                    ${getDimensionCSS13(buttonBorderRadius, "border-radius", activeDevice)}
                    ${buttonBoxShadowCSS}
                    ${buttonTypographyCSS}
                    text-decoration: none;
                    transition: all 0.3s ease;
                }
                
                .${id} .digiblocks-button:hover {
                    ${buttonHoverCSS}
                }
            `;
      }
      return `
            /* Main block styles */
            .${id} {
				display: flex;
				${alignCSS}
                background-color: ${backgroundColor || "transparent"};
                ${boxShadowCSS}
                ${paddingCSS}
                ${marginCSS}
                ${borderCSS}
                ${borderRadiusCSS}
				${iconLayout[activeDevice] === "above" ? "flex-direction: column;" : "flex-direction: row;"}
				${iconLayout[activeDevice] === "after" ? "flex-direction: row-reverse;" : ""}
				gap: ${iconContentGap[activeDevice].value}${iconContentGap[activeDevice].unit};
                transition: all 0.3s ease;
                ${linkEnabled && linkType === "box" ? linkCSS : ""}
            }
            
            /* Hover effects */
            .${id}:hover {
                ${backgroundHoverColor ? `background-color: ${backgroundHoverColor};` : ""}
                ${hoverCSS}
            }
            
            ${hasIcon ? `
				/* Icon styles */
				.${id} .digiblocks-icon-box-icon {
					${iconMarginCSS}
					display: inline-flex;
					align-items: center;
					justify-content: center;
					${iconCSS}
					transition: all 0.3s ease;
				}

				.${id} .digiblocks-icon-box-icon span {
					display: flex;
				}

				.${id} .digiblocks-icon-box-icon svg {
					width: ${iconSize[activeDevice]}px;
					height: 100%;
					fill: ${iconColor || "inherit"};
					transition: all 0.3s ease;
				}
				
				/* Icon hover styles */
				.${id}:hover .digiblocks-icon-box-icon {
					${iconHoverCSS}
				}
				
				.${id}:hover .digiblocks-icon-box-icon svg {
					${iconHoverColor ? `fill: ${iconHoverColor};` : ""}
				}
				` : ""}
            
            /* Title styles */
            .${id} .digiblocks-icon-box-title {
                color: ${titleColor || "inherit"};
				margin-top: 0;
                margin-bottom: 10px;
                ${titleTypographyCSS}
                transition: color 0.3s ease;
            }
            
            /* Title hover styles */
            .${id}:hover .digiblocks-icon-box-title {
                ${titleHoverColor ? `color: ${titleHoverColor};` : ""}
            }
            
            /* Content styles */
            .${id} .digiblocks-icon-box-content {
                display: flex;
                flex-direction: column;
            }

            .${id} .digiblocks-icon-box-text {
                color: ${textColor || "inherit"};
                ${contentTypographyCSS}
				margin: 0;
                transition: color 0.3s ease;
            }
            
            /* Content hover styles */
            .${id}:hover .digiblocks-icon-box-text {
                ${textHoverColor ? `color: ${textHoverColor};` : ""}
            }
            
            /* Button styles */
            ${buttonCSS}

			/* Visibility Controls */
			${visibility.desktop ? `
				@media (min-width: 992px) {
					.${id} {
						opacity: 0.5 !important;
					}
				}
			` : ""}

			${visibility.tablet ? `
				@media (min-width: 768px) and (max-width: 991px) {
					.${id} {
						opacity: 0.5 !important;
					}
				}
			` : ""}

			${visibility.mobile ? `
				@media (max-width: 767px) {
					.${id} {
						opacity: 0.5 !important;
					}
				}
			` : ""}
        `;
    };
    const FontAwesomeControl6 = componentsLoaded ? window.digi.components.FontAwesomeControl : null;
    const renderIcon = () => {
      if (iconSource === "library" && iconValue && iconValue.svg && iconValue.svg.trim() !== "") {
        return /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-icon-box-icon" }, /* @__PURE__ */ wp.element.createElement(
          "span",
          {
            dangerouslySetInnerHTML: {
              __html: iconValue.svg
            }
          }
        ));
      }
      if (iconSource === "custom" && customSvg && customSvg.trim() !== "") {
        return /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-icon-box-icon" }, /* @__PURE__ */ wp.element.createElement(
          "span",
          {
            dangerouslySetInnerHTML: {
              __html: customSvg
            }
          }
        ));
      }
      if (!iconSource && iconValue && iconValue.svg && iconValue.svg.trim() !== "") {
        return /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-icon-box-icon" }, /* @__PURE__ */ wp.element.createElement(
          "span",
          {
            dangerouslySetInnerHTML: {
              __html: iconValue.svg
            }
          }
        ));
      }
      return null;
    };
    const renderButton = () => {
      if (!linkEnabled || linkType !== "button") {
        return null;
      }
      return /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-button-wrapper" }, /* @__PURE__ */ wp.element.createElement(
        "a",
        {
          className: "digiblocks-button",
          href: linkUrl || "#",
          target: linkOpenInNewTab ? "_blank" : "_self",
          rel: linkRel,
          onClick: (e) => e.preventDefault()
        },
        /* @__PURE__ */ wp.element.createElement(
          RichText11,
          {
            tagName: "span",
            value: buttonText,
            onChange: (value) => setAttributes({ buttonText: value }),
            placeholder: __17("Button Text", "digiblocks")
          }
        )
      ));
    };
    const renderIconTabContent = (tabName) => {
      if (tabName === "normal") {
        return /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(
          PanelColorSettings14,
          {
            title: __17(
              "Icon Colors",
              "digiblocks"
            ),
            initialOpen: true,
            enableAlpha: true,
            colorSettings: [
              {
                value: iconColor,
                onChange: (value) => setAttributes({
                  iconColor: value
                }),
                label: __17(
                  "Icon Color",
                  "digiblocks"
                )
              },
              {
                value: iconBackgroundColor,
                onChange: (value) => setAttributes({
                  iconBackgroundColor: value
                }),
                label: __17(
                  "Background Color",
                  "digiblocks"
                )
              }
            ]
          }
        ), /* @__PURE__ */ wp.element.createElement(
          SelectControl16,
          {
            label: __17("Border Style", "digiblocks"),
            value: iconBorderStyle || "default",
            options: borderStyleOptions,
            onChange: (value) => {
              if (value !== "default" && value !== "none" && (iconBorderStyle === "default" || iconBorderStyle === "none" || !iconBorderStyle)) {
                if (!iconBorderWidth || Object.keys(iconBorderWidth).length === 0) {
                  setAttributes({
                    iconBorderWidth: {
                      desktop: { top: 1, right: 1, bottom: 1, left: 1, unit: "px" },
                      tablet: { top: "", right: "", bottom: "", left: "", unit: "px" },
                      mobile: { top: "", right: "", bottom: "", left: "", unit: "px" }
                    }
                  });
                }
              }
              setAttributes({
                iconBorderStyle: value
              });
            },
            __next40pxDefaultSize: true,
            __nextHasNoMarginBottom: true
          }
        ), iconBorderStyle && iconBorderStyle !== "default" && iconBorderStyle !== "none" && /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(
          PanelColorSettings14,
          {
            title: __17(
              "Border Color",
              "digiblocks"
            ),
            enableAlpha: true,
            colorSettings: [
              {
                value: iconBorderColor,
                onChange: (value) => setAttributes({
                  iconBorderColor: value
                }),
                label: __17(
                  "Border Color",
                  "digiblocks"
                )
              }
            ]
          }
        ), /* @__PURE__ */ wp.element.createElement(
          ResponsiveControl15,
          {
            label: __17("Border Width", "digiblocks")
          },
          /* @__PURE__ */ wp.element.createElement(
            DimensionControl14,
            {
              values: iconBorderWidth[localActiveDevice],
              onChange: (value) => setAttributes({
                iconBorderWidth: {
                  ...iconBorderWidth,
                  [localActiveDevice]: value
                }
              })
            }
          )
        ), /* @__PURE__ */ wp.element.createElement(
          ResponsiveControl15,
          {
            label: __17("Border Radius", "digiblocks")
          },
          /* @__PURE__ */ wp.element.createElement(
            DimensionControl14,
            {
              values: iconBorderRadius[localActiveDevice],
              onChange: (value) => setAttributes({
                iconBorderRadius: {
                  ...iconBorderRadius,
                  [localActiveDevice]: value
                }
              }),
              units: [
                { label: "px", value: "px" },
                { label: "%", value: "%" }
              ]
            }
          )
        )), /* @__PURE__ */ wp.element.createElement(
          ResponsiveControl15,
          {
            label: __17("Padding", "digiblocks")
          },
          /* @__PURE__ */ wp.element.createElement(
            DimensionControl14,
            {
              values: iconPadding[localActiveDevice],
              onChange: (value) => setAttributes({
                iconPadding: {
                  ...iconPadding,
                  [localActiveDevice]: value
                }
              })
            }
          )
        ), /* @__PURE__ */ wp.element.createElement(
          ResponsiveControl15,
          {
            label: __17("Margin", "digiblocks")
          },
          /* @__PURE__ */ wp.element.createElement(
            DimensionControl14,
            {
              values: iconMargin[localActiveDevice],
              onChange: (value) => setAttributes({
                iconMargin: {
                  ...iconMargin,
                  [localActiveDevice]: value
                }
              })
            }
          )
        ));
      } else if (tabName === "hover") {
        return /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(
          PanelColorSettings14,
          {
            title: __17(
              "Icon Hover Colors",
              "digiblocks"
            ),
            initialOpen: true,
            enableAlpha: true,
            colorSettings: [
              {
                value: iconHoverColor,
                onChange: (value) => setAttributes({
                  iconHoverColor: value
                }),
                label: __17(
                  "Icon Color",
                  "digiblocks"
                )
              },
              {
                value: iconHoverBackgroundColor,
                onChange: (value) => setAttributes({
                  iconHoverBackgroundColor: value
                }),
                label: __17(
                  "Background Color",
                  "digiblocks"
                )
              },
              {
                value: iconHoverBorderColor,
                onChange: (value) => setAttributes({
                  iconHoverBorderColor: value
                }),
                label: __17(
                  "Border Color",
                  "digiblocks"
                )
              }
            ]
          }
        ));
      }
      return null;
    };
    const renderColorTabContent = (tabName) => {
      if (tabName === "normal") {
        return /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(
          PanelColorSettings14,
          {
            title: __17(
              "Color Settings",
              "digiblocks"
            ),
            initialOpen: true,
            enableAlpha: true,
            colorSettings: [
              {
                value: titleColor,
                onChange: (value) => setAttributes({
                  titleColor: value
                }),
                label: __17(
                  "Title Color",
                  "digiblocks"
                )
              },
              {
                value: textColor,
                onChange: (value) => setAttributes({
                  textColor: value
                }),
                label: __17(
                  "Text Color",
                  "digiblocks"
                )
              },
              {
                value: backgroundColor,
                onChange: (value) => setAttributes({
                  backgroundColor: value
                }),
                label: __17(
                  "Background Color",
                  "digiblocks"
                )
              }
            ]
          }
        ));
      } else if (tabName === "hover") {
        return /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(
          PanelColorSettings14,
          {
            title: __17(
              "Hover Color Settings",
              "digiblocks"
            ),
            initialOpen: true,
            enableAlpha: true,
            colorSettings: [
              {
                value: titleHoverColor,
                onChange: (value) => setAttributes({
                  titleHoverColor: value
                }),
                label: __17(
                  "Title Color",
                  "digiblocks"
                )
              },
              {
                value: textHoverColor,
                onChange: (value) => setAttributes({
                  textHoverColor: value
                }),
                label: __17(
                  "Text Color",
                  "digiblocks"
                )
              },
              {
                value: backgroundHoverColor,
                onChange: (value) => setAttributes({
                  backgroundHoverColor: value
                }),
                label: __17(
                  "Background Color",
                  "digiblocks"
                )
              }
            ]
          }
        ));
      }
      return null;
    };
    const renderButtonTabContent = (tabName) => {
      if (tabName === "normal") {
        return /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(
          PanelColorSettings14,
          {
            title: __17(
              "Button Colors",
              "digiblocks"
            ),
            initialOpen: true,
            enableAlpha: true,
            colorSettings: [
              {
                value: buttonTextColor,
                onChange: (value) => setAttributes({
                  buttonTextColor: value
                }),
                label: __17(
                  "Text Color",
                  "digiblocks"
                )
              },
              {
                value: buttonBackgroundColor,
                onChange: (value) => setAttributes({
                  buttonBackgroundColor: value
                }),
                label: __17(
                  "Background Color",
                  "digiblocks"
                )
              }
            ]
          }
        ), /* @__PURE__ */ wp.element.createElement(
          SelectControl16,
          {
            label: __17("Border Style", "digiblocks"),
            value: buttonBorderStyle || "default",
            options: borderStyleOptions,
            onChange: (value) => {
              if (value !== "default" && value !== "none" && (buttonBorderStyle === "default" || buttonBorderStyle === "none" || !buttonBorderStyle)) {
                if (!buttonBorderWidth || Object.keys(buttonBorderWidth).length === 0) {
                  setAttributes({
                    buttonBorderWidth: {
                      desktop: { top: 1, right: 1, bottom: 1, left: 1, unit: "px" },
                      tablet: { top: "", right: "", bottom: "", left: "", unit: "px" },
                      mobile: { top: "", right: "", bottom: "", left: "", unit: "px" }
                    }
                  });
                }
              }
              setAttributes({
                buttonBorderStyle: value
              });
            },
            __next40pxDefaultSize: true,
            __nextHasNoMarginBottom: true
          }
        ), buttonBorderStyle && buttonBorderStyle !== "default" && buttonBorderStyle !== "none" && /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(
          PanelColorSettings14,
          {
            title: __17(
              "Border Color",
              "digiblocks"
            ),
            enableAlpha: true,
            colorSettings: [
              {
                value: buttonBorderColor,
                onChange: (value) => setAttributes({
                  buttonBorderColor: value
                }),
                label: __17(
                  "Border Color",
                  "digiblocks"
                )
              }
            ]
          }
        ), /* @__PURE__ */ wp.element.createElement(
          ResponsiveControl15,
          {
            label: __17("Border Width", "digiblocks")
          },
          /* @__PURE__ */ wp.element.createElement(
            DimensionControl14,
            {
              values: buttonBorderWidth[localActiveDevice],
              onChange: (value) => setAttributes({
                buttonBorderWidth: {
                  ...buttonBorderWidth,
                  [localActiveDevice]: value
                }
              })
            }
          )
        )), /* @__PURE__ */ wp.element.createElement(
          ResponsiveControl15,
          {
            label: __17("Border Radius", "digiblocks")
          },
          /* @__PURE__ */ wp.element.createElement(
            DimensionControl14,
            {
              values: buttonBorderRadius[localActiveDevice],
              onChange: (value) => setAttributes({
                buttonBorderRadius: {
                  ...buttonBorderRadius,
                  [localActiveDevice]: value
                }
              }),
              units: [
                { label: "px", value: "px" },
                { label: "%", value: "%" }
              ]
            }
          )
        ), /* @__PURE__ */ wp.element.createElement(
          ResponsiveControl15,
          {
            label: __17("Padding", "digiblocks")
          },
          /* @__PURE__ */ wp.element.createElement(
            DimensionControl14,
            {
              values: buttonPadding[localActiveDevice],
              onChange: (value) => setAttributes({
                buttonPadding: {
                  ...buttonPadding,
                  [localActiveDevice]: value
                }
              })
            }
          )
        ), /* @__PURE__ */ wp.element.createElement(
          ResponsiveControl15,
          {
            label: __17("Margin", "digiblocks")
          },
          /* @__PURE__ */ wp.element.createElement(
            DimensionControl14,
            {
              values: buttonMargin[localActiveDevice],
              onChange: (value) => setAttributes({
                buttonMargin: {
                  ...buttonMargin,
                  [localActiveDevice]: value
                }
              })
            }
          )
        ), /* @__PURE__ */ wp.element.createElement(
          BoxShadowControl13,
          {
            normalValue: buttonBoxShadow,
            hoverValue: buttonBoxShadowHover,
            onNormalChange: (value) => setAttributes({
              buttonBoxShadow: value
            }),
            onHoverChange: (value) => setAttributes({
              buttonBoxShadowHover: value
            })
          }
        ));
      } else if (tabName === "hover") {
        return /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(
          PanelColorSettings14,
          {
            title: __17(
              "Button Hover Colors",
              "digiblocks"
            ),
            initialOpen: true,
            enableAlpha: true,
            colorSettings: [
              {
                value: buttonTextHoverColor,
                onChange: (value) => setAttributes({
                  buttonTextHoverColor: value
                }),
                label: __17(
                  "Text Color",
                  "digiblocks"
                )
              },
              {
                value: buttonBackgroundHoverColor,
                onChange: (value) => setAttributes({
                  buttonBackgroundHoverColor: value
                }),
                label: __17(
                  "Background Color",
                  "digiblocks"
                )
              },
              {
                value: buttonBorderHoverColor,
                onChange: (value) => setAttributes({
                  buttonBorderHoverColor: value
                }),
                label: __17(
                  "Border Color",
                  "digiblocks"
                )
              }
            ]
          }
        ));
      }
      return null;
    };
    const renderButtonTypographyContent = () => {
      return /* @__PURE__ */ wp.element.createElement(
        TypographyControl10,
        {
          label: __17(
            "Button Typography",
            "digiblocks"
          ),
          value: buttonTypography,
          onChange: (value) => setAttributes({
            buttonTypography: value
          }),
          defaults: {
            fontSize: { desktop: 16, tablet: 15, mobile: 14 },
            fontSizeUnit: "px",
            lineHeight: { desktop: 1.5, tablet: 1.4, mobile: 1.3 },
            lineHeightUnit: "em"
          }
        }
      );
    };
    const renderTabContent = () => {
      switch (activeTab) {
        case "options":
          return /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement("div", { className: "components-panel__body is-opened" }, /* @__PURE__ */ wp.element.createElement("div", { style: { marginBottom: "2rem" } }, /* @__PURE__ */ wp.element.createElement(
            ToggleGroupControl14,
            {
              label: __17("Icon Source", "digiblocks"),
              value: iconSource || "library",
              onChange: (value) => setAttributes({ iconSource: value }),
              isBlock: true,
              __next40pxDefaultSize: true,
              __nextHasNoMarginBottom: true
            },
            /* @__PURE__ */ wp.element.createElement(
              ToggleGroupControlOption14,
              {
                value: "library",
                label: __17("Library", "digiblocks")
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              ToggleGroupControlOption14,
              {
                value: "custom",
                label: __17("Custom", "digiblocks")
              }
            )
          ), iconSource === "library" && /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, !componentsLoaded ? /* @__PURE__ */ wp.element.createElement("div", { style: { textAlign: "center", padding: "20px 0" } }, /* @__PURE__ */ wp.element.createElement(Spinner4, null), /* @__PURE__ */ wp.element.createElement("p", null, __17("Loading icon selector...", "digiblocks"))) : /* @__PURE__ */ wp.element.createElement(
            FontAwesomeControl6,
            {
              label: __17("Select Icon", "digiblocks"),
              value: iconValue,
              onChange: setIconValue
            }
          ), iconValue && componentsLoaded && /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement("div", { style: { marginTop: "15px", marginBottom: "15px", padding: "10px", background: "#f0f0f1", borderRadius: "3px" } }, /* @__PURE__ */ wp.element.createElement("p", { style: { margin: "0 0 5px 0" } }, /* @__PURE__ */ wp.element.createElement("strong", null, __17("Selected Icon:", "digiblocks")), " ", iconValue.name), /* @__PURE__ */ wp.element.createElement("p", { style: { margin: "0 0 5px 0" } }, /* @__PURE__ */ wp.element.createElement("strong", null, __17("Style:", "digiblocks")), " ", iconValue.style), iconValue.categories && iconValue.categories.length > 0 && /* @__PURE__ */ wp.element.createElement("p", { style: { margin: "0" } }, /* @__PURE__ */ wp.element.createElement("strong", null, __17("Categories:", "digiblocks")), " ", iconValue.categories.join(", "))))), iconSource === "custom" && /* @__PURE__ */ wp.element.createElement("div", { style: { marginTop: "15px" } }, /* @__PURE__ */ wp.element.createElement("div", { className: "components-base-control" }, /* @__PURE__ */ wp.element.createElement("label", { className: "components-base-control__label", htmlFor: "custom-svg-input" }, __17("Custom SVG Code", "digiblocks")), /* @__PURE__ */ wp.element.createElement(
            "textarea",
            {
              id: "custom-svg-input",
              className: "components-textarea-control__input",
              value: customSvg || "",
              onChange: (e) => {
                const newSvg = e.target.value;
                const newIconValue = {
                  id: "custom-svg",
                  name: "Custom SVG",
                  svg: newSvg,
                  style: "custom",
                  categories: ["custom"]
                };
                setAttributes({
                  customSvg: newSvg,
                  iconValue: newIconValue
                });
              },
              placeholder: __17("Paste your SVG code here...", "digiblocks"),
              rows: 10,
              style: { width: "100%", marginTop: "8px" }
            }
          ), /* @__PURE__ */ wp.element.createElement("p", { className: "components-base-control__help" }, __17("Paste your SVG code here. Make sure it only contains valid SVG markup. For security reasons, scripts and external references will be removed.", "digiblocks"))), customSvg && /* @__PURE__ */ wp.element.createElement("div", { style: { marginTop: "15px", marginBottom: "15px" } }, /* @__PURE__ */ wp.element.createElement("p", null, /* @__PURE__ */ wp.element.createElement("strong", null, __17("Preview:", "digiblocks"))), /* @__PURE__ */ wp.element.createElement("div", { style: { padding: "20px", background: "#f0f0f1", borderRadius: "3px", display: "flex", justifyContent: "center", alignItems: "center" } }, /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-custom-svg-preview", style: { width: "50px", height: "50px" }, dangerouslySetInnerHTML: { __html: customSvg } }))))), /* @__PURE__ */ wp.element.createElement(
            ResponsiveButtonGroup4,
            {
              label: __17("Alignment", "digiblocks"),
              value: align,
              onChange: (value) => setAttributes({ align: value }),
              options: [
                { label: __17("Left", "digiblocks"), value: "flex-start" },
                { label: __17("Center", "digiblocks"), value: "center" },
                { label: __17("Right", "digiblocks"), value: "flex-end" }
              ]
            }
          ), /* @__PURE__ */ wp.element.createElement(
            ResponsiveButtonGroup4,
            {
              label: __17("Icon Layout", "digiblocks"),
              value: iconLayout,
              onChange: (value) => setAttributes({ iconLayout: value }),
              options: [
                { label: __17("Before", "digiblocks"), value: "before" },
                { label: __17("Above", "digiblocks"), value: "above" },
                { label: __17("After", "digiblocks"), value: "after" }
              ]
            }
          ), /* @__PURE__ */ wp.element.createElement(
            ResponsiveRangeControl2,
            {
              label: __17("Gap", "digiblocks"),
              value: iconContentGap,
              onChange: (value) => setAttributes({ iconContentGap: value }),
              units: [
                { label: "px", value: "px" },
                { label: "%", value: "%" },
                { label: "em", value: "em" },
                { label: "rem", value: "rem" }
              ],
              defaultUnit: "px",
              min: 0,
              max: 100,
              step: 1,
              defaultValues: {
                desktop: 20,
                tablet: 15,
                mobile: 10
              }
            }
          ), /* @__PURE__ */ wp.element.createElement(
            ToggleControl15,
            {
              label: __17("Show Title", "digiblocks"),
              checked: showTitle,
              onChange: (value) => setAttributes({ showTitle: value }),
              __nextHasNoMarginBottom: true
            }
          ), /* @__PURE__ */ wp.element.createElement(
            ToggleControl15,
            {
              label: __17("Show Description", "digiblocks"),
              checked: showContent,
              onChange: (value) => setAttributes({ showContent: value }),
              __nextHasNoMarginBottom: true
            }
          ), !linkEnabled ? /* @__PURE__ */ wp.element.createElement("div", { className: "components-base-control" }, /* @__PURE__ */ wp.element.createElement("div", { className: "components-base-control__field" }, /* @__PURE__ */ wp.element.createElement(
            "button",
            {
              className: "components-button width-full is-primary",
              onClick: () => setAttributes({ linkEnabled: true })
            },
            __17("Add Link", "digiblocks")
          ))) : /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(
            LinkControl4,
            {
              key: "link-control",
              value: {
                url: linkUrl,
                opensInNewTab: linkOpenInNewTab,
                rel: linkRel
              },
              settings: [
                {
                  id: "opensInNewTab",
                  title: __17("Open in new tab", "digiblocks")
                },
                {
                  id: "rel",
                  title: __17("Add noopener noreferrer", "digiblocks")
                }
              ],
              onChange: (newLink) => {
                setAttributes({
                  linkUrl: newLink.url,
                  linkOpenInNewTab: newLink.opensInNewTab,
                  linkRel: newLink.rel
                });
              },
              onRemove: () => {
                setAttributes({
                  linkEnabled: false,
                  linkUrl: "",
                  linkOpenInNewTab: false,
                  linkRel: ""
                });
              },
              suggestionsQuery: {
                type: "post",
                subtype: "any"
              },
              forceIsEditingLink: !linkUrl
            }
          ), /* @__PURE__ */ wp.element.createElement("div", { style: { marginTop: "1rem", marginBottom: "1rem" } }, /* @__PURE__ */ wp.element.createElement(
            ToggleGroupControl14,
            {
              label: __17("Link Type", "digiblocks"),
              value: linkType,
              onChange: (value) => setAttributes({ linkType: value }),
              isBlock: true,
              __next40pxDefaultSize: true,
              __nextHasNoMarginBottom: true
            },
            /* @__PURE__ */ wp.element.createElement(
              ToggleGroupControlOption14,
              {
                value: "box",
                label: __17("Box", "digiblocks")
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              ToggleGroupControlOption14,
              {
                value: "button",
                label: __17("Button", "digiblocks")
              }
            )
          )), linkType === "button" && /* @__PURE__ */ wp.element.createElement(
            TextControl8,
            {
              label: __17("Button Text", "digiblocks"),
              value: buttonText,
              onChange: (value) => setAttributes({ buttonText: value }),
              __next40pxDefaultSize: true,
              __nextHasNoMarginBottom: true
            }
          ))));
        case "style":
          return /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(
            TabPanelBody16,
            {
              tab: "style",
              name: "colors",
              title: __17("Colors", "digiblocks"),
              initialOpen: true
            },
            /* @__PURE__ */ wp.element.createElement(
              TabPanel10,
              {
                className: "digiblocks-control-tabs",
                activeClass: "active-tab",
                tabs: stateTabList
              },
              (tab) => renderColorTabContent(tab.name)
            )
          ), /* @__PURE__ */ wp.element.createElement(
            TabPanelBody16,
            {
              tab: "style",
              name: "typo",
              title: __17("Typography", "digiblocks"),
              initialOpen: false
            },
            /* @__PURE__ */ wp.element.createElement(
              TypographyControl10,
              {
                label: __17(
                  "Title Typography",
                  "digiblocks"
                ),
                value: titleTypography,
                onChange: (value) => setAttributes({
                  titleTypography: value
                }),
                defaults: {
                  fontSize: { desktop: 24, tablet: 22, mobile: 20 },
                  fontSizeUnit: "px",
                  lineHeight: { desktop: 1.5, tablet: 1.4, mobile: 1.3 },
                  lineHeightUnit: "em"
                }
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              TypographyControl10,
              {
                label: __17(
                  "Content Typography",
                  "digiblocks"
                ),
                value: contentTypography,
                onChange: (value) => setAttributes({
                  contentTypography: value
                }),
                defaults: {
                  fontSize: { desktop: 16, tablet: 15, mobile: 14 },
                  fontSizeUnit: "px",
                  lineHeight: { desktop: 1.5, tablet: 1.4, mobile: 1.3 },
                  lineHeightUnit: "em"
                }
              }
            ),
            linkEnabled && linkType === "button" && renderButtonTypographyContent()
          ), /* @__PURE__ */ wp.element.createElement(
            TabPanelBody16,
            {
              tab: "style",
              name: "icon",
              title: __17("Icon", "digiblocks"),
              initialOpen: false
            },
            /* @__PURE__ */ wp.element.createElement(
              ResponsiveControl15,
              {
                label: __17(
                  "Icon Size",
                  "digiblocks"
                )
              },
              /* @__PURE__ */ wp.element.createElement(
                RangeControl14,
                {
                  value: iconSize[localActiveDevice],
                  onChange: (value) => setAttributes({
                    iconSize: {
                      ...iconSize,
                      [localActiveDevice]: value
                    }
                  }),
                  min: 16,
                  max: 500,
                  step: 1,
                  __next40pxDefaultSize: true,
                  __nextHasNoMarginBottom: true
                }
              )
            ),
            /* @__PURE__ */ wp.element.createElement(
              TabPanel10,
              {
                className: "digiblocks-control-tabs",
                activeClass: "active-tab",
                tabs: stateTabList
              },
              (tab) => renderIconTabContent(tab.name)
            )
          ), /* @__PURE__ */ wp.element.createElement(
            TabPanelBody16,
            {
              tab: "style",
              name: "box-style",
              title: __17("Box Style", "digiblocks"),
              initialOpen: false
            },
            /* @__PURE__ */ wp.element.createElement(
              SelectControl16,
              {
                label: __17("Border Style", "digiblocks"),
                value: borderStyle || "default",
                options: borderStyleOptions,
                onChange: (value) => {
                  if (value !== "default" && value !== "none" && (borderStyle === "default" || borderStyle === "none" || !borderStyle)) {
                    if (!borderWidth || Object.keys(borderWidth).length === 0) {
                      setAttributes({
                        borderWidth: {
                          desktop: { top: 1, right: 1, bottom: 1, left: 1, unit: "px" },
                          tablet: { top: 1, right: 1, bottom: 1, left: 1, unit: "px" },
                          mobile: { top: 1, right: 1, bottom: 1, left: 1, unit: "px" }
                        }
                      });
                    }
                  }
                  setAttributes({
                    borderStyle: value
                  });
                },
                __next40pxDefaultSize: true,
                __nextHasNoMarginBottom: true
              }
            ),
            borderStyle && borderStyle !== "default" && borderStyle !== "none" && /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(
              PanelColorSettings14,
              {
                title: __17(
                  "Border Color",
                  "digiblocks"
                ),
                enableAlpha: true,
                colorSettings: [
                  {
                    value: borderColor,
                    onChange: (value) => setAttributes({
                      borderColor: value
                    }),
                    label: __17(
                      "Border Color",
                      "digiblocks"
                    )
                  }
                ]
              }
            ), /* @__PURE__ */ wp.element.createElement(
              ResponsiveControl15,
              {
                label: __17("Border Width", "digiblocks")
              },
              /* @__PURE__ */ wp.element.createElement(
                DimensionControl14,
                {
                  values: borderWidth && borderWidth[localActiveDevice] ? borderWidth[localActiveDevice] : {
                    top: 1,
                    right: 1,
                    bottom: 1,
                    left: 1,
                    unit: "px"
                  },
                  onChange: (value) => setAttributes({
                    borderWidth: {
                      ...borderWidth,
                      [localActiveDevice]: value
                    }
                  })
                }
              )
            )),
            /* @__PURE__ */ wp.element.createElement(
              ResponsiveControl15,
              {
                label: __17("Border Radius", "digiblocks")
              },
              /* @__PURE__ */ wp.element.createElement(
                DimensionControl14,
                {
                  values: borderRadius && borderRadius[localActiveDevice] ? borderRadius[localActiveDevice] : {
                    top: 0,
                    right: 0,
                    bottom: 0,
                    left: 0,
                    unit: "px"
                  },
                  onChange: (value) => setAttributes({
                    borderRadius: {
                      ...borderRadius,
                      [localActiveDevice]: value
                    }
                  }),
                  units: [
                    { label: "px", value: "px" },
                    { label: "%", value: "%" }
                  ]
                }
              )
            ),
            /* @__PURE__ */ wp.element.createElement(
              SelectControl16,
              {
                label: __17(
                  "Hover Effect",
                  "digiblocks"
                ),
                value: hoverEffect,
                options: hoverEffectOptions,
                onChange: (value) => setAttributes({
                  hoverEffect: value
                }),
                __next40pxDefaultSize: true,
                __nextHasNoMarginBottom: true
              }
            )
          ), linkEnabled && linkType === "button" && /* @__PURE__ */ wp.element.createElement(
            TabPanelBody16,
            {
              tab: "style",
              name: "button",
              title: __17("Button", "digiblocks"),
              initialOpen: false
            },
            /* @__PURE__ */ wp.element.createElement(
              TabPanel10,
              {
                className: "digiblocks-control-tabs",
                activeClass: "active-tab",
                tabs: stateTabList
              },
              (tab) => renderButtonTabContent(tab.name)
            )
          ), /* @__PURE__ */ wp.element.createElement(
            TabPanelBody16,
            {
              tab: "style",
              name: "shadow",
              title: __17("Box Shadow", "digiblocks"),
              initialOpen: false
            },
            /* @__PURE__ */ wp.element.createElement(
              BoxShadowControl13,
              {
                normalValue: boxShadow,
                hoverValue: boxShadowHover,
                onNormalChange: (value) => setAttributes({
                  boxShadow: value
                }),
                onHoverChange: (value) => setAttributes({
                  boxShadowHover: value
                })
              }
            )
          ), /* @__PURE__ */ wp.element.createElement(
            TabPanelBody16,
            {
              tab: "style",
              name: "spacing",
              title: __17("Spacing", "digiblocks"),
              initialOpen: false
            },
            /* @__PURE__ */ wp.element.createElement(
              ResponsiveControl15,
              {
                label: __17("Padding", "digiblocks")
              },
              /* @__PURE__ */ wp.element.createElement(
                DimensionControl14,
                {
                  values: padding[localActiveDevice],
                  onChange: (value) => setAttributes({
                    padding: {
                      ...padding,
                      [localActiveDevice]: value
                    }
                  })
                }
              )
            ),
            /* @__PURE__ */ wp.element.createElement(
              ResponsiveControl15,
              {
                label: __17("Margin", "digiblocks")
              },
              /* @__PURE__ */ wp.element.createElement(
                DimensionControl14,
                {
                  values: margin[localActiveDevice],
                  onChange: (value) => setAttributes({
                    margin: {
                      ...margin,
                      [localActiveDevice]: value
                    }
                  })
                }
              )
            )
          ));
        case "advanced":
          return /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(
            TabPanelBody16,
            {
              tab: "advanced",
              name: "animation",
              title: __17("Animation", "digiblocks"),
              initialOpen: true
            },
            /* @__PURE__ */ wp.element.createElement(
              SelectControl16,
              {
                label: __17(
                  "Animation Effect",
                  "digiblocks"
                ),
                value: animation,
                options: animationOptions,
                onChange: (value) => setAttributes({
                  animation: value
                }),
                __next40pxDefaultSize: true,
                __nextHasNoMarginBottom: true
              }
            ),
            animation && animation !== "none" && /* @__PURE__ */ wp.element.createElement("div", { style: { marginTop: "10px" } }, /* @__PURE__ */ wp.element.createElement(
              Button14,
              {
                variant: "secondary",
                isSecondary: true,
                onClick: handlePreviewClick,
                style: { width: "100%" }
              },
              __17("Preview Animation", "digiblocks")
            ))
          ), /* @__PURE__ */ wp.element.createElement(
            TabPanelBody16,
            {
              tab: "advanced",
              name: "visibility",
              title: __17("Visibility", "digiblocks"),
              initialOpen: false
            },
            /* @__PURE__ */ wp.element.createElement("div", { className: "components-base-control__help", style: {
              padding: "12px",
              backgroundColor: "#f0f6fc",
              border: "1px solid #c3ddfd",
              borderRadius: "4px",
              marginBottom: "16px"
            } }, /* @__PURE__ */ wp.element.createElement("strong", null, __17("Editor Note:", "digiblocks")), /* @__PURE__ */ wp.element.createElement("br", null), __17("Hidden elements appear with reduced opacity in the editor for easy editing. Visibility changes only take effect on the frontend.", "digiblocks")),
            /* @__PURE__ */ wp.element.createElement(
              ToggleControl15,
              {
                label: __17("Hide on Desktop", "digiblocks"),
                checked: visibility.desktop,
                onChange: (value) => setAttributes({
                  visibility: {
                    ...visibility,
                    desktop: value
                  }
                }),
                __nextHasNoMarginBottom: true
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              ToggleControl15,
              {
                label: __17("Hide on Tablet", "digiblocks"),
                checked: visibility.tablet,
                onChange: (value) => setAttributes({
                  visibility: {
                    ...visibility,
                    tablet: value
                  }
                }),
                __nextHasNoMarginBottom: true
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              ToggleControl15,
              {
                label: __17("Hide on Mobile", "digiblocks"),
                checked: visibility.mobile,
                onChange: (value) => setAttributes({
                  visibility: {
                    ...visibility,
                    mobile: value
                  }
                }),
                __nextHasNoMarginBottom: true
              }
            )
          ), /* @__PURE__ */ wp.element.createElement(
            TabPanelBody16,
            {
              tab: "advanced",
              name: "additional",
              title: __17("Additional", "digiblocks"),
              initialOpen: false
            },
            /* @__PURE__ */ wp.element.createElement("div", { className: "components-base-control html-anchor-control" }, /* @__PURE__ */ wp.element.createElement("div", { className: "components-base-control__field" }, /* @__PURE__ */ wp.element.createElement("label", { className: "components-base-control__label", htmlFor: "html-anchor" }, __17("HTML anchor", "digiblocks")), /* @__PURE__ */ wp.element.createElement(
              "input",
              {
                className: "components-text-control__input",
                type: "text",
                id: "html-anchor",
                value: anchor || "",
                onChange: (e) => setAttributes({ anchor: e.target.value }),
                "aria-describedby": "html-anchor-help",
                autoCapitalize: "none",
                autoComplete: "off"
              }
            )), /* @__PURE__ */ wp.element.createElement("p", { id: "html-anchor-help", className: "components-base-control__help" }, __17(`Enter a word or two \u2014 without spaces \u2014 to make a unique web address just for this block, called an "anchor". Then, you'll be able to link directly to this section of your page.`, "digiblocks"), " ", /* @__PURE__ */ wp.element.createElement(
              "a",
              {
                className: "components-external-link",
                href: "https://wordpress.org/documentation/article/page-jumps/",
                target: "_blank",
                rel: "external noreferrer noopener"
              },
              /* @__PURE__ */ wp.element.createElement("span", { className: "components-external-link__contents" }, __17("Learn more about anchors", "digiblocks")),
              /* @__PURE__ */ wp.element.createElement("span", { className: "components-external-link__icon", "aria-label": "(opens in a new tab)" }, "\u2197")
            ))),
            /* @__PURE__ */ wp.element.createElement("div", { className: "components-base-control" }, /* @__PURE__ */ wp.element.createElement("div", { className: "components-base-control__field" }, /* @__PURE__ */ wp.element.createElement("label", { className: "components-base-control__label", htmlFor: "additional-css-classes" }, __17("Additional CSS class(es)", "digiblocks")), /* @__PURE__ */ wp.element.createElement(
              "input",
              {
                className: "components-text-control__input",
                type: "text",
                id: "additional-css-classes",
                value: customClasses || "",
                onChange: (e) => setAttributes({ customClasses: e.target.value }),
                "aria-describedby": "additional-css-classes-help",
                autoComplete: "off"
              }
            )), /* @__PURE__ */ wp.element.createElement("p", { id: "additional-css-classes-help", className: "components-base-control__help" }, __17("Separate multiple classes with spaces.", "digiblocks")))
          ));
        default:
          return null;
      }
    };
    const blockProps = useBlockProps28({
      className: `digiblocks-icon-box ${id} ${customClasses || ""}`,
      id: anchor || null
      // Set the anchor as ID if provided
    });
    return /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(InspectorControls15, null, /* @__PURE__ */ wp.element.createElement(
      CustomTabPanel15,
      {
        tabs: tabList,
        activeTab,
        onSelect: setActiveTab
      },
      renderTabContent()
    )), /* @__PURE__ */ wp.element.createElement("style", { dangerouslySetInnerHTML: { __html: generateCSS() } }), /* @__PURE__ */ wp.element.createElement("div", { ...blockProps }, renderIcon(), /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-icon-box-content" }, showTitle && /* @__PURE__ */ wp.element.createElement(
      RichText11,
      {
        tagName: "h3",
        className: "digiblocks-icon-box-title",
        value: title,
        onChange: (value) => setAttributes({ title: value }),
        placeholder: __17("Feature Title", "digiblocks")
      }
    ), showContent && /* @__PURE__ */ wp.element.createElement(
      RichText11,
      {
        tagName: "p",
        className: "digiblocks-icon-box-text",
        value: content,
        onChange: (value) => setAttributes({ content: value }),
        placeholder: __17(
          "Add your feature description here.",
          "digiblocks"
        )
      }
    ), renderButton())));
  };
  var edit_default15 = IconBoxEdit;

  // blocks/icon-box/save.js
  var { useBlockProps: useBlockProps29, RichText: RichText12 } = window.wp.blockEditor;
  var IconBoxSave = ({ attributes }) => {
    const {
      id,
      iconSource,
      customSvg,
      iconValue,
      title,
      showTitle,
      showContent,
      content,
      animation,
      hoverEffect,
      anchor,
      customClasses,
      linkEnabled,
      linkType,
      linkUrl,
      linkOpenInNewTab,
      linkRel,
      buttonText
    } = attributes;
    const blockClasses = [
      "digiblocks-icon-box",
      id,
      animation !== "none" ? `animate-${animation}` : "",
      hoverEffect !== "none" ? `has-hover-${hoverEffect}` : "",
      customClasses || ""
      // Add custom classes if they exist
    ].filter(Boolean).join(" ");
    const blockProps = useBlockProps29.save({
      className: blockClasses,
      id: anchor || null
    });
    const renderIcon = () => {
      if (iconSource === "library" && iconValue && iconValue.svg && iconValue.svg.trim() !== "") {
        return /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-icon-box-icon" }, /* @__PURE__ */ wp.element.createElement("span", { dangerouslySetInnerHTML: { __html: iconValue.svg } }));
      }
      if (iconSource === "custom" && customSvg && customSvg.trim() !== "") {
        return /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-icon-box-icon" }, /* @__PURE__ */ wp.element.createElement("span", { dangerouslySetInnerHTML: { __html: customSvg } }));
      }
      return null;
    };
    const renderButton = () => {
      if (!linkEnabled || linkType !== "button") {
        return null;
      }
      return /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-button-wrapper" }, /* @__PURE__ */ wp.element.createElement(
        "a",
        {
          className: "digiblocks-button",
          href: linkUrl || "#",
          target: linkOpenInNewTab ? "_blank" : "_self",
          rel: linkOpenInNewTab ? linkRel || "noopener noreferrer" : linkRel
        },
        /* @__PURE__ */ wp.element.createElement(RichText12.Content, { tagName: "span", value: buttonText })
      ));
    };
    const boxContent = /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-icon-box-content" }, showTitle !== false && /* @__PURE__ */ wp.element.createElement(
      RichText12.Content,
      {
        tagName: "h3",
        className: "digiblocks-icon-box-title",
        value: title
      }
    ), showContent !== false && /* @__PURE__ */ wp.element.createElement(
      RichText12.Content,
      {
        tagName: "p",
        className: "digiblocks-icon-box-text",
        value: content
      }
    ), renderButton());
    if (linkEnabled && linkType === "box" && linkUrl) {
      return /* @__PURE__ */ wp.element.createElement(
        "a",
        {
          ...blockProps,
          href: linkUrl,
          target: linkOpenInNewTab ? "_blank" : "_self",
          rel: linkOpenInNewTab ? linkRel || "noopener noreferrer" : linkRel
        },
        renderIcon(),
        boxContent
      );
    }
    return /* @__PURE__ */ wp.element.createElement("div", { ...blockProps }, renderIcon(), boxContent);
  };
  var save_default15 = IconBoxSave;

  // blocks/icon-list/edit.js
  var { __: __18 } = window.wp.i18n;
  var {
    useBlockProps: useBlockProps30,
    RichText: RichText13,
    InspectorControls: InspectorControls16,
    PanelColorSettings: PanelColorSettings15,
    LinkControl: LinkControl5
  } = window.wp.blockEditor;
  var {
    SelectControl: SelectControl17,
    RangeControl: RangeControl15,
    TabPanel: TabPanel11,
    Button: Button15,
    ToggleControl: ToggleControl16,
    Modal,
    Tooltip: Tooltip5,
    __experimentalToggleGroupControl: ToggleGroupControl15,
    __experimentalToggleGroupControlOption: ToggleGroupControlOption15
  } = window.wp.components;
  var { useState: useState16, useEffect: useEffect16, useRef: useRef13 } = window.wp.element;
  var { useBlockId: useBlockId16, getDimensionCSS: getDimensionCSS14, animations: animations14, animationPreview: animationPreview14 } = digi.utils;
  var { tabIcons: tabIcons16 } = digi.icons;
  var {
    ResponsiveControl: ResponsiveControl16,
    DimensionControl: DimensionControl15,
    TypographyControl: TypographyControl11,
    BoxShadowControl: BoxShadowControl14,
    CustomTabPanel: CustomTabPanel16,
    TabPanelBody: TabPanelBody17,
    FontAwesomeControl: FontAwesomeControl2
  } = digi.components;
  var IconListEdit = ({ attributes, setAttributes, clientId }) => {
    const {
      id,
      anchor,
      visibility,
      customClasses,
      items,
      defaultIconSource,
      defaultCustomSvg,
      defaultIcon,
      contentTypography,
      listLayout,
      listAlign,
      iconPosition,
      iconSize,
      iconSpace,
      itemSpace,
      iconColor,
      iconHoverColor,
      textColor,
      textHoverColor,
      animation,
      padding,
      margin,
      borderStyle,
      borderWidth,
      borderRadius,
      borderColor,
      borderHoverColor,
      boxShadow,
      boxShadowHover,
      backgroundColor,
      backgroundHoverColor,
      hoverEffect
    } = attributes;
    useBlockId16(id, clientId, setAttributes);
    const [localActiveDevice, setLocalActiveDevice] = useState16(
      window.digi.responsiveState.activeDevice
    );
    const [iconModalOpen, setIconModalOpen] = useState16(false);
    const [linkModalOpen, setLinkModalOpen] = useState16(false);
    const [currentEditingItem, setCurrentEditingItem] = useState16(null);
    const [isAnimating, setIsAnimating] = useState16(false);
    useEffect16(() => {
      const unsubscribe = window.digi.responsiveState.subscribe((device) => {
        setLocalActiveDevice(device);
      });
      return unsubscribe;
    }, []);
    const [activeTab, setActiveTab] = useState16(() => {
      if (window.digi.uiState) {
        const savedTab = window.digi.uiState.getActiveTab(clientId);
        if (savedTab)
          return savedTab;
      }
      return "options";
    });
    const [componentsLoaded, setComponentsLoaded] = useState16(false);
    useEffect16(() => {
      const checkComponents = () => {
        if (window.digi && window.digi.components && window.digi.components.FontAwesomeControl) {
          setComponentsLoaded(true);
          return true;
        }
        return false;
      };
      if (!checkComponents()) {
        const timeout = setTimeout(() => {
          if (checkComponents()) {
            clearTimeout(timeout);
          }
        }, 500);
        return () => clearTimeout(timeout);
      }
    }, []);
    const previewTimeoutRef = useRef13(null);
    useEffect16(() => {
      if (animation && animation !== "none") {
        const timeoutId = setTimeout(() => {
          animationPreview14(id, animation, animations14, previewTimeoutRef);
        }, 100);
        return () => clearTimeout(timeoutId);
      }
    }, [animation]);
    const handlePreviewClick = () => {
      animationPreview14(id, animation, animations14, previewTimeoutRef);
    };
    const borderStyleOptions = [
      { label: __18("Default", "digiblocks"), value: "default" },
      { label: __18("None", "digiblocks"), value: "none" },
      { label: __18("Solid", "digiblocks"), value: "solid" },
      { label: __18("Dotted", "digiblocks"), value: "dotted" },
      { label: __18("Dashed", "digiblocks"), value: "dashed" },
      { label: __18("Double", "digiblocks"), value: "double" },
      { label: __18("Groove", "digiblocks"), value: "groove" },
      { label: __18("Inset", "digiblocks"), value: "inset" },
      { label: __18("Outset", "digiblocks"), value: "outset" },
      { label: __18("Ridge", "digiblocks"), value: "ridge" }
    ];
    const hoverEffectOptions = [
      { label: __18("None", "digiblocks"), value: "none" },
      { label: __18("Lift", "digiblocks"), value: "lift" },
      { label: __18("Scale", "digiblocks"), value: "scale" },
      { label: __18("Glow", "digiblocks"), value: "glow" }
    ];
    const animationOptions = [
      { label: __18("None", "digiblocks"), value: "none" },
      ...Object.keys(animations14).map((animation2) => ({
        label: animation2.replace(/-/g, " ").replace(/\b\w/g, (l) => l.toUpperCase()),
        value: animation2
      }))
    ];
    const tabList = [
      {
        name: "options",
        title: __18("Options", "digiblocks"),
        icon: tabIcons16.optionsIcon
      },
      {
        name: "style",
        title: __18("Style", "digiblocks"),
        icon: tabIcons16.styleIcon
      },
      {
        name: "advanced",
        title: __18("Advanced", "digiblocks"),
        icon: tabIcons16.advancedIcon
      }
    ];
    const stateTabList = [
      {
        name: "normal",
        title: __18("Normal", "digiblocks"),
        className: "digiblocks-tab-1 normal"
      },
      {
        name: "hover",
        title: __18("Hover", "digiblocks"),
        className: "digiblocks-tab-2 hover"
      }
    ];
    const addListItem = () => {
      const newItems = [...items];
      newItems.push({
        id: `item-${Date.now()}`,
        content: __18("New list item", "digiblocks"),
        icon: { ...defaultIcon },
        linkUrl: "",
        linkOpenInNewTab: false,
        linkRel: ""
      });
      setAttributes({ items: newItems });
    };
    const removeListItem = (index) => {
      const newItems = [...items];
      newItems.splice(index, 1);
      setAttributes({ items: newItems });
    };
    const updateListItem = (index, field, value) => {
      const newItems = [...items];
      newItems[index][field] = value;
      setAttributes({ items: newItems });
    };
    const moveItemUp = (index) => {
      if (index === 0)
        return;
      const newItems = [...items];
      [newItems[index - 1], newItems[index]] = [
        newItems[index],
        newItems[index - 1]
      ];
      setAttributes({ items: newItems });
    };
    const moveItemDown = (index) => {
      if (index === items.length - 1)
        return;
      const newItems = [...items];
      [newItems[index], newItems[index + 1]] = [
        newItems[index + 1],
        newItems[index]
      ];
      setAttributes({ items: newItems });
    };
    const duplicateItem = (index) => {
      const newItems = [...items];
      const duplicatedItem = { ...items[index], id: `item-${Date.now()}` };
      newItems.splice(index + 1, 0, duplicatedItem);
      setAttributes({ items: newItems });
    };
    const setItemIcon = (index, icon) => {
      const newItems = [...items];
      newItems[index].icon = icon;
      setAttributes({ items: newItems });
    };
    const FontAwesomeControl6 = componentsLoaded ? window.digi.components.FontAwesomeControl : null;
    const generateCSS = () => {
      const activeDevice = window.digi.responsiveState.activeDevice;
      let borderCSS = "";
      if (borderStyle && borderStyle !== "default" && borderStyle !== "none") {
        borderCSS = `
                border-style: ${borderStyle};
                border-color: ${borderColor || "#e0e0e0"};
				${getDimensionCSS14(borderWidth, "border-width", activeDevice)}
				${getDimensionCSS14(borderRadius, "border-radius", activeDevice)}
			`;
      } else {
        borderCSS = "border: none;";
      }
      let boxShadowCSS = "box-shadow: none;";
      if (boxShadow && boxShadow.enable) {
        const inset = boxShadow.position === "inset" ? "inset " : "";
        boxShadowCSS = `box-shadow: ${inset}${boxShadow.horizontal}px ${boxShadow.vertical}px ${boxShadow.blur}px ${boxShadow.spread}px ${boxShadow.color};`;
      }
      const paddingCSS = `${getDimensionCSS14(padding, "padding", activeDevice)}`;
      const marginCSS = `${getDimensionCSS14(margin, "margin", activeDevice)}`;
      let contentTypographyCSS = "";
      if (contentTypography) {
        if (contentTypography.fontFamily) {
          contentTypographyCSS += `font-family: ${contentTypography.fontFamily};`;
        }
        if (contentTypography.fontSize && contentTypography.fontSize[activeDevice]) {
          contentTypographyCSS += `font-size: ${contentTypography.fontSize[activeDevice]}${contentTypography.fontSizeUnit || "px"};`;
        }
        if (contentTypography.fontWeight) {
          contentTypographyCSS += `font-weight: ${contentTypography.fontWeight};`;
        }
        if (contentTypography.fontStyle) {
          contentTypographyCSS += `font-style: ${contentTypography.fontStyle};`;
        }
        if (contentTypography.textTransform) {
          contentTypographyCSS += `text-transform: ${contentTypography.textTransform};`;
        }
        if (contentTypography.textDecoration) {
          contentTypographyCSS += `text-decoration: ${contentTypography.textDecoration};`;
        }
        if (contentTypography.lineHeight && contentTypography.lineHeight[activeDevice]) {
          contentTypographyCSS += `line-height: ${contentTypography.lineHeight[activeDevice]}${contentTypography.lineHeightUnit || "em"};`;
        }
        if (contentTypography.letterSpacing && contentTypography.letterSpacing[activeDevice]) {
          contentTypographyCSS += `letter-spacing: ${contentTypography.letterSpacing[activeDevice]}${contentTypography.letterSpacingUnit || "px"};`;
        }
      }
      let hoverCSS = "";
      if (boxShadowHover && boxShadowHover.enable) {
        const insetHover = boxShadowHover.position === "inset" ? "inset " : "";
        hoverCSS += `box-shadow: ${insetHover}${boxShadowHover.horizontal}px ${boxShadowHover.vertical}px ${boxShadowHover.blur}px ${boxShadowHover.spread}px ${boxShadowHover.color};`;
      }
      if (hoverEffect === "lift") {
        hoverCSS += "transform: translateY(-10px);";
      } else if (hoverEffect === "scale") {
        hoverCSS += "transform: scale(1.05);";
      } else if (hoverEffect === "glow") {
        hoverCSS += "filter: brightness(1.1);";
      }
      return `
            /* Icon List Block - ${id} */
            .${id} {
                ${paddingCSS}
                ${marginCSS}
                ${borderCSS}
                ${boxShadowCSS}
                ${backgroundColor ? `background-color: ${backgroundColor};` : ""}
                transition: all 0.3s ease;
            }
            
            .${id}:hover {
                ${backgroundHoverColor ? `background-color: ${backgroundHoverColor};` : ""}
                ${borderHoverColor ? `border-color: ${borderHoverColor};` : ""}
                ${hoverCSS}
            }
            
            /* List container */
            .${id} .digiblocks-icon-list-wrapper {
                text-align: ${listAlign};
            }
            
            .${id} .digiblocks-icon-list {
                list-style: none;
                margin: 0;
                padding: 0;
                display: flex;
				flex-direction: ${listLayout === "horizontal" ? "row" : "column"};
				flex-wrap: wrap;
				gap: ${itemSpace[activeDevice] !== void 0 ? itemSpace[activeDevice] : 16}px;
            }
            
            /* List item */
            .${id} .digiblocks-icon-list-item {
                display: inline-flex;
                align-items: center;
				gap: ${iconSpace[activeDevice] !== void 0 ? iconSpace[activeDevice] : 12}px;
				justify-content: ${listAlign === "center" ? "center" : listAlign === "right" ? "flex-end" : "flex-start"};
                transition: all 0.3s ease;
            }
            
            .${id} .digiblocks-icon-list-item:last-child {
                margin-bottom: 0;
            }
            
            /* Icon */
            .${id} .digiblocks-icon-list-icon {
                flex-shrink: 0;
                display: flex;
                align-items: center;
                justify-content: center;
                color: ${iconColor || "#1e73be"};
                transition: color 0.3s ease;
            }
            
            .${id} .digiblocks-icon-list-icon span {
                display: flex;
            }
            
            .${id} .digiblocks-icon-list-icon svg {
                width: ${iconSize[activeDevice] !== void 0 ? iconSize[activeDevice] : 24}px;
                height: ${iconSize[activeDevice] !== void 0 ? iconSize[activeDevice] : 24}px;
                fill: currentColor;
            }
            
            /* Text content */
            .${id} .digiblocks-icon-list-content {
                color: ${textColor || "#333333"};
                ${contentTypographyCSS}
                transition: color 0.3s ease;
            }
            
            /* Hover states */
            .${id} .digiblocks-icon-list-item:hover .digiblocks-icon-list-icon {
                color: ${iconHoverColor};
            }
            
            .${id} .digiblocks-icon-list-item:hover .digiblocks-icon-list-content {
                color: ${textHoverColor};
            }

            .${id} .digiblocks-icon-list-child {
                display: inline-flex;
                ${iconPosition === "after" ? "flex-direction: row-reverse;" : ""}
				gap: ${iconSpace[activeDevice] !== void 0 ? iconSpace[activeDevice] : 12}px;
                align-items: center;
            }
            
            /* Link cursor for clickable items */
            .${id} .digiblocks-icon-list-item a {
                cursor: pointer;
                text-decoration: none;
                color: inherit;
            }
            
            /* Editor specific styles */
            .digiblocks-icon-list-item-controls {
                display: flex;
                gap: 5px;
                position: absolute;
                right: 0;
                top: 0;
                background-color: #fff;
                padding: 2px;
                border-radius: 3px;
                box-shadow: 0 1px 3px rgba(0,0,0,0.12);
                z-index: 10;
                opacity: 0;
                transition: opacity 0.3s ease;
            }
            
            .${id} .digiblocks-icon-list-item {
                position: relative;
            }
            
            .${id} .digiblocks-icon-list-item:hover .digiblocks-icon-list-item-controls {
                opacity: 1;
            }

			/* Visibility Controls */
			${visibility.desktop ? `
				@media (min-width: 992px) {
					.${id} {
						opacity: 0.5 !important;
					}
				}
			` : ""}

			${visibility.tablet ? `
				@media (min-width: 768px) and (max-width: 991px) {
					.${id} {
						opacity: 0.5 !important;
					}
				}
			` : ""}

			${visibility.mobile ? `
				@media (max-width: 767px) {
					.${id} {
						opacity: 0.5 !important;
					}
				}
			` : ""}
        `;
    };
    const renderTabContent = () => {
      switch (activeTab) {
        case "options":
          return /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(
            TabPanelBody17,
            {
              tab: "options",
              name: "list-items",
              title: __18("List Items", "digiblocks"),
              initialOpen: true
            },
            /* @__PURE__ */ wp.element.createElement(
              ToggleGroupControl15,
              {
                label: __18("Default Icon Source", "digiblocks"),
                value: defaultIconSource || "library",
                onChange: (value) => setAttributes({ defaultIconSource: value }),
                isBlock: true,
                __next40pxDefaultSize: true,
                __nextHasNoMarginBottom: true
              },
              /* @__PURE__ */ wp.element.createElement(
                ToggleGroupControlOption15,
                {
                  value: "library",
                  label: __18("Library", "digiblocks")
                }
              ),
              /* @__PURE__ */ wp.element.createElement(
                ToggleGroupControlOption15,
                {
                  value: "custom",
                  label: __18("Custom", "digiblocks")
                }
              )
            ),
            (!defaultIconSource || defaultIconSource === "library") && /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, !componentsLoaded ? /* @__PURE__ */ wp.element.createElement("div", { style: { textAlign: "center", padding: "20px 0" } }, /* @__PURE__ */ wp.element.createElement("div", { className: "components-spinner" }), /* @__PURE__ */ wp.element.createElement("p", null, __18("Loading icon selector...", "digiblocks"))) : /* @__PURE__ */ wp.element.createElement(
              FontAwesomeControl6,
              {
                label: __18("Select Icon", "digiblocks"),
                value: defaultIcon,
                onChange: (value) => setAttributes({ defaultIcon: value })
              }
            )),
            defaultIconSource === "custom" && /* @__PURE__ */ wp.element.createElement("div", { style: { marginTop: "15px" } }, /* @__PURE__ */ wp.element.createElement("div", { className: "components-base-control" }, /* @__PURE__ */ wp.element.createElement("label", { className: "components-base-control__label", htmlFor: "default-custom-svg-input" }, __18("Custom SVG Code", "digiblocks")), /* @__PURE__ */ wp.element.createElement(
              "textarea",
              {
                id: "default-custom-svg-input",
                className: "components-textarea-control__input",
                value: defaultCustomSvg || "",
                onChange: (e) => {
                  const newSvg = e.target.value;
                  const newIconValue = {
                    id: "custom-svg",
                    name: "Custom SVG",
                    svg: newSvg,
                    style: "custom",
                    categories: ["custom"]
                  };
                  setAttributes({
                    defaultCustomSvg: newSvg,
                    defaultIcon: newIconValue
                  });
                },
                placeholder: __18("Paste your SVG code here...", "digiblocks"),
                rows: 6,
                style: { width: "100%", marginTop: "8px" }
              }
            ), /* @__PURE__ */ wp.element.createElement("p", { className: "components-base-control__help" }, __18("Paste your SVG code here. Make sure it only contains valid SVG markup.", "digiblocks"))), defaultCustomSvg && /* @__PURE__ */ wp.element.createElement("div", { style: { marginTop: "15px", marginBottom: "15px" } }, /* @__PURE__ */ wp.element.createElement("p", null, /* @__PURE__ */ wp.element.createElement("strong", null, __18("Preview:", "digiblocks"))), /* @__PURE__ */ wp.element.createElement("div", { style: { padding: "20px", background: "#f0f0f1", borderRadius: "3px", display: "flex", justifyContent: "center", alignItems: "center" } }, /* @__PURE__ */ wp.element.createElement("div", { style: { width: "50px", height: "50px" }, dangerouslySetInnerHTML: { __html: defaultCustomSvg } })))),
            /* @__PURE__ */ wp.element.createElement(
              ToggleGroupControl15,
              {
                label: __18("List Layout", "digiblocks"),
                value: listLayout,
                onChange: (value) => setAttributes({ listLayout: value }),
                isBlock: true,
                __next40pxDefaultSize: true,
                __nextHasNoMarginBottom: true
              },
              /* @__PURE__ */ wp.element.createElement(
                ToggleGroupControlOption15,
                {
                  value: "horizontal",
                  label: __18("Horizontal", "digiblocks")
                }
              ),
              /* @__PURE__ */ wp.element.createElement(
                ToggleGroupControlOption15,
                {
                  value: "vertical",
                  label: __18("Vertical", "digiblocks")
                }
              )
            ),
            /* @__PURE__ */ wp.element.createElement(
              ToggleGroupControl15,
              {
                label: __18("List Alignment", "digiblocks"),
                value: listAlign,
                onChange: (value) => setAttributes({ listAlign: value }),
                isBlock: true,
                __next40pxDefaultSize: true,
                __nextHasNoMarginBottom: true
              },
              /* @__PURE__ */ wp.element.createElement(
                ToggleGroupControlOption15,
                {
                  value: "left",
                  label: __18("Left", "digiblocks")
                }
              ),
              /* @__PURE__ */ wp.element.createElement(
                ToggleGroupControlOption15,
                {
                  value: "center",
                  label: __18("Center", "digiblocks")
                }
              ),
              /* @__PURE__ */ wp.element.createElement(
                ToggleGroupControlOption15,
                {
                  value: "right",
                  label: __18("Right", "digiblocks")
                }
              )
            ),
            /* @__PURE__ */ wp.element.createElement(
              ToggleGroupControl15,
              {
                label: __18("Icon Position", "digiblocks"),
                value: iconPosition,
                onChange: (value) => setAttributes({ iconPosition: value }),
                isBlock: true,
                __next40pxDefaultSize: true,
                __nextHasNoMarginBottom: true
              },
              /* @__PURE__ */ wp.element.createElement(
                ToggleGroupControlOption15,
                {
                  value: "before",
                  label: __18("Before", "digiblocks")
                }
              ),
              /* @__PURE__ */ wp.element.createElement(
                ToggleGroupControlOption15,
                {
                  value: "after",
                  label: __18("After", "digiblocks")
                }
              )
            ),
            /* @__PURE__ */ wp.element.createElement(
              ResponsiveControl16,
              {
                label: __18("Item Spacing", "digiblocks")
              },
              /* @__PURE__ */ wp.element.createElement(
                RangeControl15,
                {
                  value: itemSpace[localActiveDevice],
                  onChange: (value) => setAttributes({
                    itemSpace: {
                      ...itemSpace,
                      [localActiveDevice]: value
                    }
                  }),
                  min: 0,
                  max: 100,
                  step: 1,
                  __next40pxDefaultSize: true,
                  __nextHasNoMarginBottom: true
                }
              )
            ),
            /* @__PURE__ */ wp.element.createElement(
              ResponsiveControl16,
              {
                label: __18("Icon Spacing", "digiblocks")
              },
              /* @__PURE__ */ wp.element.createElement(
                RangeControl15,
                {
                  value: iconSpace[localActiveDevice],
                  onChange: (value) => setAttributes({
                    iconSpace: {
                      ...iconSpace,
                      [localActiveDevice]: value
                    }
                  }),
                  min: 0,
                  max: 50,
                  step: 1,
                  __next40pxDefaultSize: true,
                  __nextHasNoMarginBottom: true
                }
              )
            )
          ));
        case "style":
          return /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(
            TabPanelBody17,
            {
              tab: "style",
              name: "icon-style",
              title: __18("Icon Style", "digiblocks"),
              initialOpen: true
            },
            /* @__PURE__ */ wp.element.createElement(
              ResponsiveControl16,
              {
                label: __18("Icon Size", "digiblocks")
              },
              /* @__PURE__ */ wp.element.createElement(
                RangeControl15,
                {
                  value: iconSize[localActiveDevice],
                  onChange: (value) => setAttributes({
                    iconSize: {
                      ...iconSize,
                      [localActiveDevice]: value
                    }
                  }),
                  min: 8,
                  max: 100,
                  step: 1,
                  __next40pxDefaultSize: true,
                  __nextHasNoMarginBottom: true
                }
              )
            ),
            /* @__PURE__ */ wp.element.createElement(
              TabPanel11,
              {
                className: "digiblocks-control-tabs",
                activeClass: "active-tab",
                tabs: stateTabList
              },
              (tab) => /* @__PURE__ */ wp.element.createElement(
                PanelColorSettings15,
                {
                  title: tab.name === "normal" ? __18(
                    "Icon Colors",
                    "digiblocks"
                  ) : __18(
                    "Icon Hover Colors",
                    "digiblocks"
                  ),
                  initialOpen: true,
                  enableAlpha: true,
                  colorSettings: [
                    {
                      value: tab.name === "normal" ? iconColor : iconHoverColor,
                      onChange: (value) => setAttributes(
                        tab.name === "normal" ? {
                          iconColor: value
                        } : {
                          iconHoverColor: value
                        }
                      ),
                      label: __18(
                        "Icon Color",
                        "digiblocks"
                      )
                    }
                  ]
                }
              )
            )
          ), /* @__PURE__ */ wp.element.createElement(
            TabPanelBody17,
            {
              tab: "style",
              name: "text-style",
              title: __18("Text Style", "digiblocks"),
              initialOpen: false
            },
            /* @__PURE__ */ wp.element.createElement(
              TabPanel11,
              {
                className: "digiblocks-control-tabs",
                activeClass: "active-tab",
                tabs: stateTabList
              },
              (tab) => /* @__PURE__ */ wp.element.createElement(
                PanelColorSettings15,
                {
                  title: tab.name === "normal" ? __18(
                    "Text Colors",
                    "digiblocks"
                  ) : __18(
                    "Text Hover Colors",
                    "digiblocks"
                  ),
                  initialOpen: true,
                  enableAlpha: true,
                  colorSettings: [
                    {
                      value: tab.name === "normal" ? textColor : textHoverColor,
                      onChange: (value) => setAttributes(
                        tab.name === "normal" ? {
                          textColor: value
                        } : {
                          textHoverColor: value
                        }
                      ),
                      label: __18(
                        "Text Color",
                        "digiblocks"
                      )
                    }
                  ]
                }
              )
            ),
            /* @__PURE__ */ wp.element.createElement(
              TypographyControl11,
              {
                label: __18("Typography", "digiblocks"),
                value: contentTypography,
                onChange: (value) => setAttributes({ contentTypography: value }),
                defaults: {
                  fontSize: {
                    desktop: 16,
                    tablet: 15,
                    mobile: 14
                  },
                  fontSizeUnit: "px",
                  lineHeight: {
                    desktop: 1.5,
                    tablet: 1.4,
                    mobile: 1.3
                  },
                  lineHeightUnit: "em"
                }
              }
            )
          ), /* @__PURE__ */ wp.element.createElement(
            TabPanelBody17,
            {
              tab: "style",
              name: "box-style",
              title: __18("Box Style", "digiblocks"),
              initialOpen: false
            },
            /* @__PURE__ */ wp.element.createElement(
              SelectControl17,
              {
                label: __18("Border Style", "digiblocks"),
                value: borderStyle || "default",
                options: borderStyleOptions,
                onChange: (value) => {
                  setAttributes({ borderStyle: value });
                },
                __next40pxDefaultSize: true,
                __nextHasNoMarginBottom: true
              }
            ),
            borderStyle && borderStyle !== "default" && borderStyle !== "none" && /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(
              PanelColorSettings15,
              {
                title: __18(
                  "Border Colors",
                  "digiblocks"
                ),
                enableAlpha: true,
                colorSettings: [
                  {
                    value: borderColor,
                    onChange: (value) => setAttributes({
                      borderColor: value
                    }),
                    label: __18(
                      "Border Color",
                      "digiblocks"
                    )
                  },
                  {
                    value: borderHoverColor,
                    onChange: (value) => setAttributes({
                      borderHoverColor: value
                    }),
                    label: __18(
                      "Border Hover Color",
                      "digiblocks"
                    )
                  }
                ]
              }
            ), /* @__PURE__ */ wp.element.createElement(
              ResponsiveControl16,
              {
                label: __18(
                  "Border Width",
                  "digiblocks"
                )
              },
              /* @__PURE__ */ wp.element.createElement(
                DimensionControl15,
                {
                  values: borderWidth[localActiveDevice],
                  onChange: (value) => setAttributes({
                    borderWidth: {
                      ...borderWidth,
                      [localActiveDevice]: value
                    }
                  })
                }
              )
            ), /* @__PURE__ */ wp.element.createElement(
              ResponsiveControl16,
              {
                label: __18(
                  "Border Radius",
                  "digiblocks"
                )
              },
              /* @__PURE__ */ wp.element.createElement(
                DimensionControl15,
                {
                  values: borderRadius[localActiveDevice],
                  onChange: (value) => setAttributes({
                    borderRadius: {
                      ...borderRadius,
                      [localActiveDevice]: value
                    }
                  }),
                  units: [
                    {
                      label: "px",
                      value: "px"
                    },
                    { label: "%", value: "%" }
                  ]
                }
              )
            )),
            /* @__PURE__ */ wp.element.createElement(
              TabPanel11,
              {
                className: "digiblocks-control-tabs",
                activeClass: "active-tab",
                tabs: stateTabList
              },
              (tab) => /* @__PURE__ */ wp.element.createElement(
                PanelColorSettings15,
                {
                  title: tab.name === "normal" ? __18(
                    "Background Colors",
                    "digiblocks"
                  ) : __18(
                    "Background Hover Colors",
                    "digiblocks"
                  ),
                  initialOpen: true,
                  enableAlpha: true,
                  colorSettings: [
                    {
                      value: tab.name === "normal" ? backgroundColor : backgroundHoverColor,
                      onChange: (value) => setAttributes(
                        tab.name === "normal" ? {
                          backgroundColor: value
                        } : {
                          backgroundHoverColor: value
                        }
                      ),
                      label: __18(
                        "Background Color",
                        "digiblocks"
                      )
                    }
                  ]
                }
              )
            ),
            /* @__PURE__ */ wp.element.createElement(
              SelectControl17,
              {
                label: __18("Hover Effect", "digiblocks"),
                value: hoverEffect,
                options: hoverEffectOptions,
                onChange: (value) => setAttributes({ hoverEffect: value }),
                __next40pxDefaultSize: true,
                __nextHasNoMarginBottom: true
              }
            )
          ), /* @__PURE__ */ wp.element.createElement(
            TabPanelBody17,
            {
              tab: "style",
              name: "shadow",
              title: __18("Box Shadow", "digiblocks"),
              initialOpen: false
            },
            /* @__PURE__ */ wp.element.createElement(
              BoxShadowControl14,
              {
                normalValue: boxShadow,
                hoverValue: boxShadowHover,
                onNormalChange: (value) => setAttributes({ boxShadow: value }),
                onHoverChange: (value) => setAttributes({ boxShadowHover: value })
              }
            )
          ), /* @__PURE__ */ wp.element.createElement(
            TabPanelBody17,
            {
              tab: "style",
              name: "spacing",
              title: __18("Spacing", "digiblocks"),
              initialOpen: false
            },
            /* @__PURE__ */ wp.element.createElement(
              ResponsiveControl16,
              {
                label: __18("Padding", "digiblocks")
              },
              /* @__PURE__ */ wp.element.createElement(
                DimensionControl15,
                {
                  values: padding[localActiveDevice],
                  onChange: (value) => setAttributes({
                    padding: {
                      ...padding,
                      [localActiveDevice]: value
                    }
                  })
                }
              )
            ),
            /* @__PURE__ */ wp.element.createElement(
              ResponsiveControl16,
              {
                label: __18("Margin", "digiblocks")
              },
              /* @__PURE__ */ wp.element.createElement(
                DimensionControl15,
                {
                  values: margin[localActiveDevice],
                  onChange: (value) => setAttributes({
                    margin: {
                      ...margin,
                      [localActiveDevice]: value
                    }
                  })
                }
              )
            )
          ));
        case "advanced":
          return /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(
            TabPanelBody17,
            {
              tab: "advanced",
              name: "animation",
              title: __18("Animation", "digiblocks"),
              initialOpen: true
            },
            /* @__PURE__ */ wp.element.createElement(
              SelectControl17,
              {
                label: __18("Animation Effect", "digiblocks"),
                value: animation,
                options: animationOptions,
                onChange: (value) => setAttributes({ animation: value }),
                __next40pxDefaultSize: true,
                __nextHasNoMarginBottom: true
              }
            ),
            animation && animation !== "none" && /* @__PURE__ */ wp.element.createElement("div", { style: { marginTop: "10px" } }, /* @__PURE__ */ wp.element.createElement(
              Button15,
              {
                variant: "secondary",
                isSecondary: true,
                onClick: handlePreviewClick,
                style: { width: "100%" }
              },
              __18("Preview Animation", "digiblocks")
            ))
          ), /* @__PURE__ */ wp.element.createElement(
            TabPanelBody17,
            {
              tab: "advanced",
              name: "visibility",
              title: __18("Visibility", "digiblocks"),
              initialOpen: false
            },
            /* @__PURE__ */ wp.element.createElement("div", { className: "components-base-control__help", style: {
              padding: "12px",
              backgroundColor: "#f0f6fc",
              border: "1px solid #c3ddfd",
              borderRadius: "4px",
              marginBottom: "16px"
            } }, /* @__PURE__ */ wp.element.createElement("strong", null, __18("Editor Note:", "digiblocks")), /* @__PURE__ */ wp.element.createElement("br", null), __18("Hidden elements appear with reduced opacity in the editor for easy editing. Visibility changes only take effect on the frontend.", "digiblocks")),
            /* @__PURE__ */ wp.element.createElement(
              ToggleControl16,
              {
                label: __18("Hide on Desktop", "digiblocks"),
                checked: visibility.desktop,
                onChange: (value) => setAttributes({
                  visibility: {
                    ...visibility,
                    desktop: value
                  }
                }),
                __nextHasNoMarginBottom: true
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              ToggleControl16,
              {
                label: __18("Hide on Tablet", "digiblocks"),
                checked: visibility.tablet,
                onChange: (value) => setAttributes({
                  visibility: {
                    ...visibility,
                    tablet: value
                  }
                }),
                __nextHasNoMarginBottom: true
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              ToggleControl16,
              {
                label: __18("Hide on Mobile", "digiblocks"),
                checked: visibility.mobile,
                onChange: (value) => setAttributes({
                  visibility: {
                    ...visibility,
                    mobile: value
                  }
                }),
                __nextHasNoMarginBottom: true
              }
            )
          ), /* @__PURE__ */ wp.element.createElement(
            TabPanelBody17,
            {
              tab: "advanced",
              name: "additional",
              title: __18("Additional", "digiblocks"),
              initialOpen: false
            },
            /* @__PURE__ */ wp.element.createElement("div", { className: "components-base-control html-anchor-control" }, /* @__PURE__ */ wp.element.createElement("div", { className: "components-base-control__field" }, /* @__PURE__ */ wp.element.createElement(
              "label",
              {
                className: "components-base-control__label",
                htmlFor: "html-anchor"
              },
              __18("HTML anchor", "digiblocks")
            ), /* @__PURE__ */ wp.element.createElement(
              "input",
              {
                className: "components-text-control__input",
                type: "text",
                id: "html-anchor",
                value: anchor || "",
                onChange: (e) => setAttributes({
                  anchor: e.target.value
                }),
                "aria-describedby": "html-anchor-help",
                autoCapitalize: "none",
                autoComplete: "off"
              }
            )), /* @__PURE__ */ wp.element.createElement(
              "p",
              {
                id: "html-anchor-help",
                className: "components-base-control__help"
              },
              __18(
                `Enter a word or two \u2014 without spaces \u2014 to make a unique web address just for this block, called an "anchor". Then, you'll be able to link directly to this section of your page.`,
                "digiblocks"
              )
            )),
            /* @__PURE__ */ wp.element.createElement("div", { className: "components-base-control" }, /* @__PURE__ */ wp.element.createElement("div", { className: "components-base-control__field" }, /* @__PURE__ */ wp.element.createElement(
              "label",
              {
                className: "components-base-control__label",
                htmlFor: "additional-css-classes"
              },
              __18(
                "Additional CSS class(es)",
                "digiblocks"
              )
            ), /* @__PURE__ */ wp.element.createElement(
              "input",
              {
                className: "components-text-control__input",
                type: "text",
                id: "additional-css-classes",
                value: customClasses || "",
                onChange: (e) => setAttributes({
                  customClasses: e.target.value
                }),
                "aria-describedby": "additional-css-classes-help",
                autoComplete: "off"
              }
            )), /* @__PURE__ */ wp.element.createElement(
              "p",
              {
                id: "additional-css-classes-help",
                className: "components-base-control__help"
              },
              __18(
                "Separate multiple classes with spaces.",
                "digiblocks"
              )
            ))
          ));
        default:
          return null;
      }
    };
    const renderListItems = () => {
      return items.map((item, index) => {
        const isLast = index === items.length - 1;
        const itemContent = /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, item.icon && item.icon.svg && /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-icon-list-icon" }, /* @__PURE__ */ wp.element.createElement(
          "span",
          {
            dangerouslySetInnerHTML: {
              __html: item.icon.svg
            }
          }
        )), /* @__PURE__ */ wp.element.createElement(
          RichText13,
          {
            className: "digiblocks-icon-list-content",
            value: item.content,
            onChange: (value) => updateListItem(index, "content", value),
            placeholder: __18(
              "Enter list item text...",
              "digiblocks"
            ),
            allowedFormats: [
              "core/bold",
              "core/italic",
              "core/inline-code"
            ]
          }
        ));
        return /* @__PURE__ */ wp.element.createElement(
          "li",
          {
            key: item.id,
            className: "digiblocks-icon-list-item",
            style: isLast ? { marginBottom: 0 } : {}
          },
          item.linkUrl ? /* @__PURE__ */ wp.element.createElement("a", { href: "#", onClick: (e) => e.preventDefault(), className: "digiblocks-icon-list-child" }, itemContent) : /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-icon-list-child" }, itemContent),
          /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-icon-list-item-controls" }, /* @__PURE__ */ wp.element.createElement(Tooltip5, { text: __18("Edit Icon", "digiblocks") }, /* @__PURE__ */ wp.element.createElement(
            Button15,
            {
              icon: "admin-customizer",
              onClick: () => {
                setCurrentEditingItem(index);
                setIconModalOpen(true);
              },
              isSmall: true
            }
          )), /* @__PURE__ */ wp.element.createElement(Tooltip5, { text: __18("Link", "digiblocks") }, /* @__PURE__ */ wp.element.createElement(
            Button15,
            {
              icon: "admin-links",
              onClick: () => {
                setCurrentEditingItem(index);
                setLinkModalOpen(true);
              },
              isSmall: true,
              variant: item.linkUrl ? "primary" : "secondary"
            }
          )), /* @__PURE__ */ wp.element.createElement(Tooltip5, { text: __18("Move Up", "digiblocks") }, /* @__PURE__ */ wp.element.createElement(
            Button15,
            {
              icon: "arrow-up-alt2",
              onClick: () => moveItemUp(index),
              disabled: index === 0,
              isSmall: true
            }
          )), /* @__PURE__ */ wp.element.createElement(Tooltip5, { text: __18("Move Down", "digiblocks") }, /* @__PURE__ */ wp.element.createElement(
            Button15,
            {
              icon: "arrow-down-alt2",
              onClick: () => moveItemDown(index),
              disabled: index === items.length - 1,
              isSmall: true
            }
          )), /* @__PURE__ */ wp.element.createElement(Tooltip5, { text: __18("Duplicate", "digiblocks") }, /* @__PURE__ */ wp.element.createElement(
            Button15,
            {
              icon: "admin-page",
              onClick: () => duplicateItem(index),
              isSmall: true
            }
          )), /* @__PURE__ */ wp.element.createElement(Tooltip5, { text: __18("Remove", "digiblocks") }, /* @__PURE__ */ wp.element.createElement(
            Button15,
            {
              icon: "trash",
              onClick: () => removeListItem(index),
              isSmall: true
            }
          )))
        );
      });
    };
    const blockProps = useBlockProps30({
      className: `digiblocks-icon-list-block ${id} ${customClasses || ""}`,
      id: anchor || null
    });
    return /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(InspectorControls16, null, /* @__PURE__ */ wp.element.createElement(
      CustomTabPanel16,
      {
        tabs: tabList,
        activeTab,
        onSelect: setActiveTab
      },
      renderTabContent()
    )), /* @__PURE__ */ wp.element.createElement("style", { dangerouslySetInnerHTML: { __html: generateCSS() } }), /* @__PURE__ */ wp.element.createElement("div", { ...blockProps }, /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-icon-list-wrapper" }, /* @__PURE__ */ wp.element.createElement("ul", { className: "digiblocks-icon-list" }, renderListItems())), iconModalOpen && currentEditingItem !== null && /* @__PURE__ */ wp.element.createElement(
      Modal,
      {
        title: __18("Choose Icon", "digiblocks"),
        onRequestClose: () => setIconModalOpen(false),
        className: "digiblocks-icon-modal"
      },
      /* @__PURE__ */ wp.element.createElement(
        ToggleGroupControl15,
        {
          label: __18("Icon Source", "digiblocks"),
          value: items[currentEditingItem].iconSource || "library",
          onChange: (value) => {
            const newItems = [...items];
            newItems[currentEditingItem].iconSource = value;
            setAttributes({ items: newItems });
          },
          isBlock: true,
          __next40pxDefaultSize: true,
          __nextHasNoMarginBottom: true
        },
        /* @__PURE__ */ wp.element.createElement(
          ToggleGroupControlOption15,
          {
            value: "library",
            label: __18("Library", "digiblocks")
          }
        ),
        /* @__PURE__ */ wp.element.createElement(
          ToggleGroupControlOption15,
          {
            value: "custom",
            label: __18("Custom", "digiblocks")
          }
        )
      ),
      (!items[currentEditingItem].iconSource || items[currentEditingItem].iconSource === "library") && /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, !componentsLoaded ? /* @__PURE__ */ wp.element.createElement("div", { style: { textAlign: "center", padding: "20px 0" } }, /* @__PURE__ */ wp.element.createElement("div", { className: "components-spinner" }), /* @__PURE__ */ wp.element.createElement("p", null, __18("Loading icon selector...", "digiblocks"))) : /* @__PURE__ */ wp.element.createElement(
        FontAwesomeControl6,
        {
          value: items[currentEditingItem].icon,
          onChange: (newIcon) => {
            setItemIcon(currentEditingItem, newIcon);
            setIconModalOpen(false);
          }
        }
      )),
      items[currentEditingItem].iconSource === "custom" && /* @__PURE__ */ wp.element.createElement("div", { style: { marginTop: "15px" } }, /* @__PURE__ */ wp.element.createElement("div", { className: "components-base-control" }, /* @__PURE__ */ wp.element.createElement("label", { className: "components-base-control__label", htmlFor: "custom-svg-input" }, __18("Custom SVG Code", "digiblocks")), /* @__PURE__ */ wp.element.createElement(
        "textarea",
        {
          id: "custom-svg-input",
          className: "components-textarea-control__input",
          value: items[currentEditingItem].customSvg || "",
          onChange: (e) => {
            const newSvg = e.target.value;
            const newItems = [...items];
            const newIconValue = {
              id: "custom-svg",
              name: "Custom SVG",
              svg: newSvg,
              style: "custom",
              categories: ["custom"]
            };
            newItems[currentEditingItem].customSvg = newSvg;
            newItems[currentEditingItem].icon = newIconValue;
            setAttributes({ items: newItems });
          },
          placeholder: __18("Paste your SVG code here...", "digiblocks"),
          rows: 6,
          style: { width: "100%", marginTop: "8px" }
        }
      ), /* @__PURE__ */ wp.element.createElement("p", { className: "components-base-control__help" }, __18("Paste your SVG code here. Make sure it only contains valid SVG markup.", "digiblocks"))), items[currentEditingItem].customSvg && /* @__PURE__ */ wp.element.createElement("div", { style: { marginTop: "15px", marginBottom: "15px" } }, /* @__PURE__ */ wp.element.createElement("p", null, /* @__PURE__ */ wp.element.createElement("strong", null, __18("Preview:", "digiblocks"))), /* @__PURE__ */ wp.element.createElement("div", { style: { padding: "20px", background: "#f0f0f1", borderRadius: "3px", display: "flex", justifyContent: "center", alignItems: "center" } }, /* @__PURE__ */ wp.element.createElement("div", { style: { width: "50px", height: "50px" }, dangerouslySetInnerHTML: { __html: items[currentEditingItem].customSvg } }))), /* @__PURE__ */ wp.element.createElement("div", { style: { marginTop: "15px", display: "flex", justifyContent: "flex-end" } }, /* @__PURE__ */ wp.element.createElement(
        Button15,
        {
          variant: "primary",
          onClick: () => setIconModalOpen(false)
        },
        __18("Apply", "digiblocks")
      )))
    ), linkModalOpen && currentEditingItem !== null && /* @__PURE__ */ wp.element.createElement(
      Modal,
      {
        title: __18("Link Settings", "digiblocks"),
        onRequestClose: () => setLinkModalOpen(false),
        className: "digiblocks-link-modal"
      },
      /* @__PURE__ */ wp.element.createElement(
        LinkControl5,
        {
          value: items[currentEditingItem].linkUrl ? {
            url: items[currentEditingItem].linkUrl,
            opensInNewTab: items[currentEditingItem].linkOpenInNewTab,
            rel: items[currentEditingItem].linkRel
          } : void 0,
          settings: [
            {
              id: "opensInNewTab",
              title: __18("Open in new tab", "digiblocks")
            },
            {
              id: "rel",
              title: __18("Add nofollow", "digiblocks")
            }
          ],
          onChange: (newLink) => {
            if (newLink && newLink.url) {
              updateListItem(currentEditingItem, "linkUrl", newLink.url);
              updateListItem(currentEditingItem, "linkOpenInNewTab", !!newLink.opensInNewTab);
              updateListItem(currentEditingItem, "linkRel", newLink.rel || "");
              setLinkModalOpen(false);
            }
          },
          onRemove: () => {
            updateListItem(currentEditingItem, "linkUrl", "");
            updateListItem(currentEditingItem, "linkOpenInNewTab", false);
            updateListItem(currentEditingItem, "linkRel", "");
            setLinkModalOpen(false);
          },
          forceIsEditingLink: !items[currentEditingItem].linkUrl,
          allowDirectEntry: true,
          suggestionsQuery: {
            type: "post",
            subtype: "any"
          }
        }
      )
    ), /* @__PURE__ */ wp.element.createElement(
      Button15,
      {
        variant: "primary",
        icon: "plus",
        onClick: addListItem,
        style: {
          marginTop: "20px",
          width: "100%",
          justifyContent: "center"
        }
      },
      __18("Add Icon List Item", "digiblocks")
    )));
  };
  var edit_default16 = IconListEdit;

  // blocks/icon-list/save.js
  var { useBlockProps: useBlockProps31, RichText: RichText14 } = window.wp.blockEditor;
  var IconListSave = ({ attributes }) => {
    const {
      id,
      anchor,
      customClasses,
      items,
      animation,
      hoverEffect,
      listLayout,
      listAlign,
      iconPosition
    } = attributes;
    const blockClasses = [
      "digiblocks-icon-list-block",
      id,
      animation !== "none" ? `animate-${animation}` : "",
      hoverEffect !== "none" ? `has-hover-${hoverEffect}` : "",
      customClasses || ""
    ].filter(Boolean).join(" ");
    const blockProps = useBlockProps31.save({
      className: blockClasses,
      id: anchor || null
    });
    const renderListItems = () => {
      return items.map((item) => {
        const renderIcon = () => {
          if ((!item.iconSource || item.iconSource === "library") && item.icon && item.icon.svg && item.icon.svg.trim() !== "") {
            return /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-icon-list-icon" }, /* @__PURE__ */ wp.element.createElement("span", { dangerouslySetInnerHTML: { __html: item.icon.svg } }));
          }
          if (item.iconSource === "custom" && item.customSvg && item.customSvg.trim() !== "") {
            return /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-icon-list-icon" }, /* @__PURE__ */ wp.element.createElement("span", { dangerouslySetInnerHTML: { __html: item.customSvg } }));
          }
          return null;
        };
        const itemContent = /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, renderIcon(), /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-icon-list-content" }, /* @__PURE__ */ wp.element.createElement(
          RichText14.Content,
          {
            value: item.content
          }
        )));
        if (item.linkUrl) {
          let relValue = item.linkRel || "";
          if (item.linkOpenInNewTab) {
            const relParts = relValue.split(" ").filter(Boolean);
            if (!relParts.includes("noopener")) {
              relParts.push("noopener");
            }
            if (!relParts.includes("noreferrer")) {
              relParts.push("noreferrer");
            }
            relValue = relParts.join(" ");
          }
          return /* @__PURE__ */ wp.element.createElement("li", { key: item.id, className: "digiblocks-icon-list-item" }, /* @__PURE__ */ wp.element.createElement(
            "a",
            {
              className: "digiblocks-icon-list-child",
              href: item.linkUrl,
              target: item.linkOpenInNewTab ? "_blank" : "_self",
              rel: relValue || void 0
            },
            itemContent
          ));
        }
        return /* @__PURE__ */ wp.element.createElement("li", { key: item.id, className: "digiblocks-icon-list-item" }, /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-icon-list-child" }, itemContent));
      });
    };
    return /* @__PURE__ */ wp.element.createElement("div", { ...blockProps }, /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-icon-list-wrapper" }, /* @__PURE__ */ wp.element.createElement("ul", { className: `digiblocks-icon-list ${iconPosition === "after" ? "icon-position-after" : "icon-position-before"}` }, renderListItems())));
  };
  var save_default16 = IconListSave;

  // blocks/image/edit.js
  var { __: __19 } = window.wp.i18n;
  var {
    useBlockProps: useBlockProps32,
    InspectorControls: InspectorControls17,
    RichText: RichText15,
    MediaUpload: MediaUpload5,
    MediaUploadCheck: MediaUploadCheck5,
    LinkControl: LinkControl6,
    PanelColorSettings: PanelColorSettings16
  } = window.wp.blockEditor;
  var {
    TabPanel: TabPanel12,
    PanelBody: PanelBody2,
    SelectControl: SelectControl18,
    ToggleControl: ToggleControl17,
    Button: Button16,
    RangeControl: RangeControl16,
    __experimentalUnitControl: UnitControl,
    __experimentalToggleGroupControl: ToggleGroupControl16,
    __experimentalToggleGroupControlOption: ToggleGroupControlOption16,
    Spinner: Spinner5,
    Placeholder: Placeholder3,
    TextControl: TextControl9,
    PanelRow
  } = window.wp.components;
  var { useState: useState17, useEffect: useEffect17, useRef: useRef14 } = window.wp.element;
  var { useBlockId: useBlockId17, getDimensionCSS: getDimensionCSS15, animations: animations15, animationPreview: animationPreview15 } = digi.utils;
  var { tabIcons: tabIcons17 } = digi.icons;
  var { ResponsiveControl: ResponsiveControl17, DimensionControl: DimensionControl16, TypographyControl: TypographyControl12, BoxShadowControl: BoxShadowControl15, CustomTabPanel: CustomTabPanel17, TabPanelBody: TabPanelBody18 } = digi.components;
  var ImageEdit = ({ attributes, setAttributes, clientId }) => {
    const {
      id,
      anchor,
      visibility,
      customClasses,
      imageId,
      imageUrl,
      altText,
      title,
      caption,
      width,
      widthUnit,
      height,
      heightUnit,
      sizeSlug,
      align,
      alignTablet,
      alignMobile,
      objectFit,
      borderStyle,
      borderWidth,
      borderRadius,
      borderColor,
      borderHoverColor,
      boxShadow,
      boxShadowHover,
      padding,
      margin,
      url,
      opensInNewTab,
      rel,
      animation,
      hoverEffect,
      overlayEnable,
      overlayColor,
      overlayHoverOnly
    } = attributes;
    useBlockId17(id, clientId, setAttributes);
    const [localActiveDevice, setLocalActiveDevice] = useState17(window.digi.responsiveState.activeDevice);
    const [isAnimating, setIsAnimating] = useState17(false);
    const [isEditingURL, setIsEditingURL] = useState17(false);
    useEffect17(() => {
      const unsubscribe = window.digi.responsiveState.subscribe((device) => {
        setLocalActiveDevice(device);
      });
      return unsubscribe;
    }, []);
    const [activeTab, setActiveTab] = useState17(() => {
      if (window.digi.uiState) {
        const savedTab = window.digi.uiState.getActiveTab(clientId);
        if (savedTab)
          return savedTab;
      }
      return "options";
    });
    useEffect17(() => {
      if (imageId && sizeSlug) {
        const media = window.wp.media.attachment(imageId);
        if (media.get("url")) {
          updateImageUrl(media);
        } else {
          media.fetch().then(() => {
            updateImageUrl(media);
          });
        }
      }
    }, [sizeSlug, imageId]);
    const updateImageUrl = (media) => {
      let selectedUrl = media.get("url");
      const sizes = media.get("sizes");
      if (sizes && sizes[sizeSlug]) {
        selectedUrl = sizes[sizeSlug].url;
      }
      setAttributes({
        imageUrl: selectedUrl
      });
    };
    const previewTimeoutRef = useRef14(null);
    useEffect17(() => {
      if (animation && animation !== "none") {
        const timeoutId = setTimeout(() => {
          animationPreview15(id, animation, animations15, previewTimeoutRef);
        }, 100);
        return () => clearTimeout(timeoutId);
      }
    }, [animation]);
    const handlePreviewClick = () => {
      animationPreview15(id, animation, animations15, previewTimeoutRef);
    };
    const borderStyleOptions = [
      { label: __19("None", "digiblocks"), value: "none" },
      { label: __19("Solid", "digiblocks"), value: "solid" },
      { label: __19("Dotted", "digiblocks"), value: "dotted" },
      { label: __19("Dashed", "digiblocks"), value: "dashed" },
      { label: __19("Double", "digiblocks"), value: "double" },
      { label: __19("Groove", "digiblocks"), value: "groove" },
      { label: __19("Inset", "digiblocks"), value: "inset" },
      { label: __19("Outset", "digiblocks"), value: "outset" },
      { label: __19("Ridge", "digiblocks"), value: "ridge" }
    ];
    const hoverEffectOptions = [
      { label: __19("None", "digiblocks"), value: "none" },
      { label: __19("Zoom In", "digiblocks"), value: "zoom-in" },
      { label: __19("Zoom Out", "digiblocks"), value: "zoom-out" },
      { label: __19("Grayscale to Color", "digiblocks"), value: "grayscale" },
      { label: __19("Blur to Clear", "digiblocks"), value: "blur" },
      { label: __19("Rotate", "digiblocks"), value: "rotate" },
      { label: __19("Glow", "digiblocks"), value: "glow" }
    ];
    const objectFitOptions = [
      { label: __19("Cover", "digiblocks"), value: "cover" },
      { label: __19("Contain", "digiblocks"), value: "contain" },
      { label: __19("Fill", "digiblocks"), value: "fill" },
      { label: __19("None", "digiblocks"), value: "none" }
    ];
    const animationOptions = [
      { label: __19("None", "digiblocks"), value: "none" },
      ...Object.keys(animations15).map((animation2) => ({
        label: animation2.replace(/-/g, " ").replace(/\b\w/g, (l) => l.toUpperCase()),
        value: animation2
      }))
    ];
    const imageSizeOptions = [
      { label: __19("Thumbnail", "digiblocks"), value: "thumbnail" },
      { label: __19("Medium", "digiblocks"), value: "medium" },
      { label: __19("Large", "digiblocks"), value: "large" },
      { label: __19("Full Size", "digiblocks"), value: "full" }
    ];
    const tabList = [
      {
        name: "options",
        title: __19("Options", "digiblocks"),
        icon: tabIcons17.optionsIcon
      },
      {
        name: "style",
        title: __19("Style", "digiblocks"),
        icon: tabIcons17.styleIcon
      },
      {
        name: "advanced",
        title: __19("Advanced", "digiblocks"),
        icon: tabIcons17.advancedIcon
      }
    ];
    const stateTabList = [
      {
        name: "normal",
        title: __19("Normal", "digiblocks"),
        className: "digiblocks-tab-1 normal"
      },
      {
        name: "hover",
        title: __19("Hover", "digiblocks"),
        className: "digiblocks-tab-2 hover"
      }
    ];
    const widthUnitOptions = [
      { label: "px", value: "px" },
      { label: "%", value: "%" },
      { label: "vw", value: "vw" }
    ];
    const heightUnitOptions = [
      { label: "px", value: "px" },
      { label: "%", value: "%" },
      { label: "vh", value: "vh" }
    ];
    const onSelectImage = (media) => {
      if (!media || !media.url) {
        setAttributes({
          imageUrl: void 0,
          imageId: void 0,
          altText: ""
        });
        return;
      }
      let selectedUrl = media.url;
      if (sizeSlug && media.sizes && media.sizes[sizeSlug]) {
        selectedUrl = media.sizes[sizeSlug].url;
      }
      setAttributes({
        imageUrl: selectedUrl,
        imageId: media.id,
        altText: media.alt || "",
        title: media.title || ""
      });
    };
    const onRemoveImage = () => {
      setAttributes({
        imageUrl: void 0,
        imageId: void 0,
        altText: "",
        title: ""
      });
    };
    const generateCSS = () => {
      const activeDevice = window.digi.responsiveState.activeDevice;
      const currentWidth = width[activeDevice] ? width[activeDevice] === "auto" ? "auto" : `${width[activeDevice]}${widthUnit}` : "100%";
      const currentHeight = height[activeDevice] ? height[activeDevice] === "auto" ? "auto" : `${height[activeDevice]}${heightUnit}` : "auto";
      let borderCSS = "";
      if (borderStyle && borderStyle !== "none") {
        borderCSS = `
                border-style: ${borderStyle};
                border-color: ${borderColor || "#e0e0e0"};
				${getDimensionCSS15(borderWidth, "border-width", activeDevice)}
            `;
      } else {
        borderCSS = "border-style: none;";
      }
      let boxShadowCSS = "box-shadow: none;";
      if (boxShadow && boxShadow.enable) {
        const inset = boxShadow.position === "inset" ? "inset " : "";
        boxShadowCSS = `box-shadow: ${inset}${boxShadow.horizontal}px ${boxShadow.vertical}px ${boxShadow.blur}px ${boxShadow.spread}px ${boxShadow.color};`;
      }
      const paddingCSS = padding && padding[activeDevice] ? `${getDimensionCSS15(padding, "padding", activeDevice)}` : "padding: 0;";
      const marginCSS = margin && margin[activeDevice] ? `${getDimensionCSS15(margin, "margin", activeDevice)}` : "margin: 0 0 30px 0;";
      let overlayCSS = "";
      if (overlayEnable) {
        overlayCSS = `
                .${id} .digiblocks-image-overlay {
                    position: absolute;
                    top: 0;
                    left: 0;
                    width: 100%;
                    height: 100%;
                    background-color: ${overlayColor || "rgba(0,0,0,0.5)"};
                    opacity: ${overlayHoverOnly ? "0" : "1"};
                    transition: opacity 0.3s ease;
                }
                
                .${id}:hover .digiblocks-image-overlay {
                    opacity: 1;
                }
            `;
      }
      let hoverCSS = "";
      if (boxShadowHover && boxShadowHover.enable) {
        const insetHover = boxShadowHover.position === "inset" ? "inset " : "";
        hoverCSS += `box-shadow: ${insetHover}${boxShadowHover.horizontal}px ${boxShadowHover.vertical}px ${boxShadowHover.blur}px ${boxShadowHover.spread}px ${boxShadowHover.color};`;
      }
      if (borderHoverColor) {
        hoverCSS += `border-color: ${borderHoverColor};`;
      }
      let imageHoverCSS = "";
      if (hoverEffect === "zoom-in") {
        imageHoverCSS = "transform: scale(1.1);";
      } else if (hoverEffect === "zoom-out") {
        imageHoverCSS = "transform: scale(1);";
      } else if (hoverEffect === "grayscale") {
        imageHoverCSS = "filter: grayscale(0);";
      } else if (hoverEffect === "blur") {
        imageHoverCSS = "filter: blur(0);";
      } else if (hoverEffect === "rotate") {
        imageHoverCSS = "transform: rotate(5deg);";
      } else if (hoverEffect === "glow") {
        imageHoverCSS = "filter: brightness(1.1);";
      }
      let imageCSS = "";
      if (hoverEffect === "zoom-out") {
        imageCSS = "transform: scale(1.1);";
      } else if (hoverEffect === "grayscale") {
        imageCSS = "filter: grayscale(100%);";
      } else if (hoverEffect === "blur") {
        imageCSS = "filter: blur(5px);";
      }
      return `
            /* Main block styles */
            .${id} {
                display: flex;
				${align === "left" ? "justify-content: flex-start;" : align === "right" ? "justify-content: flex-end;" : "justify-content: center;"}
                text-align: ${align};
                width: 100%;
                ${marginCSS}
                transition: all 0.3s ease;
            }
            
            /* Figure styles */
            .${id} figure {
                display: inline-block;
                position: relative;
                margin: 0;
                width: ${currentWidth};
                max-width: 100%;
                ${paddingCSS}
                ${borderCSS}
                ${boxShadowCSS}
				${getDimensionCSS15(borderRadius, "border-radius", activeDevice)}
                overflow: hidden;
                transition: all 0.3s ease;
            }
            
            /* Image styles */
            .${id} figure img {
                display: block;
                width: 100%;
                height: ${currentHeight};
                object-fit: ${objectFit};
                ${imageCSS}
                transition: all 0.3s ease;
            }
            
            /* Hover styles */
            .${id} figure:hover {
                ${hoverCSS}
            }
            
            .${id} figure:hover img {
                ${imageHoverCSS}
            }
            
            /* Overlay */
            ${overlayCSS}

			/* Visibility Controls */
			${visibility.desktop ? `
				@media (min-width: 992px) {
					.${id} {
						opacity: 0.5 !important;
					}
				}
			` : ""}

			${visibility.tablet ? `
				@media (min-width: 768px) and (max-width: 991px) {
					.${id} {
						opacity: 0.5 !important;
					}
				}
			` : ""}

			${visibility.mobile ? `
				@media (max-width: 767px) {
					.${id} {
						opacity: 0.5 !important;
					}
				}
			` : ""}
        `;
    };
    const renderTabContent = () => {
      switch (activeTab) {
        case "options":
          return /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(
            TabPanelBody18,
            {
              tab: "options",
              name: "image",
              title: __19("Image", "digiblocks"),
              initialOpen: true
            },
            /* @__PURE__ */ wp.element.createElement(MediaUploadCheck5, null, /* @__PURE__ */ wp.element.createElement(
              MediaUpload5,
              {
                onSelect: onSelectImage,
                allowedTypes: ["image"],
                value: imageId,
                render: ({ open }) => /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-media-upload-wrapper" }, imageUrl ? /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-media-preview" }, /* @__PURE__ */ wp.element.createElement("img", { src: imageUrl, alt: altText || "" }), /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-media-controls" }, /* @__PURE__ */ wp.element.createElement(
                  Button16,
                  {
                    isPrimary: true,
                    onClick: open
                  },
                  /* @__PURE__ */ wp.element.createElement("span", { className: "dashicon dashicons dashicons-edit" })
                ), /* @__PURE__ */ wp.element.createElement(
                  Button16,
                  {
                    isDestructive: true,
                    onClick: onRemoveImage
                  },
                  /* @__PURE__ */ wp.element.createElement("span", { className: "dashicon dashicons dashicons-trash" })
                ))) : /* @__PURE__ */ wp.element.createElement(
                  Button16,
                  {
                    className: "digiblocks-media-upload-button",
                    isPrimary: true,
                    onClick: open
                  },
                  __19("Select Image", "digiblocks")
                ))
              }
            )),
            imageUrl && /* @__PURE__ */ wp.element.createElement("div", { style: { marginTop: "16px" } }, /* @__PURE__ */ wp.element.createElement(
              TextControl9,
              {
                label: __19("Alt Text", "digiblocks"),
                value: altText,
                onChange: (value) => setAttributes({ altText: value }),
                help: __19("Alternative text describes your image to people who cannot see it. Add a descriptive text to help screen-reader users.", "digiblocks"),
                __next40pxDefaultSize: true,
                __nextHasNoMarginBottom: true
              }
            ), /* @__PURE__ */ wp.element.createElement(
              TextControl9,
              {
                label: __19("Title", "digiblocks"),
                value: title,
                onChange: (value) => setAttributes({ title: value }),
                help: __19("Shown as a tooltip when a user hovers over the image.", "digiblocks"),
                __next40pxDefaultSize: true,
                __nextHasNoMarginBottom: true
              }
            ), /* @__PURE__ */ wp.element.createElement(
              SelectControl18,
              {
                label: __19("Image Size", "digiblocks"),
                value: sizeSlug,
                options: imageSizeOptions,
                onChange: (value) => setAttributes({ sizeSlug: value }),
                __next40pxDefaultSize: true,
                __nextHasNoMarginBottom: true
              }
            ), /* @__PURE__ */ wp.element.createElement("div", { style: { marginTop: "16px" } }, /* @__PURE__ */ wp.element.createElement("p", { className: "components-base-control__label" }, __19("Link Settings", "digiblocks")), /* @__PURE__ */ wp.element.createElement(
              LinkControl6,
              {
                value: url ? { url, opensInNewTab, rel } : void 0,
                onChange: (newLink) => {
                  setAttributes({
                    url: newLink.url,
                    opensInNewTab: newLink.opensInNewTab,
                    rel: newLink.rel || ""
                  });
                  setIsEditingURL(false);
                },
                settings: [
                  {
                    id: "opensInNewTab",
                    title: __19("Open in new tab")
                  },
                  {
                    id: "rel",
                    title: __19("Add noopener noreferrer")
                  }
                ],
                onRemove: () => {
                  setAttributes({ url: "", opensInNewTab: false, rel: "" });
                  setIsEditingURL(false);
                }
              }
            )))
          ));
        case "style":
          return /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(
            TabPanelBody18,
            {
              tab: "style",
              name: "dimensions",
              title: __19("Dimensions", "digiblocks"),
              initialOpen: true
            },
            /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-size-type-field-tabs" }, /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-responsive-control-inner" }, /* @__PURE__ */ wp.element.createElement("div", { className: "components-base-control" }, /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-range-control digiblocks-size-type-field-tabs" }, /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-control__header" }, /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-responsive-label-wrap" }, /* @__PURE__ */ wp.element.createElement("span", { className: "digiblocks-control-label" }, __19("Width", "digiblocks")), /* @__PURE__ */ wp.element.createElement(
              "button",
              {
                type: "button",
                "aria-label": __19(`Switch to ${window.digi.responsiveState.getNextDevice()} view`, "digiblocks"),
                className: `components-button digiblocks-responsive-common-button digiblocks-device-${localActiveDevice}`,
                onClick: () => window.digi.responsiveState.toggleDevice()
              },
              window.digi.icons.deviceIcons[localActiveDevice]
            )), /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-range-control__actions digiblocks-control__actions" }, /* @__PURE__ */ wp.element.createElement("div", { tabIndex: "0" }, /* @__PURE__ */ wp.element.createElement(
              "button",
              {
                type: "button",
                disabled: width[localActiveDevice] === 100,
                className: "components-button digiblocks-reset is-secondary is-small",
                onClick: () => setAttributes({
                  width: {
                    ...width,
                    [localActiveDevice]: 100
                  }
                })
              },
              /* @__PURE__ */ wp.element.createElement("span", { className: "dashicon dashicons dashicons-image-rotate" })
            )), /* @__PURE__ */ wp.element.createElement(
              ToggleGroupControl16,
              {
                value: widthUnit,
                onChange: (value) => setAttributes({ widthUnit: value }),
                isBlock: true,
                isSmall: true,
                hideLabelFromVision: true,
                "aria-label": __19("Width Unit", "digiblocks"),
                __next40pxDefaultSize: true,
                __nextHasNoMarginBottom: true
              },
              widthUnitOptions.map((option) => /* @__PURE__ */ wp.element.createElement(
                ToggleGroupControlOption16,
                {
                  key: option.value,
                  value: option.value,
                  label: option.label
                }
              ))
            ))), /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-range-control__mobile-controls" }, /* @__PURE__ */ wp.element.createElement(
              RangeControl16,
              {
                value: width[localActiveDevice],
                onChange: (value) => setAttributes({
                  width: {
                    ...width,
                    [localActiveDevice]: value
                  }
                }),
                min: 1,
                max: widthUnit === "%" ? 100 : 1e3,
                step: 1,
                __next40pxDefaultSize: true,
                __nextHasNoMarginBottom: true
              }
            )))))),
            /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-size-type-field-tabs" }, /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-responsive-control-inner" }, /* @__PURE__ */ wp.element.createElement("div", { className: "components-base-control" }, /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-range-control digiblocks-size-type-field-tabs" }, /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-control__header" }, /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-responsive-label-wrap" }, /* @__PURE__ */ wp.element.createElement("span", { className: "digiblocks-control-label" }, __19("Height", "digiblocks")), /* @__PURE__ */ wp.element.createElement(
              "button",
              {
                type: "button",
                "aria-label": __19(`Switch to ${window.digi.responsiveState.getNextDevice()} view`, "digiblocks"),
                className: `components-button digiblocks-responsive-common-button digiblocks-device-${localActiveDevice}`,
                onClick: () => window.digi.responsiveState.toggleDevice()
              },
              window.digi.icons.deviceIcons[localActiveDevice]
            )), /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-range-control__actions digiblocks-control__actions" }, /* @__PURE__ */ wp.element.createElement("div", { tabIndex: "0" }, /* @__PURE__ */ wp.element.createElement(
              "button",
              {
                type: "button",
                disabled: height[localActiveDevice] === 300,
                className: "components-button digiblocks-reset is-secondary is-small",
                onClick: () => setAttributes({
                  height: {
                    ...height,
                    [localActiveDevice]: 300
                  }
                })
              },
              /* @__PURE__ */ wp.element.createElement("span", { className: "dashicon dashicons dashicons-image-rotate" })
            )), /* @__PURE__ */ wp.element.createElement(
              ToggleGroupControl16,
              {
                value: heightUnit,
                onChange: (value) => setAttributes({ heightUnit: value }),
                isBlock: true,
                isSmall: true,
                hideLabelFromVision: true,
                "aria-label": __19("Height Unit", "digiblocks"),
                __next40pxDefaultSize: true,
                __nextHasNoMarginBottom: true
              },
              heightUnitOptions.map((option) => /* @__PURE__ */ wp.element.createElement(
                ToggleGroupControlOption16,
                {
                  key: option.value,
                  value: option.value,
                  label: option.label
                }
              ))
            ))), /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-range-control__mobile-controls" }, /* @__PURE__ */ wp.element.createElement(
              RangeControl16,
              {
                value: height[localActiveDevice],
                onChange: (value) => setAttributes({
                  height: {
                    ...height,
                    [localActiveDevice]: value
                  }
                }),
                min: 1,
                max: heightUnit === "%" ? 100 : 1e3,
                step: 1,
                __next40pxDefaultSize: true,
                __nextHasNoMarginBottom: true
              }
            )))))),
            /* @__PURE__ */ wp.element.createElement(
              SelectControl18,
              {
                label: __19("Object Fit", "digiblocks"),
                value: objectFit,
                options: objectFitOptions,
                onChange: (value) => setAttributes({ objectFit: value }),
                help: __19("Determines how the image should be resized to fit its container.", "digiblocks"),
                __next40pxDefaultSize: true,
                __nextHasNoMarginBottom: true
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              ToggleGroupControl16,
              {
                label: __19("Alignment", "digiblocks"),
                value: align,
                onChange: (value) => setAttributes({ align: value }),
                isBlock: true,
                __next40pxDefaultSize: true,
                __nextHasNoMarginBottom: true
              },
              /* @__PURE__ */ wp.element.createElement(
                ToggleGroupControlOption16,
                {
                  value: "left",
                  label: __19("Left", "digiblocks")
                }
              ),
              /* @__PURE__ */ wp.element.createElement(
                ToggleGroupControlOption16,
                {
                  value: "center",
                  label: __19("Center", "digiblocks")
                }
              ),
              /* @__PURE__ */ wp.element.createElement(
                ToggleGroupControlOption16,
                {
                  value: "right",
                  label: __19("Right", "digiblocks")
                }
              )
            )
          ), /* @__PURE__ */ wp.element.createElement(
            TabPanelBody18,
            {
              tab: "style",
              name: "spacing",
              title: __19("Spacing", "digiblocks"),
              initialOpen: false
            },
            /* @__PURE__ */ wp.element.createElement(
              ResponsiveControl17,
              {
                label: __19("Padding", "digiblocks")
              },
              /* @__PURE__ */ wp.element.createElement(
                DimensionControl16,
                {
                  values: padding[localActiveDevice],
                  onChange: (value) => setAttributes({
                    padding: {
                      ...padding,
                      [localActiveDevice]: value
                    }
                  })
                }
              )
            ),
            /* @__PURE__ */ wp.element.createElement(
              ResponsiveControl17,
              {
                label: __19("Margin", "digiblocks")
              },
              /* @__PURE__ */ wp.element.createElement(
                DimensionControl16,
                {
                  values: margin[localActiveDevice],
                  onChange: (value) => setAttributes({
                    margin: {
                      ...margin,
                      [localActiveDevice]: value
                    }
                  })
                }
              )
            )
          ), /* @__PURE__ */ wp.element.createElement(
            TabPanelBody18,
            {
              tab: "style",
              name: "border",
              title: __19("Border", "digiblocks"),
              initialOpen: false
            },
            /* @__PURE__ */ wp.element.createElement(
              TabPanel12,
              {
                className: "digiblocks-control-tabs",
                activeClass: "active-tab",
                tabs: stateTabList
              },
              (tab) => tab.name === "normal" ? /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(
                SelectControl18,
                {
                  label: __19("Border Style", "digiblocks"),
                  value: borderStyle,
                  options: borderStyleOptions,
                  onChange: (value) => {
                    if (value !== "none" && (borderStyle === "none" || !borderStyle)) {
                      if (!borderWidth || Object.keys(borderWidth).length === 0) {
                        setAttributes({
                          borderWidth: {
                            desktop: { top: 1, right: 1, bottom: 1, left: 1, unit: "px" },
                            tablet: { top: "", right: "", bottom: "", left: "", unit: "px" },
                            mobile: { top: "", right: "", bottom: "", left: "", unit: "px" }
                          }
                        });
                      }
                      if (!borderRadius || Object.keys(borderRadius).length === 0) {
                        setAttributes({
                          borderRadius: {
                            desktop: { top: 0, right: 0, bottom: 0, left: 0, unit: "px" },
                            tablet: { top: "", right: "", bottom: "", left: "", unit: "px" },
                            mobile: { top: "", right: "", bottom: "", left: "", unit: "px" }
                          }
                        });
                      }
                    }
                    setAttributes({
                      borderStyle: value
                    });
                  },
                  __next40pxDefaultSize: true,
                  __nextHasNoMarginBottom: true
                }
              ), borderStyle && borderStyle !== "none" && /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(
                PanelColorSettings16,
                {
                  title: __19("Border Color", "digiblocks"),
                  initialOpen: true,
                  enableAlpha: true,
                  colorSettings: [
                    {
                      value: borderColor,
                      onChange: (value) => setAttributes({ borderColor: value }),
                      label: __19("Border Color", "digiblocks")
                    }
                  ]
                }
              ), /* @__PURE__ */ wp.element.createElement(
                ResponsiveControl17,
                {
                  label: __19("Border Width", "digiblocks")
                },
                /* @__PURE__ */ wp.element.createElement(
                  DimensionControl16,
                  {
                    values: borderWidth && borderWidth[localActiveDevice] ? borderWidth[localActiveDevice] : {
                      top: 1,
                      right: 1,
                      bottom: 1,
                      left: 1,
                      unit: "px"
                    },
                    onChange: (value) => setAttributes({
                      borderWidth: {
                        ...borderWidth,
                        [localActiveDevice]: value
                      }
                    })
                  }
                )
              )), /* @__PURE__ */ wp.element.createElement(
                ResponsiveControl17,
                {
                  label: __19("Border Radius", "digiblocks")
                },
                /* @__PURE__ */ wp.element.createElement(
                  DimensionControl16,
                  {
                    values: borderRadius && borderRadius[localActiveDevice] ? borderRadius[localActiveDevice] : {
                      top: 0,
                      right: 0,
                      bottom: 0,
                      left: 0,
                      unit: "px"
                    },
                    onChange: (value) => setAttributes({
                      borderRadius: {
                        ...borderRadius,
                        [localActiveDevice]: value
                      }
                    }),
                    units: [
                      { label: "px", value: "px" },
                      { label: "%", value: "%" }
                    ]
                  }
                )
              )) : /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(
                PanelColorSettings16,
                {
                  title: __19("Border Hover Color", "digiblocks"),
                  initialOpen: true,
                  enableAlpha: true,
                  colorSettings: [
                    {
                      value: borderHoverColor,
                      onChange: (value) => setAttributes({ borderHoverColor: value }),
                      label: __19("Border Hover Color", "digiblocks")
                    }
                  ]
                }
              ))
            )
          ), /* @__PURE__ */ wp.element.createElement(
            TabPanelBody18,
            {
              tab: "style",
              name: "shadow",
              title: __19("Box Shadow", "digiblocks"),
              initialOpen: false
            },
            /* @__PURE__ */ wp.element.createElement(
              BoxShadowControl15,
              {
                normalValue: boxShadow,
                hoverValue: boxShadowHover,
                onNormalChange: (value) => setAttributes({
                  boxShadow: value
                }),
                onHoverChange: (value) => setAttributes({
                  boxShadowHover: value
                })
              }
            )
          ), /* @__PURE__ */ wp.element.createElement(
            TabPanelBody18,
            {
              tab: "style",
              name: "effects",
              title: __19("Effects", "digiblocks"),
              initialOpen: false
            },
            /* @__PURE__ */ wp.element.createElement(
              SelectControl18,
              {
                label: __19(
                  "Hover Effect",
                  "digiblocks"
                ),
                value: hoverEffect,
                options: hoverEffectOptions,
                onChange: (value) => setAttributes({
                  hoverEffect: value
                }),
                __next40pxDefaultSize: true,
                __nextHasNoMarginBottom: true
              }
            ),
            /* @__PURE__ */ wp.element.createElement(PanelRow, null, /* @__PURE__ */ wp.element.createElement(
              ToggleControl17,
              {
                label: __19("Enable Overlay", "digiblocks"),
                checked: overlayEnable,
                onChange: () => setAttributes({ overlayEnable: !overlayEnable })
              }
            )),
            overlayEnable && /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(
              PanelColorSettings16,
              {
                title: __19("Overlay Color", "digiblocks"),
                initialOpen: true,
                enableAlpha: true,
                colorSettings: [
                  {
                    value: overlayColor,
                    onChange: (value) => setAttributes({ overlayColor: value }),
                    label: __19("Overlay Color", "digiblocks")
                  }
                ]
              }
            ), /* @__PURE__ */ wp.element.createElement(PanelRow, null, /* @__PURE__ */ wp.element.createElement(
              ToggleControl17,
              {
                label: __19("Show Overlay Only on Hover", "digiblocks"),
                checked: overlayHoverOnly,
                onChange: () => setAttributes({ overlayHoverOnly: !overlayHoverOnly })
              }
            )))
          ));
        case "advanced":
          return /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(
            TabPanelBody18,
            {
              tab: "advanced",
              name: "animation",
              title: __19("Animation", "digiblocks"),
              initialOpen: true
            },
            /* @__PURE__ */ wp.element.createElement(
              SelectControl18,
              {
                label: __19(
                  "Animation Effect",
                  "digiblocks"
                ),
                value: animation,
                options: animationOptions,
                onChange: (value) => setAttributes({
                  animation: value
                }),
                __next40pxDefaultSize: true,
                __nextHasNoMarginBottom: true
              }
            ),
            animation && animation !== "none" && /* @__PURE__ */ wp.element.createElement("div", { style: { marginTop: "10px" } }, /* @__PURE__ */ wp.element.createElement(
              Button16,
              {
                variant: "secondary",
                isSecondary: true,
                onClick: handlePreviewClick,
                style: { width: "100%" }
              },
              __19("Preview Animation", "digiblocks")
            ))
          ), /* @__PURE__ */ wp.element.createElement(
            TabPanelBody18,
            {
              tab: "advanced",
              name: "visibility",
              title: __19("Visibility", "digiblocks"),
              initialOpen: false
            },
            /* @__PURE__ */ wp.element.createElement("div", { className: "components-base-control__help", style: {
              padding: "12px",
              backgroundColor: "#f0f6fc",
              border: "1px solid #c3ddfd",
              borderRadius: "4px",
              marginBottom: "16px"
            } }, /* @__PURE__ */ wp.element.createElement("strong", null, __19("Editor Note:", "digiblocks")), /* @__PURE__ */ wp.element.createElement("br", null), __19("Hidden elements appear with reduced opacity in the editor for easy editing. Visibility changes only take effect on the frontend.", "digiblocks")),
            /* @__PURE__ */ wp.element.createElement(
              ToggleControl17,
              {
                label: __19("Hide on Desktop", "digiblocks"),
                checked: visibility.desktop,
                onChange: (value) => setAttributes({
                  visibility: {
                    ...visibility,
                    desktop: value
                  }
                }),
                __nextHasNoMarginBottom: true
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              ToggleControl17,
              {
                label: __19("Hide on Tablet", "digiblocks"),
                checked: visibility.tablet,
                onChange: (value) => setAttributes({
                  visibility: {
                    ...visibility,
                    tablet: value
                  }
                }),
                __nextHasNoMarginBottom: true
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              ToggleControl17,
              {
                label: __19("Hide on Mobile", "digiblocks"),
                checked: visibility.mobile,
                onChange: (value) => setAttributes({
                  visibility: {
                    ...visibility,
                    mobile: value
                  }
                }),
                __nextHasNoMarginBottom: true
              }
            )
          ), /* @__PURE__ */ wp.element.createElement(
            TabPanelBody18,
            {
              tab: "advanced",
              name: "additional",
              title: __19("Additional", "digiblocks"),
              initialOpen: false
            },
            /* @__PURE__ */ wp.element.createElement("div", { className: "components-base-control html-anchor-control" }, /* @__PURE__ */ wp.element.createElement("div", { className: "components-base-control__field" }, /* @__PURE__ */ wp.element.createElement("label", { className: "components-base-control__label", htmlFor: "html-anchor" }, __19("HTML anchor", "digiblocks")), /* @__PURE__ */ wp.element.createElement(
              "input",
              {
                className: "components-text-control__input",
                type: "text",
                id: "html-anchor",
                value: anchor || "",
                onChange: (e) => setAttributes({ anchor: e.target.value }),
                "aria-describedby": "html-anchor-help",
                autoCapitalize: "none",
                autoComplete: "off"
              }
            )), /* @__PURE__ */ wp.element.createElement("p", { id: "html-anchor-help", className: "components-base-control__help" }, __19(`Enter a word or two \u2014 without spaces \u2014 to make a unique web address just for this block, called an "anchor". Then, you'll be able to link directly to this section of your page.`, "digiblocks"), " ", /* @__PURE__ */ wp.element.createElement(
              "a",
              {
                className: "components-external-link",
                href: "https://wordpress.org/documentation/article/page-jumps/",
                target: "_blank",
                rel: "external noreferrer noopener"
              },
              /* @__PURE__ */ wp.element.createElement("span", { className: "components-external-link__contents" }, __19("Learn more about anchors", "digiblocks")),
              /* @__PURE__ */ wp.element.createElement("span", { className: "components-external-link__icon", "aria-label": "(opens in a new tab)" }, "\u2197")
            ))),
            /* @__PURE__ */ wp.element.createElement("div", { className: "components-base-control" }, /* @__PURE__ */ wp.element.createElement("div", { className: "components-base-control__field" }, /* @__PURE__ */ wp.element.createElement("label", { className: "components-base-control__label", htmlFor: "additional-css-classes" }, __19("Additional CSS class(es)", "digiblocks")), /* @__PURE__ */ wp.element.createElement(
              "input",
              {
                className: "components-text-control__input",
                type: "text",
                id: "additional-css-classes",
                value: customClasses || "",
                onChange: (e) => setAttributes({ customClasses: e.target.value }),
                "aria-describedby": "additional-css-classes-help",
                autoComplete: "off"
              }
            )), /* @__PURE__ */ wp.element.createElement("p", { id: "additional-css-classes-help", className: "components-base-control__help" }, __19("Separate multiple classes with spaces.", "digiblocks")))
          ));
        default:
          return null;
      }
    };
    const blockProps = useBlockProps32({
      className: `digiblocks-image ${id} ${animation !== "none" ? `animate-${animation}` : ""} ${customClasses || ""}`,
      id: anchor || null
      // Set the anchor as ID if provided
    });
    return /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(InspectorControls17, null, /* @__PURE__ */ wp.element.createElement(
      CustomTabPanel17,
      {
        tabs: tabList,
        activeTab,
        onSelect: setActiveTab
      },
      renderTabContent()
    )), /* @__PURE__ */ wp.element.createElement("style", { dangerouslySetInnerHTML: { __html: generateCSS() } }), /* @__PURE__ */ wp.element.createElement("div", { ...blockProps }, /* @__PURE__ */ wp.element.createElement("figure", null, imageUrl ? /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, url ? /* @__PURE__ */ wp.element.createElement("a", { href: "#", onClick: (e) => e.preventDefault() }, /* @__PURE__ */ wp.element.createElement(
      "img",
      {
        src: imageUrl,
        alt: altText,
        title
      }
    ), overlayEnable && /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-image-overlay" })) : /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(
      "img",
      {
        src: imageUrl,
        alt: altText,
        title
      }
    ), overlayEnable && /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-image-overlay" }))) : /* @__PURE__ */ wp.element.createElement(
      Placeholder3,
      {
        icon: "format-image",
        label: __19("Image", "digiblocks"),
        instructions: __19("Upload an image or select one from your media library.", "digiblocks")
      },
      /* @__PURE__ */ wp.element.createElement(MediaUploadCheck5, null, /* @__PURE__ */ wp.element.createElement(
        MediaUpload5,
        {
          onSelect: onSelectImage,
          allowedTypes: ["image"],
          value: imageId,
          render: ({ open }) => /* @__PURE__ */ wp.element.createElement(
            Button16,
            {
              isPrimary: true,
              onClick: open
            },
            __19("Select Image", "digiblocks")
          )
        }
      ))
    ))));
  };
  var edit_default17 = ImageEdit;

  // blocks/image/save.js
  var { useBlockProps: useBlockProps33, RichText: RichText16 } = window.wp.blockEditor;
  var ImageSave = ({ attributes }) => {
    const {
      id,
      anchor,
      customClasses,
      imageUrl,
      altText,
      title,
      animation,
      url,
      opensInNewTab,
      rel,
      overlayEnable
    } = attributes;
    const blockClassNames = [
      "digiblocks-image",
      id,
      animation !== "none" ? `animate-${animation}` : "",
      customClasses || ""
    ].filter(Boolean).join(" ");
    const blockProps = useBlockProps33.save({
      className: blockClassNames,
      id: anchor || void 0
    });
    if (!imageUrl) {
      return null;
    }
    let imageContent = /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(
      "img",
      {
        src: imageUrl,
        alt: altText || "",
        title: title || ""
      }
    ), overlayEnable && /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-image-overlay" }));
    if (url) {
      imageContent = /* @__PURE__ */ wp.element.createElement(
        "a",
        {
          href: url,
          target: opensInNewTab ? "_blank" : void 0,
          rel: rel ? "noopener noreferrer" : void 0
        },
        imageContent
      );
    }
    return /* @__PURE__ */ wp.element.createElement("div", { ...blockProps }, /* @__PURE__ */ wp.element.createElement("figure", null, imageContent));
  };
  var save_default17 = ImageSave;

  // blocks/lottie/edit.js
  var { __: __20 } = window.wp.i18n;
  var {
    useBlockProps: useBlockProps34,
    InspectorControls: InspectorControls18,
    PanelColorSettings: PanelColorSettings17
  } = window.wp.blockEditor;
  var {
    TextControl: TextControl10,
    ToggleControl: ToggleControl18,
    SelectControl: SelectControl19,
    RangeControl: RangeControl17,
    Placeholder: Placeholder4,
    Spinner: Spinner6,
    Button: Button17,
    RadioControl,
    __experimentalToggleGroupControl: ToggleGroupControl17,
    __experimentalToggleGroupControlOption: ToggleGroupControlOption17
  } = window.wp.components;
  var { useState: useState18, useEffect: useEffect18, useRef: useRef15 } = window.wp.element;
  var { MediaUpload: MediaUpload6, MediaUploadCheck: MediaUploadCheck6 } = window.wp.blockEditor;
  var { useBlockId: useBlockId18, getDimensionCSS: getDimensionCSS16, animations: animations16, animationPreview: animationPreview16 } = digi.utils;
  var { tabIcons: tabIcons18 } = digi.icons;
  var { ResponsiveControl: ResponsiveControl18, DimensionControl: DimensionControl17, BoxShadowControl: BoxShadowControl16, CustomTabPanel: CustomTabPanel18, TabPanelBody: TabPanelBody19 } = digi.components;
  var dotLottieScriptLoaded = false;
  var dotLottieLoadPromise = null;
  var loadDotLottieScript = () => {
    if (dotLottieScriptLoaded) {
      return Promise.resolve();
    }
    if (dotLottieLoadPromise) {
      return dotLottieLoadPromise;
    }
    dotLottieLoadPromise = new Promise((resolve, reject) => {
      const scriptUrl = digiBlocksData.lottie;
      if (!scriptUrl) {
        reject(new Error("Lottie script URL not found in digiBlocksData"));
        return;
      }
      const script = document.createElement("script");
      script.src = scriptUrl;
      script.async = true;
      script.onload = () => {
        dotLottieScriptLoaded = true;
        resolve();
      };
      script.onerror = () => {
        reject(new Error("Failed to load Lottie script from: " + scriptUrl));
      };
      document.head.appendChild(script);
    });
    return dotLottieLoadPromise;
  };
  var LottieEdit = ({ attributes, setAttributes, clientId }) => {
    const {
      id,
      anchor,
      visibility,
      customClasses,
      lottieSource,
      sourceType,
      lottieFile,
      autoplay,
      loop,
      speed,
      width,
      widthUnit,
      height,
      heightUnit,
      alignment,
      backgroundColor,
      showControls,
      padding,
      margin,
      borderStyle,
      borderWidth,
      borderRadius,
      borderColor,
      shadow,
      animation
    } = attributes;
    useBlockId18(id, clientId, setAttributes);
    const [localActiveDevice, setLocalActiveDevice] = useState18(window.digi.responsiveState.activeDevice);
    const [activeTab, setActiveTab] = useState18(() => {
      if (window.digi.uiState) {
        const savedTab = window.digi.uiState.getActiveTab(clientId);
        if (savedTab)
          return savedTab;
      }
      return "options";
    });
    const [isLoading, setIsLoading] = useState18(false);
    const [animationError, setAnimationError] = useState18(null);
    const [isScriptLoaded, setIsScriptLoaded] = useState18(dotLottieScriptLoaded);
    const containerRef = useRef15(null);
    const canvasRef = useRef15(null);
    const dotLottieRef = useRef15(null);
    const controlsRef = useRef15(null);
    const previewTimeoutRef = useRef15(null);
    const isMounted = useRef15(true);
    const widthUnitOptions = [
      { label: "px", value: "px" },
      { label: "%", value: "%" },
      { label: "vw", value: "vw" }
    ];
    const heightUnitOptions = [
      { label: "px", value: "px" },
      { label: "%", value: "%" },
      { label: "vh", value: "vh" }
    ];
    useEffect18(() => {
      const unsubscribe = window.digi.responsiveState.subscribe((device) => {
        setLocalActiveDevice(device);
      });
      return unsubscribe;
    }, []);
    useEffect18(() => {
      isMounted.current = true;
      return () => {
        isMounted.current = false;
        if (dotLottieRef.current) {
          try {
            dotLottieRef.current.pause();
            dotLottieRef.current.destroy();
          } catch (e) {
            console.warn("Error destroying animation during cleanup:", e);
          }
          dotLottieRef.current = null;
        }
        if (window.lottieResizeObserver) {
          window.lottieResizeObserver.disconnect();
          window.lottieResizeObserver = null;
        }
      };
    }, []);
    useEffect18(() => {
      if (isScriptLoaded)
        return;
      setIsLoading(true);
      loadDotLottieScript().then(() => {
        if (isMounted.current) {
          setIsScriptLoaded(true);
          setIsLoading(false);
          if (lottieSource && canvasRef.current) {
            initializeAnimation();
          }
        }
      }).catch((error) => {
        if (isMounted.current) {
          setAnimationError("Failed to load animation library: " + error.message);
          setIsLoading(false);
        }
      });
    }, []);
    useEffect18(() => {
      if (isScriptLoaded && lottieSource && canvasRef.current) {
        initializeAnimation();
      }
    }, [isScriptLoaded, lottieSource, canvasRef.current]);
    useEffect18(() => {
      if (!dotLottieRef.current)
        return;
      if (showControls && !controlsRef.current) {
        createControls();
      } else if (!showControls && controlsRef.current) {
        controlsRef.current.remove();
        controlsRef.current = null;
      }
    }, [showControls]);
    const initializeAnimation = () => {
      if (!window.DotLottie || !lottieSource || !canvasRef.current) {
        return;
      }
      setIsLoading(true);
      setAnimationError(null);
      try {
        if (dotLottieRef.current) {
          dotLottieRef.current.destroy?.();
          dotLottieRef.current = null;
        }
        dotLottieRef.current = new window.DotLottie({
          autoplay,
          loop,
          canvas: canvasRef.current,
          src: lottieSource
        });
        dotLottieRef.current.addEventListener("DOMLoaded", () => {
          if (isMounted.current) {
            if (speed !== 1) {
              dotLottieRef.current.setSpeed(speed);
            }
            if (!loop) {
              dotLottieRef.current.addEventListener("complete", () => {
                dotLottieRef.current.pause();
                dotLottieRef.current.goToFrame(0);
              });
            }
            if (!autoplay) {
              dotLottieRef.current.pause();
              dotLottieRef.current.goToFrame(0);
            }
            setIsLoading(false);
            if (showControls) {
              createControls();
            }
          }
        });
        dotLottieRef.current.addEventListener("error", (error) => {
          console.error("Animation failed to load:", error);
          if (isMounted.current) {
            setAnimationError("Animation failed to load. Check the file or URL.");
            setIsLoading(false);
          }
        });
        setTimeout(() => {
          if (isMounted.current && isLoading) {
            setIsLoading(false);
          }
        }, 3e3);
      } catch (error) {
        console.error("Error initializing animation:", error);
        setAnimationError("Failed to initialize animation: " + error.message);
        setIsLoading(false);
      }
    };
    const createControlsWithDelay = () => {
      setTimeout(() => {
        if (isMounted.current) {
          createControls();
        }
      }, 100);
    };
    const createControls = () => {
      if (!containerRef.current || !dotLottieRef.current)
        return;
      if (controlsRef.current) {
        controlsRef.current.remove();
      }
      const controls = document.createElement("div");
      controls.className = "digiblocks-lottie-controls";
      controls.style.position = "absolute";
      controls.style.bottom = "10px";
      controls.style.left = "0";
      controls.style.right = "0";
      controls.style.display = "flex";
      controls.style.justifyContent = "center";
      controls.style.zIndex = "10";
      const playPauseBtn = document.createElement("button");
      playPauseBtn.className = "digiblocks-lottie-play-pause";
      let isPlaying = autoplay;
      playPauseBtn.innerHTML = isPlaying ? "\u23F8\uFE0F" : "\u25B6\uFE0F";
      playPauseBtn.style.background = "rgba(0,0,0,0.3)";
      playPauseBtn.style.color = "white";
      playPauseBtn.style.border = "none";
      playPauseBtn.style.borderRadius = "4px";
      playPauseBtn.style.padding = "5px 10px";
      playPauseBtn.style.cursor = "pointer";
      playPauseBtn.addEventListener("click", () => {
        if (!dotLottieRef.current)
          return;
        if (isPlaying) {
          dotLottieRef.current.pause();
          playPauseBtn.innerHTML = "\u25B6\uFE0F";
        } else {
          dotLottieRef.current.play();
          playPauseBtn.innerHTML = "\u23F8\uFE0F";
        }
        isPlaying = !isPlaying;
      });
      controls.appendChild(playPauseBtn);
      containerRef.current.appendChild(controls);
      controlsRef.current = controls;
    };
    useEffect18(() => {
      if (!dotLottieRef.current || !dotLottieRef.current.isLoaded)
        return;
      try {
        dotLottieRef.current.setLoop(loop);
        dotLottieRef.current.setSpeed(speed);
        if (autoplay) {
          dotLottieRef.current.play();
        } else {
          dotLottieRef.current.pause();
          dotLottieRef.current.goToFrame(0);
        }
        if (!loop) {
          dotLottieRef.current.removeEventListener("complete");
          dotLottieRef.current.addEventListener("complete", () => {
            dotLottieRef.current.pause();
            dotLottieRef.current.goToFrame(0);
          });
        }
      } catch (error) {
        console.error("Error updating animation settings:", error);
      }
    }, [autoplay, loop, speed]);
    const onFileSelect = (media) => {
      if (!media || !media.url)
        return;
      setAttributes({
        lottieSource: media.url,
        lottieFile: media,
        sourceType: "file"
      });
    };
    const onURLChange = (url) => {
      setAttributes({
        lottieSource: url,
        sourceType: "url"
      });
    };
    const loadFromUrl = () => {
      if (!lottieSource) {
        setAnimationError("Please enter a valid URL");
        return;
      }
      if (!isScriptLoaded) {
        setAnimationError("Animation library is still loading. Please wait a moment.");
        return;
      }
      initializeAnimation();
    };
    const handlePreviewClick = () => {
      animationPreview16(id, animation, animations16, previewTimeoutRef);
    };
    const generateCSS = () => {
      const activeDevice = localActiveDevice;
      let animationCSS = "";
      if (animation && animation !== "none" && animations16[animation]) {
        animationCSS = animations16[animation].keyframes;
      }
      return `
            /* Lottie Block - ${id} */
            .${id} {
				${getDimensionCSS16(padding, "padding", activeDevice)}
				${getDimensionCSS16(margin, "margin", activeDevice)}
                width: 100%;
                display: flex;
                justify-content: ${alignment === "left" ? "flex-start" : alignment === "right" ? "flex-end" : "center"};
            }
            
            .${id} .digiblocks-lottie-container {
                width: ${width[activeDevice]}${widthUnit};
                height: ${height[activeDevice]}${heightUnit};
                ${backgroundColor ? `background-color: ${backgroundColor};` : ""}
                overflow: hidden;
                position: relative;
                ${borderStyle !== "none" ? `
					border-style: ${borderStyle};
					border-color: ${borderColor};
					${getDimensionCSS16(borderWidth, "border-width", activeDevice)}
                ` : ""}
				${getDimensionCSS16(borderRadius, "border-radius", activeDevice)}
                ${shadow.enable ? `box-shadow: ${shadow.horizontal}px ${shadow.vertical}px ${shadow.blur}px ${shadow.spread}px ${shadow.color};` : ""}
            }
            
            .${id} canvas {
                width: 100%;
                height: 100%;
            }
            
            .${id} .digiblocks-lottie-error {
                position: absolute;
                top: 50%;
                left: 50%;
                transform: translate(-50%, -50%);
                text-align: center;
            }
            
            .${id} .digiblocks-lottie-error {
                color: #cc1818;
                max-width: 90%;
                padding: 10px;
            }
            
            /* Animation keyframes */
            ${animationCSS}

			/* Visibility Controls */
			${visibility.desktop ? `
				@media (min-width: 992px) {
					.${id} {
						opacity: 0.5 !important;
					}
				}
			` : ""}

			${visibility.tablet ? `
				@media (min-width: 768px) and (max-width: 991px) {
					.${id} {
						opacity: 0.5 !important;
					}
				}
			` : ""}

			${visibility.mobile ? `
				@media (max-width: 767px) {
					.${id} {
						opacity: 0.5 !important;
					}
				}
			` : ""}
        `;
    };
    const animationOptions = [
      { label: __20("None", "digiblocks"), value: "none" },
      ...Object.keys(animations16).map((animation2) => ({
        label: animation2.replace(/-/g, " ").replace(/\b\w/g, (l) => l.toUpperCase()),
        value: animation2
      }))
    ];
    const borderStyleOptions = [
      { label: __20("None", "digiblocks"), value: "none" },
      { label: __20("Solid", "digiblocks"), value: "solid" },
      { label: __20("Dashed", "digiblocks"), value: "dashed" },
      { label: __20("Dotted", "digiblocks"), value: "dotted" },
      { label: __20("Double", "digiblocks"), value: "double" }
    ];
    const tabList = [
      {
        name: "options",
        title: __20("Options", "digiblocks"),
        icon: tabIcons18.optionsIcon
      },
      {
        name: "style",
        title: __20("Style", "digiblocks"),
        icon: tabIcons18.styleIcon
      },
      {
        name: "advanced",
        title: __20("Advanced", "digiblocks"),
        icon: tabIcons18.advancedIcon
      }
    ];
    const renderTabContent = () => {
      switch (activeTab) {
        case "options":
          return /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(
            TabPanelBody19,
            {
              tab: "options",
              name: "source",
              title: __20("Source", "digiblocks"),
              initialOpen: true
            },
            /* @__PURE__ */ wp.element.createElement(
              RadioControl,
              {
                label: __20("Source Type", "digiblocks"),
                selected: sourceType,
                options: [
                  { label: __20("File", "digiblocks"), value: "file" },
                  { label: __20("URL", "digiblocks"), value: "url" }
                ],
                onChange: (value) => setAttributes({ sourceType: value })
              }
            ),
            sourceType === "file" && /* @__PURE__ */ wp.element.createElement(MediaUploadCheck6, null, /* @__PURE__ */ wp.element.createElement("div", { style: { marginTop: "12px" } }, /* @__PURE__ */ wp.element.createElement(
              MediaUpload6,
              {
                onSelect: onFileSelect,
                allowedTypes: ["application/json", "text/plain", "application/octet-stream"],
                value: lottieFile?.id || 0,
                render: ({ open }) => /* @__PURE__ */ wp.element.createElement("div", null, /* @__PURE__ */ wp.element.createElement(
                  Button17,
                  {
                    variant: "secondary",
                    onClick: open,
                    style: { marginBottom: "8px", width: "100%" }
                  },
                  lottieSource ? __20("Replace Lottie File", "digiblocks") : __20("Upload Lottie File", "digiblocks")
                ), lottieSource && /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-lottie-file-name", style: {
                  fontSize: "12px",
                  overflow: "hidden",
                  textOverflow: "ellipsis",
                  marginBottom: "8px"
                } }, lottieFile?.filename || lottieSource.split("/").pop()))
              }
            ))),
            sourceType === "url" && /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(
              TextControl10,
              {
                label: __20("Lottie URL", "digiblocks"),
                value: lottieSource,
                onChange: onURLChange,
                placeholder: "https://example.com/animation.json",
                help: __20("Enter the URL to a JSON Lottie animation file", "digiblocks"),
                __next40pxDefaultSize: true,
                __nextHasNoMarginBottom: true
              }
            ), /* @__PURE__ */ wp.element.createElement(
              Button17,
              {
                variant: "secondary",
                onClick: loadFromUrl,
                style: { marginTop: "8px" },
                disabled: !lottieSource
              },
              __20("Load Animation", "digiblocks")
            ))
          ), /* @__PURE__ */ wp.element.createElement(
            TabPanelBody19,
            {
              tab: "options",
              name: "animation",
              title: __20("Animation", "digiblocks"),
              initialOpen: false
            },
            /* @__PURE__ */ wp.element.createElement(
              ToggleControl18,
              {
                label: __20("Autoplay", "digiblocks"),
                checked: autoplay,
                onChange: (value) => setAttributes({ autoplay: value }),
                help: __20("Automatically start the animation when the page loads", "digiblocks"),
                __nextHasNoMarginBottom: true
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              ToggleControl18,
              {
                label: __20("Loop", "digiblocks"),
                checked: loop,
                onChange: (value) => setAttributes({ loop: value }),
                help: __20("Repeat the animation indefinitely", "digiblocks"),
                __nextHasNoMarginBottom: true
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              RangeControl17,
              {
                label: __20("Animation Speed", "digiblocks"),
                value: speed,
                onChange: (value) => setAttributes({ speed: value }),
                min: 0.1,
                max: 3,
                step: 0.1,
                help: __20("1 = normal speed, 2 = double speed, 0.5 = half speed", "digiblocks"),
                __next40pxDefaultSize: true,
                __nextHasNoMarginBottom: true
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              ToggleControl18,
              {
                label: __20("Show Controls", "digiblocks"),
                checked: showControls,
                onChange: (value) => setAttributes({ showControls: value }),
                help: __20("Display play/pause control", "digiblocks"),
                __nextHasNoMarginBottom: true
              }
            )
          ), /* @__PURE__ */ wp.element.createElement(
            TabPanelBody19,
            {
              tab: "options",
              name: "dimensions",
              title: __20("Dimensions", "digiblocks"),
              initialOpen: false
            },
            /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-size-type-field-tabs" }, /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-responsive-control-inner" }, /* @__PURE__ */ wp.element.createElement("div", { className: "components-base-control" }, /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-range-control digiblocks-size-type-field-tabs" }, /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-control__header" }, /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-responsive-label-wrap" }, /* @__PURE__ */ wp.element.createElement("span", { className: "digiblocks-control-label" }, __20("Width", "digiblocks")), /* @__PURE__ */ wp.element.createElement(
              "button",
              {
                type: "button",
                "aria-label": __20(`Switch to ${window.digi.responsiveState.getNextDevice()} view`, "digiblocks"),
                className: `components-button digiblocks-responsive-common-button digiblocks-device-${localActiveDevice}`,
                onClick: () => window.digi.responsiveState.toggleDevice()
              },
              window.digi.icons.deviceIcons[localActiveDevice]
            )), /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-range-control__actions digiblocks-control__actions" }, /* @__PURE__ */ wp.element.createElement("div", { tabIndex: "0" }, /* @__PURE__ */ wp.element.createElement(
              "button",
              {
                type: "button",
                disabled: width[localActiveDevice] === (widthUnit === "%" || widthUnit === "vw" ? 100 : 300),
                className: "components-button digiblocks-reset is-secondary is-small",
                onClick: () => setAttributes({
                  width: {
                    ...width,
                    [localActiveDevice]: widthUnit === "%" || widthUnit === "vw" ? 100 : 300
                  }
                })
              },
              /* @__PURE__ */ wp.element.createElement("span", { className: "dashicon dashicons dashicons-image-rotate" })
            )), /* @__PURE__ */ wp.element.createElement(
              ToggleGroupControl17,
              {
                value: widthUnit,
                onChange: (value) => {
                  const currentWidth = width[localActiveDevice];
                  let newWidth = currentWidth;
                  if ((value === "%" || value === "vw") && currentWidth > 100) {
                    newWidth = 100;
                  } else if ((widthUnit === "%" || widthUnit === "vw") && value === "px" && currentWidth < 50) {
                    newWidth = 300;
                  }
                  setAttributes({
                    widthUnit: value,
                    width: {
                      ...width,
                      [localActiveDevice]: newWidth
                    }
                  });
                },
                isBlock: true,
                isSmall: true,
                hideLabelFromVision: true,
                "aria-label": __20("Width Unit", "digiblocks"),
                __next40pxDefaultSize: true,
                __nextHasNoMarginBottom: true
              },
              widthUnitOptions.map((option) => /* @__PURE__ */ wp.element.createElement(
                ToggleGroupControlOption17,
                {
                  key: option.value,
                  value: option.value,
                  label: option.label
                }
              ))
            ))), /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-range-control__mobile-controls" }, /* @__PURE__ */ wp.element.createElement(
              RangeControl17,
              {
                value: width[localActiveDevice],
                onChange: (value) => setAttributes({
                  width: {
                    ...width,
                    [localActiveDevice]: value
                  }
                }),
                min: 10,
                max: widthUnit === "%" || widthUnit === "vw" ? 100 : 1e3,
                step: 1,
                __next40pxDefaultSize: true,
                __nextHasNoMarginBottom: true
              }
            )))))),
            /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-size-type-field-tabs" }, /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-responsive-control-inner" }, /* @__PURE__ */ wp.element.createElement("div", { className: "components-base-control" }, /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-range-control digiblocks-size-type-field-tabs" }, /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-control__header" }, /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-responsive-label-wrap" }, /* @__PURE__ */ wp.element.createElement("span", { className: "digiblocks-control-label" }, __20("Height", "digiblocks")), /* @__PURE__ */ wp.element.createElement(
              "button",
              {
                type: "button",
                "aria-label": __20(`Switch to ${window.digi.responsiveState.getNextDevice()} view`, "digiblocks"),
                className: `components-button digiblocks-responsive-common-button digiblocks-device-${localActiveDevice}`,
                onClick: () => window.digi.responsiveState.toggleDevice()
              },
              window.digi.icons.deviceIcons[localActiveDevice]
            )), /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-range-control__actions digiblocks-control__actions" }, /* @__PURE__ */ wp.element.createElement("div", { tabIndex: "0" }, /* @__PURE__ */ wp.element.createElement(
              "button",
              {
                type: "button",
                disabled: height[localActiveDevice] === (heightUnit === "%" || heightUnit === "vh" ? 100 : 300),
                className: "components-button digiblocks-reset is-secondary is-small",
                onClick: () => setAttributes({
                  height: {
                    ...height,
                    [localActiveDevice]: heightUnit === "%" || heightUnit === "vh" ? 100 : 300
                  }
                })
              },
              /* @__PURE__ */ wp.element.createElement("span", { className: "dashicon dashicons dashicons-image-rotate" })
            )), /* @__PURE__ */ wp.element.createElement(
              ToggleGroupControl17,
              {
                value: heightUnit,
                onChange: (value) => {
                  const currentHeight = height[localActiveDevice];
                  let newHeight = currentHeight;
                  if ((value === "%" || value === "vh") && currentHeight > 100) {
                    newHeight = 100;
                  } else if ((heightUnit === "%" || heightUnit === "vh") && value === "px" && currentHeight < 50) {
                    newHeight = 300;
                  }
                  setAttributes({
                    heightUnit: value,
                    height: {
                      ...height,
                      [localActiveDevice]: newHeight
                    }
                  });
                },
                isBlock: true,
                isSmall: true,
                hideLabelFromVision: true,
                "aria-label": __20("Height Unit", "digiblocks"),
                __next40pxDefaultSize: true,
                __nextHasNoMarginBottom: true
              },
              heightUnitOptions.map((option) => /* @__PURE__ */ wp.element.createElement(
                ToggleGroupControlOption17,
                {
                  key: option.value,
                  value: option.value,
                  label: option.label
                }
              ))
            ))), /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-range-control__mobile-controls" }, /* @__PURE__ */ wp.element.createElement(
              RangeControl17,
              {
                value: height[localActiveDevice],
                onChange: (value) => setAttributes({
                  height: {
                    ...height,
                    [localActiveDevice]: value
                  }
                }),
                min: 10,
                max: heightUnit === "%" || heightUnit === "vh" ? 100 : 1e3,
                step: 1,
                __next40pxDefaultSize: true,
                __nextHasNoMarginBottom: true
              }
            )))))),
            /* @__PURE__ */ wp.element.createElement(
              ToggleGroupControl17,
              {
                label: __20("Alignment", "digiblocks"),
                value: alignment,
                onChange: (value) => setAttributes({ alignment: value }),
                isBlock: true,
                __next40pxDefaultSize: true,
                __nextHasNoMarginBottom: true
              },
              /* @__PURE__ */ wp.element.createElement(
                ToggleGroupControlOption17,
                {
                  value: "left",
                  label: __20("Left", "digiblocks")
                }
              ),
              /* @__PURE__ */ wp.element.createElement(
                ToggleGroupControlOption17,
                {
                  value: "center",
                  label: __20("Center", "digiblocks")
                }
              ),
              /* @__PURE__ */ wp.element.createElement(
                ToggleGroupControlOption17,
                {
                  value: "right",
                  label: __20("Right", "digiblocks")
                }
              )
            )
          ));
        case "style":
          return /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(
            TabPanelBody19,
            {
              tab: "style",
              name: "colors",
              title: __20("Colors", "digiblocks"),
              initialOpen: true
            },
            /* @__PURE__ */ wp.element.createElement(
              PanelColorSettings17,
              {
                title: __20("Colors", "digiblocks"),
                initialOpen: true,
                enableAlpha: true,
                colorSettings: [
                  {
                    value: backgroundColor,
                    onChange: (value) => setAttributes({ backgroundColor: value }),
                    label: __20("Background Color", "digiblocks")
                  },
                  {
                    value: borderColor,
                    onChange: (value) => setAttributes({ borderColor: value }),
                    label: __20("Border Color", "digiblocks")
                  }
                ]
              }
            )
          ), /* @__PURE__ */ wp.element.createElement(
            TabPanelBody19,
            {
              tab: "style",
              name: "borders",
              title: __20("Borders & Shadows", "digiblocks"),
              initialOpen: false
            },
            /* @__PURE__ */ wp.element.createElement(
              SelectControl19,
              {
                label: __20("Border Style", "digiblocks"),
                value: borderStyle,
                options: borderStyleOptions,
                onChange: (value) => setAttributes({ borderStyle: value }),
                __next40pxDefaultSize: true,
                __nextHasNoMarginBottom: true
              }
            ),
            borderStyle !== "none" && /* @__PURE__ */ wp.element.createElement(
              ResponsiveControl18,
              {
                label: __20("Border Width", "digiblocks")
              },
              /* @__PURE__ */ wp.element.createElement(
                DimensionControl17,
                {
                  values: borderWidth[localActiveDevice],
                  onChange: (value) => setAttributes({
                    borderWidth: {
                      ...borderWidth,
                      [localActiveDevice]: value
                    }
                  })
                }
              )
            ),
            /* @__PURE__ */ wp.element.createElement(
              ResponsiveControl18,
              {
                label: __20("Border Radius", "digiblocks")
              },
              /* @__PURE__ */ wp.element.createElement(
                DimensionControl17,
                {
                  values: borderRadius[localActiveDevice],
                  onChange: (value) => setAttributes({
                    borderRadius: {
                      ...borderRadius,
                      [localActiveDevice]: value
                    }
                  }),
                  units: [
                    { label: "px", value: "px" },
                    { label: "%", value: "%" }
                  ]
                }
              )
            ),
            /* @__PURE__ */ wp.element.createElement(
              BoxShadowControl16,
              {
                label: __20("Shadow", "digiblocks"),
                normalValue: shadow,
                onNormalChange: (value) => setAttributes({ shadow: value })
              }
            )
          ), /* @__PURE__ */ wp.element.createElement(
            TabPanelBody19,
            {
              tab: "style",
              name: "spacing",
              title: __20("Spacing", "digiblocks"),
              initialOpen: false
            },
            /* @__PURE__ */ wp.element.createElement(
              ResponsiveControl18,
              {
                label: __20("Padding", "digiblocks")
              },
              /* @__PURE__ */ wp.element.createElement(
                DimensionControl17,
                {
                  values: padding[localActiveDevice],
                  onChange: (value) => setAttributes({
                    padding: {
                      ...padding,
                      [localActiveDevice]: value
                    }
                  })
                }
              )
            ),
            /* @__PURE__ */ wp.element.createElement(
              ResponsiveControl18,
              {
                label: __20("Margin", "digiblocks")
              },
              /* @__PURE__ */ wp.element.createElement(
                DimensionControl17,
                {
                  values: margin[localActiveDevice],
                  onChange: (value) => setAttributes({
                    margin: {
                      ...margin,
                      [localActiveDevice]: value
                    }
                  })
                }
              )
            )
          ));
        case "advanced":
          return /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(
            TabPanelBody19,
            {
              tab: "advanced",
              name: "animation",
              title: __20("Animation", "digiblocks"),
              initialOpen: true
            },
            /* @__PURE__ */ wp.element.createElement(
              SelectControl19,
              {
                label: __20("Animation Effect", "digiblocks"),
                value: animation,
                options: animationOptions,
                onChange: (value) => setAttributes({ animation: value }),
                __next40pxDefaultSize: true,
                __nextHasNoMarginBottom: true
              }
            ),
            animation && animation !== "none" && /* @__PURE__ */ wp.element.createElement("div", { style: { marginTop: "10px" } }, /* @__PURE__ */ wp.element.createElement(
              Button17,
              {
                variant: "secondary",
                isSecondary: true,
                onClick: handlePreviewClick,
                style: { width: "100%" }
              },
              __20("Preview Animation", "digiblocks")
            ))
          ), /* @__PURE__ */ wp.element.createElement(
            TabPanelBody19,
            {
              tab: "advanced",
              name: "visibility",
              title: __20("Visibility", "digiblocks"),
              initialOpen: false
            },
            /* @__PURE__ */ wp.element.createElement("div", { className: "components-base-control__help", style: {
              padding: "12px",
              backgroundColor: "#f0f6fc",
              border: "1px solid #c3ddfd",
              borderRadius: "4px",
              marginBottom: "16px"
            } }, /* @__PURE__ */ wp.element.createElement("strong", null, __20("Editor Note:", "digiblocks")), /* @__PURE__ */ wp.element.createElement("br", null), __20("Hidden elements appear with reduced opacity in the editor for easy editing. Visibility changes only take effect on the frontend.", "digiblocks")),
            /* @__PURE__ */ wp.element.createElement(
              ToggleControl18,
              {
                label: __20("Hide on Desktop", "digiblocks"),
                checked: visibility.desktop,
                onChange: (value) => setAttributes({
                  visibility: {
                    ...visibility,
                    desktop: value
                  }
                }),
                __nextHasNoMarginBottom: true
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              ToggleControl18,
              {
                label: __20("Hide on Tablet", "digiblocks"),
                checked: visibility.tablet,
                onChange: (value) => setAttributes({
                  visibility: {
                    ...visibility,
                    tablet: value
                  }
                }),
                __nextHasNoMarginBottom: true
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              ToggleControl18,
              {
                label: __20("Hide on Mobile", "digiblocks"),
                checked: visibility.mobile,
                onChange: (value) => setAttributes({
                  visibility: {
                    ...visibility,
                    mobile: value
                  }
                }),
                __nextHasNoMarginBottom: true
              }
            )
          ), /* @__PURE__ */ wp.element.createElement(
            TabPanelBody19,
            {
              tab: "advanced",
              name: "additional",
              title: __20("Additional", "digiblocks"),
              initialOpen: false
            },
            /* @__PURE__ */ wp.element.createElement("div", { className: "components-base-control html-anchor-control" }, /* @__PURE__ */ wp.element.createElement("div", { className: "components-base-control__field" }, /* @__PURE__ */ wp.element.createElement("label", { className: "components-base-control__label", htmlFor: "html-anchor" }, __20("HTML anchor", "digiblocks")), /* @__PURE__ */ wp.element.createElement(
              "input",
              {
                className: "components-text-control__input",
                type: "text",
                id: "html-anchor",
                value: anchor || "",
                onChange: (e) => setAttributes({ anchor: e.target.value }),
                "aria-describedby": "html-anchor-help",
                autoCapitalize: "none",
                autoComplete: "off"
              }
            )), /* @__PURE__ */ wp.element.createElement("p", { id: "html-anchor-help", className: "components-base-control__help" }, __20(`Enter a word or two \u2014 without spaces \u2014 to make a unique web address just for this block, called an "anchor". Then, you'll be able to link directly to this section of your page.`, "digiblocks"), " ", /* @__PURE__ */ wp.element.createElement(
              "a",
              {
                className: "components-external-link",
                href: "https://wordpress.org/documentation/article/page-jumps/",
                target: "_blank",
                rel: "external noreferrer noopener"
              },
              /* @__PURE__ */ wp.element.createElement("span", { className: "components-external-link__contents" }, __20("Learn more about anchors", "digiblocks")),
              /* @__PURE__ */ wp.element.createElement("span", { className: "components-external-link__icon", "aria-label": "(opens in a new tab)" }, "\u2197")
            ))),
            /* @__PURE__ */ wp.element.createElement("div", { className: "components-base-control" }, /* @__PURE__ */ wp.element.createElement("div", { className: "components-base-control__field" }, /* @__PURE__ */ wp.element.createElement("label", { className: "components-base-control__label", htmlFor: "additional-css-classes" }, __20("Additional CSS class(es)", "digiblocks")), /* @__PURE__ */ wp.element.createElement(
              "input",
              {
                className: "components-text-control__input",
                type: "text",
                id: "additional-css-classes",
                value: customClasses || "",
                onChange: (e) => setAttributes({ customClasses: e.target.value }),
                "aria-describedby": "additional-css-classes-help",
                autoComplete: "off"
              }
            )), /* @__PURE__ */ wp.element.createElement("p", { id: "additional-css-classes-help", className: "components-base-control__help" }, __20("Separate multiple classes with spaces.", "digiblocks")))
          ));
        default:
          return null;
      }
    };
    const blockClasses = `digiblocks-lottie ${id} ${customClasses || ""}`;
    const animationClass = animation && animation !== "none" ? ` animate-${animation}` : "";
    const blockProps = useBlockProps34({
      className: blockClasses + animationClass,
      id: anchor || null
    });
    return /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(InspectorControls18, null, /* @__PURE__ */ wp.element.createElement(
      CustomTabPanel18,
      {
        tabs: tabList,
        activeTab,
        onSelect: setActiveTab
      },
      renderTabContent()
    )), /* @__PURE__ */ wp.element.createElement("style", { dangerouslySetInnerHTML: { __html: generateCSS() } }), /* @__PURE__ */ wp.element.createElement("div", { ...blockProps }, !lottieSource ? /* @__PURE__ */ wp.element.createElement(
      Placeholder4,
      {
        icon: "format-image",
        label: __20("Lottie Animation", "digiblocks"),
        instructions: __20("Upload a Lottie animation file or provide a URL to a Lottie JSON file.", "digiblocks")
      },
      sourceType === "file" ? /* @__PURE__ */ wp.element.createElement(MediaUploadCheck6, null, /* @__PURE__ */ wp.element.createElement(
        MediaUpload6,
        {
          onSelect: onFileSelect,
          allowedTypes: ["application/json", "text/plain", "application/octet-stream"],
          render: ({ open }) => /* @__PURE__ */ wp.element.createElement(Button17, { variant: "primary", onClick: open }, __20("Upload Lottie File", "digiblocks"))
        }
      )) : /* @__PURE__ */ wp.element.createElement("div", { style: { width: "100%", maxWidth: "400px" } }, /* @__PURE__ */ wp.element.createElement(
        TextControl10,
        {
          placeholder: __20("Enter Lottie JSON URL", "digiblocks"),
          value: lottieSource,
          onChange: onURLChange,
          __next40pxDefaultSize: true,
          __nextHasNoMarginBottom: true
        }
      ), /* @__PURE__ */ wp.element.createElement(
        Button17,
        {
          variant: "primary",
          onClick: loadFromUrl,
          style: { marginTop: "10px" },
          disabled: !lottieSource
        },
        __20("Load Animation", "digiblocks")
      )),
      /* @__PURE__ */ wp.element.createElement("div", { style: { marginTop: "12px", display: "flex", justifyContent: "center" } }, /* @__PURE__ */ wp.element.createElement(
        Button17,
        {
          variant: "link",
          onClick: () => setAttributes({ sourceType: sourceType === "file" ? "url" : "file" })
        },
        sourceType === "file" ? __20("Or use URL instead", "digiblocks") : __20("Or upload a file instead", "digiblocks")
      ))
    ) : /* @__PURE__ */ wp.element.createElement(
      "div",
      {
        className: "digiblocks-lottie-container",
        ref: containerRef,
        style: {
          width: `${width[localActiveDevice]}${widthUnit}`,
          height: `${height[localActiveDevice]}${heightUnit}`,
          position: "relative"
        }
      },
      /* @__PURE__ */ wp.element.createElement(
        "canvas",
        {
          ref: canvasRef,
          style: {
            width: "100%",
            height: "100%",
            display: "block"
          }
        }
      ),
      animationError && /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-lottie-error", style: {
        position: "absolute",
        top: "50%",
        left: "50%",
        transform: "translate(-50%, -50%)",
        textAlign: "center",
        color: "#cc1818",
        maxWidth: "90%",
        padding: "10px"
      } }, /* @__PURE__ */ wp.element.createElement("p", null, animationError), /* @__PURE__ */ wp.element.createElement(
        Button17,
        {
          variant: "secondary",
          onClick: () => {
            setAnimationError(null);
            initializeAnimation();
          }
        },
        __20("Try Again", "digiblocks")
      ))
    )));
  };
  var edit_default18 = LottieEdit;

  // blocks/lottie/save.js
  var { __: __21 } = window.wp.i18n;
  var { useBlockProps: useBlockProps35 } = window.wp.blockEditor;
  var LottieSave = ({ attributes }) => {
    const {
      id,
      anchor,
      customClasses,
      lottieSource,
      autoplay,
      loop,
      speed,
      width,
      widthUnit,
      height,
      heightUnit,
      alignment,
      backgroundColor,
      showControls,
      animation,
      borderStyle,
      borderColor,
      borderWidth,
      borderRadius,
      shadow
    } = attributes;
    if (!lottieSource) {
      return null;
    }
    const blockClasses = `digiblocks-lottie ${id} ${customClasses || ""}`;
    const animationClass = animation && animation !== "none" ? ` animate-${animation}` : "";
    const blockProps = useBlockProps35.save({
      className: blockClasses + animationClass,
      id: anchor || void 0
    });
    return /* @__PURE__ */ wp.element.createElement("div", { ...blockProps }, /* @__PURE__ */ wp.element.createElement(
      "div",
      {
        className: "digiblocks-lottie-container",
        "data-src": lottieSource,
        "data-autoplay": autoplay.toString(),
        "data-loop": loop.toString(),
        "data-speed": speed.toString(),
        "data-controls": showControls.toString()
      },
      /* @__PURE__ */ wp.element.createElement(
        "canvas",
        {
          width: "100%",
          height: "100%",
          style: {
            width: "100%",
            height: "100%",
            display: "block"
          }
        }
      )
    ));
  };
  var save_default18 = LottieSave;

  // blocks/newsletter/edit.js
  var { __: __22 } = window.wp.i18n;
  var {
    useBlockProps: useBlockProps36,
    InspectorControls: InspectorControls19,
    PanelColorSettings: PanelColorSettings18,
    RichText: RichText17
  } = window.wp.blockEditor;
  var {
    TextControl: TextControl11,
    ToggleControl: ToggleControl19,
    SelectControl: SelectControl20,
    RangeControl: RangeControl18,
    TabPanel: TabPanel13,
    Notice,
    Button: Button18,
    __experimentalToggleGroupControl: ToggleGroupControl18,
    __experimentalToggleGroupControlOption: ToggleGroupControlOption18
  } = window.wp.components;
  var { useState: useState19, useEffect: useEffect19, useRef: useRef16 } = window.wp.element;
  var { useBlockId: useBlockId19, getDimensionCSS: getDimensionCSS17, animations: animations17, animationPreview: animationPreview17 } = digi.utils;
  var { tabIcons: tabIcons19 } = digi.icons;
  var { ResponsiveButtonGroup: ResponsiveButtonGroup5, ResponsiveControl: ResponsiveControl19, DimensionControl: DimensionControl18, TypographyControl: TypographyControl13, BoxShadowControl: BoxShadowControl17, CustomTabPanel: CustomTabPanel19, TabPanelBody: TabPanelBody20, ResponsiveRangeControl: ResponsiveRangeControl3 } = digi.components;
  var NewsletterEdit = ({ attributes, setAttributes, clientId }) => {
    const {
      id,
      anchor,
      visibility,
      customClasses,
      layout,
      align,
      title,
      showTitle,
      description,
      showDescription,
      emailPlaceholder,
      namePlaceholder,
      buttonText,
      showNameField,
      successMessage,
      errorMessage,
      titleColor,
      titleHoverColor,
      descriptionColor,
      inputTextColor,
      inputBackgroundColor,
      inputBorderColor,
      inputBorderFocusColor,
      inputPlaceholderColor,
      buttonTextColor,
      buttonBackgroundColor,
      buttonTextHoverColor,
      buttonBackgroundHoverColor,
      buttonBorderColor,
      buttonBorderHoverColor,
      backgroundColor,
      backgroundHoverColor,
      containerBorderColor,
      containerBorderHoverColor,
      titleTypography,
      contentTypography,
      textTypography,
      buttonTypography,
      containerBorderRadius,
      containerBorderWidth,
      containerBorderStyle,
      inputBorderRadius,
      inputBorderWidth,
      inputBorderStyle,
      buttonBorderRadius,
      buttonBorderWidth,
      buttonBorderStyle,
      spacing,
      inputSpacing,
      padding,
      margin,
      boxShadow,
      boxShadowHover,
      buttonBoxShadow,
      buttonBoxShadowHover,
      inputBoxShadow,
      inputBoxShadowHover,
      animation
    } = attributes;
    useBlockId19(id, clientId, setAttributes);
    const [localActiveDevice, setLocalActiveDevice] = useState19(window.digi.responsiveState.activeDevice);
    const [activeTab, setActiveTab] = useState19(() => {
      if (window.digi.uiState) {
        const savedTab = window.digi.uiState.getActiveTab(clientId);
        if (savedTab)
          return savedTab;
      }
      return "options";
    });
    useEffect19(() => {
      const unsubscribe = window.digi.responsiveState.subscribe((device) => {
        setLocalActiveDevice(device);
      });
      return unsubscribe;
    }, []);
    const previewTimeoutRef = useRef16(null);
    useEffect19(() => {
      if (animation && animation !== "none") {
        const timeoutId = setTimeout(() => {
          animationPreview17(id, animation, animations17, previewTimeoutRef);
        }, 100);
        return () => clearTimeout(timeoutId);
      }
    }, [animation]);
    const handlePreviewClick = () => {
      animationPreview17(id, animation, animations17, previewTimeoutRef);
    };
    const animationOptions = [
      { label: __22("None", "digiblocks"), value: "none" },
      ...Object.keys(animations17).map((animation2) => ({
        label: animation2.replace(/-/g, " ").replace(/\b\w/g, (l) => l.toUpperCase()),
        value: animation2
      }))
    ];
    const layoutOptions = [
      { label: __22("Stacked", "digiblocks"), value: "stacked" },
      { label: __22("Inline", "digiblocks"), value: "inline" }
    ];
    const borderStyleOptions = [
      { label: __22("None", "digiblocks"), value: "none" },
      { label: __22("Solid", "digiblocks"), value: "solid" },
      { label: __22("Dashed", "digiblocks"), value: "dashed" },
      { label: __22("Dotted", "digiblocks"), value: "dotted" },
      { label: __22("Double", "digiblocks"), value: "double" }
    ];
    const tabList = [
      {
        name: "options",
        title: __22("Options", "digiblocks"),
        icon: tabIcons19.optionsIcon
      },
      {
        name: "style",
        title: __22("Style", "digiblocks"),
        icon: tabIcons19.styleIcon
      },
      {
        name: "advanced",
        title: __22("Advanced", "digiblocks"),
        icon: tabIcons19.advancedIcon
      }
    ];
    const stateTabList = [
      {
        name: "normal",
        title: __22("Normal", "digiblocks"),
        className: "digiblocks-tab-1 normal"
      },
      {
        name: "hover",
        title: __22("Hover", "digiblocks"),
        className: "digiblocks-tab-2 hover"
      }
    ];
    const generateCSS = () => {
      const activeDevice = localActiveDevice;
      let animationCSS = "";
      if (animation && animation !== "none" && animations17[animation]) {
        animationCSS = animations17[animation].keyframes;
      }
      return `
            /* Newsletter Block - ${id} */
            .${id} {
                ${getDimensionCSS17(padding, "padding", activeDevice)}
                ${getDimensionCSS17(margin, "margin", activeDevice)}
                ${backgroundColor ? `background-color: ${backgroundColor};` : ""}
                ${boxShadow?.enable ? `box-shadow: ${boxShadow.horizontal}px ${boxShadow.vertical}px ${boxShadow.blur}px ${boxShadow.spread}px ${boxShadow.color};` : ""}
				${containerBorderStyle !== "none" ? "border: " + (containerBorderWidth[activeDevice] || 1) + "px " + (containerBorderStyle || "solid") + " " + containerBorderColor + ";" : "border: none;"}
                ${getDimensionCSS17(containerBorderRadius, "border-radius", activeDevice)}
                transition: all 0.3s ease;
                text-align: ${align[activeDevice] === "center" ? "center" : align[activeDevice] === "right" ? "right" : "left"};
            }

            .${id}:hover {
                ${backgroundHoverColor ? `background-color: ${backgroundHoverColor};` : ""}
                ${containerBorderHoverColor ? `border-color: ${containerBorderHoverColor};` : ""}
                ${boxShadowHover?.enable ? `box-shadow: ${boxShadowHover.horizontal}px ${boxShadowHover.vertical}px ${boxShadowHover.blur}px ${boxShadowHover.spread}px ${boxShadowHover.color};` : ""}
            }

            /* Newsletter Title */
            .${id} .digiblocks-newsletter-title {
                color: ${titleColor};
                margin-top: 0;
                margin-bottom: ${spacing[activeDevice]?.value || 20}${spacing[activeDevice]?.unit || "px"};
                ${titleTypography.fontFamily ? `font-family: ${titleTypography.fontFamily};` : ""}
                ${titleTypography.fontSize?.[activeDevice] ? `font-size: ${titleTypography.fontSize[activeDevice]}${titleTypography.fontSizeUnit || "px"};` : ""}
                ${titleTypography.fontWeight ? `font-weight: ${titleTypography.fontWeight};` : ""}
                ${titleTypography.fontStyle ? `font-style: ${titleTypography.fontStyle};` : ""}
                ${titleTypography.textTransform ? `text-transform: ${titleTypography.textTransform};` : ""}
                ${titleTypography.textDecoration ? `text-decoration: ${titleTypography.textDecoration};` : ""}
                ${titleTypography.lineHeight?.[activeDevice] ? `line-height: ${titleTypography.lineHeight[activeDevice]}${titleTypography.lineHeightUnit || "em"};` : ""}
                ${titleTypography.letterSpacing?.[activeDevice] ? `letter-spacing: ${titleTypography.letterSpacing[activeDevice]}${titleTypography.letterSpacingUnit || "px"};` : ""}
                transition: color 0.3s ease;
            }

            .${id}:hover .digiblocks-newsletter-title {
                ${titleHoverColor ? `color: ${titleHoverColor};` : ""}
            }

            /* Newsletter Description */
            .${id} .digiblocks-newsletter-description {
                color: ${descriptionColor};
                margin-bottom: ${spacing[activeDevice]?.value || 20}${spacing[activeDevice]?.unit || "px"};
                ${contentTypography.fontFamily ? `font-family: ${contentTypography.fontFamily};` : ""}
                ${contentTypography.fontSize?.[activeDevice] ? `font-size: ${contentTypography.fontSize[activeDevice]}${contentTypography.fontSizeUnit || "px"};` : ""}
                ${contentTypography.fontWeight ? `font-weight: ${contentTypography.fontWeight};` : ""}
                ${contentTypography.fontStyle ? `font-style: ${contentTypography.fontStyle};` : ""}
                ${contentTypography.textTransform ? `text-transform: ${contentTypography.textTransform};` : ""}
                ${contentTypography.textDecoration ? `text-decoration: ${contentTypography.textDecoration};` : ""}
                ${contentTypography.lineHeight?.[activeDevice] ? `line-height: ${contentTypography.lineHeight[activeDevice]}${contentTypography.lineHeightUnit || "em"};` : ""}
                ${contentTypography.letterSpacing?.[activeDevice] ? `letter-spacing: ${contentTypography.letterSpacing[activeDevice]}${contentTypography.letterSpacingUnit || "px"};` : ""}
            }

            /* Newsletter Form */
            .${id} .digiblocks-newsletter-form {
                display: flex;
                ${layout === "stacked" ? "flex-direction: column;" : "flex-direction: row;"}
                gap: ${inputSpacing[activeDevice]?.value || 10}${inputSpacing[activeDevice]?.unit || "px"};
                ${layout === "inline" && align[activeDevice] === "center" ? "justify-content: center;" : ""}
                ${layout === "inline" && align[activeDevice] === "right" ? "justify-content: flex-end;" : ""}
            }

            /* Form Fields */
            .${id} .digiblocks-newsletter-fields {
                display: flex;
                ${layout === "stacked" ? "flex-direction: column;" : "flex-direction: row;"}
                gap: ${inputSpacing[activeDevice]?.value || 10}${inputSpacing[activeDevice]?.unit || "px"};
                ${layout === "inline" ? "flex: 1;" : "width: 100%;"}
            }

            .${id} .digiblocks-newsletter-field {
                ${layout === "stacked" ? "width: 100%;" : "flex: 1;"}
            }

            /* Input Container with Icon */
            .${id} .digiblocks-newsletter-input-container {
                position: relative;
                width: 100%;
                display: flex;
                align-items: center;
            }

            .${id} .digiblocks-newsletter-input-icon {
                position: absolute;
                left: 16px;
                top: 50%;
                transform: translateY(-50%);
                ${textTypography.fontSize?.[activeDevice] ? `width: ${textTypography.fontSize[activeDevice]}${textTypography.fontSizeUnit || "px"};` : "width: 1em;"}
                ${textTypography.fontSize?.[activeDevice] ? `height: ${textTypography.fontSize[activeDevice]}${textTypography.fontSizeUnit || "px"};` : "height: 1em;"}
                fill: ${inputTextColor};
                pointer-events: none;
                z-index: 2;
                opacity: 0.7;
                transition: all 0.3s ease;
            }

            /* Input Styles */
            .${id} .digiblocks-newsletter-input {
                width: 100%;
                padding: 12px 16px 12px 50px;
                color: ${inputTextColor};
                background-color: ${inputBackgroundColor};
				${inputBorderStyle !== "none" ? "border: " + (inputBorderWidth[activeDevice] || 1) + "px " + (inputBorderStyle || "solid") + " " + inputBorderColor + ";" : "border: none;"}
                ${getDimensionCSS17(inputBorderRadius, "border-radius", activeDevice)}
                ${inputBoxShadow?.enable ? `box-shadow: ${inputBoxShadow.horizontal}px ${inputBoxShadow.vertical}px ${inputBoxShadow.blur}px ${inputBoxShadow.spread}px ${inputBoxShadow.color};` : ""}
                ${textTypography.fontFamily ? `font-family: ${textTypography.fontFamily};` : ""}
                ${textTypography.fontSize?.[activeDevice] ? `font-size: ${textTypography.fontSize[activeDevice]}${textTypography.fontSizeUnit || "px"};` : ""}
                ${textTypography.fontWeight ? `font-weight: ${textTypography.fontWeight};` : ""}
                ${textTypography.fontStyle ? `font-style: ${textTypography.fontStyle};` : ""}
                ${textTypography.textTransform ? `text-transform: ${textTypography.textTransform};` : ""}
                ${textTypography.textDecoration ? `text-decoration: ${textTypography.textDecoration};` : ""}
                ${textTypography.lineHeight?.[activeDevice] ? `line-height: ${textTypography.lineHeight[activeDevice]}${textTypography.lineHeightUnit || "em"};` : ""}
                ${textTypography.letterSpacing?.[activeDevice] ? `letter-spacing: ${textTypography.letterSpacing[activeDevice]}${textTypography.letterSpacingUnit || "px"};` : ""}
                transition: all 0.3s ease;
                outline: none;
				box-shadow: none;
            }

            .${id} .digiblocks-newsletter-input::placeholder {
                color: ${inputPlaceholderColor};
            }

            .${id} .digiblocks-newsletter-input:focus {
                border-color: ${inputBorderFocusColor};
                ${inputBoxShadowHover?.enable ? `box-shadow: ${inputBoxShadowHover.horizontal}px ${inputBoxShadowHover.vertical}px ${inputBoxShadowHover.blur}px ${inputBoxShadowHover.spread}px ${inputBoxShadowHover.color};` : ""}
            }

            .${id} .digiblocks-newsletter-input:focus + .digiblocks-newsletter-input-icon {
                opacity: 1;
                fill: ${inputBorderFocusColor || inputTextColor};
            }

            /* Button Styles */
            .${id} .digiblocks-newsletter-button {
                padding: 12px 24px;
                color: ${buttonTextColor};
                background-color: ${buttonBackgroundColor};
				${buttonBorderStyle !== "none" ? "border: " + (buttonBorderWidth[activeDevice] || 1) + "px " + (buttonBorderStyle || "solid") + " " + buttonBorderColor + ";" : "border: none;"}
                ${getDimensionCSS17(buttonBorderRadius, "border-radius", activeDevice)}
                ${buttonBoxShadow?.enable ? `box-shadow: ${buttonBoxShadow.horizontal}px ${buttonBoxShadow.vertical}px ${buttonBoxShadow.blur}px ${buttonBoxShadow.spread}px ${buttonBoxShadow.color};` : ""}
                ${buttonTypography.fontFamily ? `font-family: ${buttonTypography.fontFamily};` : ""}
                ${buttonTypography.fontSize?.[activeDevice] ? `font-size: ${buttonTypography.fontSize[activeDevice]}${buttonTypography.fontSizeUnit || "px"};` : ""}
                ${buttonTypography.fontWeight ? `font-weight: ${buttonTypography.fontWeight};` : ""}
                ${buttonTypography.fontStyle ? `font-style: ${buttonTypography.fontStyle};` : ""}
                ${buttonTypography.textTransform ? `text-transform: ${buttonTypography.textTransform};` : ""}
                ${buttonTypography.textDecoration ? `text-decoration: ${buttonTypography.textDecoration};` : ""}
                ${buttonTypography.lineHeight?.[activeDevice] ? `line-height: ${buttonTypography.lineHeight[activeDevice]}${buttonTypography.lineHeightUnit || "em"};` : ""}
                ${buttonTypography.letterSpacing?.[activeDevice] ? `letter-spacing: ${buttonTypography.letterSpacing[activeDevice]}${buttonTypography.letterSpacingUnit || "px"};` : ""}
                cursor: pointer;
                transition: all 0.3s ease;
                ${layout === "stacked" ? "width: 100%;" : "white-space: nowrap;"}
            }

            .${id} .digiblocks-newsletter-button:hover {
                color: ${buttonTextHoverColor || buttonTextColor};
                background-color: ${buttonBackgroundHoverColor || buttonBackgroundColor};
                border-color: ${buttonBorderHoverColor || buttonBorderColor};
                ${buttonBoxShadowHover?.enable ? `box-shadow: ${buttonBoxShadowHover.horizontal}px ${buttonBoxShadowHover.vertical}px ${buttonBoxShadowHover.blur}px ${buttonBoxShadowHover.spread}px ${buttonBoxShadowHover.color};` : ""}
            }

            /* Messages */
            .${id} .digiblocks-newsletter-message {
                margin-top: ${spacing[activeDevice]}px;
                padding: 12px;
                border-radius: 4px;
                display: none;
            }

            .${id} .digiblocks-newsletter-message.success {
                background-color: #d4edda;
                color: #155724;
                border: 1px solid #c3e6cb;
            }

            .${id} .digiblocks-newsletter-message.error {
                background-color: #f8d7da;
                color: #721c24;
                border: 1px solid #f5c6cb;
            }

            /* Animation keyframes */
            ${animationCSS}

			/* Responsive */
			@media (max-width: 767px) {
				.${id} .digiblocks-newsletter-form {
					flex-direction: column;
				}
			}

			/* Visibility Controls */
			${visibility.desktop ? `
				@media (min-width: 992px) {
					.${id} {
						opacity: 0.5 !important;
					}
				}
			` : ""}

			${visibility.tablet ? `
				@media (min-width: 768px) and (max-width: 991px) {
					.${id} {
						opacity: 0.5 !important;
					}
				}
			` : ""}

			${visibility.mobile ? `
				@media (max-width: 767px) {
					.${id} {
						opacity: 0.5 !important;
					}
				}
			` : ""}
        `;
    };
    const renderTabContent = () => {
      switch (activeTab) {
        case "options":
          return /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(
            TabPanelBody20,
            {
              tab: "options",
              name: "content",
              title: __22("Content", "digiblocks"),
              initialOpen: true
            },
            /* @__PURE__ */ wp.element.createElement(
              Notice,
              {
                status: "warning",
                isDismissible: false,
                className: "digiblocks-notice components-base-control"
              },
              /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, __22("Configure your newsletter platform in ", "digiblocks"), /* @__PURE__ */ wp.element.createElement(
                "a",
                {
                  href: "/wp-admin/admin.php?page=digiblocks-settings",
                  target: "_blank",
                  rel: "noopener noreferrer"
                },
                __22("DigiBlocks Settings", "digiblocks")
              ), __22(" to enable subscriptions.", "digiblocks"))
            ),
            /* @__PURE__ */ wp.element.createElement(
              ToggleControl19,
              {
                label: __22("Show Title", "digiblocks"),
                checked: showTitle,
                onChange: (value) => setAttributes({ showTitle: value }),
                __nextHasNoMarginBottom: true
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              ToggleControl19,
              {
                label: __22("Show Description", "digiblocks"),
                checked: showDescription,
                onChange: (value) => setAttributes({ showDescription: value }),
                __nextHasNoMarginBottom: true
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              ToggleControl19,
              {
                label: __22("Show Name Field", "digiblocks"),
                checked: showNameField,
                onChange: (value) => setAttributes({ showNameField: value }),
                __nextHasNoMarginBottom: true
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              TextControl11,
              {
                label: __22("Email Placeholder", "digiblocks"),
                value: emailPlaceholder,
                onChange: (value) => setAttributes({ emailPlaceholder: value }),
                __next40pxDefaultSize: true,
                __nextHasNoMarginBottom: true
              }
            ),
            showNameField && /* @__PURE__ */ wp.element.createElement(
              TextControl11,
              {
                label: __22("Name Placeholder", "digiblocks"),
                value: namePlaceholder,
                onChange: (value) => setAttributes({ namePlaceholder: value }),
                __next40pxDefaultSize: true,
                __nextHasNoMarginBottom: true
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              TextControl11,
              {
                label: __22("Success Message", "digiblocks"),
                value: successMessage,
                onChange: (value) => setAttributes({ successMessage: value }),
                __next40pxDefaultSize: true,
                __nextHasNoMarginBottom: true
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              TextControl11,
              {
                label: __22("Error Message", "digiblocks"),
                value: errorMessage,
                onChange: (value) => setAttributes({ errorMessage: value }),
                __next40pxDefaultSize: true,
                __nextHasNoMarginBottom: true
              }
            )
          ), /* @__PURE__ */ wp.element.createElement(
            TabPanelBody20,
            {
              tab: "options",
              name: "layout",
              title: __22("Layout", "digiblocks"),
              initialOpen: false
            },
            /* @__PURE__ */ wp.element.createElement(
              ToggleGroupControl18,
              {
                label: __22("Layout", "digiblocks"),
                value: layout,
                onChange: (value) => setAttributes({ layout: value }),
                isBlock: true,
                __next40pxDefaultSize: true,
                __nextHasNoMarginBottom: true
              },
              /* @__PURE__ */ wp.element.createElement(
                ToggleGroupControlOption18,
                {
                  value: "stacked",
                  label: __22("Stacked", "digiblocks")
                }
              ),
              /* @__PURE__ */ wp.element.createElement(
                ToggleGroupControlOption18,
                {
                  value: "inline",
                  label: __22("Inline", "digiblocks")
                }
              )
            ),
            /* @__PURE__ */ wp.element.createElement(
              ResponsiveButtonGroup5,
              {
                label: __22("Alignment", "digiblocks"),
                value: align,
                onChange: (value) => setAttributes({ align: value }),
                options: [
                  { label: __22("Left", "digiblocks"), value: "left" },
                  { label: __22("Center", "digiblocks"), value: "center" },
                  { label: __22("Right", "digiblocks"), value: "right" }
                ]
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              ResponsiveRangeControl3,
              {
                label: __22("Content Spacing", "digiblocks"),
                value: spacing,
                onChange: (value) => setAttributes({ spacing: value }),
                units: [
                  { label: "px", value: "px" },
                  { label: "em", value: "em" },
                  { label: "rem", value: "rem" }
                ],
                defaultUnit: "px",
                min: 0,
                max: 100,
                step: 1,
                defaultValues: {
                  desktop: { value: 20, unit: "px" },
                  tablet: { value: 20, unit: "px" },
                  mobile: { value: 20, unit: "px" }
                }
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              ResponsiveRangeControl3,
              {
                label: __22("Field Spacing", "digiblocks"),
                value: inputSpacing,
                onChange: (value) => setAttributes({ inputSpacing: value }),
                units: [
                  { label: "px", value: "px" },
                  { label: "em", value: "em" },
                  { label: "rem", value: "rem" }
                ],
                defaultUnit: "px",
                min: 0,
                max: 50,
                step: 1,
                defaultValues: {
                  desktop: { value: 10, unit: "px" },
                  tablet: { value: 8, unit: "px" },
                  mobile: { value: 6, unit: "px" }
                }
              }
            )
          ));
        case "style":
          return /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(
            TabPanelBody20,
            {
              tab: "style",
              name: "colors",
              title: __22("Colors", "digiblocks"),
              initialOpen: true
            },
            /* @__PURE__ */ wp.element.createElement(
              TabPanel13,
              {
                className: "digiblocks-control-tabs",
                activeClass: "active-tab",
                tabs: stateTabList
              },
              (tab) => {
                if (tab.name === "normal") {
                  return /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(
                    PanelColorSettings18,
                    {
                      title: __22("Text Colors", "digiblocks"),
                      initialOpen: true,
                      enableAlpha: true,
                      colorSettings: [
                        {
                          value: titleColor,
                          onChange: (value) => setAttributes({ titleColor: value }),
                          label: __22("Title Color", "digiblocks")
                        },
                        {
                          value: descriptionColor,
                          onChange: (value) => setAttributes({ descriptionColor: value }),
                          label: __22("Description Color", "digiblocks")
                        }
                      ]
                    }
                  ), /* @__PURE__ */ wp.element.createElement(
                    PanelColorSettings18,
                    {
                      title: __22("Input Colors", "digiblocks"),
                      initialOpen: false,
                      enableAlpha: true,
                      colorSettings: [
                        {
                          value: inputTextColor,
                          onChange: (value) => setAttributes({ inputTextColor: value }),
                          label: __22("Input Text Color", "digiblocks")
                        },
                        {
                          value: inputBackgroundColor,
                          onChange: (value) => setAttributes({ inputBackgroundColor: value }),
                          label: __22("Input Background", "digiblocks")
                        },
                        {
                          value: inputBorderColor,
                          onChange: (value) => setAttributes({ inputBorderColor: value }),
                          label: __22("Input Border", "digiblocks")
                        },
                        {
                          value: inputBorderFocusColor,
                          onChange: (value) => setAttributes({ inputBorderFocusColor: value }),
                          label: __22("Input Border Focus", "digiblocks")
                        },
                        {
                          value: inputPlaceholderColor,
                          onChange: (value) => setAttributes({ inputPlaceholderColor: value }),
                          label: __22("Placeholder Color", "digiblocks")
                        }
                      ]
                    }
                  ), /* @__PURE__ */ wp.element.createElement(
                    PanelColorSettings18,
                    {
                      title: __22("Button Colors", "digiblocks"),
                      initialOpen: false,
                      enableAlpha: true,
                      colorSettings: [
                        {
                          value: buttonTextColor,
                          onChange: (value) => setAttributes({ buttonTextColor: value }),
                          label: __22("Button Text", "digiblocks")
                        },
                        {
                          value: buttonBackgroundColor,
                          onChange: (value) => setAttributes({ buttonBackgroundColor: value }),
                          label: __22("Button Background", "digiblocks")
                        },
                        {
                          value: buttonBorderColor,
                          onChange: (value) => setAttributes({ buttonBorderColor: value }),
                          label: __22("Button Border", "digiblocks")
                        }
                      ]
                    }
                  ), /* @__PURE__ */ wp.element.createElement(
                    PanelColorSettings18,
                    {
                      title: __22("Background Colors", "digiblocks"),
                      initialOpen: false,
                      enableAlpha: true,
                      colorSettings: [
                        {
                          value: backgroundColor,
                          onChange: (value) => setAttributes({ backgroundColor: value }),
                          label: __22("Background Color", "digiblocks")
                        },
                        {
                          value: containerBorderColor,
                          onChange: (value) => setAttributes({ containerBorderColor: value }),
                          label: __22("Border Color", "digiblocks")
                        }
                      ]
                    }
                  ));
                } else {
                  return /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(
                    PanelColorSettings18,
                    {
                      title: __22("Hover Colors", "digiblocks"),
                      initialOpen: true,
                      enableAlpha: true,
                      colorSettings: [
                        {
                          value: titleHoverColor,
                          onChange: (value) => setAttributes({ titleHoverColor: value }),
                          label: __22("Title Hover Color", "digiblocks")
                        },
                        {
                          value: buttonTextHoverColor,
                          onChange: (value) => setAttributes({ buttonTextHoverColor: value }),
                          label: __22("Button Text Hover", "digiblocks")
                        },
                        {
                          value: buttonBackgroundHoverColor,
                          onChange: (value) => setAttributes({ buttonBackgroundHoverColor: value }),
                          label: __22("Button Background Hover", "digiblocks")
                        },
                        {
                          value: buttonBorderHoverColor,
                          onChange: (value) => setAttributes({ buttonBorderHoverColor: value }),
                          label: __22("Button Border Hover", "digiblocks")
                        },
                        {
                          value: backgroundHoverColor,
                          onChange: (value) => setAttributes({ backgroundHoverColor: value }),
                          label: __22("Background Hover", "digiblocks")
                        },
                        {
                          value: containerBorderHoverColor,
                          onChange: (value) => setAttributes({ containerBorderHoverColor: value }),
                          label: __22("Border Hover", "digiblocks")
                        }
                      ]
                    }
                  ));
                }
              }
            )
          ), /* @__PURE__ */ wp.element.createElement(
            TabPanelBody20,
            {
              tab: "style",
              name: "typography",
              title: __22("Typography", "digiblocks"),
              initialOpen: false
            },
            /* @__PURE__ */ wp.element.createElement(
              TypographyControl13,
              {
                label: __22("Title Typography", "digiblocks"),
                value: titleTypography,
                onChange: (value) => setAttributes({ titleTypography: value }),
                defaults: {
                  fontSize: { desktop: 24, tablet: 22, mobile: 20 },
                  fontWeight: "600",
                  lineHeight: { desktop: 1.4, tablet: 1.3, mobile: 1.2 }
                }
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              TypographyControl13,
              {
                label: __22("Description Typography", "digiblocks"),
                value: contentTypography,
                onChange: (value) => setAttributes({ contentTypography: value }),
                defaults: {
                  fontSize: { desktop: 16, tablet: 15, mobile: 14 },
                  lineHeight: { desktop: 1.5, tablet: 1.4, mobile: 1.3 }
                }
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              TypographyControl13,
              {
                label: __22("Input Typography", "digiblocks"),
                value: textTypography,
                onChange: (value) => setAttributes({ textTypography: value }),
                defaults: {
                  fontSize: { desktop: 16, tablet: 15, mobile: 14 },
                  lineHeight: { desktop: 1.5, tablet: 1.4, mobile: 1.3 }
                }
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              TypographyControl13,
              {
                label: __22("Button Typography", "digiblocks"),
                value: buttonTypography,
                onChange: (value) => setAttributes({ buttonTypography: value }),
                defaults: {
                  fontSize: { desktop: 16, tablet: 15, mobile: 14 },
                  fontWeight: "500",
                  lineHeight: { desktop: 1.5, tablet: 1.4, mobile: 1.3 }
                }
              }
            )
          ), /* @__PURE__ */ wp.element.createElement(
            TabPanelBody20,
            {
              tab: "style",
              name: "borders",
              title: __22("Borders & Radius", "digiblocks"),
              initialOpen: false
            },
            /* @__PURE__ */ wp.element.createElement("h4", null, __22("Container Border", "digiblocks")),
            /* @__PURE__ */ wp.element.createElement(
              SelectControl20,
              {
                label: __22("Container Border Style", "digiblocks"),
                value: containerBorderStyle,
                options: borderStyleOptions,
                onChange: (value) => setAttributes({ containerBorderStyle: value }),
                __next40pxDefaultSize: true,
                __nextHasNoMarginBottom: true
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              ResponsiveControl19,
              {
                label: __22("Container Border Width", "digiblocks")
              },
              /* @__PURE__ */ wp.element.createElement(
                RangeControl18,
                {
                  value: containerBorderWidth[localActiveDevice],
                  onChange: (value) => setAttributes({
                    containerBorderWidth: {
                      ...containerBorderWidth,
                      [localActiveDevice]: value
                    }
                  }),
                  min: 0,
                  max: 10,
                  __next40pxDefaultSize: true,
                  __nextHasNoMarginBottom: true
                }
              )
            ),
            /* @__PURE__ */ wp.element.createElement(
              ResponsiveControl19,
              {
                label: __22("Container Border Radius", "digiblocks")
              },
              /* @__PURE__ */ wp.element.createElement(
                DimensionControl18,
                {
                  values: containerBorderRadius[localActiveDevice],
                  onChange: (value) => setAttributes({
                    containerBorderRadius: {
                      ...containerBorderRadius,
                      [localActiveDevice]: value
                    }
                  }),
                  units: [
                    { label: "px", value: "px" },
                    { label: "%", value: "%" }
                  ]
                }
              )
            ),
            /* @__PURE__ */ wp.element.createElement("h4", null, __22("Input Border", "digiblocks")),
            /* @__PURE__ */ wp.element.createElement(
              SelectControl20,
              {
                label: __22("Input Border Style", "digiblocks"),
                value: inputBorderStyle,
                options: borderStyleOptions,
                onChange: (value) => setAttributes({ inputBorderStyle: value }),
                __next40pxDefaultSize: true,
                __nextHasNoMarginBottom: true
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              ResponsiveControl19,
              {
                label: __22("Input Border Width", "digiblocks")
              },
              /* @__PURE__ */ wp.element.createElement(
                RangeControl18,
                {
                  value: inputBorderWidth[localActiveDevice],
                  onChange: (value) => setAttributes({
                    inputBorderWidth: {
                      ...inputBorderWidth,
                      [localActiveDevice]: value
                    }
                  }),
                  min: 0,
                  max: 10,
                  __next40pxDefaultSize: true,
                  __nextHasNoMarginBottom: true
                }
              )
            ),
            /* @__PURE__ */ wp.element.createElement(
              ResponsiveControl19,
              {
                label: __22("Input Border Radius", "digiblocks")
              },
              /* @__PURE__ */ wp.element.createElement(
                DimensionControl18,
                {
                  values: inputBorderRadius[localActiveDevice],
                  onChange: (value) => setAttributes({
                    inputBorderRadius: {
                      ...inputBorderRadius,
                      [localActiveDevice]: value
                    }
                  }),
                  units: [
                    { label: "px", value: "px" },
                    { label: "%", value: "%" }
                  ]
                }
              )
            ),
            /* @__PURE__ */ wp.element.createElement("h4", null, __22("Button Border", "digiblocks")),
            /* @__PURE__ */ wp.element.createElement(
              SelectControl20,
              {
                label: __22("Button Border Style", "digiblocks"),
                value: buttonBorderStyle,
                options: borderStyleOptions,
                onChange: (value) => setAttributes({ buttonBorderStyle: value }),
                __next40pxDefaultSize: true,
                __nextHasNoMarginBottom: true
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              ResponsiveControl19,
              {
                label: __22("Button Border Width", "digiblocks")
              },
              /* @__PURE__ */ wp.element.createElement(
                RangeControl18,
                {
                  value: buttonBorderWidth[localActiveDevice],
                  onChange: (value) => setAttributes({
                    buttonBorderWidth: {
                      ...buttonBorderWidth,
                      [localActiveDevice]: value
                    }
                  }),
                  min: 0,
                  max: 10,
                  __next40pxDefaultSize: true,
                  __nextHasNoMarginBottom: true
                }
              )
            ),
            /* @__PURE__ */ wp.element.createElement(
              ResponsiveControl19,
              {
                label: __22("Button Border Radius", "digiblocks")
              },
              /* @__PURE__ */ wp.element.createElement(
                DimensionControl18,
                {
                  values: buttonBorderRadius[localActiveDevice],
                  onChange: (value) => setAttributes({
                    buttonBorderRadius: {
                      ...buttonBorderRadius,
                      [localActiveDevice]: value
                    }
                  }),
                  units: [
                    { label: "px", value: "px" },
                    { label: "%", value: "%" }
                  ]
                }
              )
            )
          ), /* @__PURE__ */ wp.element.createElement(
            TabPanelBody20,
            {
              tab: "style",
              name: "shadow",
              title: __22("Box Shadow", "digiblocks"),
              initialOpen: false
            },
            /* @__PURE__ */ wp.element.createElement(
              BoxShadowControl17,
              {
                label: __22("Container Shadow", "digiblocks"),
                normalValue: boxShadow,
                hoverValue: boxShadowHover,
                onNormalChange: (value) => setAttributes({ boxShadow: value }),
                onHoverChange: (value) => setAttributes({ boxShadowHover: value })
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              BoxShadowControl17,
              {
                label: __22("Input Shadow", "digiblocks"),
                normalValue: inputBoxShadow,
                hoverValue: inputBoxShadowHover,
                onNormalChange: (value) => setAttributes({ inputBoxShadow: value }),
                onHoverChange: (value) => setAttributes({ inputBoxShadowHover: value })
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              BoxShadowControl17,
              {
                label: __22("Button Shadow", "digiblocks"),
                normalValue: buttonBoxShadow,
                hoverValue: buttonBoxShadowHover,
                onNormalChange: (value) => setAttributes({ buttonBoxShadow: value }),
                onHoverChange: (value) => setAttributes({ buttonBoxShadowHover: value })
              }
            )
          ), /* @__PURE__ */ wp.element.createElement(
            TabPanelBody20,
            {
              tab: "style",
              name: "spacing",
              title: __22("Spacing", "digiblocks"),
              initialOpen: false
            },
            /* @__PURE__ */ wp.element.createElement(
              ResponsiveControl19,
              {
                label: __22("Padding", "digiblocks")
              },
              /* @__PURE__ */ wp.element.createElement(
                DimensionControl18,
                {
                  values: padding[localActiveDevice],
                  onChange: (value) => setAttributes({
                    padding: {
                      ...padding,
                      [localActiveDevice]: value
                    }
                  })
                }
              )
            ),
            /* @__PURE__ */ wp.element.createElement(
              ResponsiveControl19,
              {
                label: __22("Margin", "digiblocks")
              },
              /* @__PURE__ */ wp.element.createElement(
                DimensionControl18,
                {
                  values: margin[localActiveDevice],
                  onChange: (value) => setAttributes({
                    margin: {
                      ...margin,
                      [localActiveDevice]: value
                    }
                  })
                }
              )
            )
          ));
        case "advanced":
          return /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(
            TabPanelBody20,
            {
              tab: "advanced",
              name: "animation",
              title: __22("Animation", "digiblocks"),
              initialOpen: true
            },
            /* @__PURE__ */ wp.element.createElement(
              SelectControl20,
              {
                label: __22("Animation Effect", "digiblocks"),
                value: animation,
                options: animationOptions,
                onChange: (value) => setAttributes({ animation: value }),
                __next40pxDefaultSize: true,
                __nextHasNoMarginBottom: true
              }
            ),
            animation && animation !== "none" && /* @__PURE__ */ wp.element.createElement("div", { style: { marginTop: "10px" } }, /* @__PURE__ */ wp.element.createElement(
              Button18,
              {
                variant: "secondary",
                isSecondary: true,
                onClick: handlePreviewClick,
                style: { width: "100%" }
              },
              __22("Preview Animation", "digiblocks")
            ))
          ), /* @__PURE__ */ wp.element.createElement(
            TabPanelBody20,
            {
              tab: "advanced",
              name: "visibility",
              title: __22("Visibility", "digiblocks"),
              initialOpen: false
            },
            /* @__PURE__ */ wp.element.createElement("div", { className: "components-base-control__help", style: {
              padding: "12px",
              backgroundColor: "#f0f6fc",
              border: "1px solid #c3ddfd",
              borderRadius: "4px",
              marginBottom: "16px"
            } }, /* @__PURE__ */ wp.element.createElement("strong", null, __22("Editor Note:", "digiblocks")), /* @__PURE__ */ wp.element.createElement("br", null), __22("Hidden elements appear with reduced opacity in the editor for easy editing. Visibility changes only take effect on the frontend.", "digiblocks")),
            /* @__PURE__ */ wp.element.createElement(
              ToggleControl19,
              {
                label: __22("Hide on Desktop", "digiblocks"),
                checked: visibility.desktop,
                onChange: (value) => setAttributes({
                  visibility: {
                    ...visibility,
                    desktop: value
                  }
                }),
                __nextHasNoMarginBottom: true
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              ToggleControl19,
              {
                label: __22("Hide on Tablet", "digiblocks"),
                checked: visibility.tablet,
                onChange: (value) => setAttributes({
                  visibility: {
                    ...visibility,
                    tablet: value
                  }
                }),
                __nextHasNoMarginBottom: true
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              ToggleControl19,
              {
                label: __22("Hide on Mobile", "digiblocks"),
                checked: visibility.mobile,
                onChange: (value) => setAttributes({
                  visibility: {
                    ...visibility,
                    mobile: value
                  }
                }),
                __nextHasNoMarginBottom: true
              }
            )
          ), /* @__PURE__ */ wp.element.createElement(
            TabPanelBody20,
            {
              tab: "advanced",
              name: "additional",
              title: __22("Additional", "digiblocks"),
              initialOpen: false
            },
            /* @__PURE__ */ wp.element.createElement("div", { className: "components-base-control html-anchor-control" }, /* @__PURE__ */ wp.element.createElement("div", { className: "components-base-control__field" }, /* @__PURE__ */ wp.element.createElement("label", { className: "components-base-control__label", htmlFor: "html-anchor" }, __22("HTML anchor", "digiblocks")), /* @__PURE__ */ wp.element.createElement(
              "input",
              {
                className: "components-text-control__input",
                type: "text",
                id: "html-anchor",
                value: anchor || "",
                onChange: (e) => setAttributes({ anchor: e.target.value }),
                "aria-describedby": "html-anchor-help",
                autoCapitalize: "none",
                autoComplete: "off"
              }
            )), /* @__PURE__ */ wp.element.createElement("p", { id: "html-anchor-help", className: "components-base-control__help" }, __22(`Enter a word or two \u2014 without spaces \u2014 to make a unique web address just for this block, called an "anchor". Then, you'll be able to link directly to this section of your page.`, "digiblocks"), " ", /* @__PURE__ */ wp.element.createElement(
              "a",
              {
                className: "components-external-link",
                href: "https://wordpress.org/documentation/article/page-jumps/",
                target: "_blank",
                rel: "external noreferrer noopener"
              },
              /* @__PURE__ */ wp.element.createElement("span", { className: "components-external-link__contents" }, __22("Learn more about anchors", "digiblocks")),
              /* @__PURE__ */ wp.element.createElement("span", { className: "components-external-link__icon", "aria-label": "(opens in a new tab)" }, "\u2197")
            ))),
            /* @__PURE__ */ wp.element.createElement("div", { className: "components-base-control" }, /* @__PURE__ */ wp.element.createElement("div", { className: "components-base-control__field" }, /* @__PURE__ */ wp.element.createElement("label", { className: "components-base-control__label", htmlFor: "additional-css-classes" }, __22("Additional CSS class(es)", "digiblocks")), /* @__PURE__ */ wp.element.createElement(
              "input",
              {
                className: "components-text-control__input",
                type: "text",
                id: "additional-css-classes",
                value: customClasses || "",
                onChange: (e) => setAttributes({ customClasses: e.target.value }),
                "aria-describedby": "additional-css-classes-help",
                autoComplete: "off"
              }
            )), /* @__PURE__ */ wp.element.createElement("p", { id: "additional-css-classes-help", className: "components-base-control__help" }, __22("Separate multiple classes with spaces.", "digiblocks")))
          ));
        default:
          return null;
      }
    };
    const animationClass = "none" !== animation ? ` animate-${animation}` : "";
    const blockClasses = `digiblocks-newsletter ${id}${animationClass} ${customClasses || ""}`;
    const blockProps = useBlockProps36({
      className: blockClasses,
      id: anchor || null
    });
    return /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(InspectorControls19, null, /* @__PURE__ */ wp.element.createElement(
      CustomTabPanel19,
      {
        tabs: tabList,
        activeTab,
        onSelect: setActiveTab
      },
      renderTabContent()
    )), /* @__PURE__ */ wp.element.createElement("style", { dangerouslySetInnerHTML: { __html: generateCSS() } }), /* @__PURE__ */ wp.element.createElement("div", { ...blockProps }, showTitle && /* @__PURE__ */ wp.element.createElement(
      RichText17,
      {
        tagName: "h3",
        className: "digiblocks-newsletter-title",
        value: title,
        onChange: (value) => setAttributes({ title: value }),
        placeholder: __22("Subscribe to our Newsletter", "digiblocks")
      }
    ), showDescription && /* @__PURE__ */ wp.element.createElement(
      RichText17,
      {
        tagName: "p",
        className: "digiblocks-newsletter-description",
        value: description,
        onChange: (value) => setAttributes({ description: value }),
        placeholder: __22("Stay updated with our latest news and offers", "digiblocks")
      }
    ), /* @__PURE__ */ wp.element.createElement("form", { className: "digiblocks-newsletter-form", onSubmit: (e) => e.preventDefault() }, /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-newsletter-fields" }, showNameField && /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-newsletter-field" }, /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-newsletter-input-container" }, /* @__PURE__ */ wp.element.createElement(
      "input",
      {
        type: "text",
        className: "digiblocks-newsletter-input",
        placeholder: namePlaceholder,
        disabled: true
      }
    ), /* @__PURE__ */ wp.element.createElement("svg", { className: "digiblocks-newsletter-input-icon", xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 448 512", width: "1em", height: "1em" }, /* @__PURE__ */ wp.element.createElement("path", { d: "M320 128a96 96 0 1 0 -192 0 96 96 0 1 0 192 0zM96 128a128 128 0 1 1 256 0A128 128 0 1 1 96 128zM32 480l384 0c-1.2-79.7-66.2-144-146.3-144l-91.4 0c-80 0-145 64.3-146.3 144zM0 482.3C0 383.8 79.8 304 178.3 304l91.4 0C368.2 304 448 383.8 448 482.3c0 16.4-13.3 29.7-29.7 29.7L29.7 512C13.3 512 0 498.7 0 482.3z" })))), /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-newsletter-field" }, /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-newsletter-input-container" }, /* @__PURE__ */ wp.element.createElement(
      "input",
      {
        type: "email",
        className: "digiblocks-newsletter-input",
        placeholder: emailPlaceholder,
        disabled: true
      }
    ), /* @__PURE__ */ wp.element.createElement("svg", { className: "digiblocks-newsletter-input-icon", xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 512 512", width: "1em", height: "1em" }, /* @__PURE__ */ wp.element.createElement("path", { d: "M392 32L120 32c-13.3 0-24 10.7-24 24l0 166.5L77.5 207.2c-4.2-3.4-8.7-6.3-13.5-8.6L64 56C64 25.1 89.1 0 120 0L392 0c30.9 0 56 25.1 56 56l0 142.6c-4.8 2.3-9.3 5.2-13.4 8.6L416 222.5 416 56c0-13.3-10.7-24-24-24zM35 256c-1.6 0-3 1.3-3 3l0 189c0 17.7 14.3 32 32 32l384 0c17.7 0 32-14.3 32-32l0-189c0-1.6-1.3-3-3-3c-.7 0-1.3 .2-1.9 .7L294.5 405.1C283.7 414 270 418.9 256 418.9s-27.7-4.9-38.5-13.8L36.8 256.7c-.5-.4-1.2-.7-1.9-.7zM0 259c0-19.3 15.6-35 35-35c8.1 0 15.9 2.8 22.2 7.9L237.8 380.3c5.1 4.2 11.6 6.5 18.2 6.5s13.1-2.3 18.2-6.5L454.9 231.9c6.3-5.1 14.1-7.9 22.2-7.9c19.3 0 35 15.6 35 35l0 189c0 35.3-28.7 64-64 64L64 512c-35.3 0-64-28.7-64-64L0 259zM176 128l160 0c8.8 0 16 7.2 16 16s-7.2 16-16 16l-160 0c-8.8 0-16-7.2-16-16s7.2-16 16-16zm0 96l160 0c8.8 0 16 7.2 16 16s-7.2 16-16 16l-160 0c-8.8 0-16-7.2-16-16s7.2-16 16-16z" }))))), /* @__PURE__ */ wp.element.createElement(
      RichText17,
      {
        tagName: "button",
        className: "digiblocks-newsletter-button",
        value: buttonText,
        onChange: (value) => setAttributes({ buttonText: value }),
        placeholder: __22("Subscribe", "digiblocks")
      }
    )), /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-newsletter-message success" }, successMessage), /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-newsletter-message error" }, errorMessage)));
  };
  var edit_default19 = NewsletterEdit;

  // blocks/newsletter/save.js
  var { useBlockProps: useBlockProps37, RichText: RichText18 } = window.wp.blockEditor;
  var NewsletterSave = ({ attributes }) => {
    const {
      id,
      anchor,
      customClasses,
      title,
      showTitle,
      description,
      showDescription,
      emailPlaceholder,
      namePlaceholder,
      buttonText,
      showNameField,
      successMessage,
      errorMessage,
      animation
    } = attributes;
    const animationClass = "none" !== animation ? ` animate-${animation}` : "";
    const blockClasses = `digiblocks-newsletter ${id}${animationClass} ${customClasses || ""}`;
    const blockProps = useBlockProps37.save({
      className: blockClasses,
      id: anchor || null
    });
    return /* @__PURE__ */ wp.element.createElement("div", { ...blockProps }, showTitle && /* @__PURE__ */ wp.element.createElement(
      RichText18.Content,
      {
        tagName: "h3",
        className: "digiblocks-newsletter-title",
        value: title
      }
    ), showDescription && /* @__PURE__ */ wp.element.createElement(
      RichText18.Content,
      {
        tagName: "p",
        className: "digiblocks-newsletter-description",
        value: description
      }
    ), /* @__PURE__ */ wp.element.createElement("form", { className: "digiblocks-newsletter-form", method: "post" }, /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-newsletter-fields" }, showNameField && /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-newsletter-field" }, /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-newsletter-input-container" }, /* @__PURE__ */ wp.element.createElement(
      "input",
      {
        type: "text",
        name: "digiblocks_newsletter_name",
        className: "digiblocks-newsletter-input",
        placeholder: namePlaceholder,
        required: showNameField
      }
    ), /* @__PURE__ */ wp.element.createElement("svg", { className: "digiblocks-newsletter-input-icon", xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 448 512", width: "1em", height: "1em" }, /* @__PURE__ */ wp.element.createElement("path", { d: "M320 128a96 96 0 1 0 -192 0 96 96 0 1 0 192 0zM96 128a128 128 0 1 1 256 0A128 128 0 1 1 96 128zM32 480l384 0c-1.2-79.7-66.2-144-146.3-144l-91.4 0c-80 0-145 64.3-146.3 144zM0 482.3C0 383.8 79.8 304 178.3 304l91.4 0C368.2 304 448 383.8 448 482.3c0 16.4-13.3 29.7-29.7 29.7L29.7 512C13.3 512 0 498.7 0 482.3z" })))), /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-newsletter-field" }, /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-newsletter-input-container" }, /* @__PURE__ */ wp.element.createElement(
      "input",
      {
        type: "email",
        name: "digiblocks_newsletter_email",
        className: "digiblocks-newsletter-input",
        placeholder: emailPlaceholder,
        required: true
      }
    ), /* @__PURE__ */ wp.element.createElement("svg", { className: "digiblocks-newsletter-input-icon", xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 512 512", width: "1em", height: "1em" }, /* @__PURE__ */ wp.element.createElement("path", { d: "M392 32L120 32c-13.3 0-24 10.7-24 24l0 166.5L77.5 207.2c-4.2-3.4-8.7-6.3-13.5-8.6L64 56C64 25.1 89.1 0 120 0L392 0c30.9 0 56 25.1 56 56l0 142.6c-4.8 2.3-9.3 5.2-13.4 8.6L416 222.5 416 56c0-13.3-10.7-24-24-24zM35 256c-1.6 0-3 1.3-3 3l0 189c0 17.7 14.3 32 32 32l384 0c17.7 0 32-14.3 32-32l0-189c0-1.6-1.3-3-3-3c-.7 0-1.3 .2-1.9 .7L294.5 405.1C283.7 414 270 418.9 256 418.9s-27.7-4.9-38.5-13.8L36.8 256.7c-.5-.4-1.2-.7-1.9-.7zM0 259c0-19.3 15.6-35 35-35c8.1 0 15.9 2.8 22.2 7.9L237.8 380.3c5.1 4.2 11.6 6.5 18.2 6.5s13.1-2.3 18.2-6.5L454.9 231.9c6.3-5.1 14.1-7.9 22.2-7.9c19.3 0 35 15.6 35 35l0 189c0 35.3-28.7 64-64 64L64 512c-35.3 0-64-28.7-64-64L0 259zM176 128l160 0c8.8 0 16 7.2 16 16s-7.2 16-16 16l-160 0c-8.8 0-16-7.2-16-16s7.2-16 16-16zm0 96l160 0c8.8 0 16 7.2 16 16s-7.2 16-16 16l-160 0c-8.8 0-16-7.2-16-16s7.2-16 16-16z" }))))), /* @__PURE__ */ wp.element.createElement("button", { type: "submit", className: "digiblocks-newsletter-button" }, /* @__PURE__ */ wp.element.createElement(RichText18.Content, { value: buttonText })), /* @__PURE__ */ wp.element.createElement("input", { type: "hidden", name: "action", value: "digiblocks_newsletter_subscribe" }), /* @__PURE__ */ wp.element.createElement("input", { type: "hidden", name: "digiblocks_newsletter_nonce", value: "" }), /* @__PURE__ */ wp.element.createElement("input", { type: "hidden", name: "block_id", value: id })), /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-newsletter-message success", style: { display: "none" } }, successMessage), /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-newsletter-message error", style: { display: "none" } }, errorMessage));
  };
  var save_default19 = NewsletterSave;

  // blocks/posts/edit.js
  var { __: __23 } = window.wp.i18n;
  var {
    useBlockProps: useBlockProps38,
    InspectorControls: InspectorControls20,
    PanelColorSettings: PanelColorSettings19
  } = window.wp.blockEditor;
  var {
    TextControl: TextControl12,
    ToggleControl: ToggleControl20,
    SelectControl: SelectControl21,
    RangeControl: RangeControl19,
    Placeholder: Placeholder5,
    Spinner: Spinner7,
    TabPanel: TabPanel14,
    Button: Button19,
    __experimentalToggleGroupControl: ToggleGroupControl19,
    __experimentalToggleGroupControlOption: ToggleGroupControlOption19
  } = window.wp.components;
  var { useState: useState20, useEffect: useEffect20, useMemo: useMemo2, useRef: useRef17 } = window.wp.element;
  var { useSelect: useSelect5 } = window.wp.data;
  var { useBlockId: useBlockId20, getDimensionCSS: getDimensionCSS18, animations: animations18, animationPreview: animationPreview18 } = digi.utils;
  var { tabIcons: tabIcons20 } = digi.icons;
  var { ResponsiveControl: ResponsiveControl20, DimensionControl: DimensionControl19, TypographyControl: TypographyControl14, BoxShadowControl: BoxShadowControl18, CustomTabPanel: CustomTabPanel20, TabPanelBody: TabPanelBody21 } = digi.components;
  var PostsEdit = ({ attributes, setAttributes, clientId }) => {
    const {
      id,
      anchor,
      visibility,
      customClasses,
      postsToShow,
      columns,
      postStyle,
      displayFeaturedImage,
      displayTitle,
      displayMeta,
      displayExcerpt,
      displayReadMoreButton,
      metaSettings,
      excerptLength,
      readMoreText,
      order,
      orderBy,
      categories,
      enablePagination,
      paginationAlign,
      paginationBackgroundColor,
      paginationTextColor,
      paginationActiveBackgroundColor,
      paginationActiveTextColor,
      titleColor,
      titleHoverColor,
      excerptColor,
      catBackgroundColor,
      catColor,
      catHoverBackgroundColor,
      catHoverColor,
      metaColor,
      metaHoverColor,
      buttonBackgroundColor,
      buttonTextColor,
      buttonBackgroundHoverColor,
      buttonTextHoverColor,
      imageMargin,
      contentMargin,
      padding,
      margin,
      itemSpacing,
      titleTypography,
      textTypography,
      contentTypography,
      buttonTypography,
      buttonPadding,
      buttonBorderRadius,
      imageSize,
      imageBorderRadius,
      cardStyle,
      cardBackgroundColor,
      cardPadding,
      cardBorderRadius,
      cardBorderStyle,
      cardBorderWidth,
      cardBorderColor,
      cardShadow,
      cardShadowHover,
      animation
    } = attributes;
    useBlockId20(id, clientId, setAttributes);
    const [localActiveDevice, setLocalActiveDevice] = useState20(window.digi.responsiveState.activeDevice);
    const [activeTab, setActiveTab] = useState20(() => {
      if (window.digi.uiState) {
        const savedTab = window.digi.uiState.getActiveTab(clientId);
        if (savedTab)
          return savedTab;
      }
      return "options";
    });
    useEffect20(() => {
      const unsubscribe = window.digi.responsiveState.subscribe((device) => {
        setLocalActiveDevice(device);
      });
      return unsubscribe;
    }, []);
    const postQueryObject = useMemo2(() => {
      const query = {
        per_page: postsToShow,
        order,
        orderby: orderBy,
        _embed: true
      };
      if (categories && categories.length > 0 && !categories.includes(0)) {
        query.categories = categories;
      }
      return query;
    }, [postsToShow, order, orderBy, categories]);
    const queryParams = useMemo2(() => ({
      postsToShow,
      order,
      orderBy,
      categories: categories && categories.length > 0 ? categories.join(",") : ""
    }), [postsToShow, order, orderBy, categories]);
    const allCategories = useSelect5((select) => {
      const { getEntityRecords } = select("core");
      return getEntityRecords("taxonomy", "category", { per_page: -1 }) || [];
    }, []);
    const formattedCategories = useMemo2(() => {
      return [
        { label: __23("All Categories", "digiblocks"), value: "0" },
        ...allCategories.map((category) => ({
          label: category.name,
          value: category.id.toString()
        }))
      ];
    }, [allCategories]);
    const posts = useSelect5((select) => {
      const { getEntityRecords } = select("core");
      const queryObj = {
        per_page: postsToShow,
        order,
        orderby: orderBy,
        _embed: true
      };
      if (categories && categories.length > 0 && !categories.includes(0)) {
        queryObj.categories = categories;
      }
      return getEntityRecords("postType", "post", queryObj);
    }, [JSON.stringify(queryParams)]);
    const previewTimeoutRef = useRef17(null);
    useEffect20(() => {
      if (animation && animation !== "none") {
        const timeoutId = setTimeout(() => {
          animationPreview18(id, animation, animations18, previewTimeoutRef);
        }, 100);
        return () => clearTimeout(timeoutId);
      }
    }, [animation]);
    const handlePreviewClick = () => {
      animationPreview18(id, animation, animations18, previewTimeoutRef);
    };
    const animationOptions = [
      { label: __23("None", "digiblocks"), value: "none" },
      ...Object.keys(animations18).map((animation2) => ({
        label: animation2.replace(/-/g, " ").replace(/\b\w/g, (l) => l.toUpperCase()),
        value: animation2
      }))
    ];
    const tabList = [
      {
        name: "options",
        title: __23("Options", "digiblocks"),
        icon: tabIcons20.optionsIcon
      },
      {
        name: "style",
        title: __23("Style", "digiblocks"),
        icon: tabIcons20.styleIcon
      },
      {
        name: "advanced",
        title: __23("Advanced", "digiblocks"),
        icon: tabIcons20.advancedIcon
      }
    ];
    const stateTabList = [
      {
        name: "normal",
        title: __23("Normal", "digiblocks"),
        className: "digiblocks-tab-1 normal"
      },
      {
        name: "hover",
        title: __23("Hover", "digiblocks"),
        className: "digiblocks-tab-2 hover"
      }
    ];
    const imageSizes = [
      { label: __23("Thumbnail", "digiblocks"), value: "thumbnail" },
      { label: __23("Medium", "digiblocks"), value: "medium" },
      { label: __23("Large", "digiblocks"), value: "large" },
      { label: __23("Full", "digiblocks"), value: "full" }
    ];
    const orderOptions = [
      { label: __23("Ascending", "digiblocks"), value: "asc" },
      { label: __23("Descending", "digiblocks"), value: "desc" }
    ];
    const orderByOptions = [
      { label: __23("Date", "digiblocks"), value: "date" },
      { label: __23("Title", "digiblocks"), value: "title" },
      { label: __23("Author", "digiblocks"), value: "author" },
      { label: __23("Modified Date", "digiblocks"), value: "modified" },
      { label: __23("Comment Count", "digiblocks"), value: "comment_count" }
    ];
    const borderStyleOptions = [
      { label: __23("None", "digiblocks"), value: "none" },
      { label: __23("Solid", "digiblocks"), value: "solid" },
      { label: __23("Dashed", "digiblocks"), value: "dashed" },
      { label: __23("Dotted", "digiblocks"), value: "dotted" },
      { label: __23("Double", "digiblocks"), value: "double" }
    ];
    const updateMetaSettings = (key, value) => {
      setAttributes({
        metaSettings: {
          ...metaSettings,
          [key]: value
        }
      });
    };
    const generateCSS = () => {
      const activeDevice = localActiveDevice;
      let animationCSS = "";
      if (animation && animation !== "none" && animations18[animation]) {
        animationCSS = animations18[animation].keyframes;
      }
      return `
            /* Posts Block - ${id} */
            .${id} {
				${getDimensionCSS18(padding, "padding", activeDevice)}
				${getDimensionCSS18(margin, "margin", activeDevice)}
                width: 100%;
            }
            
            /* Grid layout */
            .${id} .digiblocks-posts-container {
                display: ${postStyle === "list" ? "flex" : "grid"};
				${postStyle === "list" ? `flex-direction: column;` : ""}
                ${postStyle !== "list" ? `grid-template-columns: repeat(${columns[activeDevice]}, 1fr);` : ""}
                gap: ${itemSpacing[activeDevice]}px;
            }
            
            /* List layout */
            .${id}.style-list .digiblocks-post-item {
				flex-direction: row;
				flex-wrap: wrap;
				align-items: stretch;
            }
            
            .${id}.style-list .digiblocks-post-image {
                max-width: 35%;
				width: auto;
            }
            
            .${id}.style-list .digiblocks-post-image img {
                height: 100%;
				object-fit: cover;
            }
            
            .${id}.style-list .digiblocks-post-content {
                flex: 1;
            }
            
            /* Post item */
            .${id} .digiblocks-post-item {
				display: flex;
				flex-direction: column;
				gap: ${imageMargin[activeDevice]}px;
                ${cardStyle ? `
					background-color: ${cardBackgroundColor};
					${getDimensionCSS18(cardPadding, "padding", activeDevice)}
					${getDimensionCSS18(cardBorderRadius, "border-radius", activeDevice)}
					` : ""}
                
                ${cardStyle && cardBorderStyle !== "none" ? `
					border-style: ${cardBorderStyle};
					border-color: ${cardBorderColor};
					${getDimensionCSS18(cardBorderWidth, "border-width", activeDevice)}
					` : ""}
                
                ${cardStyle && cardShadow?.enable ? `box-shadow: ${cardShadow.horizontal}px ${cardShadow.vertical}px ${cardShadow.blur}px ${cardShadow.spread}px ${cardShadow.color};` : ""}
                transition: all 0.3s ease;
            }
            
            /* Featured image */
            .${id} .digiblocks-post-image {
                width: 100%;
                overflow: hidden;
				${getDimensionCSS18(imageBorderRadius, "border-radius", activeDevice)}
            }
            
            .${id} .digiblocks-post-image img {
                width: 100%;
                height: auto;
                display: block;
                transition: transform 0.3s ease;
            }

			/* Content */
			.${id} .digiblocks-post-content {
				display: flex;
				flex-direction: column;
				gap: ${contentMargin[activeDevice]}px;
			}
            
            /* Post title */
            .${id} .digiblocks-post-title {
                margin: 0;
                color: ${titleColor};
                ${titleTypography.fontFamily ? `font-family: ${titleTypography.fontFamily};` : ""}
                ${titleTypography.fontSize?.[activeDevice] ? `font-size: ${titleTypography.fontSize[activeDevice]}${titleTypography.fontSizeUnit || "px"};` : ""}
                ${titleTypography.fontWeight ? `font-weight: ${titleTypography.fontWeight};` : ""}
                ${titleTypography.fontStyle ? `font-style: ${titleTypography.fontStyle};` : ""}
                ${titleTypography.textTransform ? `text-transform: ${titleTypography.textTransform};` : ""}
                ${titleTypography.textDecoration ? `text-decoration: ${titleTypography.textDecoration};` : ""}
                ${titleTypography.lineHeight?.[activeDevice] ? `line-height: ${titleTypography.lineHeight[activeDevice]}${titleTypography.lineHeightUnit || "em"};` : ""}
                ${titleTypography.letterSpacing?.[activeDevice] ? `letter-spacing: ${titleTypography.letterSpacing[activeDevice]}${titleTypography.letterSpacingUnit || "px"};` : ""}
            }
            
            .${id} .digiblocks-post-title a {
                color: ${titleColor};
                text-decoration: none;
            }
            
            /* Post excerpt */
            .${id} .digiblocks-post-excerpt {
                color: ${excerptColor};
                ${contentTypography.fontFamily ? `font-family: ${contentTypography.fontFamily};` : ""}
                ${contentTypography.fontSize?.[activeDevice] ? `font-size: ${contentTypography.fontSize[activeDevice]}${contentTypography.fontSizeUnit || "px"};` : ""}
                ${contentTypography.fontWeight ? `font-weight: ${contentTypography.fontWeight};` : ""}
                ${contentTypography.fontStyle ? `font-style: ${contentTypography.fontStyle};` : ""}
                ${contentTypography.textTransform ? `text-transform: ${contentTypography.textTransform};` : ""}
                ${contentTypography.textDecoration ? `text-decoration: ${contentTypography.textDecoration};` : ""}
                ${contentTypography.lineHeight?.[activeDevice] ? `line-height: ${contentTypography.lineHeight[activeDevice]}${contentTypography.lineHeightUnit || "em"};` : ""}
                ${contentTypography.letterSpacing?.[activeDevice] ? `letter-spacing: ${contentTypography.letterSpacing[activeDevice]}${contentTypography.letterSpacingUnit || "px"};` : ""}
            }
            
            /* Categories */
            .${id} .digiblocks-post-categories {
                display: flex;
				flex-wrap: wrap;
				gap: .5rem;
                ${textTypography.fontFamily ? `font-family: ${textTypography.fontFamily};` : ""}
                ${textTypography.fontSize?.[activeDevice] ? `font-size: ${textTypography.fontSize[activeDevice]}${textTypography.fontSizeUnit || "px"};` : ""}
                ${textTypography.fontWeight ? `font-weight: ${textTypography.fontWeight};` : ""}
                ${textTypography.fontStyle ? `font-style: ${textTypography.fontStyle};` : ""}
                ${textTypography.textTransform ? `text-transform: ${textTypography.textTransform};` : ""}
                ${textTypography.textDecoration ? `text-decoration: ${textTypography.textDecoration};` : ""}
                ${textTypography.lineHeight?.[activeDevice] ? `line-height: ${textTypography.lineHeight[activeDevice]}${textTypography.lineHeightUnit || "em"};` : ""}
                ${textTypography.letterSpacing?.[activeDevice] ? `letter-spacing: ${textTypography.letterSpacing[activeDevice]}${textTypography.letterSpacingUnit || "px"};` : ""}
            }
            
            .${id} .digiblocks-post-categories a {
				display: inline-flex;
				border-radius: 3px;
				padding: 3px 5px;
				background-color: ${catBackgroundColor};
				color: ${catColor};
				text-decoration: none;
				transition: all 0.3s ease;
			}
			
			.${id} .digiblocks-post-categories a:hover {
				background-color: ${catHoverBackgroundColor};
				color: ${catHoverColor};
			}

			/* Footer meta */
			.${id} .digiblocks-post-footer-meta {
				display: flex;
				align-items: center;
				gap: 10px;
				${textTypography.fontFamily ? `font-family: ${textTypography.fontFamily};` : ""}
				${textTypography.fontSize?.[activeDevice] ? `font-size: ${textTypography.fontSize[activeDevice]}${textTypography.fontSizeUnit || "px"};` : ""}
				${textTypography.fontWeight ? `font-weight: ${textTypography.fontWeight};` : ""}
				color: ${metaColor};
			}

			.${id} .digiblocks-author-avatar,
			.${id} .digiblocks-author-avatar a {
				display: flex;
			}

			.${id} .digiblocks-author-avatar {
				flex-shrink: 0;
			}

			.${id} .digiblocks-author-avatar img {
				width: 50px;
				height: 50px;
				border-radius: 50%;
				object-fit: cover;
			}

			.${id} .digiblocks-footer-meta-items {
				display: flex;
				flex-wrap: wrap;
				gap: 6px;
                ${textTypography.fontFamily ? `font-family: ${textTypography.fontFamily};` : ""}
                ${textTypography.fontSize?.[activeDevice] ? `font-size: ${textTypography.fontSize[activeDevice]}${textTypography.fontSizeUnit || "px"};` : ""}
                ${textTypography.fontWeight ? `font-weight: ${textTypography.fontWeight};` : ""}
                ${textTypography.fontStyle ? `font-style: ${textTypography.fontStyle};` : ""}
                ${textTypography.textTransform ? `text-transform: ${textTypography.textTransform};` : ""}
                ${textTypography.textDecoration ? `text-decoration: ${textTypography.textDecoration};` : ""}
                ${textTypography.lineHeight?.[activeDevice] ? `line-height: ${textTypography.lineHeight[activeDevice]}${textTypography.lineHeightUnit || "em"};` : ""}
                ${textTypography.letterSpacing?.[activeDevice] ? `letter-spacing: ${textTypography.letterSpacing[activeDevice]}${textTypography.letterSpacingUnit || "px"};` : ""}
			}

			.${id} .digiblocks-footer-meta-items a {
				color: ${metaColor};
				text-decoration: none;
				transition: color 0.3s ease;
			}

			.${id} .digiblocks-footer-meta-items a:hover {
				color: ${metaHoverColor || titleColor};
			}

			/* Footer actions */
			.${id} .digiblocks-post-footer-actions {
				display: flex;
				justify-content: space-between;
				align-items: center;
				flex-wrap: wrap;
				gap: 1rem;
			}
            
            /* Read more button */
            .${id} .digiblocks-post-read-more {
                display: inline-flex;
                background-color: ${buttonBackgroundColor};
                color: ${buttonTextColor};
                ${buttonTypography.fontFamily ? `font-family: ${buttonTypography.fontFamily};` : ""}
                ${buttonTypography.fontSize?.[activeDevice] ? `font-size: ${buttonTypography.fontSize[activeDevice]}${buttonTypography.fontSizeUnit || "px"};` : ""}
                ${buttonTypography.fontWeight ? `font-weight: ${buttonTypography.fontWeight};` : ""}
                ${buttonTypography.fontStyle ? `font-style: ${buttonTypography.fontStyle};` : ""}
                ${buttonTypography.textTransform ? `text-transform: ${buttonTypography.textTransform};` : ""}
                ${buttonTypography.textDecoration ? `text-decoration: ${buttonTypography.textDecoration};` : ""}
                ${buttonTypography.lineHeight?.[activeDevice] ? `line-height: ${buttonTypography.lineHeight[activeDevice]}${buttonTypography.lineHeightUnit || "em"};` : ""}
                ${buttonTypography.letterSpacing?.[activeDevice] ? `letter-spacing: ${buttonTypography.letterSpacing[activeDevice]}${buttonTypography.letterSpacingUnit || "px"};` : ""}
                text-decoration: none;
				${getDimensionCSS18(buttonPadding, "padding", activeDevice)}
				${getDimensionCSS18(buttonBorderRadius, "border-radius", activeDevice)}
                transition: all 0.3s ease;
            }

			.${id} .digiblocks-post-read-more:hover {
				background-color: ${buttonBackgroundHoverColor || buttonBackgroundColor};
				color: ${buttonTextHoverColor || buttonTextColor};
			}

			/* Date meta */
			.${id} .digiblocks-post-comments-count {
				color: ${metaColor};
				text-decoration: none;
				transition: color 0.3s ease;
				${textTypography.fontFamily ? `font-family: ${textTypography.fontFamily};` : ""}
                ${textTypography.fontSize?.[activeDevice] ? `font-size: ${textTypography.fontSize[activeDevice]}${textTypography.fontSizeUnit || "px"};` : ""}
                ${textTypography.fontWeight ? `font-weight: ${textTypography.fontWeight};` : ""}
                ${textTypography.fontStyle ? `font-style: ${textTypography.fontStyle};` : ""}
                ${textTypography.textTransform ? `text-transform: ${textTypography.textTransform};` : ""}
                ${textTypography.textDecoration ? `text-decoration: ${textTypography.textDecoration};` : ""}
                ${textTypography.lineHeight?.[activeDevice] ? `line-height: ${textTypography.lineHeight[activeDevice]}${textTypography.lineHeightUnit || "em"};` : ""}
                ${textTypography.letterSpacing?.[activeDevice] ? `letter-spacing: ${textTypography.letterSpacing[activeDevice]}${textTypography.letterSpacingUnit || "px"};` : ""}
				display: flex;
				align-items: center;
				gap: .5rem;
			}
			
			.${id} .digiblocks-post-comments-count:hover {
				color: ${metaHoverColor || titleColor};
			}

			/* Pagination */
			.${id} .digiblocks-pagination {
				margin-top: 30px;
				display: flex;
				flex-wrap: wrap;
				gap: 5px;
				justify-content: ${paginationAlign};
			}

			.${id} .digiblocks-pagination .page-numbers {
				display: inline-flex;
				align-items: center;
				justify-content: center;
				min-width: 36px;
				height: 36px;
				padding: 0 10px;
				background-color: ${paginationBackgroundColor};
				color: ${paginationTextColor};
				border-radius: 4px;
				text-decoration: none;
				transition: all 0.3s ease;
			}

			.${id} .digiblocks-pagination .page-numbers.current {
				background-color: ${paginationActiveBackgroundColor};
				color: ${paginationActiveTextColor};
			}

			.${id} .digiblocks-pagination .page-numbers:hover:not(.current) {
				background-color: ${paginationActiveBackgroundColor}40;
			}

			.${id} .digiblocks-pagination .page-numbers svg {
				width: 1em;
				height: 1em;
				fill: currentColor;
			}
            
            /* Animation keyframes */
            ${animationCSS}

			/* Visibility Controls */
			${visibility.desktop ? `
				@media (min-width: 992px) {
					.${id} {
						opacity: 0.5 !important;
					}
				}
			` : ""}

			${visibility.tablet ? `
				@media (min-width: 768px) and (max-width: 991px) {
					.${id} {
						opacity: 0.5 !important;
					}
				}
			` : ""}

			${visibility.mobile ? `
				@media (max-width: 767px) {
					.${id} {
						opacity: 0.5 !important;
					}
				}
			` : ""}
        `;
    };
    const renderTabContent = () => {
      switch (activeTab) {
        case "options":
          return /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(
            TabPanelBody21,
            {
              tab: "options",
              name: "layout",
              title: __23("Layout", "digiblocks"),
              initialOpen: true
            },
            /* @__PURE__ */ wp.element.createElement(
              ToggleGroupControl19,
              {
                label: __23("Post Style", "digiblocks"),
                value: postStyle,
                onChange: (value) => setAttributes({ postStyle: value }),
                isBlock: true,
                __next40pxDefaultSize: true,
                __nextHasNoMarginBottom: true
              },
              /* @__PURE__ */ wp.element.createElement(
                ToggleGroupControlOption19,
                {
                  value: "grid",
                  label: __23("Grid", "digiblocks")
                }
              ),
              /* @__PURE__ */ wp.element.createElement(
                ToggleGroupControlOption19,
                {
                  value: "list",
                  label: __23("List", "digiblocks")
                }
              )
            ),
            /* @__PURE__ */ wp.element.createElement(
              RangeControl19,
              {
                label: __23("Posts to Show", "digiblocks"),
                value: postsToShow,
                onChange: (value) => setAttributes({ postsToShow: value }),
                min: 1,
                max: 20,
                __next40pxDefaultSize: true,
                __nextHasNoMarginBottom: true
              }
            ),
            postStyle === "grid" && /* @__PURE__ */ wp.element.createElement(
              ResponsiveControl20,
              {
                label: __23("Columns", "digiblocks")
              },
              /* @__PURE__ */ wp.element.createElement(
                RangeControl19,
                {
                  value: columns[localActiveDevice],
                  onChange: (value) => setAttributes({
                    columns: {
                      ...columns,
                      [localActiveDevice]: value
                    }
                  }),
                  min: 1,
                  max: localActiveDevice === "desktop" ? 6 : localActiveDevice === "tablet" ? 4 : 2,
                  __next40pxDefaultSize: true,
                  __nextHasNoMarginBottom: true
                }
              )
            ),
            /* @__PURE__ */ wp.element.createElement(
              ResponsiveControl20,
              {
                label: __23("Item Spacing", "digiblocks")
              },
              /* @__PURE__ */ wp.element.createElement(
                RangeControl19,
                {
                  value: itemSpacing[localActiveDevice],
                  onChange: (value) => setAttributes({
                    itemSpacing: {
                      ...itemSpacing,
                      [localActiveDevice]: value
                    }
                  }),
                  min: 0,
                  max: 80,
                  __next40pxDefaultSize: true,
                  __nextHasNoMarginBottom: true
                }
              )
            ),
            /* @__PURE__ */ wp.element.createElement(
              ToggleControl20,
              {
                label: __23("Card Style", "digiblocks"),
                checked: cardStyle,
                onChange: (value) => setAttributes({ cardStyle: value }),
                help: __23("Enable to show posts as cards with backgrounds and borders", "digiblocks"),
                __nextHasNoMarginBottom: true
              }
            )
          ), /* @__PURE__ */ wp.element.createElement(
            TabPanelBody21,
            {
              tab: "options",
              name: "content",
              title: __23("Content", "digiblocks"),
              initialOpen: false
            },
            /* @__PURE__ */ wp.element.createElement(
              ToggleControl20,
              {
                label: __23("Display Featured Image", "digiblocks"),
                checked: displayFeaturedImage,
                onChange: (value) => setAttributes({ displayFeaturedImage: value }),
                __nextHasNoMarginBottom: true
              }
            ),
            displayFeaturedImage && /* @__PURE__ */ wp.element.createElement(
              SelectControl21,
              {
                label: __23("Image Size", "digiblocks"),
                value: imageSize,
                options: imageSizes,
                onChange: (value) => setAttributes({ imageSize: value }),
                __next40pxDefaultSize: true,
                __nextHasNoMarginBottom: true
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              ToggleControl20,
              {
                label: __23("Display Title", "digiblocks"),
                checked: displayTitle,
                onChange: (value) => setAttributes({ displayTitle: value }),
                __nextHasNoMarginBottom: true
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              ToggleControl20,
              {
                label: __23("Display Meta", "digiblocks"),
                checked: displayMeta,
                onChange: (value) => setAttributes({ displayMeta: value }),
                __nextHasNoMarginBottom: true
              }
            ),
            displayMeta && /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-meta-options", style: { marginLeft: "24px", marginBottom: "16px" } }, /* @__PURE__ */ wp.element.createElement(
              ToggleControl20,
              {
                label: __23("Show Author", "digiblocks"),
                checked: metaSettings.displayAuthor,
                onChange: (value) => updateMetaSettings("displayAuthor", value),
                __nextHasNoMarginBottom: true
              }
            ), /* @__PURE__ */ wp.element.createElement(
              ToggleControl20,
              {
                label: __23("Show Date", "digiblocks"),
                checked: metaSettings.displayDate,
                onChange: (value) => updateMetaSettings("displayDate", value),
                __nextHasNoMarginBottom: true
              }
            ), /* @__PURE__ */ wp.element.createElement(
              ToggleControl20,
              {
                label: __23("Show Categories", "digiblocks"),
                checked: metaSettings.displayCategories,
                onChange: (value) => updateMetaSettings("displayCategories", value),
                __nextHasNoMarginBottom: true
              }
            ), /* @__PURE__ */ wp.element.createElement(
              ToggleControl20,
              {
                label: __23("Show Comments Count", "digiblocks"),
                checked: metaSettings.displayComments,
                onChange: (value) => updateMetaSettings("displayComments", value),
                __nextHasNoMarginBottom: true
              }
            )),
            /* @__PURE__ */ wp.element.createElement(
              ToggleControl20,
              {
                label: __23("Display Excerpt", "digiblocks"),
                checked: displayExcerpt,
                onChange: (value) => setAttributes({ displayExcerpt: value }),
                __nextHasNoMarginBottom: true
              }
            ),
            displayExcerpt && /* @__PURE__ */ wp.element.createElement(
              RangeControl19,
              {
                label: __23("Excerpt Length (words)", "digiblocks"),
                value: excerptLength,
                onChange: (value) => setAttributes({ excerptLength: value }),
                min: 5,
                max: 100,
                __next40pxDefaultSize: true,
                __nextHasNoMarginBottom: true
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              ToggleControl20,
              {
                label: __23("Display Read More Button", "digiblocks"),
                checked: displayReadMoreButton,
                onChange: (value) => setAttributes({ displayReadMoreButton: value }),
                __nextHasNoMarginBottom: true
              }
            ),
            displayReadMoreButton && /* @__PURE__ */ wp.element.createElement(
              TextControl12,
              {
                label: __23("Read More Text", "digiblocks"),
                value: readMoreText,
                onChange: (value) => setAttributes({ readMoreText: value }),
                __next40pxDefaultSize: true,
                __nextHasNoMarginBottom: true
              }
            )
          ), /* @__PURE__ */ wp.element.createElement(
            TabPanelBody21,
            {
              tab: "options",
              name: "pagination",
              title: __23("Pagination", "digiblocks"),
              initialOpen: false
            },
            /* @__PURE__ */ wp.element.createElement(
              ToggleControl20,
              {
                label: __23("Enable Pagination", "digiblocks"),
                checked: enablePagination,
                onChange: (value) => setAttributes({ enablePagination: value }),
                __nextHasNoMarginBottom: true
              }
            ),
            enablePagination && /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(
              ToggleGroupControl19,
              {
                label: __23("Pagination Alignment", "digiblocks"),
                value: paginationAlign,
                onChange: (value) => setAttributes({ paginationAlign: value }),
                isBlock: true,
                __next40pxDefaultSize: true,
                __nextHasNoMarginBottom: true
              },
              /* @__PURE__ */ wp.element.createElement(
                ToggleGroupControlOption19,
                {
                  value: "flex-start",
                  label: __23("Left", "digiblocks")
                }
              ),
              /* @__PURE__ */ wp.element.createElement(
                ToggleGroupControlOption19,
                {
                  value: "center",
                  label: __23("Center", "digiblocks")
                }
              ),
              /* @__PURE__ */ wp.element.createElement(
                ToggleGroupControlOption19,
                {
                  value: "flex-end",
                  label: __23("Right", "digiblocks")
                }
              )
            ))
          ), /* @__PURE__ */ wp.element.createElement(
            TabPanelBody21,
            {
              tab: "options",
              name: "query",
              title: __23("Query", "digiblocks"),
              initialOpen: false
            },
            /* @__PURE__ */ wp.element.createElement(
              SelectControl21,
              {
                label: __23("Order By", "digiblocks"),
                value: orderBy,
                options: orderByOptions,
                onChange: (value) => setAttributes({ orderBy: value }),
                __next40pxDefaultSize: true,
                __nextHasNoMarginBottom: true
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              SelectControl21,
              {
                label: __23("Order", "digiblocks"),
                value: order,
                options: orderOptions,
                onChange: (value) => setAttributes({ order: value }),
                __next40pxDefaultSize: true,
                __nextHasNoMarginBottom: true
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              SelectControl21,
              {
                label: __23("Category", "digiblocks"),
                value: categories.length === 0 ? "0" : categories[0].toString(),
                options: formattedCategories,
                onChange: (value) => {
                  const selectedValue = parseInt(value, 10);
                  if (selectedValue === 0) {
                    setAttributes({ categories: [] });
                  } else {
                    setAttributes({ categories: [selectedValue] });
                  }
                },
                __next40pxDefaultSize: true,
                __nextHasNoMarginBottom: true
              }
            )
          ));
        case "style":
          return /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(
            TabPanelBody21,
            {
              tab: "style",
              name: "colors",
              title: __23("Colors", "digiblocks"),
              initialOpen: true
            },
            /* @__PURE__ */ wp.element.createElement(
              TabPanel14,
              {
                className: "digiblocks-control-tabs",
                activeClass: "active-tab",
                tabs: stateTabList
              },
              (tab) => {
                if (tab.name === "normal") {
                  return /* @__PURE__ */ wp.element.createElement(
                    PanelColorSettings19,
                    {
                      title: __23("Colors", "digiblocks"),
                      initialOpen: true,
                      enableAlpha: true,
                      colorSettings: [
                        {
                          value: titleColor,
                          onChange: (value) => setAttributes({ titleColor: value }),
                          label: __23("Title Color", "digiblocks")
                        },
                        {
                          value: excerptColor,
                          onChange: (value) => setAttributes({ excerptColor: value }),
                          label: __23("Excerpt Color", "digiblocks")
                        },
                        {
                          value: catBackgroundColor,
                          onChange: (value) => setAttributes({ catBackgroundColor: value }),
                          label: __23("Categories Background Color", "digiblocks")
                        },
                        {
                          value: catColor,
                          onChange: (value) => setAttributes({ catColor: value }),
                          label: __23("Categories Color", "digiblocks")
                        },
                        {
                          value: metaColor,
                          onChange: (value) => setAttributes({ metaColor: value }),
                          label: __23("Meta Color", "digiblocks")
                        },
                        {
                          value: buttonBackgroundColor,
                          onChange: (value) => setAttributes({ buttonBackgroundColor: value }),
                          label: __23("Button Background", "digiblocks")
                        },
                        {
                          value: buttonTextColor,
                          onChange: (value) => setAttributes({ buttonTextColor: value }),
                          label: __23("Button Text", "digiblocks")
                        },
                        {
                          value: paginationBackgroundColor,
                          onChange: (value) => setAttributes({ paginationBackgroundColor: value }),
                          label: __23("Pagination Background", "digiblocks")
                        },
                        {
                          value: paginationTextColor,
                          onChange: (value) => setAttributes({ paginationTextColor: value }),
                          label: __23("Pagination Color", "digiblocks")
                        },
                        {
                          value: paginationActiveBackgroundColor,
                          onChange: (value) => setAttributes({ paginationActiveBackgroundColor: value }),
                          label: __23("Pagination Active Background", "digiblocks")
                        },
                        {
                          value: paginationActiveTextColor,
                          onChange: (value) => setAttributes({ paginationActiveTextColor: value }),
                          label: __23("Pagination Active Color", "digiblocks")
                        }
                      ]
                    }
                  );
                } else {
                  return /* @__PURE__ */ wp.element.createElement(
                    PanelColorSettings19,
                    {
                      title: __23("Hover Colors", "digiblocks"),
                      initialOpen: true,
                      enableAlpha: true,
                      colorSettings: [
                        {
                          value: titleHoverColor,
                          onChange: (value) => setAttributes({ titleHoverColor: value }),
                          label: __23("Title Hover Color", "digiblocks")
                        },
                        {
                          value: catHoverBackgroundColor,
                          onChange: (value) => setAttributes({ catHoverBackgroundColor: value }),
                          label: __23("Categories Hover Background Color", "digiblocks")
                        },
                        {
                          value: catHoverColor,
                          onChange: (value) => setAttributes({ catHoverColor: value }),
                          label: __23("Categories Hover Color", "digiblocks")
                        },
                        {
                          value: metaHoverColor,
                          onChange: (value) => setAttributes({ metaHoverColor: value }),
                          label: __23("Meta Hover Color", "digiblocks")
                        },
                        {
                          value: buttonBackgroundHoverColor,
                          onChange: (value) => setAttributes({ buttonBackgroundHoverColor: value }),
                          label: __23("Button Background Hover", "digiblocks")
                        },
                        {
                          value: buttonTextHoverColor,
                          onChange: (value) => setAttributes({ buttonTextHoverColor: value }),
                          label: __23("Button Text Hover", "digiblocks")
                        }
                      ]
                    }
                  );
                }
              }
            ),
            cardStyle && /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement("h3", null, __23("Card Colors", "digiblocks")), /* @__PURE__ */ wp.element.createElement(
              PanelColorSettings19,
              {
                title: "",
                colorSettings: [
                  {
                    value: cardBackgroundColor,
                    onChange: (value) => setAttributes({ cardBackgroundColor: value }),
                    label: __23("Card Background", "digiblocks")
                  },
                  {
                    value: cardBorderColor,
                    onChange: (value) => setAttributes({ cardBorderColor: value }),
                    label: __23("Card Border", "digiblocks")
                  }
                ]
              }
            ))
          ), /* @__PURE__ */ wp.element.createElement(
            TabPanelBody21,
            {
              tab: "style",
              name: "typography",
              title: __23("Typography", "digiblocks"),
              initialOpen: false
            },
            /* @__PURE__ */ wp.element.createElement(
              TypographyControl14,
              {
                label: __23("Title Typography", "digiblocks"),
                value: titleTypography,
                onChange: (value) => setAttributes({ titleTypography: value }),
                defaults: {
                  fontSize: { desktop: 20, tablet: 18, mobile: 16 },
                  fontWeight: "600",
                  lineHeight: { desktop: 1.4, tablet: 1.3, mobile: 1.2 }
                }
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              TypographyControl14,
              {
                label: __23("Meta Typography", "digiblocks"),
                value: textTypography,
                onChange: (value) => setAttributes({ textTypography: value }),
                defaults: {
                  fontSize: { desktop: 14, tablet: 13, mobile: 12 },
                  lineHeight: { desktop: 1.4, tablet: 1.3, mobile: 1.2 }
                }
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              TypographyControl14,
              {
                label: __23("Excerpt Typography", "digiblocks"),
                value: contentTypography,
                onChange: (value) => setAttributes({ contentTypography: value }),
                defaults: {
                  fontSize: { desktop: 16, tablet: 15, mobile: 14 },
                  lineHeight: { desktop: 1.5, tablet: 1.4, mobile: 1.3 }
                }
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              TypographyControl14,
              {
                label: __23("Button Typography", "digiblocks"),
                value: buttonTypography,
                onChange: (value) => setAttributes({ buttonTypography: value }),
                defaults: {
                  fontSize: { desktop: 16, tablet: 15, mobile: 14 },
                  fontWeight: "500",
                  lineHeight: { desktop: 1.5, tablet: 1.4, mobile: 1.3 }
                }
              }
            )
          ), /* @__PURE__ */ wp.element.createElement(
            TabPanelBody21,
            {
              tab: "style",
              name: "spacing",
              title: __23("Spacing", "digiblocks"),
              initialOpen: false
            },
            /* @__PURE__ */ wp.element.createElement(
              ResponsiveControl20,
              {
                label: __23("Padding", "digiblocks")
              },
              /* @__PURE__ */ wp.element.createElement(
                DimensionControl19,
                {
                  values: padding[localActiveDevice],
                  onChange: (value) => setAttributes({
                    padding: {
                      ...padding,
                      [localActiveDevice]: value
                    }
                  })
                }
              )
            ),
            /* @__PURE__ */ wp.element.createElement(
              ResponsiveControl20,
              {
                label: __23("Margin", "digiblocks")
              },
              /* @__PURE__ */ wp.element.createElement(
                DimensionControl19,
                {
                  values: margin[localActiveDevice],
                  onChange: (value) => setAttributes({
                    margin: {
                      ...margin,
                      [localActiveDevice]: value
                    }
                  })
                }
              )
            ),
            /* @__PURE__ */ wp.element.createElement(
              ResponsiveControl20,
              {
                label: __23("Image Margin", "digiblocks")
              },
              /* @__PURE__ */ wp.element.createElement(
                RangeControl19,
                {
                  value: imageMargin[localActiveDevice],
                  onChange: (value) => setAttributes({
                    imageMargin: {
                      ...imageMargin,
                      [localActiveDevice]: value
                    }
                  }),
                  min: 1,
                  max: 100,
                  __next40pxDefaultSize: true,
                  __nextHasNoMarginBottom: true
                }
              )
            ),
            /* @__PURE__ */ wp.element.createElement(
              ResponsiveControl20,
              {
                label: __23("Content Margin", "digiblocks")
              },
              /* @__PURE__ */ wp.element.createElement(
                RangeControl19,
                {
                  value: contentMargin[localActiveDevice],
                  onChange: (value) => setAttributes({
                    contentMargin: {
                      ...contentMargin,
                      [localActiveDevice]: value
                    }
                  }),
                  min: 1,
                  max: 100,
                  __next40pxDefaultSize: true,
                  __nextHasNoMarginBottom: true
                }
              )
            ),
            /* @__PURE__ */ wp.element.createElement(
              ResponsiveControl20,
              {
                label: __23("Button Padding", "digiblocks")
              },
              /* @__PURE__ */ wp.element.createElement(
                DimensionControl19,
                {
                  values: buttonPadding[localActiveDevice],
                  onChange: (value) => setAttributes({
                    buttonPadding: {
                      ...buttonPadding,
                      [localActiveDevice]: value
                    }
                  })
                }
              )
            )
          ), /* @__PURE__ */ wp.element.createElement(
            TabPanelBody21,
            {
              tab: "style",
              name: "borders",
              title: __23("Borders & Radius", "digiblocks"),
              initialOpen: false
            },
            /* @__PURE__ */ wp.element.createElement(
              ResponsiveControl20,
              {
                label: __23("Image Border Radius", "digiblocks")
              },
              /* @__PURE__ */ wp.element.createElement(
                DimensionControl19,
                {
                  values: imageBorderRadius[localActiveDevice],
                  onChange: (value) => setAttributes({
                    imageBorderRadius: {
                      ...imageBorderRadius,
                      [localActiveDevice]: value
                    }
                  }),
                  units: [
                    { label: "px", value: "px" },
                    { label: "%", value: "%" }
                  ]
                }
              )
            ),
            /* @__PURE__ */ wp.element.createElement(
              ResponsiveControl20,
              {
                label: __23("Button Border Radius", "digiblocks")
              },
              /* @__PURE__ */ wp.element.createElement(
                DimensionControl19,
                {
                  values: buttonBorderRadius[localActiveDevice],
                  onChange: (value) => setAttributes({
                    buttonBorderRadius: {
                      ...buttonBorderRadius,
                      [localActiveDevice]: value
                    }
                  }),
                  units: [
                    { label: "px", value: "px" },
                    { label: "%", value: "%" }
                  ]
                }
              )
            ),
            cardStyle && /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(
              SelectControl21,
              {
                label: __23("Card Border Style", "digiblocks"),
                value: cardBorderStyle,
                options: borderStyleOptions,
                onChange: (value) => setAttributes({ cardBorderStyle: value }),
                __next40pxDefaultSize: true,
                __nextHasNoMarginBottom: true
              }
            ), cardBorderStyle !== "none" && /* @__PURE__ */ wp.element.createElement(
              ResponsiveControl20,
              {
                label: __23("Card Border Width", "digiblocks")
              },
              /* @__PURE__ */ wp.element.createElement(
                DimensionControl19,
                {
                  values: cardBorderWidth[localActiveDevice],
                  onChange: (value) => setAttributes({
                    cardBorderWidth: {
                      ...cardBorderWidth,
                      [localActiveDevice]: value
                    }
                  })
                }
              )
            ), /* @__PURE__ */ wp.element.createElement(
              ResponsiveControl20,
              {
                label: __23("Card Border Radius", "digiblocks")
              },
              /* @__PURE__ */ wp.element.createElement(
                DimensionControl19,
                {
                  values: cardBorderRadius[localActiveDevice],
                  onChange: (value) => setAttributes({
                    cardBorderRadius: {
                      ...cardBorderRadius,
                      [localActiveDevice]: value
                    }
                  }),
                  units: [
                    { label: "px", value: "px" },
                    { label: "%", value: "%" }
                  ]
                }
              )
            ), /* @__PURE__ */ wp.element.createElement(
              BoxShadowControl18,
              {
                label: __23("Card Shadow", "digiblocks"),
                normalValue: cardShadow,
                hoverValue: cardShadowHover,
                onNormalChange: (value) => setAttributes({ cardShadow: value }),
                onHoverChange: (value) => setAttributes({ cardShadowHover: value })
              }
            ))
          ));
        case "advanced":
          return /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(
            TabPanelBody21,
            {
              tab: "advanced",
              name: "animation",
              title: __23("Animation", "digiblocks"),
              initialOpen: true
            },
            /* @__PURE__ */ wp.element.createElement(
              SelectControl21,
              {
                label: __23("Animation Effect", "digiblocks"),
                value: animation,
                options: animationOptions,
                onChange: (value) => setAttributes({ animation: value }),
                __next40pxDefaultSize: true,
                __nextHasNoMarginBottom: true
              }
            ),
            animation && animation !== "none" && /* @__PURE__ */ wp.element.createElement("div", { style: { marginTop: "10px" } }, /* @__PURE__ */ wp.element.createElement(
              Button19,
              {
                variant: "secondary",
                isSecondary: true,
                onClick: handlePreviewClick,
                style: { width: "100%" }
              },
              __23("Preview Animation", "digiblocks")
            ))
          ), /* @__PURE__ */ wp.element.createElement(
            TabPanelBody21,
            {
              tab: "advanced",
              name: "visibility",
              title: __23("Visibility", "digiblocks"),
              initialOpen: false
            },
            /* @__PURE__ */ wp.element.createElement("div", { className: "components-base-control__help", style: {
              padding: "12px",
              backgroundColor: "#f0f6fc",
              border: "1px solid #c3ddfd",
              borderRadius: "4px",
              marginBottom: "16px"
            } }, /* @__PURE__ */ wp.element.createElement("strong", null, __23("Editor Note:", "digiblocks")), /* @__PURE__ */ wp.element.createElement("br", null), __23("Hidden elements appear with reduced opacity in the editor for easy editing. Visibility changes only take effect on the frontend.", "digiblocks")),
            /* @__PURE__ */ wp.element.createElement(
              ToggleControl20,
              {
                label: __23("Hide on Desktop", "digiblocks"),
                checked: visibility.desktop,
                onChange: (value) => setAttributes({
                  visibility: {
                    ...visibility,
                    desktop: value
                  }
                }),
                __nextHasNoMarginBottom: true
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              ToggleControl20,
              {
                label: __23("Hide on Tablet", "digiblocks"),
                checked: visibility.tablet,
                onChange: (value) => setAttributes({
                  visibility: {
                    ...visibility,
                    tablet: value
                  }
                }),
                __nextHasNoMarginBottom: true
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              ToggleControl20,
              {
                label: __23("Hide on Mobile", "digiblocks"),
                checked: visibility.mobile,
                onChange: (value) => setAttributes({
                  visibility: {
                    ...visibility,
                    mobile: value
                  }
                }),
                __nextHasNoMarginBottom: true
              }
            )
          ), /* @__PURE__ */ wp.element.createElement(
            TabPanelBody21,
            {
              tab: "advanced",
              name: "additional",
              title: __23("Additional", "digiblocks"),
              initialOpen: false
            },
            /* @__PURE__ */ wp.element.createElement("div", { className: "components-base-control html-anchor-control" }, /* @__PURE__ */ wp.element.createElement("div", { className: "components-base-control__field" }, /* @__PURE__ */ wp.element.createElement("label", { className: "components-base-control__label", htmlFor: "html-anchor" }, __23("HTML anchor", "digiblocks")), /* @__PURE__ */ wp.element.createElement(
              "input",
              {
                className: "components-text-control__input",
                type: "text",
                id: "html-anchor",
                value: anchor || "",
                onChange: (e) => setAttributes({ anchor: e.target.value }),
                "aria-describedby": "html-anchor-help",
                autoCapitalize: "none",
                autoComplete: "off"
              }
            )), /* @__PURE__ */ wp.element.createElement("p", { id: "html-anchor-help", className: "components-base-control__help" }, __23(`Enter a word or two \u2014 without spaces \u2014 to make a unique web address just for this block, called an "anchor". Then, you'll be able to link directly to this section of your page.`, "digiblocks"), " ", /* @__PURE__ */ wp.element.createElement(
              "a",
              {
                className: "components-external-link",
                href: "https://wordpress.org/documentation/article/page-jumps/",
                target: "_blank",
                rel: "external noreferrer noopener"
              },
              /* @__PURE__ */ wp.element.createElement("span", { className: "components-external-link__contents" }, __23("Learn more about anchors", "digiblocks")),
              /* @__PURE__ */ wp.element.createElement("span", { className: "components-external-link__icon", "aria-label": "(opens in a new tab)" }, "\u2197")
            ))),
            /* @__PURE__ */ wp.element.createElement("div", { className: "components-base-control" }, /* @__PURE__ */ wp.element.createElement("div", { className: "components-base-control__field" }, /* @__PURE__ */ wp.element.createElement("label", { className: "components-base-control__label", htmlFor: "additional-css-classes" }, __23("Additional CSS class(es)", "digiblocks")), /* @__PURE__ */ wp.element.createElement(
              "input",
              {
                className: "components-text-control__input",
                type: "text",
                id: "additional-css-classes",
                value: customClasses || "",
                onChange: (e) => setAttributes({ customClasses: e.target.value }),
                "aria-describedby": "additional-css-classes-help",
                autoComplete: "off"
              }
            )), /* @__PURE__ */ wp.element.createElement("p", { id: "additional-css-classes-help", className: "components-base-control__help" }, __23("Separate multiple classes with spaces.", "digiblocks")))
          ));
        default:
          return null;
      }
    };
    const trimExcerpt = (excerpt, wordCount) => {
      if (!excerpt)
        return "";
      const temp = document.createElement("div");
      temp.innerHTML = excerpt;
      const decodedExcerpt = temp.textContent || temp.innerText || "";
      const words = decodedExcerpt.split(" ");
      if (words.length <= wordCount)
        return decodedExcerpt;
      return words.slice(0, wordCount).join(" ") + "...";
    };
    const blockClasses = `digiblocks-posts ${id} style-${postStyle} ${customClasses || ""}`;
    const blockProps = useBlockProps38({
      className: blockClasses,
      id: anchor || null
    });
    return /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(InspectorControls20, null, /* @__PURE__ */ wp.element.createElement(
      CustomTabPanel20,
      {
        tabs: tabList,
        activeTab,
        onSelect: setActiveTab
      },
      renderTabContent()
    )), /* @__PURE__ */ wp.element.createElement("style", { dangerouslySetInnerHTML: { __html: generateCSS() } }), /* @__PURE__ */ wp.element.createElement("div", { ...blockProps }, !posts ? /* @__PURE__ */ wp.element.createElement(
      Placeholder5,
      {
        icon: "admin-post",
        label: __23("Posts", "digiblocks")
      },
      /* @__PURE__ */ wp.element.createElement(Spinner7, null)
    ) : posts.length === 0 ? /* @__PURE__ */ wp.element.createElement("p", { className: "digiblocks-posts-no-results" }, __23("No posts found.", "digiblocks")) : /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement("div", { className: `digiblocks-posts-container layout-${postStyle}` }, posts.map((post) => /* @__PURE__ */ wp.element.createElement("div", { key: post.id, className: "digiblocks-post-item" }, displayFeaturedImage && post._embedded?.["wp:featuredmedia"] && post._embedded["wp:featuredmedia"][0] && /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-post-image" }, /* @__PURE__ */ wp.element.createElement("span", null, post._embedded["wp:featuredmedia"][0].source_url && /* @__PURE__ */ wp.element.createElement(
      "img",
      {
        src: post._embedded["wp:featuredmedia"][0].source_url,
        alt: post._embedded["wp:featuredmedia"][0].alt_text || post.title.rendered
      }
    ))), /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-post-content" }, displayTitle && /* @__PURE__ */ wp.element.createElement("h3", { className: "digiblocks-post-title" }, /* @__PURE__ */ wp.element.createElement("a", { href: "#", onClick: (e) => e.preventDefault() }, post.title.rendered)), displayExcerpt && /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-post-excerpt" }, trimExcerpt(post.excerpt.rendered.replace(/<[^>]*>/g, ""), excerptLength)), displayMeta && metaSettings.displayCategories && post._embedded?.["wp:term"]?.[0] && /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-post-categories" }, post._embedded["wp:term"][0].map((category) => /* @__PURE__ */ wp.element.createElement(
      "a",
      {
        key: category.id,
        href: "#",
        onClick: (e) => e.preventDefault(),
        className: "digiblocks-category-link"
      },
      category.name
    ))), displayMeta && /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-post-footer-meta" }, metaSettings.displayAuthor && post._embedded?.author?.[0] && /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-author-avatar" }, /* @__PURE__ */ wp.element.createElement("a", { href: "#", onClick: (e) => e.preventDefault() }, post._embedded.author[0].avatar_urls?.["96"] ? /* @__PURE__ */ wp.element.createElement(
      "img",
      {
        src: post._embedded.author[0].avatar_urls["96"],
        alt: post._embedded.author[0].name || ""
      }
    ) : /* @__PURE__ */ wp.element.createElement("span", { className: "digiblocks-avatar-placeholder" }))), /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-footer-meta-items" }, metaSettings.displayAuthor && post._embedded?.author?.[0] && /* @__PURE__ */ wp.element.createElement("span", { className: "digiblocks-posted-by" }, /* @__PURE__ */ wp.element.createElement("span", { className: "digiblocks-meta-prefix" }, __23("by", "digiblocks")), " ", /* @__PURE__ */ wp.element.createElement("a", { href: "#", onClick: (e) => e.preventDefault() }, post._embedded.author[0].name)), metaSettings.displayDate && /* @__PURE__ */ wp.element.createElement("span", { className: "digiblocks-posted-on" }, /* @__PURE__ */ wp.element.createElement("span", { className: "digiblocks-meta-prefix" }, __23("on", "digiblocks")), " ", /* @__PURE__ */ wp.element.createElement("time", { dateTime: post.date }, new Date(post.date).toLocaleDateString("en-US", {
      year: "numeric",
      month: "long",
      day: "numeric"
    }))))), (displayReadMoreButton || displayMeta && metaSettings.displayComments) && /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-post-footer-actions" }, displayReadMoreButton && /* @__PURE__ */ wp.element.createElement("a", { href: "#", onClick: (e) => e.preventDefault(), className: "digiblocks-post-read-more" }, readMoreText), displayMeta && metaSettings.displayComments && /* @__PURE__ */ wp.element.createElement("a", { href: "#", className: "digiblocks-post-comments-count", onClick: (e) => e.preventDefault() }, /* @__PURE__ */ wp.element.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 512 512", width: "1em", height: "1em" }, /* @__PURE__ */ wp.element.createElement("path", { d: "M256 64C125.8 64 32 148.6 32 240c0 37.1 15.5 70.6 40 100c5.2 6.3 8.4 14.8 7.4 23.9c-3.1 27-11.4 52.5-25.7 76.3c-.5 .9-1.1 1.8-1.6 2.6c11.1-2.9 22.2-7 32.7-11.5L91.2 446l-6.4-14.7c17-7.4 33-16.7 48.4-27.4c8.5-5.9 19.4-7.5 29.2-4.2C193 410.1 224.1 416 256 416c130.2 0 224-84.6 224-176s-93.8-176-224-176zM0 240C0 125.2 114.5 32 256 32s256 93.2 256 208s-114.5 208-256 208c-36 0-70.5-6.7-103.8-17.9c-.2-.1-.5 0-.7 .1c-16.9 11.7-34.7 22.1-53.9 30.5C73.6 471.1 44.7 480 16 480c-6.5 0-12.3-3.9-14.8-9.8s-1.1-12.8 3.4-17.4c8.1-8.2 15.2-18.2 21.7-29c11.7-19.6 18.7-40.6 21.3-63.1c0 0-.1-.1-.1-.2C19.6 327.1 0 286.6 0 240z" })), post.comment_count === 0 ? __23("Leave a Comment", "digiblocks") : post.comment_count === 1 ? __23("1 Comment", "digiblocks") : sprintf(__23("%d Comments", "digiblocks"), post.comment_count || 0))))))), enablePagination && /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-pagination" }, /* @__PURE__ */ wp.element.createElement("a", { className: "page-numbers", href: "#", onClick: (e) => e.preventDefault() }, /* @__PURE__ */ wp.element.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 320 512", width: "1em", height: "1em" }, /* @__PURE__ */ wp.element.createElement("path", { d: "M47 239c-9.4 9.4-9.4 24.6 0 33.9L207 433c9.4 9.4 24.6 9.4 33.9 0s9.4-24.6 0-33.9L97.9 256 241 113c9.4-9.4 9.4-24.6 0-33.9s-24.6-9.4-33.9 0L47 239z" }))), /* @__PURE__ */ wp.element.createElement("a", { className: "page-numbers", href: "#", onClick: (e) => e.preventDefault() }, "1"), /* @__PURE__ */ wp.element.createElement("span", { className: "page-numbers current" }, "2"), /* @__PURE__ */ wp.element.createElement("a", { className: "page-numbers", href: "#", onClick: (e) => e.preventDefault() }, "3"), /* @__PURE__ */ wp.element.createElement("span", { className: "page-numbers dots" }, "\u2026"), /* @__PURE__ */ wp.element.createElement("a", { className: "page-numbers", href: "#", onClick: (e) => e.preventDefault() }, "8"), /* @__PURE__ */ wp.element.createElement("a", { className: "page-numbers", href: "#", onClick: (e) => e.preventDefault() }, /* @__PURE__ */ wp.element.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 320 512", width: "1em", height: "1em" }, /* @__PURE__ */ wp.element.createElement("path", { d: "M273 239c9.4 9.4 9.4 24.6 0 33.9L113 433c-9.4 9.4-24.6 9.4-33.9 0s-9.4-24.6 0-33.9l143-143L79 113c-9.4-9.4-9.4-24.6 0-33.9s24.6-9.4 33.9 0L273 239z" })))))));
  };
  var edit_default20 = PostsEdit;

  // blocks/posts/save.js
  var PostsSave = () => {
    return null;
  };
  var save_default20 = PostsSave;

  // blocks/pricing-table/edit.js
  var { __: __24 } = window.wp.i18n;
  var {
    useBlockProps: useBlockProps39,
    RichText: RichText19,
    InspectorControls: InspectorControls21,
    PanelColorSettings: PanelColorSettings20,
    LinkControl: LinkControl7
  } = window.wp.blockEditor;
  var {
    SelectControl: SelectControl22,
    RangeControl: RangeControl20,
    ToggleControl: ToggleControl21,
    Button: Button20,
    Tooltip: Tooltip6,
    __experimentalToggleGroupControl: ToggleGroupControl20,
    __experimentalToggleGroupControlOption: ToggleGroupControlOption20
  } = window.wp.components;
  var { useState: useState21, useEffect: useEffect21, useRef: useRef18 } = window.wp.element;
  var { useBlockId: useBlockId21, getDimensionCSS: getDimensionCSS19, animations: animations19, animationPreview: animationPreview19 } = digi.utils;
  var { tabIcons: tabIcons21 } = digi.icons;
  var { ResponsiveControl: ResponsiveControl21, DimensionControl: DimensionControl20, TypographyControl: TypographyControl15, BoxShadowControl: BoxShadowControl19, CustomTabPanel: CustomTabPanel21, TabPanelBody: TabPanelBody22, FontAwesomeControl: FontAwesomeControl3 } = digi.components;
  var PricingTableEdit = ({ attributes, setAttributes, clientId }) => {
    const {
      id,
      anchor,
      visibility,
      customClasses,
      tables,
      columns,
      tableStyle,
      align,
      animation,
      titleTypography,
      headingTypography,
      textTypography,
      contentTypography,
      buttonTypography,
      padding,
      margin,
      borderRadius,
      borderWidth,
      borderStyle,
      borderColor,
      boxShadow,
      boxShadowHover,
      buttonRadius,
      buttonPadding,
      buttonBorderStyle,
      buttonBorderWidth,
      buttonBorderColor,
      buttonBorderHoverColor,
      showRibbon,
      ribbonStyle,
      ribbonPosition,
      tableTextColor,
      tableBackgroundColor,
      headerBackgroundColor,
      buttonTextColor,
      buttonBackgroundColor,
      buttonTextHoverColor,
      buttonBackgroundHoverColor,
      ribbonTextColor,
      ribbonBackgroundColor
    } = attributes;
    useBlockId21(id, clientId, setAttributes);
    const [localActiveDevice, setLocalActiveDevice] = useState21(window.digi.responsiveState.activeDevice);
    const [isAnimating, setIsAnimating] = useState21(false);
    const [activeTab, setActiveTab] = useState21(() => {
      if (window.digi.uiState) {
        const savedTab = window.digi.uiState.getActiveTab(clientId);
        if (savedTab)
          return savedTab;
      }
      return "options";
    });
    const [activeTable, setActiveTable] = useState21(0);
    const [componentsLoaded, setComponentsLoaded] = useState21(false);
    useEffect21(() => {
      const checkComponents = () => {
        if (window.digi && window.digi.components && window.digi.components.FontAwesomeControl) {
          setComponentsLoaded(true);
          return true;
        }
        return false;
      };
      if (!checkComponents()) {
        const timeout = setTimeout(() => {
          if (checkComponents()) {
            clearTimeout(timeout);
          }
        }, 500);
        return () => clearTimeout(timeout);
      }
    }, []);
    useEffect21(() => {
      const unsubscribe = window.digi.responsiveState.subscribe((device) => {
        setLocalActiveDevice(device);
      });
      return unsubscribe;
    }, []);
    useEffect21(() => {
      if (!tables || tables.length === 0) {
        setAttributes({
          tables: [
            {
              id: `table-1-${Date.now().toString(36)}`,
              title: __24("Basic Plan", "digiblocks"),
              price: "$19",
              period: "/month",
              description: __24("Great for starters", "digiblocks"),
              iconValue: null,
              features: [
                { text: __24("1 Website", "digiblocks"), enabled: true },
                { text: __24("5GB Storage", "digiblocks"), enabled: true },
                { text: __24("10k Visits Monthly", "digiblocks"), enabled: true },
                { text: __24("Premium Support", "digiblocks"), enabled: false }
              ],
              buttonText: __24("Get Started", "digiblocks"),
              buttonUrl: "",
              buttonOpenInNewTab: false,
              buttonRel: "",
              isHighlighted: false,
              ribbonText: __24("Popular", "digiblocks"),
              backgroundColor: "",
              headerBackgroundColor: "",
              textColor: "",
              buttonBackgroundColor: "",
              buttonTextColor: ""
            },
            {
              id: `table-2-${Date.now().toString(36)}`,
              title: __24("Pro Plan", "digiblocks"),
              price: "$49",
              period: "/month",
              description: __24("For growing businesses", "digiblocks"),
              iconValue: null,
              features: [
                { text: __24("5 Websites", "digiblocks"), enabled: true },
                { text: __24("20GB Storage", "digiblocks"), enabled: true },
                { text: __24("50k Visits Monthly", "digiblocks"), enabled: true },
                { text: __24("Premium Support", "digiblocks"), enabled: true }
              ],
              buttonText: __24("Get Started", "digiblocks"),
              buttonUrl: "",
              buttonOpenInNewTab: false,
              buttonRel: "",
              isHighlighted: true,
              ribbonText: __24("Popular", "digiblocks"),
              backgroundColor: "",
              headerBackgroundColor: "",
              textColor: "",
              buttonBackgroundColor: "",
              buttonTextColor: ""
            }
          ],
          columns: 2,
          tableStyle: "style1",
          align: "center",
          showRibbon: true,
          ribbonStyle: "corner",
          ribbonPosition: "right",
          titleTypography: titleTypography || {
            fontSize: { desktop: 24, tablet: 20, mobile: 18 },
            fontSizeUnit: "px",
            lineHeight: { desktop: 1.4, tablet: 1.3, mobile: 1.2 },
            lineHeightUnit: "em",
            fontWeight: "",
            fontFamily: ""
          },
          headingTypography: headingTypography || {
            fontSize: { desktop: 36, tablet: 30, mobile: 26 },
            fontSizeUnit: "px",
            lineHeight: { desktop: 1.2, tablet: 1.2, mobile: 1.2 },
            lineHeightUnit: "em",
            fontWeight: "bold",
            fontFamily: ""
          },
          textTypography: textTypography || {
            fontSize: { desktop: 16, tablet: 15, mobile: 14 },
            fontSizeUnit: "px",
            lineHeight: { desktop: 1.6, tablet: 1.5, mobile: 1.4 },
            lineHeightUnit: "em",
            fontWeight: "",
            fontFamily: ""
          },
          contentTypography: contentTypography || {
            fontSize: { desktop: 16, tablet: 15, mobile: 14 },
            fontSizeUnit: "px",
            lineHeight: { desktop: 1.6, tablet: 1.5, mobile: 1.4 },
            lineHeightUnit: "em",
            fontWeight: "",
            fontFamily: ""
          },
          buttonTypography: buttonTypography || {
            fontSize: { desktop: 16, tablet: 15, mobile: 14 },
            fontSizeUnit: "px",
            lineHeight: { desktop: 1.5, tablet: 1.4, mobile: 1.3 },
            lineHeightUnit: "em",
            fontWeight: "",
            fontFamily: ""
          }
        });
      }
    }, [tables, setAttributes]);
    const previewTimeoutRef = useRef18(null);
    useEffect21(() => {
      if (animation && animation !== "none") {
        const timeoutId = setTimeout(() => {
          animationPreview19(id, animation, animations19, previewTimeoutRef);
        }, 100);
        return () => clearTimeout(timeoutId);
      }
    }, [animation]);
    const handlePreviewClick = () => {
      animationPreview19(id, animation, animations19, previewTimeoutRef);
    };
    const tableStyleOptions = [
      { label: __24("Style 1", "digiblocks"), value: "style1" },
      { label: __24("Style 2", "digiblocks"), value: "style2" },
      { label: __24("Style 3", "digiblocks"), value: "style3" },
      { label: __24("Style 4", "digiblocks"), value: "style4" },
      { label: __24("Minimal", "digiblocks"), value: "minimal" }
    ];
    const ribbonStyleOptions = [
      { label: __24("Corner", "digiblocks"), value: "corner" },
      { label: __24("Banner", "digiblocks"), value: "banner" },
      { label: __24("Side", "digiblocks"), value: "side" },
      { label: __24("Flag", "digiblocks"), value: "flag" }
    ];
    const ribbonPositionOptions = [
      { label: __24("Right", "digiblocks"), value: "right" },
      { label: __24("Left", "digiblocks"), value: "left" }
    ];
    const borderStyleOptions = [
      { label: __24("None", "digiblocks"), value: "none" },
      { label: __24("Solid", "digiblocks"), value: "solid" },
      { label: __24("Dotted", "digiblocks"), value: "dotted" },
      { label: __24("Dashed", "digiblocks"), value: "dashed" },
      { label: __24("Double", "digiblocks"), value: "double" }
    ];
    const animationOptions = [
      { label: __24("None", "digiblocks"), value: "none" },
      ...Object.keys(animations19).map((animation2) => ({
        label: animation2.replace(/-/g, " ").replace(/\b\w/g, (l) => l.toUpperCase()),
        value: animation2
      }))
    ];
    const tabList = [
      {
        name: "options",
        title: __24("Options", "digiblocks"),
        icon: tabIcons21.optionsIcon
      },
      {
        name: "style",
        title: __24("Style", "digiblocks"),
        icon: tabIcons21.styleIcon
      },
      {
        name: "advanced",
        title: __24("Advanced", "digiblocks"),
        icon: tabIcons21.advancedIcon
      }
    ];
    const addTable = () => {
      const newTables = [...tables, {
        id: `table-${tables.length + 1}-${Date.now().toString(36)}`,
        title: __24("New Plan", "digiblocks"),
        price: "$29",
        period: "/month",
        description: __24("Add your description", "digiblocks"),
        iconValue: null,
        features: [
          { text: __24("Feature 1", "digiblocks"), enabled: true },
          { text: __24("Feature 2", "digiblocks"), enabled: true },
          { text: __24("Feature 3", "digiblocks"), enabled: false }
        ],
        buttonText: __24("Get Started", "digiblocks"),
        buttonUrl: "",
        buttonOpenInNewTab: false,
        buttonRel: "",
        isHighlighted: false,
        ribbonText: __24("Popular", "digiblocks"),
        backgroundColor: "",
        headerBackgroundColor: "",
        textColor: "",
        buttonBackgroundColor: "",
        buttonTextColor: ""
      }];
      setAttributes({ tables: newTables });
      setActiveTable(newTables.length - 1);
    };
    const removeTable = (index) => {
      if (tables.length <= 1) {
        return;
      }
      const newTables = [...tables];
      newTables.splice(index, 1);
      setAttributes({ tables: newTables });
      if (activeTable >= newTables.length) {
        setActiveTable(newTables.length - 1);
      }
    };
    const duplicateTable = (index) => {
      const tableToDuplicate = tables[index];
      const newTable = {
        ...tableToDuplicate,
        id: `table-${tables.length + 1}-${Date.now().toString(36)}`
      };
      const newTables = [...tables];
      newTables.splice(index + 1, 0, newTable);
      setAttributes({ tables: newTables });
      setActiveTable(index + 1);
    };
    const moveTableUp = (index) => {
      if (index === 0)
        return;
      const newTables = [...tables];
      const temp = newTables[index];
      newTables[index] = newTables[index - 1];
      newTables[index - 1] = temp;
      setAttributes({ tables: newTables });
      setActiveTable(index - 1);
    };
    const moveTableDown = (index) => {
      if (index === tables.length - 1)
        return;
      const newTables = [...tables];
      const temp = newTables[index];
      newTables[index] = newTables[index + 1];
      newTables[index + 1] = temp;
      setAttributes({ tables: newTables });
      setActiveTable(index + 1);
    };
    const updateTableAttribute = (index, key, value) => {
      const newTables = [...tables];
      newTables[index] = {
        ...newTables[index],
        [key]: value
      };
      setAttributes({ tables: newTables });
    };
    const addFeature = (tableIndex) => {
      const newTables = [...tables];
      newTables[tableIndex].features.push({
        text: __24("New Feature", "digiblocks"),
        enabled: true
      });
      setAttributes({ tables: newTables });
    };
    const removeFeature = (tableIndex, featureIndex) => {
      if (tables[tableIndex].features.length <= 1) {
        return;
      }
      const newTables = [...tables];
      newTables[tableIndex].features.splice(featureIndex, 1);
      setAttributes({ tables: newTables });
    };
    const updateFeature = (tableIndex, featureIndex, key, value) => {
      const newTables = [...tables];
      newTables[tableIndex].features[featureIndex] = {
        ...newTables[tableIndex].features[featureIndex],
        [key]: value
      };
      setAttributes({ tables: newTables });
    };
    const toggleFeatureEnabled = (tableIndex, featureIndex) => {
      const newTables = [...tables];
      newTables[tableIndex].features[featureIndex].enabled = !newTables[tableIndex].features[featureIndex].enabled;
      setAttributes({ tables: newTables });
    };
    const applyTableStyle = (style) => {
      setAttributes({ tableStyle: style });
      let newAttributes = {};
      switch (style) {
        case "style1":
          newAttributes = {
            tableBackgroundColor: "#ffffff",
            headerBackgroundColor: "#f8f9fa",
            tableTextColor: "#333333",
            buttonBackgroundColor: "#4a6cf7",
            buttonTextColor: "#ffffff",
            buttonBackgroundHoverColor: "#3151e1",
            buttonTextHoverColor: "#ffffff",
            ribbonBackgroundColor: "#4a6cf7",
            ribbonTextColor: "#ffffff",
            borderStyle: "solid",
            borderWidth: {
              desktop: { top: 1, right: 1, bottom: 1, left: 1, unit: "px" },
              tablet: { top: "", right: "", bottom: "", left: "", unit: "px" },
              mobile: { top: "", right: "", bottom: "", left: "", unit: "px" }
            },
            borderColor: "#e6e6e6",
            borderRadius: {
              desktop: { top: 8, right: 8, bottom: 8, left: 8, unit: "px" },
              tablet: { top: "", right: "", bottom: "", left: "", unit: "px" },
              mobile: { top: "", right: "", bottom: "", left: "", unit: "px" }
            },
            boxShadow: {
              enable: false,
              color: "rgba(0, 0, 0, 0.1)",
              horizontal: 0,
              vertical: 0,
              blur: 0,
              spread: 0,
              position: "outset"
            }
          };
          break;
        case "style2":
          newAttributes = {
            tableBackgroundColor: "#ffffff",
            headerBackgroundColor: "#4a6cf7",
            tableTextColor: "#333333",
            buttonBackgroundColor: "#4a6cf7",
            buttonTextColor: "#ffffff",
            buttonBackgroundHoverColor: "#3151e1",
            buttonTextHoverColor: "#ffffff",
            ribbonBackgroundColor: "#ff9800",
            ribbonTextColor: "#ffffff",
            borderStyle: "none",
            borderWidth: {
              desktop: { top: "", right: "", bottom: "", left: "", unit: "px" },
              tablet: { top: "", right: "", bottom: "", left: "", unit: "px" },
              mobile: { top: "", right: "", bottom: "", left: "", unit: "px" }
            },
            borderColor: "#e6e6e6",
            borderRadius: {
              desktop: { top: 8, right: 8, bottom: 8, left: 8, unit: "px" },
              tablet: { top: "", right: "", bottom: "", left: "", unit: "px" },
              mobile: { top: "", right: "", bottom: "", left: "", unit: "px" }
            },
            boxShadow: {
              enable: true,
              color: "rgba(0, 0, 0, 0.1)",
              horizontal: 0,
              vertical: 4,
              blur: 15,
              spread: 0,
              position: "outset"
            }
          };
          break;
        case "style3":
          newAttributes = {
            tableBackgroundColor: "#ffffff",
            headerBackgroundColor: "#ffffff",
            tableTextColor: "#333333",
            buttonBackgroundColor: "#4a6cf7",
            buttonTextColor: "#ffffff",
            buttonBackgroundHoverColor: "#3151e1",
            buttonTextHoverColor: "#ffffff",
            ribbonBackgroundColor: "#ff5252",
            ribbonTextColor: "#ffffff",
            borderStyle: "solid",
            borderWidth: {
              desktop: { top: 3, right: 3, bottom: 3, left: 3, unit: "px" },
              tablet: { top: "", right: "", bottom: "", left: "", unit: "px" },
              mobile: { top: "", right: "", bottom: "", left: "", unit: "px" }
            },
            borderColor: "#4a6cf7",
            borderRadius: {
              desktop: { top: "", right: "", bottom: "", left: "", unit: "px" },
              tablet: { top: "", right: "", bottom: "", left: "", unit: "px" },
              mobile: { top: "", right: "", bottom: "", left: "", unit: "px" }
            },
            boxShadow: {
              enable: false,
              color: "rgba(0, 0, 0, 0.1)",
              horizontal: 0,
              vertical: 0,
              blur: 0,
              spread: 0,
              position: "outset"
            }
          };
          break;
        case "style4":
          newAttributes = {
            tableBackgroundColor: "#f8f9fa",
            headerBackgroundColor: "#ffffff",
            tableTextColor: "#333333",
            buttonBackgroundColor: "#333333",
            buttonTextColor: "#ffffff",
            buttonBackgroundHoverColor: "#000000",
            buttonTextHoverColor: "#ffffff",
            ribbonBackgroundColor: "#333333",
            ribbonTextColor: "#ffffff",
            borderStyle: "none",
            borderWidth: {
              desktop: { top: "", right: "", bottom: "", left: "", unit: "px" },
              tablet: { top: "", right: "", bottom: "", left: "", unit: "px" },
              mobile: { top: "", right: "", bottom: "", left: "", unit: "px" }
            },
            borderColor: "#e6e6e6",
            borderRadius: {
              desktop: { top: 16, right: 16, bottom: 16, left: 16, unit: "px" },
              tablet: { top: "", right: "", bottom: "", left: "", unit: "px" },
              mobile: { top: "", right: "", bottom: "", left: "", unit: "px" }
            },
            boxShadow: {
              enable: true,
              color: "rgba(0, 0, 0, 0.08)",
              horizontal: 0,
              vertical: 10,
              blur: 25,
              spread: 0,
              position: "outset"
            }
          };
          break;
        case "minimal":
          newAttributes = {
            tableBackgroundColor: "transparent",
            headerBackgroundColor: "transparent",
            tableTextColor: "#333333",
            buttonBackgroundColor: "transparent",
            buttonTextColor: "#4a6cf7",
            buttonBackgroundHoverColor: "transparent",
            buttonTextHoverColor: "#3151e1",
            ribbonBackgroundColor: "#f8f9fa",
            ribbonTextColor: "#333333",
            borderStyle: "solid",
            borderWidth: {
              desktop: { top: 1, right: 1, bottom: 1, left: 1, unit: "px" },
              tablet: { top: "", right: "", bottom: "", left: "", unit: "px" },
              mobile: { top: "", right: "", bottom: "", left: "", unit: "px" }
            },
            borderColor: "#e6e6e6",
            borderRadius: {
              desktop: { top: "", right: "", bottom: 0, left: 0, unit: "px" },
              tablet: { top: "", right: "", bottom: "", left: "", unit: "px" },
              mobile: { top: "", right: "", bottom: "", left: "", unit: "px" }
            },
            boxShadow: {
              enable: false,
              color: "rgba(0, 0, 0, 0.1)",
              horizontal: 0,
              vertical: 0,
              blur: 0,
              spread: 0,
              position: "outset"
            }
          };
          break;
        default:
          newAttributes = {};
      }
      setAttributes(newAttributes);
    };
    const FontAwesomeControl6 = componentsLoaded ? window.digi.components.FontAwesomeControl : null;
    const generateCSS = () => {
      const activeDevice = localActiveDevice;
      let borderCSS = "";
      if (borderStyle && borderStyle !== "none") {
        borderCSS = `
				border-style: ${borderStyle};
				border-color: ${borderColor || "#e6e6e6"};
				${getDimensionCSS19(borderWidth, "border-width", activeDevice)}
				${getDimensionCSS19(borderRadius, "border-radius", activeDevice)}
			`;
      } else {
        borderCSS = "border: none;";
      }
      let boxShadowCSS = "box-shadow: none;";
      if (boxShadow && boxShadow.enable) {
        const inset = boxShadow.position === "inset" ? "inset " : "";
        boxShadowCSS = `box-shadow: ${inset}${boxShadow.horizontal}px ${boxShadow.vertical}px ${boxShadow.blur}px ${boxShadow.spread}px ${boxShadow.color};`;
      }
      let boxShadowHoverCSS = "";
      if (boxShadowHover && boxShadowHover.enable) {
        const inset = boxShadowHover.position === "inset" ? "inset " : "";
        boxShadowHoverCSS = `box-shadow: ${inset}${boxShadowHover.horizontal}px ${boxShadowHover.vertical}px ${boxShadowHover.blur}px ${boxShadowHover.spread}px ${boxShadowHover.color};`;
      }
      const paddingCSS = `${getDimensionCSS19(padding, "padding", activeDevice)}`;
      const marginCSS = `${getDimensionCSS19(margin, "margin", activeDevice)}`;
      const defaultTitleTypography = {
        fontFamily: "",
        fontSize: { desktop: 24, tablet: 20, mobile: 18 },
        fontSizeUnit: "px",
        fontWeight: "",
        fontStyle: "normal",
        textTransform: "",
        textDecoration: "",
        lineHeight: { desktop: 1.4, tablet: 1.3, mobile: 1.2 },
        lineHeightUnit: "em",
        letterSpacing: { desktop: 0, tablet: 0, mobile: 0 },
        letterSpacingUnit: "px"
      };
      const defaultHeadingTypography = {
        fontFamily: "",
        fontSize: { desktop: 36, tablet: 30, mobile: 26 },
        fontSizeUnit: "px",
        fontWeight: "bold",
        fontStyle: "normal",
        textTransform: "",
        textDecoration: "",
        lineHeight: { desktop: 1.2, tablet: 1.2, mobile: 1.2 },
        lineHeightUnit: "em",
        letterSpacing: { desktop: 0, tablet: 0, mobile: 0 },
        letterSpacingUnit: "px"
      };
      const defaultTextTypography = {
        fontFamily: "",
        fontSize: { desktop: 16, tablet: 15, mobile: 14 },
        fontSizeUnit: "px",
        fontWeight: "",
        fontStyle: "normal",
        textTransform: "",
        textDecoration: "",
        lineHeight: { desktop: 1.6, tablet: 1.5, mobile: 1.4 },
        lineHeightUnit: "em",
        letterSpacing: { desktop: 0, tablet: 0, mobile: 0 },
        letterSpacingUnit: "px"
      };
      const defaultContentTypography = {
        fontFamily: "",
        fontSize: { desktop: 16, tablet: 15, mobile: 14 },
        fontSizeUnit: "px",
        fontWeight: "",
        fontStyle: "normal",
        textTransform: "",
        textDecoration: "",
        lineHeight: { desktop: 1.6, tablet: 1.5, mobile: 1.4 },
        lineHeightUnit: "em",
        letterSpacing: { desktop: 0, tablet: 0, mobile: 0 },
        letterSpacingUnit: "px"
      };
      const defaultButtonTypography = {
        fontFamily: "",
        fontSize: { desktop: 16, tablet: 15, mobile: 14 },
        fontSizeUnit: "px",
        fontWeight: "",
        fontStyle: "normal",
        textTransform: "",
        textDecoration: "",
        lineHeight: { desktop: 1.5, tablet: 1.4, mobile: 1.3 },
        lineHeightUnit: "em",
        letterSpacing: { desktop: 0, tablet: 0, mobile: 0 },
        letterSpacingUnit: "px"
      };
      let titleTypographyCSS = "";
      const actualTitleTypo = titleTypography || defaultTitleTypography;
      if (actualTitleTypo.fontFamily) {
        titleTypographyCSS += `font-family: ${actualTitleTypo.fontFamily};`;
      }
      if (actualTitleTypo.fontSize && actualTitleTypo.fontSize[activeDevice]) {
        titleTypographyCSS += `font-size: ${actualTitleTypo.fontSize[activeDevice]}${actualTitleTypo.fontSizeUnit || "px"};`;
      } else if (defaultTitleTypography.fontSize && defaultTitleTypography.fontSize[activeDevice]) {
        titleTypographyCSS += `font-size: ${defaultTitleTypography.fontSize[activeDevice]}px;`;
      }
      if (actualTitleTypo.fontWeight) {
        titleTypographyCSS += `font-weight: ${actualTitleTypo.fontWeight};`;
      }
      if (actualTitleTypo.fontStyle) {
        titleTypographyCSS += `font-style: ${actualTitleTypo.fontStyle};`;
      }
      if (actualTitleTypo.textTransform) {
        titleTypographyCSS += `text-transform: ${actualTitleTypo.textTransform};`;
      }
      if (actualTitleTypo.textDecoration) {
        titleTypographyCSS += `text-decoration: ${actualTitleTypo.textDecoration};`;
      }
      if (actualTitleTypo.lineHeight && actualTitleTypo.lineHeight[activeDevice]) {
        titleTypographyCSS += `line-height: ${actualTitleTypo.lineHeight[activeDevice]}${actualTitleTypo.lineHeightUnit || "em"};`;
      } else if (defaultTitleTypography.lineHeight && defaultTitleTypography.lineHeight[activeDevice]) {
        titleTypographyCSS += `line-height: ${defaultTitleTypography.lineHeight[activeDevice]}em;`;
      }
      if (actualTitleTypo.letterSpacing && actualTitleTypo.letterSpacing[activeDevice]) {
        titleTypographyCSS += `letter-spacing: ${actualTitleTypo.letterSpacing[activeDevice]}${actualTitleTypo.letterSpacingUnit || "px"};`;
      }
      let priceTypographyCSS = "";
      const actualHeadingTypo = headingTypography || defaultHeadingTypography;
      if (actualHeadingTypo.fontFamily) {
        priceTypographyCSS += `font-family: ${actualHeadingTypo.fontFamily};`;
      }
      if (actualHeadingTypo.fontSize && actualHeadingTypo.fontSize[activeDevice]) {
        priceTypographyCSS += `font-size: ${actualHeadingTypo.fontSize[activeDevice]}${actualHeadingTypo.fontSizeUnit || "px"};`;
      } else if (defaultHeadingTypography.fontSize && defaultHeadingTypography.fontSize[activeDevice]) {
        priceTypographyCSS += `font-size: ${defaultHeadingTypography.fontSize[activeDevice]}px;`;
      }
      if (actualHeadingTypo.fontWeight) {
        priceTypographyCSS += `font-weight: ${actualHeadingTypo.fontWeight};`;
      } else {
        priceTypographyCSS += `font-weight: bold;`;
      }
      if (actualHeadingTypo.fontStyle) {
        priceTypographyCSS += `font-style: ${actualHeadingTypo.fontStyle};`;
      }
      if (actualHeadingTypo.textTransform) {
        priceTypographyCSS += `text-transform: ${actualHeadingTypo.textTransform};`;
      }
      if (actualHeadingTypo.textDecoration) {
        priceTypographyCSS += `text-decoration: ${actualHeadingTypo.textDecoration};`;
      }
      if (actualHeadingTypo.lineHeight && actualHeadingTypo.lineHeight[activeDevice]) {
        priceTypographyCSS += `line-height: ${actualHeadingTypo.lineHeight[activeDevice]}${actualHeadingTypo.lineHeightUnit || "em"};`;
      } else if (defaultHeadingTypography.lineHeight && defaultHeadingTypography.lineHeight[activeDevice]) {
        priceTypographyCSS += `line-height: ${defaultHeadingTypography.lineHeight[activeDevice]}em;`;
      }
      if (actualHeadingTypo.letterSpacing && actualHeadingTypo.letterSpacing[activeDevice]) {
        priceTypographyCSS += `letter-spacing: ${actualHeadingTypo.letterSpacing[activeDevice]}${actualHeadingTypo.letterSpacingUnit || "px"};`;
      }
      let textTypographyCSS = "";
      const actualTextTypo = textTypography || defaultTextTypography;
      if (actualTextTypo.fontFamily) {
        textTypographyCSS += `font-family: ${actualTextTypo.fontFamily};`;
      }
      if (actualTextTypo.fontSize && actualTextTypo.fontSize[activeDevice]) {
        textTypographyCSS += `font-size: ${actualTextTypo.fontSize[activeDevice]}${actualTextTypo.fontSizeUnit || "px"};`;
      } else if (defaultTextTypography.fontSize && defaultTextTypography.fontSize[activeDevice]) {
        textTypographyCSS += `font-size: ${defaultTextTypography.fontSize[activeDevice]}px;`;
      }
      if (actualTextTypo.fontWeight) {
        textTypographyCSS += `font-weight: ${actualTextTypo.fontWeight};`;
      }
      if (actualTextTypo.fontStyle) {
        textTypographyCSS += `font-style: ${actualTextTypo.fontStyle};`;
      }
      if (actualTextTypo.textTransform) {
        textTypographyCSS += `text-transform: ${actualTextTypo.textTransform};`;
      }
      if (actualTextTypo.textDecoration) {
        textTypographyCSS += `text-decoration: ${actualTextTypo.textDecoration};`;
      }
      if (actualTextTypo.lineHeight && actualTextTypo.lineHeight[activeDevice]) {
        textTypographyCSS += `line-height: ${actualTextTypo.lineHeight[activeDevice]}${actualTextTypo.lineHeightUnit || "em"};`;
      } else if (defaultTextTypography.lineHeight && defaultTextTypography.lineHeight[activeDevice]) {
        textTypographyCSS += `line-height: ${defaultTextTypography.lineHeight[activeDevice]}em;`;
      }
      if (actualTextTypo.letterSpacing && actualTextTypo.letterSpacing[activeDevice]) {
        textTypographyCSS += `letter-spacing: ${actualTextTypo.letterSpacing[activeDevice]}${actualTextTypo.letterSpacingUnit || "px"};`;
      }
      let contentTypographyCSS = "";
      const actualContentTypo = contentTypography || defaultContentTypography;
      if (actualContentTypo.fontFamily) {
        contentTypographyCSS += `font-family: ${actualContentTypo.fontFamily};`;
      }
      if (actualContentTypo.fontSize && actualContentTypo.fontSize[activeDevice]) {
        contentTypographyCSS += `font-size: ${actualContentTypo.fontSize[activeDevice]}${actualContentTypo.fontSizeUnit || "px"};`;
      } else if (defaultContentTypography.fontSize && defaultContentTypography.fontSize[activeDevice]) {
        contentTypographyCSS += `font-size: ${defaultContentTypography.fontSize[activeDevice]}px;`;
      }
      if (actualContentTypo.fontWeight) {
        contentTypographyCSS += `font-weight: ${actualContentTypo.fontWeight};`;
      }
      if (actualContentTypo.fontStyle) {
        contentTypographyCSS += `font-style: ${actualContentTypo.fontStyle};`;
      }
      if (actualContentTypo.textTransform) {
        contentTypographyCSS += `text-transform: ${actualContentTypo.textTransform};`;
      }
      if (actualContentTypo.textDecoration) {
        contentTypographyCSS += `text-decoration: ${actualContentTypo.textDecoration};`;
      }
      if (actualContentTypo.lineHeight && actualContentTypo.lineHeight[activeDevice]) {
        contentTypographyCSS += `line-height: ${actualContentTypo.lineHeight[activeDevice]}${actualContentTypo.lineHeightUnit || "em"};`;
      } else if (defaultContentTypography.lineHeight && defaultContentTypography.lineHeight[activeDevice]) {
        contentTypographyCSS += `line-height: ${defaultContentTypography.lineHeight[activeDevice]}em;`;
      }
      if (actualContentTypo.letterSpacing && actualContentTypo.letterSpacing[activeDevice]) {
        contentTypographyCSS += `letter-spacing: ${actualContentTypo.letterSpacing[activeDevice]}${actualContentTypo.letterSpacingUnit || "px"};`;
      }
      let buttonTypographyCSS = "";
      const actualButtonTypo = buttonTypography || defaultButtonTypography;
      if (actualButtonTypo.fontFamily) {
        buttonTypographyCSS += `font-family: ${actualButtonTypo.fontFamily};`;
      }
      if (actualButtonTypo.fontSize && actualButtonTypo.fontSize[activeDevice]) {
        buttonTypographyCSS += `font-size: ${actualButtonTypo.fontSize[activeDevice]}${actualButtonTypo.fontSizeUnit || "px"};`;
      } else if (defaultButtonTypography.fontSize && defaultButtonTypography.fontSize[activeDevice]) {
        buttonTypographyCSS += `font-size: ${defaultButtonTypography.fontSize[activeDevice]}px;`;
      }
      if (actualButtonTypo.fontWeight) {
        buttonTypographyCSS += `font-weight: ${actualButtonTypo.fontWeight};`;
      }
      if (actualButtonTypo.fontStyle) {
        buttonTypographyCSS += `font-style: ${actualButtonTypo.fontStyle};`;
      }
      if (actualButtonTypo.textTransform) {
        buttonTypographyCSS += `text-transform: ${actualButtonTypo.textTransform};`;
      }
      if (actualButtonTypo.textDecoration) {
        buttonTypographyCSS += `text-decoration: ${actualButtonTypo.textDecoration};`;
      }
      if (actualButtonTypo.lineHeight && actualButtonTypo.lineHeight[activeDevice]) {
        buttonTypographyCSS += `line-height: ${actualButtonTypo.lineHeight[activeDevice]}${actualButtonTypo.lineHeightUnit || "em"};`;
      } else if (defaultButtonTypography.lineHeight && defaultButtonTypography.lineHeight[activeDevice]) {
        buttonTypographyCSS += `line-height: ${defaultButtonTypography.lineHeight[activeDevice]}em;`;
      }
      if (actualButtonTypo.letterSpacing && actualButtonTypo.letterSpacing[activeDevice]) {
        buttonTypographyCSS += `letter-spacing: ${actualButtonTypo.letterSpacing[activeDevice]}${actualButtonTypo.letterSpacingUnit || "px"};`;
      }
      const buttonRadiusValue = buttonRadius || 4;
      const buttonPaddingValue = buttonPadding && buttonPadding[activeDevice] ? `${getDimensionCSS19(buttonPadding, "padding", activeDevice)}` : "padding: 10px 20px";
      let buttonBorderCSS = "";
      if (buttonBorderStyle && buttonBorderStyle !== "none") {
        buttonBorderCSS = `
				border-style: ${buttonBorderStyle};
				border-color: ${buttonBorderColor || buttonBackgroundColor || "#4a6cf7"};
				${getDimensionCSS19(buttonBorderWidth, "border-width", activeDevice)}
			`;
      } else {
        buttonBorderCSS = "border: none;";
      }
      let tableSpecificCSS = "";
      switch (tableStyle) {
        case "style1":
          tableSpecificCSS = `
					.${id} .digiblocks-pricing-table {
						text-align: center;
					}
					
					.${id} .digiblocks-pricing-table-header {
						display: flex;
						flex-direction: column;
						gap: 10px;
						padding: 20px;
						border-bottom: 1px solid #e6e6e6;
					}
					
					.${id} .digiblocks-pricing-table-features {
						padding: 20px;
					}
					
					.${id} .digiblocks-pricing-table-footer {
						padding: 20px;
						border-top: 1px solid #e6e6e6;
					}
				`;
          break;
        case "style2":
          tableSpecificCSS = `
					.${id} .digiblocks-pricing-table {
						text-align: center;
						overflow: hidden;
					}
					
					.${id} .digiblocks-pricing-table-header {
						padding: 30px 20px;
						margin: -1px -1px 0 -1px;
						color: #ffffff;
					}
					
					.${id} .digiblocks-pricing-table-title {
						color: #ffffff !important;
					}
					
					.${id} .digiblocks-pricing-table-price {
						color: #ffffff !important;
					}
					
					.${id} .digiblocks-pricing-table-description {
						color: rgba(255, 255, 255, 0.8) !important;
					}
					
					.${id} .digiblocks-pricing-table-features {
						padding: 30px 20px;
					}
					
					.${id} .digiblocks-pricing-table-footer {
						padding: 30px 20px;
					}
					
					.${id} .digiblocks-pricing-table-highlighted {
						transform: scale(1.05);
						z-index: 1;
					}
				`;
          break;
        case "style3":
          tableSpecificCSS = `
					.${id} .digiblocks-pricing-table {
						text-align: center;
					}
					
					.${id} .digiblocks-pricing-table-header {
						padding: 30px 20px;
					}
					
					.${id} .digiblocks-pricing-table-features {
						padding: 20px;
					}
					
					.${id} .digiblocks-pricing-table-footer {
						padding: 30px 20px;
					}
					
					.${id} .digiblocks-pricing-table-highlighted {
						border-top-width: 10px !important;
					}
				`;
          break;
        case "style4":
          tableSpecificCSS = `
					.${id} .digiblocks-pricing-table {
						text-align: center;
						border-radius: 16px;
					}
					
					.${id} .digiblocks-pricing-table-header {
						padding: 40px 20px 20px;
						border-radius: 16px 16px 0 0;
					}
					
					.${id} .digiblocks-pricing-table-price {
						font-size: 3rem;
						line-height: 1;
					}
					
					.${id} .digiblocks-pricing-table-features {
						padding: 20px 30px;
					}
					
					.${id} .digiblocks-pricing-table-footer {
						padding: 20px 20px 40px;
					}
					
					.${id} .digiblocks-pricing-table-button {
						padding: 15px 35px;
						border-radius: 50px;
					}
				`;
          break;
        case "minimal":
          tableSpecificCSS = `
					.${id} .digiblocks-pricing-table {
						text-align: center;
					}
					
					.${id} .digiblocks-pricing-table-header {
						padding: 20px;
						border-bottom: 1px solid #e6e6e6;
					}
					
					.${id} .digiblocks-pricing-table-features {
						padding: 20px;
					}
					
					.${id} .digiblocks-pricing-table-footer {
						padding: 20px;
						border-top: 1px solid #e6e6e6;
					}
					
					.${id} .digiblocks-pricing-table-button {
						background: transparent;
						border: 1px solid #4a6cf7;
						padding: 10px 25px;
					}
					
					.${id} .digiblocks-pricing-table-button:hover {
						background: #f8f9fa;
					}
				`;
          break;
        default:
          tableSpecificCSS = "";
      }
      let ribbonCSS = "";
      if (showRibbon) {
        switch (ribbonStyle) {
          case "corner":
            ribbonCSS = `
						.${id} .digiblocks-pricing-table-ribbon {
							position: absolute;
							top: 0;
							${ribbonPosition === "right" ? "right" : "left"}: 0;
							background: ${ribbonBackgroundColor || "#4a6cf7"};
							color: ${ribbonTextColor || "#ffffff"};
							padding: 5px 10px;
							font-size: 12px;
							font-weight: bold;
							text-transform: uppercase;
							z-index: 2;
							${ribbonPosition === "right" ? "border-radius: 0 0 0 4px;" : "border-radius: 0 0 4px 0;"}
						}
					`;
            break;
          case "banner":
            ribbonCSS = `
						.${id} .digiblocks-pricing-table-highlighted {
							overflow: hidden;
						}

						.${id} .digiblocks-pricing-table-ribbon {
							position: absolute;
							top: 7px;
							${ribbonPosition === "right" ? "right" : "left"}: -24px;
							background: ${ribbonBackgroundColor || "#4a6cf7"};
							color: ${ribbonTextColor || "#ffffff"};
							padding: 5px 30px;
							font-size: 12px;
							font-weight: bold;
							transform: ${ribbonPosition === "right" ? "rotate(45deg)" : "rotate(-45deg)"};
							z-index: 2;
							transform-origin: center center;
						}
					`;
            break;
          case "side":
            ribbonCSS = `
						.${id} .digiblocks-pricing-table-ribbon {
							position: absolute;
							top: 30px;
							${ribbonPosition === "right" ? "right" : "left"}: 0;
							background: ${ribbonBackgroundColor || "#4a6cf7"};
							color: ${ribbonTextColor || "#ffffff"};
							padding: 5px 10px;
							font-size: 12px;
							font-weight: bold;
							${ribbonPosition === "right" ? "border-radius: 4px 0 0 4px;" : "border-radius: 0 4px 4px 0;"}
							z-index: 2;
						}
					`;
            break;
          case "flag":
            ribbonCSS = `
						.${id} .digiblocks-pricing-table-ribbon {
							position: absolute;
							top: 15px;
							${ribbonPosition === "right" ? "right" : "left"}: 15px;
							background: ${ribbonBackgroundColor || "#4a6cf7"};
							color: ${ribbonTextColor || "#ffffff"};
							padding: 8px 15px;
							font-size: 12px;
							font-weight: bold;
							border-radius: 50px;
							z-index: 2;
						}
					`;
            break;
          default:
            ribbonCSS = "";
        }
      }
      return `
			/* Pricing Table Block - ${id} */
			.${id} {
				${marginCSS}
				width: 100%;
				position: relative;
			}
			
			/* Grid container for tables */
			.${id} .digiblocks-pricing-tables-container {
				display: grid;
				gap: 30px;
				grid-template-columns: repeat(${columns}, 1fr);
			}
			
			/* Individual pricing table */
			.${id} .digiblocks-pricing-table {
				display: flex;
				flex-direction: column;
				background-color: ${tableBackgroundColor || "#ffffff"};
				color: ${tableTextColor || "#333333"};
				${borderCSS}
				${boxShadowCSS}
				${paddingCSS}
				position: relative;
				transition: all 0.3s ease;
			}
			
			/* Highlighted table */
			.${id} .digiblocks-pricing-table-highlighted {
				z-index: 1;
			}
			
			/* Hover effect */
			.${id} .digiblocks-pricing-table:hover {
				${boxShadowHover && boxShadowHover.enable ? boxShadowHoverCSS : ""}
			}
			
			/* Header section */
			.${id} .digiblocks-pricing-table-header {
				background-color: ${headerBackgroundColor || "transparent"};
				text-align: center;
			}
			
			/* Icon */
			.${id} .digiblocks-pricing-table-icon {
				display: inline-flex;
				justify-content: center;
			}

			.${id} .digiblocks-pricing-table-icon span {
				display: flex;
			}
			
			.${id} .digiblocks-pricing-table-icon svg {
				width: 50px;
				height: 50px;
			}
			
			${tables.map((table, index) => `
				/* Custom colors for table ${index + 1} */
				.${id} .digiblocks-pricing-table:nth-child(${index + 1}) .digiblocks-pricing-table-icon svg {
					fill: ${table.iconColor || tableTextColor || "#333333"};
					transition: fill 0.3s ease;
				}
				
				.${id} .digiblocks-pricing-table:nth-child(${index + 1}):hover .digiblocks-pricing-table-icon svg {
					fill: ${table.iconHoverColor || table.iconColor || tableTextColor || "#333333"};
				}
			`).join("")}
			
			/* Title */
			.${id} .digiblocks-pricing-table-title {
				margin: 0;
				color: ${tableTextColor || "#333333"};
				${titleTypographyCSS}
			}
			
			/* Price section */
			.${id} .digiblocks-pricing-table-price {
				color: ${tableTextColor || "#333333"};
				${priceTypographyCSS}
			}
			
			.${id} .digiblocks-pricing-table-period {
				${textTypographyCSS}
				opacity: 0.8;
			}
			
			/* Description */
			.${id} .digiblocks-pricing-table-description {
				${textTypographyCSS}
			}
			
			/* Features section */
			.${id} .digiblocks-pricing-table-feature-wrapper {
				display: flex;
				align-items: center;
				justify-content: ${align === "center" ? "center" : align === "right" ? "flex-end" : "space-between"};
				gap: 10px;
			}

			.${id} .digiblocks-pricing-table-feature-item {
				display: flex;
				align-items: center;
				justify-content: ${align === "center" ? "center" : align === "right" ? "flex-end" : "flex-start"};
				gap: 10px;
				${contentTypographyCSS}
			}
			
			.${id} .digiblocks-pricing-table-feature-icon {
				display: inline-flex;
				align-items: center;
			}
			
			.${id} .digiblocks-pricing-table-feature-icon span {
				display: flex;
			}
			
			.${id} .digiblocks-pricing-table-feature-check {
				color: #28a745;
			}
			
			.${id} .digiblocks-pricing-table-feature-cross {
				color: #dc3545;
			}
			
			.${id} .digiblocks-pricing-table-feature-text {
				flex: 1;
			}
			
			.${id} .digiblocks-pricing-table-feature-disabled {
				opacity: 0.5;
				text-decoration: line-through;
			}
			
			/* Footer section */
			.${id} .digiblocks-pricing-table-footer {
				margin-top: auto;
				text-align: center;
			}
			
			/* Button */
			.${id} .digiblocks-pricing-table-button {
				background-color: ${buttonBackgroundColor || "#4a6cf7"};
				color: ${buttonTextColor || "#ffffff"};
				${buttonPaddingValue}
				border-radius: ${buttonRadiusValue}px;
				cursor: pointer;
				display: inline-block;
				text-decoration: none;
				transition: all 0.3s ease;
				${buttonBorderCSS}
				${buttonTypographyCSS}
			}
			
			.${id} .digiblocks-pricing-table-button:hover {
				background-color: ${buttonBackgroundHoverColor || "#3151e1"};
				color: ${buttonTextHoverColor || "#ffffff"};
				${buttonBorderHoverColor ? `border-color: ${buttonBorderHoverColor};` : ""}
			}
			
			/* Ribbon */
			${ribbonCSS}
			
			/* Table-specific styles */
			${tableSpecificCSS}
			
			/* Editor controls */
			.${id} .digiblocks-pricing-table-controls {
				margin-top: 20px;
				margin-bottom: 20px;
				display: flex;
				flex-wrap: wrap;
				gap: 10px;
				justify-content: center;
			}
			
			.${id} .digiblocks-table-item-controls {
				position: absolute;
				top: 5px;
				right: 5px;
				display: flex;
				gap: 5px;
				z-index: 10;
				background: rgba(255, 255, 255, 0.9);
				border-radius: 4px;
				padding: 3px;
			}
			
			.${id} .digiblocks-feature-item-controls {
				display: flex;
				gap: 5px;
			}
			
			.${id} .digiblocks-table-active {
				outline: 2px solid #4a6cf7;
				outline-offset: -2px;
			}
			
			/* Responsive styles */
			@media (max-width: 991px) {
				.${id} .digiblocks-pricing-tables-container {
					grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
				}
				
				.${id} .digiblocks-pricing-table-highlighted {
					transform: none !important;
				}
			}
			
			@media (max-width: 767px) {
				.${id} .digiblocks-pricing-tables-container {
					grid-template-columns: 1fr;
				}
			}

			/* Visibility Controls */
			${visibility.desktop ? `
				@media (min-width: 992px) {
					.${id} {
						opacity: 0.5 !important;
					}
				}
			` : ""}

			${visibility.tablet ? `
				@media (min-width: 768px) and (max-width: 991px) {
					.${id} {
						opacity: 0.5 !important;
					}
				}
			` : ""}

			${visibility.mobile ? `
				@media (max-width: 767px) {
					.${id} {
						opacity: 0.5 !important;
					}
				}
			` : ""}
		`;
    };
    const renderPricingTable = (table, index) => {
      return /* @__PURE__ */ wp.element.createElement(
        "div",
        {
          key: table.id,
          className: `digiblocks-pricing-table ${activeTable === index ? "digiblocks-table-active" : ""} ${table.isHighlighted ? "digiblocks-pricing-table-highlighted" : ""}`,
          onClick: () => setActiveTable(index),
          style: table.backgroundColor ? { backgroundColor: table.backgroundColor } : null
        },
        /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-table-item-controls" }, /* @__PURE__ */ wp.element.createElement(Tooltip6, { text: __24("Move Left", "digiblocks") }, /* @__PURE__ */ wp.element.createElement(
          Button20,
          {
            icon: "arrow-left-alt2",
            isSmall: true,
            onClick: (e) => {
              e.stopPropagation();
              moveTableUp(index);
            },
            disabled: index === 0
          }
        )), /* @__PURE__ */ wp.element.createElement(Tooltip6, { text: __24("Move Right", "digiblocks") }, /* @__PURE__ */ wp.element.createElement(
          Button20,
          {
            icon: "arrow-right-alt2",
            isSmall: true,
            onClick: (e) => {
              e.stopPropagation();
              moveTableDown(index);
            },
            disabled: index === tables.length - 1
          }
        )), /* @__PURE__ */ wp.element.createElement(Tooltip6, { text: __24("Duplicate", "digiblocks") }, /* @__PURE__ */ wp.element.createElement(
          Button20,
          {
            icon: "admin-page",
            isSmall: true,
            onClick: (e) => {
              e.stopPropagation();
              duplicateTable(index);
            }
          }
        )), /* @__PURE__ */ wp.element.createElement(Tooltip6, { text: __24("Remove", "digiblocks") }, /* @__PURE__ */ wp.element.createElement(
          Button20,
          {
            icon: "trash",
            isSmall: true,
            onClick: (e) => {
              e.stopPropagation();
              removeTable(index);
            },
            disabled: tables.length <= 1
          }
        ))),
        showRibbon && table.isHighlighted && /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-pricing-table-ribbon" }, /* @__PURE__ */ wp.element.createElement(
          RichText19,
          {
            tagName: "span",
            value: table.ribbonText,
            onChange: (value) => updateTableAttribute(index, "ribbonText", value),
            placeholder: __24("Popular", "digiblocks")
          }
        )),
        /* @__PURE__ */ wp.element.createElement(
          "div",
          {
            className: "digiblocks-pricing-table-header",
            style: table.headerBackgroundColor ? { backgroundColor: table.headerBackgroundColor } : null
          },
          table.iconValue && table.iconValue.svg && /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-pricing-table-icon" }, /* @__PURE__ */ wp.element.createElement(
            "span",
            {
              dangerouslySetInnerHTML: {
                __html: table.iconValue.svg
              }
            }
          )),
          /* @__PURE__ */ wp.element.createElement(
            RichText19,
            {
              tagName: "h3",
              className: "digiblocks-pricing-table-title",
              value: table.title,
              onChange: (value) => updateTableAttribute(index, "title", value),
              placeholder: __24("Plan Title", "digiblocks"),
              style: table.textColor ? { color: table.textColor } : null
            }
          ),
          /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-pricing-table-price", style: table.textColor ? { color: table.textColor } : null }, /* @__PURE__ */ wp.element.createElement(
            RichText19,
            {
              tagName: "span",
              className: "digiblocks-pricing-table-amount",
              value: table.price,
              onChange: (value) => updateTableAttribute(index, "price", value),
              placeholder: __24("$0", "digiblocks")
            }
          ), /* @__PURE__ */ wp.element.createElement(
            RichText19,
            {
              tagName: "span",
              className: "digiblocks-pricing-table-period",
              value: table.period,
              onChange: (value) => updateTableAttribute(index, "period", value),
              placeholder: __24("/month", "digiblocks")
            }
          )),
          /* @__PURE__ */ wp.element.createElement(
            RichText19,
            {
              tagName: "div",
              className: "digiblocks-pricing-table-description",
              value: table.description,
              onChange: (value) => updateTableAttribute(index, "description", value),
              placeholder: __24("Short description", "digiblocks"),
              style: table.textColor ? { color: table.textColor } : null
            }
          )
        ),
        /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-pricing-table-features" }, table.features.map((feature, featureIndex) => /* @__PURE__ */ wp.element.createElement(
          "div",
          {
            key: `feature-${featureIndex}`,
            className: "digiblocks-pricing-table-feature-wrapper"
          },
          /* @__PURE__ */ wp.element.createElement(
            "div",
            {
              className: `digiblocks-pricing-table-feature-item ${!feature.enabled ? "digiblocks-pricing-table-feature-disabled" : ""}`
            },
            /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-pricing-table-feature-icon" }, feature.enabled ? /* @__PURE__ */ wp.element.createElement("span", { className: "digiblocks-pricing-table-feature-check" }, /* @__PURE__ */ wp.element.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 512 512", width: "16", height: "16", fill: "currentColor" }, /* @__PURE__ */ wp.element.createElement("path", { d: "M470.6 105.4c12.5 12.5 12.5 32.8 0 45.3l-256 256c-12.5 12.5-32.8 12.5-45.3 0l-128-128c-12.5-12.5-12.5-32.8 0-45.3s32.8-12.5 45.3 0L192 338.7 425.4 105.4c12.5-12.5 32.8-12.5 45.3 0z" }))) : /* @__PURE__ */ wp.element.createElement("span", { className: "digiblocks-pricing-table-feature-cross" }, /* @__PURE__ */ wp.element.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 320 512", width: "16", height: "16", fill: "currentColor" }, /* @__PURE__ */ wp.element.createElement("path", { d: "M310.6 150.6c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0L160 210.7 54.6 105.4c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3L114.7 256 9.4 361.4c-12.5 12.5-12.5 32.8 0 45.3s32.8 12.5 45.3 0L160 301.3 265.4 406.6c12.5 12.5 32.8 12.5 45.3 0s12.5-32.8 0-45.3L205.3 256 310.6 150.6z" })))),
            /* @__PURE__ */ wp.element.createElement(
              RichText19,
              {
                tagName: "div",
                className: "digiblocks-pricing-table-feature-text",
                value: feature.text,
                onChange: (value) => updateFeature(index, featureIndex, "text", value),
                placeholder: __24("Feature", "digiblocks"),
                style: table.textColor ? { color: table.textColor } : null
              }
            )
          ),
          /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-feature-item-controls" }, /* @__PURE__ */ wp.element.createElement(Tooltip6, { text: feature.enabled ? __24("Disable", "digiblocks") : __24("Enable", "digiblocks") }, /* @__PURE__ */ wp.element.createElement(
            Button20,
            {
              icon: feature.enabled ? "visibility" : "hidden",
              isSmall: true,
              onClick: (e) => {
                e.stopPropagation();
                toggleFeatureEnabled(index, featureIndex);
              }
            }
          )), /* @__PURE__ */ wp.element.createElement(Tooltip6, { text: __24("Remove", "digiblocks") }, /* @__PURE__ */ wp.element.createElement(
            Button20,
            {
              icon: "trash",
              isSmall: true,
              onClick: (e) => {
                e.stopPropagation();
                removeFeature(index, featureIndex);
              },
              disabled: table.features.length <= 1
            }
          )))
        )), /* @__PURE__ */ wp.element.createElement(
          Button20,
          {
            variant: "secondary",
            isSmall: true,
            onClick: (e) => {
              e.stopPropagation();
              addFeature(index);
            },
            style: { width: "100%", marginTop: "10px" }
          },
          __24("Add Feature", "digiblocks")
        )),
        /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-pricing-table-footer" }, /* @__PURE__ */ wp.element.createElement(
          "div",
          {
            className: "digiblocks-pricing-table-button",
            style: table.buttonBackgroundColor ? {
              backgroundColor: table.buttonBackgroundColor,
              color: table.buttonTextColor || buttonTextColor || "#ffffff"
            } : null
          },
          /* @__PURE__ */ wp.element.createElement(
            RichText19,
            {
              tagName: "span",
              value: table.buttonText,
              onChange: (value) => updateTableAttribute(index, "buttonText", value),
              placeholder: __24("Get Started", "digiblocks")
            }
          )
        ))
      );
    };
    const renderTabContent = () => {
      switch (activeTab) {
        case "options":
          return /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(
            TabPanelBody22,
            {
              tab: "options",
              name: "layout",
              title: __24("Layout", "digiblocks"),
              initialOpen: true
            },
            /* @__PURE__ */ wp.element.createElement(
              RangeControl20,
              {
                label: __24("Columns", "digiblocks"),
                value: columns,
                onChange: (value) => setAttributes({ columns: value }),
                min: 1,
                max: 4,
                step: 1,
                __next40pxDefaultSize: true,
                __nextHasNoMarginBottom: true
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              SelectControl22,
              {
                label: __24("Table Style", "digiblocks"),
                value: tableStyle,
                options: tableStyleOptions,
                onChange: (value) => applyTableStyle(value),
                __next40pxDefaultSize: true,
                __nextHasNoMarginBottom: true
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              ToggleGroupControl20,
              {
                label: __24("Alignment", "digiblocks"),
                value: align,
                onChange: (value) => setAttributes({ align: value }),
                isBlock: true,
                __next40pxDefaultSize: true,
                __nextHasNoMarginBottom: true
              },
              /* @__PURE__ */ wp.element.createElement(
                ToggleGroupControlOption20,
                {
                  value: "left",
                  label: __24("Left", "digiblocks")
                }
              ),
              /* @__PURE__ */ wp.element.createElement(
                ToggleGroupControlOption20,
                {
                  value: "center",
                  label: __24("Center", "digiblocks")
                }
              ),
              /* @__PURE__ */ wp.element.createElement(
                ToggleGroupControlOption20,
                {
                  value: "right",
                  label: __24("Right", "digiblocks")
                }
              )
            )
          ), /* @__PURE__ */ wp.element.createElement(
            TabPanelBody22,
            {
              tab: "options",
              name: "ribbon",
              title: __24("Ribbon", "digiblocks"),
              initialOpen: false
            },
            /* @__PURE__ */ wp.element.createElement(
              ToggleControl21,
              {
                label: __24("Show Ribbon", "digiblocks"),
                checked: showRibbon,
                onChange: (value) => setAttributes({ showRibbon: value }),
                help: __24("Display a ribbon on highlighted tables.", "digiblocks"),
                __nextHasNoMarginBottom: true
              }
            ),
            showRibbon && /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(
              SelectControl22,
              {
                label: __24("Ribbon Style", "digiblocks"),
                value: ribbonStyle,
                options: ribbonStyleOptions,
                onChange: (value) => setAttributes({ ribbonStyle: value }),
                __next40pxDefaultSize: true,
                __nextHasNoMarginBottom: true
              }
            ), /* @__PURE__ */ wp.element.createElement(
              SelectControl22,
              {
                label: __24("Ribbon Position", "digiblocks"),
                value: ribbonPosition,
                options: ribbonPositionOptions,
                onChange: (value) => setAttributes({ ribbonPosition: value }),
                __next40pxDefaultSize: true,
                __nextHasNoMarginBottom: true
              }
            ), /* @__PURE__ */ wp.element.createElement(
              PanelColorSettings20,
              {
                title: __24(
                  "Ribbon Colors",
                  "digiblocks"
                ),
                initialOpen: true,
                enableAlpha: true,
                colorSettings: [
                  {
                    value: ribbonBackgroundColor,
                    onChange: (value) => setAttributes({
                      ribbonBackgroundColor: value
                    }),
                    label: __24(
                      "Background Color",
                      "digiblocks"
                    )
                  },
                  {
                    value: ribbonTextColor,
                    onChange: (value) => setAttributes({
                      ribbonTextColor: value
                    }),
                    label: __24(
                      "Text Color",
                      "digiblocks"
                    )
                  }
                ]
              }
            ))
          ), /* @__PURE__ */ wp.element.createElement(
            TabPanelBody22,
            {
              tab: "options",
              name: "table-config",
              title: __24("Table Settings", "digiblocks"),
              initialOpen: false
            },
            tables[activeTable] && /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement("h3", null, __24("Editing Table", "digiblocks"), " #", activeTable + 1), /* @__PURE__ */ wp.element.createElement(
              ToggleControl21,
              {
                label: __24("Highlight This Table", "digiblocks"),
                checked: tables[activeTable].isHighlighted,
                onChange: (value) => updateTableAttribute(activeTable, "isHighlighted", value),
                help: __24("Apply special styling to highlight this table.", "digiblocks"),
                __nextHasNoMarginBottom: true
              }
            ), !componentsLoaded ? /* @__PURE__ */ wp.element.createElement("div", { style: { textAlign: "center", padding: "20px 0" } }, /* @__PURE__ */ wp.element.createElement("div", { className: "components-spinner" }), /* @__PURE__ */ wp.element.createElement("p", null, __24("Loading icon selector...", "digiblocks"))) : /* @__PURE__ */ wp.element.createElement(
              FontAwesomeControl6,
              {
                label: __24("Select Icon", "digiblocks"),
                value: tables[activeTable].iconValue,
                onChange: (value) => updateTableAttribute(activeTable, "iconValue", value)
              }
            ), tables[activeTable] && tables[activeTable].iconValue && /* @__PURE__ */ wp.element.createElement(
              PanelColorSettings20,
              {
                title: __24(
                  "Icon Colors",
                  "digiblocks"
                ),
                initialOpen: false,
                enableAlpha: true,
                colorSettings: [
                  {
                    value: tables[activeTable].iconColor,
                    onChange: (value) => updateTableAttribute(activeTable, "iconColor", value),
                    label: __24(
                      "Icon Color",
                      "digiblocks"
                    )
                  },
                  {
                    value: tables[activeTable].iconHoverColor,
                    onChange: (value) => updateTableAttribute(activeTable, "iconHoverColor", value),
                    label: __24(
                      "Icon Hover Color",
                      "digiblocks"
                    )
                  }
                ]
              }
            ), /* @__PURE__ */ wp.element.createElement("div", { style: { marginTop: "15px", marginBottom: "10px" } }, /* @__PURE__ */ wp.element.createElement("p", null, /* @__PURE__ */ wp.element.createElement("strong", null, __24("Button Link", "digiblocks"))), /* @__PURE__ */ wp.element.createElement(
              LinkControl7,
              {
                value: tables[activeTable].buttonUrl ? {
                  url: tables[activeTable].buttonUrl,
                  opensInNewTab: !!tables[activeTable].buttonOpenInNewTab,
                  rel: tables[activeTable].buttonRel || ""
                } : void 0,
                settings: [
                  {
                    id: "opensInNewTab",
                    title: __24("Open in new tab", "digiblocks")
                  },
                  {
                    id: "rel",
                    title: __24("Add noopener noreferrer", "digiblocks")
                  }
                ],
                onChange: (newLink) => {
                  if (newLink && newLink.url) {
                    const newTables = [...tables];
                    newTables[activeTable] = {
                      ...newTables[activeTable],
                      buttonUrl: newLink.url,
                      buttonOpenInNewTab: !!newLink.opensInNewTab,
                      buttonRel: newLink.rel || ""
                    };
                    setAttributes({ tables: newTables });
                  }
                },
                onRemove: () => {
                  const newTables = [...tables];
                  newTables[activeTable] = {
                    ...newTables[activeTable],
                    buttonUrl: "",
                    buttonOpenInNewTab: false,
                    buttonRel: ""
                  };
                  setAttributes({ tables: newTables });
                },
                suggestionsQuery: {
                  type: "post",
                  subtype: "any"
                },
                forceIsEditingLink: !tables[activeTable].buttonUrl
              }
            )))
          ));
        case "style":
          return /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(
            TabPanelBody22,
            {
              tab: "style",
              name: "colors",
              title: __24("Colors", "digiblocks"),
              initialOpen: true
            },
            /* @__PURE__ */ wp.element.createElement(
              PanelColorSettings20,
              {
                title: __24(
                  "Table Colors",
                  "digiblocks"
                ),
                initialOpen: true,
                enableAlpha: true,
                colorSettings: [
                  {
                    value: tableBackgroundColor,
                    onChange: (value) => setAttributes({
                      tableBackgroundColor: value
                    }),
                    label: __24(
                      "Background Color",
                      "digiblocks"
                    )
                  },
                  {
                    value: headerBackgroundColor,
                    onChange: (value) => setAttributes({
                      headerBackgroundColor: value
                    }),
                    label: __24(
                      "Header Background",
                      "digiblocks"
                    )
                  },
                  {
                    value: tableTextColor,
                    onChange: (value) => setAttributes({
                      tableTextColor: value
                    }),
                    label: __24(
                      "Text Color",
                      "digiblocks"
                    )
                  }
                ]
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              PanelColorSettings20,
              {
                title: __24(
                  "Button Colors",
                  "digiblocks"
                ),
                initialOpen: false,
                enableAlpha: true,
                colorSettings: [
                  {
                    value: buttonBackgroundColor,
                    onChange: (value) => setAttributes({
                      buttonBackgroundColor: value
                    }),
                    label: __24(
                      "Background Color",
                      "digiblocks"
                    )
                  },
                  {
                    value: buttonTextColor,
                    onChange: (value) => setAttributes({
                      buttonTextColor: value
                    }),
                    label: __24(
                      "Text Color",
                      "digiblocks"
                    )
                  },
                  {
                    value: buttonBackgroundHoverColor,
                    onChange: (value) => setAttributes({
                      buttonBackgroundHoverColor: value
                    }),
                    label: __24(
                      "Hover Background",
                      "digiblocks"
                    )
                  },
                  {
                    value: buttonTextHoverColor,
                    onChange: (value) => setAttributes({
                      buttonTextHoverColor: value
                    }),
                    label: __24(
                      "Hover Text",
                      "digiblocks"
                    )
                  }
                ]
              }
            )
          ), /* @__PURE__ */ wp.element.createElement(
            TabPanelBody22,
            {
              tab: "style",
              name: "typography",
              title: __24("Typography", "digiblocks"),
              initialOpen: false
            },
            /* @__PURE__ */ wp.element.createElement(
              TypographyControl15,
              {
                label: __24(
                  "Title Typography",
                  "digiblocks"
                ),
                value: titleTypography,
                onChange: (value) => setAttributes({
                  titleTypography: value
                }),
                defaults: {
                  fontSize: { desktop: 24, tablet: 20, mobile: 18 },
                  fontSizeUnit: "px",
                  lineHeight: { desktop: 1.4, tablet: 1.3, mobile: 1.2 },
                  lineHeightUnit: "em"
                }
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              TypographyControl15,
              {
                label: __24(
                  "Price Typography",
                  "digiblocks"
                ),
                value: headingTypography,
                onChange: (value) => setAttributes({
                  headingTypography: value
                }),
                defaults: {
                  fontSize: { desktop: 36, tablet: 30, mobile: 26 },
                  fontSizeUnit: "px",
                  lineHeight: { desktop: 1.2, tablet: 1.2, mobile: 1.2 },
                  lineHeightUnit: "em"
                }
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              TypographyControl15,
              {
                label: __24(
                  "Description Typography",
                  "digiblocks"
                ),
                value: textTypography,
                onChange: (value) => setAttributes({
                  textTypography: value
                }),
                defaults: {
                  fontSize: { desktop: 16, tablet: 15, mobile: 14 },
                  fontSizeUnit: "px",
                  lineHeight: { desktop: 1.6, tablet: 1.5, mobile: 1.4 },
                  lineHeightUnit: "em"
                }
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              TypographyControl15,
              {
                label: __24(
                  "Features Typography",
                  "digiblocks"
                ),
                value: contentTypography,
                onChange: (value) => setAttributes({
                  contentTypography: value
                }),
                defaults: {
                  fontSize: { desktop: 16, tablet: 15, mobile: 14 },
                  fontSizeUnit: "px",
                  lineHeight: { desktop: 1.6, tablet: 1.5, mobile: 1.4 },
                  lineHeightUnit: "em"
                }
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              TypographyControl15,
              {
                label: __24(
                  "Button Typography",
                  "digiblocks"
                ),
                value: buttonTypography,
                onChange: (value) => setAttributes({
                  buttonTypography: value
                }),
                defaults: {
                  fontSize: { desktop: 16, tablet: 15, mobile: 14 },
                  fontSizeUnit: "px",
                  lineHeight: { desktop: 1.5, tablet: 1.4, mobile: 1.3 },
                  lineHeightUnit: "em"
                }
              }
            )
          ), /* @__PURE__ */ wp.element.createElement(
            TabPanelBody22,
            {
              tab: "style",
              name: "borders",
              title: __24("Borders & Shadow", "digiblocks"),
              initialOpen: false
            },
            /* @__PURE__ */ wp.element.createElement(
              SelectControl22,
              {
                label: __24("Border Style", "digiblocks"),
                value: borderStyle,
                options: borderStyleOptions,
                onChange: (value) => setAttributes({ borderStyle: value }),
                __next40pxDefaultSize: true,
                __nextHasNoMarginBottom: true
              }
            ),
            borderStyle !== "none" && /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(
              ResponsiveControl21,
              {
                label: __24("Border Width", "digiblocks")
              },
              /* @__PURE__ */ wp.element.createElement(
                DimensionControl20,
                {
                  values: borderWidth && borderWidth[localActiveDevice] ? borderWidth[localActiveDevice] : {
                    top: 1,
                    right: 1,
                    bottom: 1,
                    left: 1,
                    unit: "px"
                  },
                  onChange: (value) => setAttributes({
                    borderWidth: {
                      ...borderWidth,
                      [localActiveDevice]: value
                    }
                  })
                }
              )
            ), /* @__PURE__ */ wp.element.createElement(
              PanelColorSettings20,
              {
                title: __24("Border Color", "digiblocks"),
                initialOpen: true,
                enableAlpha: true,
                colorSettings: [
                  {
                    value: borderColor,
                    onChange: (value) => setAttributes({ borderColor: value }),
                    label: __24("Border Color", "digiblocks")
                  }
                ]
              }
            )),
            /* @__PURE__ */ wp.element.createElement(
              ResponsiveControl21,
              {
                label: __24("Border Radius", "digiblocks")
              },
              /* @__PURE__ */ wp.element.createElement(
                DimensionControl20,
                {
                  values: borderRadius && borderRadius[localActiveDevice] ? borderRadius[localActiveDevice] : {
                    top: 8,
                    right: 8,
                    bottom: 8,
                    left: 8,
                    unit: "px"
                  },
                  onChange: (value) => setAttributes({
                    borderRadius: {
                      ...borderRadius,
                      [localActiveDevice]: value
                    }
                  }),
                  units: [
                    { label: "px", value: "px" },
                    { label: "%", value: "%" }
                  ]
                }
              )
            ),
            /* @__PURE__ */ wp.element.createElement(
              BoxShadowControl19,
              {
                normalValue: boxShadow,
                hoverValue: boxShadowHover,
                onNormalChange: (value) => setAttributes({ boxShadow: value }),
                onHoverChange: (value) => setAttributes({ boxShadowHover: value })
              }
            )
          ), /* @__PURE__ */ wp.element.createElement(
            TabPanelBody22,
            {
              tab: "style",
              name: "button-style",
              title: __24("Button Style", "digiblocks"),
              initialOpen: false
            },
            /* @__PURE__ */ wp.element.createElement(
              RangeControl20,
              {
                label: __24("Border Radius", "digiblocks"),
                value: buttonRadius,
                onChange: (value) => setAttributes({ buttonRadius: value }),
                min: 0,
                max: 50,
                step: 1,
                __next40pxDefaultSize: true,
                __nextHasNoMarginBottom: true
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              SelectControl22,
              {
                label: __24("Border Style", "digiblocks"),
                value: buttonBorderStyle,
                options: borderStyleOptions,
                onChange: (value) => setAttributes({ buttonBorderStyle: value }),
                __next40pxDefaultSize: true,
                __nextHasNoMarginBottom: true
              }
            ),
            buttonBorderStyle !== "none" && /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(
              ResponsiveControl21,
              {
                label: __24("Border Width", "digiblocks")
              },
              /* @__PURE__ */ wp.element.createElement(
                DimensionControl20,
                {
                  values: buttonBorderWidth && buttonBorderWidth[localActiveDevice] ? buttonBorderWidth[localActiveDevice] : {
                    top: 1,
                    right: 1,
                    bottom: 1,
                    left: 1,
                    unit: "px"
                  },
                  onChange: (value) => setAttributes({
                    buttonBorderWidth: {
                      ...buttonBorderWidth,
                      [localActiveDevice]: value
                    }
                  })
                }
              )
            ), /* @__PURE__ */ wp.element.createElement(
              PanelColorSettings20,
              {
                title: __24("Border Colors", "digiblocks"),
                initialOpen: true,
                enableAlpha: true,
                colorSettings: [
                  {
                    value: buttonBorderColor,
                    onChange: (value) => setAttributes({ buttonBorderColor: value }),
                    label: __24("Border Color", "digiblocks")
                  },
                  {
                    value: buttonBorderHoverColor,
                    onChange: (value) => setAttributes({ buttonBorderHoverColor: value }),
                    label: __24("Border Hover Color", "digiblocks")
                  }
                ]
              }
            )),
            /* @__PURE__ */ wp.element.createElement(
              ResponsiveControl21,
              {
                label: __24("Button Padding", "digiblocks")
              },
              /* @__PURE__ */ wp.element.createElement(
                DimensionControl20,
                {
                  values: buttonPadding && buttonPadding[localActiveDevice] ? buttonPadding[localActiveDevice] : {
                    top: 10,
                    right: 20,
                    bottom: 10,
                    left: 20,
                    unit: "px"
                  },
                  onChange: (value) => setAttributes({
                    buttonPadding: {
                      ...buttonPadding,
                      [localActiveDevice]: value
                    }
                  })
                }
              )
            )
          ), /* @__PURE__ */ wp.element.createElement(
            TabPanelBody22,
            {
              tab: "style",
              name: "spacing",
              title: __24("Spacing", "digiblocks"),
              initialOpen: false
            },
            /* @__PURE__ */ wp.element.createElement(
              ResponsiveControl21,
              {
                label: __24("Padding", "digiblocks")
              },
              /* @__PURE__ */ wp.element.createElement(
                DimensionControl20,
                {
                  values: padding && padding[localActiveDevice] ? padding[localActiveDevice] : {
                    top: 0,
                    right: 0,
                    bottom: 0,
                    left: 0,
                    unit: "px"
                  },
                  onChange: (value) => setAttributes({
                    padding: {
                      ...padding,
                      [localActiveDevice]: value
                    }
                  })
                }
              )
            ),
            /* @__PURE__ */ wp.element.createElement(
              ResponsiveControl21,
              {
                label: __24("Margin", "digiblocks")
              },
              /* @__PURE__ */ wp.element.createElement(
                DimensionControl20,
                {
                  values: margin && margin[localActiveDevice] ? margin[localActiveDevice] : {
                    top: 0,
                    right: 0,
                    bottom: 30,
                    left: 0,
                    unit: "px"
                  },
                  onChange: (value) => setAttributes({
                    margin: {
                      ...margin,
                      [localActiveDevice]: value
                    }
                  })
                }
              )
            )
          ));
        case "advanced":
          return /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(
            TabPanelBody22,
            {
              tab: "advanced",
              name: "animation",
              title: __24("Animation", "digiblocks"),
              initialOpen: true
            },
            /* @__PURE__ */ wp.element.createElement(
              SelectControl22,
              {
                label: __24(
                  "Animation Effect",
                  "digiblocks"
                ),
                value: animation,
                options: animationOptions,
                onChange: (value) => setAttributes({
                  animation: value
                }),
                __next40pxDefaultSize: true,
                __nextHasNoMarginBottom: true
              }
            ),
            animation && animation !== "none" && /* @__PURE__ */ wp.element.createElement("div", { style: { marginTop: "10px" } }, /* @__PURE__ */ wp.element.createElement(
              Button20,
              {
                variant: "secondary",
                isSecondary: true,
                onClick: handlePreviewClick,
                style: { width: "100%" }
              },
              __24("Preview Animation", "digiblocks")
            ))
          ), /* @__PURE__ */ wp.element.createElement(
            TabPanelBody22,
            {
              tab: "advanced",
              name: "visibility",
              title: __24("Visibility", "digiblocks"),
              initialOpen: false
            },
            /* @__PURE__ */ wp.element.createElement("div", { className: "components-base-control__help", style: {
              padding: "12px",
              backgroundColor: "#f0f6fc",
              border: "1px solid #c3ddfd",
              borderRadius: "4px",
              marginBottom: "16px"
            } }, /* @__PURE__ */ wp.element.createElement("strong", null, __24("Editor Note:", "digiblocks")), /* @__PURE__ */ wp.element.createElement("br", null), __24("Hidden elements appear with reduced opacity in the editor for easy editing. Visibility changes only take effect on the frontend.", "digiblocks")),
            /* @__PURE__ */ wp.element.createElement(
              ToggleControl21,
              {
                label: __24("Hide on Desktop", "digiblocks"),
                checked: visibility.desktop,
                onChange: (value) => setAttributes({
                  visibility: {
                    ...visibility,
                    desktop: value
                  }
                }),
                __nextHasNoMarginBottom: true
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              ToggleControl21,
              {
                label: __24("Hide on Tablet", "digiblocks"),
                checked: visibility.tablet,
                onChange: (value) => setAttributes({
                  visibility: {
                    ...visibility,
                    tablet: value
                  }
                }),
                __nextHasNoMarginBottom: true
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              ToggleControl21,
              {
                label: __24("Hide on Mobile", "digiblocks"),
                checked: visibility.mobile,
                onChange: (value) => setAttributes({
                  visibility: {
                    ...visibility,
                    mobile: value
                  }
                }),
                __nextHasNoMarginBottom: true
              }
            )
          ), /* @__PURE__ */ wp.element.createElement(
            TabPanelBody22,
            {
              tab: "advanced",
              name: "additional",
              title: __24("Additional", "digiblocks"),
              initialOpen: false
            },
            /* @__PURE__ */ wp.element.createElement("div", { className: "components-base-control html-anchor-control" }, /* @__PURE__ */ wp.element.createElement("div", { className: "components-base-control__field" }, /* @__PURE__ */ wp.element.createElement("label", { className: "components-base-control__label", htmlFor: "html-anchor" }, __24("HTML anchor", "digiblocks")), /* @__PURE__ */ wp.element.createElement(
              "input",
              {
                className: "components-text-control__input",
                type: "text",
                id: "html-anchor",
                value: anchor || "",
                onChange: (e) => setAttributes({ anchor: e.target.value }),
                "aria-describedby": "html-anchor-help",
                autoCapitalize: "none",
                autoComplete: "off"
              }
            )), /* @__PURE__ */ wp.element.createElement("p", { id: "html-anchor-help", className: "components-base-control__help" }, __24(`Enter a word or two \u2014 without spaces \u2014 to make a unique web address just for this block, called an "anchor". Then, you'll be able to link directly to this section of your page.`, "digiblocks"), " ", /* @__PURE__ */ wp.element.createElement(
              "a",
              {
                className: "components-external-link",
                href: "https://wordpress.org/documentation/article/page-jumps/",
                target: "_blank",
                rel: "external noreferrer noopener"
              },
              /* @__PURE__ */ wp.element.createElement("span", { className: "components-external-link__contents" }, __24("Learn more about anchors", "digiblocks")),
              /* @__PURE__ */ wp.element.createElement("span", { className: "components-external-link__icon", "aria-label": "(opens in a new tab)" }, "\u2197")
            ))),
            /* @__PURE__ */ wp.element.createElement("div", { className: "components-base-control" }, /* @__PURE__ */ wp.element.createElement("div", { className: "components-base-control__field" }, /* @__PURE__ */ wp.element.createElement("label", { className: "components-base-control__label", htmlFor: "additional-css-classes" }, __24("Additional CSS class(es)", "digiblocks")), /* @__PURE__ */ wp.element.createElement(
              "input",
              {
                className: "components-text-control__input",
                type: "text",
                id: "additional-css-classes",
                value: customClasses || "",
                onChange: (e) => setAttributes({ customClasses: e.target.value }),
                "aria-describedby": "additional-css-classes-help",
                autoComplete: "off"
              }
            )), /* @__PURE__ */ wp.element.createElement("p", { id: "additional-css-classes-help", className: "components-base-control__help" }, __24("Separate multiple classes with spaces.", "digiblocks")))
          ));
        default:
          return null;
      }
    };
    const blockProps = useBlockProps39({
      className: `digiblocks-pricing-table-block ${id} ${customClasses || ""}`,
      id: anchor || null
      // Set the anchor as ID if provided
    });
    return /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(InspectorControls21, null, /* @__PURE__ */ wp.element.createElement(
      CustomTabPanel21,
      {
        tabs: tabList,
        activeTab,
        onSelect: setActiveTab
      },
      renderTabContent()
    )), /* @__PURE__ */ wp.element.createElement("style", { dangerouslySetInnerHTML: { __html: generateCSS() } }), /* @__PURE__ */ wp.element.createElement("div", { ...blockProps }, /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-pricing-tables-container" }, tables.map((table, index) => renderPricingTable(table, index))), /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-pricing-table-controls" }, /* @__PURE__ */ wp.element.createElement(
      Button20,
      {
        variant: "primary",
        icon: "plus",
        onClick: addTable
      },
      __24("Add Pricing Table", "digiblocks")
    ))));
  };
  var edit_default21 = PricingTableEdit;

  // blocks/pricing-table/save.js
  var { __: __25 } = window.wp.i18n;
  var { useBlockProps: useBlockProps40, RichText: RichText20 } = window.wp.blockEditor;
  var PricingTableSave = ({ attributes }) => {
    const {
      id,
      anchor,
      customClasses,
      tables,
      columns,
      tableStyle,
      align,
      animation,
      showRibbon,
      ribbonStyle,
      ribbonPosition
    } = attributes;
    const blockClasses = [
      "digiblocks-pricing-table-block",
      id,
      `align-${align}`,
      animation !== "none" ? `animate-${animation}` : "",
      tableStyle ? `style-${tableStyle}` : "",
      customClasses || ""
    ].filter(Boolean).join(" ");
    return /* @__PURE__ */ wp.element.createElement("div", { className: blockClasses, id: anchor || null }, /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-pricing-tables-container" }, tables.map((table) => /* @__PURE__ */ wp.element.createElement(
      "div",
      {
        key: table.id,
        className: `digiblocks-pricing-table ${table.isHighlighted ? "digiblocks-pricing-table-highlighted" : ""}`,
        style: table.backgroundColor ? { backgroundColor: table.backgroundColor } : null
      },
      showRibbon && table.isHighlighted && /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-pricing-table-ribbon" }, /* @__PURE__ */ wp.element.createElement(RichText20.Content, { value: table.ribbonText })),
      /* @__PURE__ */ wp.element.createElement(
        "div",
        {
          className: "digiblocks-pricing-table-header",
          style: table.headerBackgroundColor ? { backgroundColor: table.headerBackgroundColor } : null
        },
        table.iconValue && table.iconValue.svg && /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-pricing-table-icon" }, /* @__PURE__ */ wp.element.createElement(
          "span",
          {
            dangerouslySetInnerHTML: {
              __html: table.iconValue.svg
            }
          }
        )),
        /* @__PURE__ */ wp.element.createElement(
          RichText20.Content,
          {
            tagName: "h3",
            className: "digiblocks-pricing-table-title",
            value: table.title,
            style: table.textColor ? { color: table.textColor } : null
          }
        ),
        /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-pricing-table-price", style: table.textColor ? { color: table.textColor } : null }, /* @__PURE__ */ wp.element.createElement(
          RichText20.Content,
          {
            tagName: "span",
            className: "digiblocks-pricing-table-amount",
            value: table.price
          }
        ), /* @__PURE__ */ wp.element.createElement(
          RichText20.Content,
          {
            tagName: "span",
            className: "digiblocks-pricing-table-period",
            value: table.period
          }
        )),
        /* @__PURE__ */ wp.element.createElement(
          RichText20.Content,
          {
            tagName: "div",
            className: "digiblocks-pricing-table-description",
            value: table.description,
            style: table.textColor ? { color: table.textColor } : null
          }
        )
      ),
      /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-pricing-table-features" }, table.features.map((feature, featureIndex) => /* @__PURE__ */ wp.element.createElement(
        "div",
        {
          key: `feature-${featureIndex}`,
          className: `digiblocks-pricing-table-feature-item ${!feature.enabled ? "digiblocks-pricing-table-feature-disabled" : ""}`
        },
        /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-pricing-table-feature-icon" }, feature.enabled ? /* @__PURE__ */ wp.element.createElement("span", { className: "digiblocks-pricing-table-feature-check" }, /* @__PURE__ */ wp.element.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 512 512", width: "16", height: "16", fill: "currentColor" }, /* @__PURE__ */ wp.element.createElement("path", { d: "M470.6 105.4c12.5 12.5 12.5 32.8 0 45.3l-256 256c-12.5 12.5-32.8 12.5-45.3 0l-128-128c-12.5-12.5-12.5-32.8 0-45.3s32.8-12.5 45.3 0L192 338.7 425.4 105.4c12.5-12.5 32.8-12.5 45.3 0z" }))) : /* @__PURE__ */ wp.element.createElement("span", { className: "digiblocks-pricing-table-feature-cross" }, /* @__PURE__ */ wp.element.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 320 512", width: "16", height: "16", fill: "currentColor" }, /* @__PURE__ */ wp.element.createElement("path", { d: "M310.6 150.6c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0L160 210.7 54.6 105.4c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3L114.7 256 9.4 361.4c-12.5 12.5-12.5 32.8 0 45.3s32.8 12.5 45.3 0L160 301.3 265.4 406.6c12.5 12.5 32.8 12.5 45.3 0s12.5-32.8 0-45.3L205.3 256 310.6 150.6z" })))),
        /* @__PURE__ */ wp.element.createElement(
          RichText20.Content,
          {
            tagName: "div",
            className: "digiblocks-pricing-table-feature-text",
            value: feature.text,
            style: table.textColor ? { color: table.textColor } : null
          }
        )
      ))),
      /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-pricing-table-footer" }, /* @__PURE__ */ wp.element.createElement(
        "a",
        {
          href: table.buttonUrl || "#",
          className: "digiblocks-pricing-table-button",
          style: table.buttonBackgroundColor ? {
            backgroundColor: table.buttonBackgroundColor,
            color: table.buttonTextColor || "#ffffff"
          } : null,
          target: table.buttonOpenInNewTab ? "_blank" : void 0,
          rel: table.buttonOpenInNewTab ? `noopener noreferrer ${table.buttonRel || ""}`.trim() : table.buttonRel || void 0
        },
        /* @__PURE__ */ wp.element.createElement(
          RichText20.Content,
          {
            tagName: "span",
            value: table.buttonText
          }
        )
      ))
    ))));
  };
  var save_default21 = PricingTableSave;

  // blocks/separator/edit.js
  var { __: __26 } = window.wp.i18n;
  var {
    useBlockProps: useBlockProps41,
    InspectorControls: InspectorControls22,
    PanelColorSettings: PanelColorSettings21,
    BlockControls: BlockControls5,
    AlignmentToolbar: AlignmentToolbar5
  } = window.wp.blockEditor;
  var {
    ToggleControl: ToggleControl22,
    SelectControl: SelectControl23,
    RangeControl: RangeControl21,
    Button: Button21,
    TextControl: TextControl13,
    __experimentalToggleGroupControl: ToggleGroupControl21,
    __experimentalToggleGroupControlOption: ToggleGroupControlOption21,
    BaseControl: BaseControl5
  } = window.wp.components;
  var { useState: useState22, useEffect: useEffect22, useRef: useRef19 } = window.wp.element;
  var { useBlockId: useBlockId22, animations: animations20, animationPreview: animationPreview20 } = digi.utils;
  var { tabIcons: tabIcons22 } = digi.icons;
  var { ResponsiveControl: ResponsiveControl22, TypographyControl: TypographyControl16, CustomTabPanel: CustomTabPanel22, TabPanelBody: TabPanelBody23 } = digi.components;
  var SeparatorStylePreview = ({ style, primaryColor, secondaryColor, isSelected, onClick }) => {
    const containerStyle = {
      display: "inline-flex",
      flexDirection: "column",
      width: "60px",
      height: "60px",
      margin: "5px",
      border: `1px solid ${isSelected ? "#007cba" : "#ddd"}`,
      backgroundColor: isSelected ? "rgba(0,124,186,0.1)" : "white",
      borderRadius: "4px",
      cursor: "pointer",
      overflow: "hidden",
      transition: "all 0.2s ease"
    };
    const labelStyle = {
      textAlign: "center",
      fontSize: "10px",
      padding: "3px 0",
      fontWeight: isSelected ? "500" : "normal",
      borderBottom: `1px solid ${isSelected ? "#e0e0e0" : "transparent"}`,
      backgroundColor: isSelected ? "rgba(0,124,186,0.05)" : "transparent"
    };
    const previewStyle = {
      flex: 1,
      display: "flex",
      justifyContent: "center",
      alignItems: "center",
      padding: "8px"
    };
    let previewContent = null;
    switch (style) {
      case "line":
        previewContent = /* @__PURE__ */ wp.element.createElement("div", { style: { width: "100%", height: "3px", backgroundColor: primaryColor, borderRadius: "1px" } });
        break;
      case "dashed":
        previewContent = /* @__PURE__ */ wp.element.createElement("div", { style: {
          width: "100%",
          height: "2px",
          backgroundImage: `linear-gradient(to right, ${primaryColor} 50%, transparent 50%)`,
          backgroundSize: "8px 2px",
          backgroundRepeat: "repeat-x",
          borderRadius: "1px"
        } });
        break;
      case "dotted":
        previewContent = /* @__PURE__ */ wp.element.createElement("div", { style: {
          width: "100%",
          height: "3px",
          backgroundImage: `radial-gradient(circle, ${primaryColor} 1px, transparent 1px)`,
          backgroundSize: "4px 3px",
          backgroundPosition: "center",
          backgroundRepeat: "repeat-x"
        } });
        break;
      case "double":
        previewContent = /* @__PURE__ */ wp.element.createElement("div", { style: { display: "flex", flexDirection: "column", width: "100%", gap: "2px" } }, /* @__PURE__ */ wp.element.createElement("div", { style: { height: "1px", backgroundColor: primaryColor, borderRadius: "1px" } }), /* @__PURE__ */ wp.element.createElement("div", { style: { height: "1px", backgroundColor: primaryColor, borderRadius: "1px" } }));
        break;
      case "gradient":
        previewContent = /* @__PURE__ */ wp.element.createElement("div", { style: {
          width: "100%",
          height: "3px",
          background: `linear-gradient(to right, ${secondaryColor || "transparent"}, ${primaryColor}, ${secondaryColor || "transparent"})`,
          borderRadius: "1px"
        } });
        break;
      case "shadow":
        previewContent = /* @__PURE__ */ wp.element.createElement("div", { style: {
          width: "100%",
          height: "2px",
          backgroundColor: primaryColor,
          boxShadow: `0 1px 2px rgba(0,0,0,0.3)`,
          borderRadius: "1px"
        } });
        break;
      case "wave":
        previewContent = /* @__PURE__ */ wp.element.createElement("svg", { height: "20", width: "100%", viewBox: "0 0 100 20", preserveAspectRatio: "none" }, /* @__PURE__ */ wp.element.createElement("path", { d: "M0,10 C20,5 30,15 50,10 C70,5 80,15 100,10 L100,20 L0,20 Z", fill: primaryColor }));
        break;
      case "zigzag":
        previewContent = /* @__PURE__ */ wp.element.createElement("svg", { height: "10", width: "100%", viewBox: "0 0 100 10", preserveAspectRatio: "none" }, /* @__PURE__ */ wp.element.createElement(
          "polyline",
          {
            points: "0,0 10,10 20,0 30,10 40,0 50,10 60,0 70,10 80,0 90,10 100,0",
            fill: "none",
            stroke: primaryColor,
            strokeWidth: "2"
          }
        ));
        break;
      case "slant":
        previewContent = /* @__PURE__ */ wp.element.createElement("svg", { height: "10", width: "100%", viewBox: "0 0 100 10", preserveAspectRatio: "none" }, /* @__PURE__ */ wp.element.createElement("polygon", { points: "0,0 100,10 100,0", fill: primaryColor }));
        break;
      default:
        previewContent = /* @__PURE__ */ wp.element.createElement("div", { style: { width: "100%", height: "3px", backgroundColor: primaryColor, borderRadius: "1px" } });
    }
    const getDisplayName = () => {
      switch (style) {
        case "line":
          return "Line";
        case "dashed":
          return "Dashed";
        case "dotted":
          return "Dotted";
        case "double":
          return "Double";
        case "gradient":
          return "Gradient";
        case "shadow":
          return "Shadow";
        case "wave":
          return "Wave";
        case "zigzag":
          return "Zigzag";
        case "slant":
          return "Slant";
        default:
          return style.charAt(0).toUpperCase() + style.slice(1);
      }
    };
    return /* @__PURE__ */ wp.element.createElement("div", { style: containerStyle, onClick }, /* @__PURE__ */ wp.element.createElement("div", { style: labelStyle }, getDisplayName()), /* @__PURE__ */ wp.element.createElement("div", { style: previewStyle }, previewContent));
  };
  var SeparatorEdit = ({ attributes, setAttributes, clientId }) => {
    const {
      id,
      anchor,
      visibility,
      customClasses,
      contentType,
      content,
      align,
      iconValue,
      separatorStyle,
      primaryColor,
      secondaryColor,
      width,
      widthUnit,
      height,
      heightUnit,
      borderRadius,
      margin,
      animation,
      typography,
      iconSize,
      gap,
      textColor
    } = attributes;
    useBlockId22(id, clientId, setAttributes);
    const [localActiveDevice, setLocalActiveDevice] = useState22(window.digi.responsiveState.activeDevice);
    useEffect22(() => {
      const unsubscribe = window.digi.responsiveState.subscribe((device) => {
        setLocalActiveDevice(device);
      });
      return unsubscribe;
    }, []);
    const [activeTab, setActiveTab] = useState22("options");
    const [componentsLoaded, setComponentsLoaded] = useState22(false);
    useEffect22(() => {
      const checkComponents = () => {
        if (window.digi && window.digi.components && window.digi.components.FontAwesomeControl) {
          setComponentsLoaded(true);
          return true;
        }
        return false;
      };
      if (!checkComponents()) {
        const timeout = setTimeout(() => {
          if (checkComponents()) {
            clearTimeout(timeout);
          }
        }, 500);
        return () => clearTimeout(timeout);
      }
    }, []);
    const setIconValue = (newIcon) => {
      setAttributes({ iconValue: newIcon });
    };
    const previewTimeoutRef = useRef19(null);
    useEffect22(() => {
      if (animation && animation !== "none") {
        const timeoutId = setTimeout(() => {
          animationPreview20(id, animation, animations20, previewTimeoutRef);
        }, 100);
        return () => clearTimeout(timeoutId);
      }
    }, [animation]);
    const handlePreviewClick = () => {
      animationPreview20(id, animation, animations20, previewTimeoutRef);
    };
    const widthUnitOptions = [
      { label: "px", value: "px" },
      { label: "%", value: "%" }
    ];
    const heightUnitOptions = [
      { label: "px", value: "px" },
      { label: "%", value: "%" }
    ];
    const contentTypeOptions = [
      { label: __26("None", "digiblocks"), value: "none" },
      { label: __26("Text", "digiblocks"), value: "text" },
      { label: __26("Icon", "digiblocks"), value: "icon" }
    ];
    const animationOptions = [
      { label: __26("None", "digiblocks"), value: "none" },
      ...Object.keys(animations20).map((animation2) => ({
        label: animation2.replace(/-/g, " ").replace(/\b\w/g, (l) => l.toUpperCase()),
        value: animation2
      }))
    ];
    const tabList = [
      {
        name: "options",
        title: __26("Options", "digiblocks"),
        icon: tabIcons22.optionsIcon
      },
      {
        name: "style",
        title: __26("Style", "digiblocks"),
        icon: tabIcons22.styleIcon
      },
      {
        name: "advanced",
        title: __26("Advanced", "digiblocks"),
        icon: tabIcons22.advancedIcon
      }
    ];
    const FontAwesomeControl6 = componentsLoaded ? window.digi.components.FontAwesomeControl : null;
    const renderStyleSVG = () => {
      switch (separatorStyle) {
        case "wave":
          return /* @__PURE__ */ wp.element.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 1200 120", preserveAspectRatio: "none" }, /* @__PURE__ */ wp.element.createElement("path", { d: "M321.39,56.44c58-10.79,114.16-30.13,172-41.86,82.39-16.72,168.19-17.73,250.45-.39C823.78,31,906.67,72,985.66,92.83c70.05,18.48,146.53,26.09,214.34,3V0H0V27.35A600.21,600.21,0,0,0,321.39,56.44Z", fill: primaryColor }));
        case "zigzag":
          return /* @__PURE__ */ wp.element.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 1200 120", preserveAspectRatio: "none" }, /* @__PURE__ */ wp.element.createElement("path", { d: "M0,0 L100,120 L200,0 L300,120 L400,0 L500,120 L600,0 L700,120 L800,0 L900,120 L1000,0 L1100,120 L1200,0", fill: primaryColor }));
        case "slant":
          return /* @__PURE__ */ wp.element.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 1200 120", preserveAspectRatio: "none" }, /* @__PURE__ */ wp.element.createElement("path", { d: "M1200 120L0 16.48 0 0 1200 0 1200 120z", fill: primaryColor }));
        default:
          return null;
      }
    };
    const generateCSS = () => {
      const activeDevice = window.digi.responsiveState.activeDevice;
      let separatorBaseStyles = "";
      const marginValue = margin[activeDevice] || { top: 30, bottom: 30, unit: "px" };
      const currentWidth = width[activeDevice] || 100;
      const currentHeight = height[activeDevice] || 3;
      let separatorSpecificStyles = "";
      let beforeAfterStyles = "";
      switch (separatorStyle) {
        case "line":
          separatorBaseStyles = `
                    background-color: ${primaryColor};
                    height: ${currentHeight}${heightUnit};
                    width: ${currentWidth}${widthUnit};
                    border-radius: ${borderRadius[activeDevice] || 0}px;
                `;
          break;
        case "dashed":
          separatorBaseStyles = `
                    border-top: ${currentHeight}${heightUnit} dashed ${primaryColor};
                    width: ${currentWidth}${widthUnit};
                `;
          break;
        case "dotted":
          separatorBaseStyles = `
                    border-top: ${currentHeight}${heightUnit} dotted ${primaryColor};
                    width: ${currentWidth}${widthUnit};
                `;
          break;
        case "double":
          separatorBaseStyles = `
                    border-top: ${Math.max(1, Math.floor(currentHeight / 3))}${heightUnit} solid ${primaryColor};
                    border-bottom: ${Math.max(1, Math.floor(currentHeight / 3))}${heightUnit} solid ${primaryColor};
                    height: ${currentHeight}${heightUnit};
                    width: ${currentWidth}${widthUnit};
                `;
          break;
        case "gradient":
          separatorBaseStyles = `
                    background: linear-gradient(90deg, ${secondaryColor || "transparent"} 0%, ${primaryColor} 50%, ${secondaryColor || "transparent"} 100%);
                    height: ${currentHeight}${heightUnit};
                    width: ${currentWidth}${widthUnit};
                    border-radius: ${borderRadius[activeDevice] || 0}px;
                `;
          break;
        case "shadow":
          separatorBaseStyles = `
                    height: ${currentHeight}${heightUnit};
                    width: ${currentWidth}${widthUnit};
                    background-color: ${primaryColor};
                    border-radius: ${borderRadius[activeDevice] || 0}px;
                    box-shadow: 0 ${Math.max(2, currentHeight / 2)}px ${Math.max(4, currentHeight)}px rgba(0,0,0,0.2);
                `;
          break;
        case "wave":
        case "zigzag":
        case "slant":
          separatorBaseStyles = `
                    width: 100%;
                    height: 100%;
                    position: relative;
                `;
          separatorSpecificStyles = `
                    .${id} .digiblocks-separator-shape {
                        width: 100%;
                        height: 100%;
                    }
                    .${id} .digiblocks-separator-shape svg {
                        width: 100%;
                        height: 100%;
                        display: block;
                    }
                `;
          break;
      }
      let contentStyles = "";
      if ((contentType === "text" || contentType === "icon") && !["wave", "zigzag", "slant"].includes(separatorStyle)) {
        const currentGap = gap[activeDevice] || 15;
        contentStyles = `
                .${id} .digiblocks-separator-content {
                    position: relative;
                    z-index: 2;
                    display: inline-flex;
                    align-items: center;
                    justify-content: center;
                    background-color: #fff;
                    padding: 0 ${currentGap}px;
                    ${contentType === "text" && textColor ? `color: ${textColor};` : ""}
                }
                
                .${id}.digiblocks-separator-has-content .digiblocks-separator-line {
                    position: absolute;
                    top: 50%;
                    left: 0;
                    right: 0;
                    z-index: 1;
                    transform: translateY(-50%);
                }
            `;
      }
      if (contentType === "icon" && iconValue && iconValue.svg) {
        contentStyles += `
                .${id} .digiblocks-separator-icon {
                    display: flex;
                    align-items: center;
                    justify-content: center;
                }
                
                .${id} .digiblocks-separator-icon svg {
                    width: ${iconSize[activeDevice] || 24}px;
                    height: ${iconSize[activeDevice] || 24}px;
                    fill: ${textColor || primaryColor};
                }
            `;
      }
      if (contentType === "text" && typography) {
        let typographyStyles = "";
        if (typography.fontFamily) {
          typographyStyles += `font-family: ${typography.fontFamily};`;
        }
        if (typography.fontSize && typography.fontSize[activeDevice]) {
          typographyStyles += `font-size: ${typography.fontSize[activeDevice]}${typography.fontSizeUnit || "px"};`;
        }
        if (typography.fontWeight) {
          typographyStyles += `font-weight: ${typography.fontWeight};`;
        }
        if (typography.fontStyle) {
          typographyStyles += `font-style: ${typography.fontStyle};`;
        }
        if (typography.textTransform) {
          typographyStyles += `text-transform: ${typography.textTransform};`;
        }
        if (typography.lineHeight && typography.lineHeight[activeDevice]) {
          typographyStyles += `line-height: ${typography.lineHeight[activeDevice]}${typography.lineHeightUnit || "em"};`;
        }
        if (typography.letterSpacing && typography.letterSpacing[activeDevice]) {
          typographyStyles += `letter-spacing: ${typography.letterSpacing[activeDevice]}${typography.letterSpacingUnit || "px"};`;
        }
        contentStyles += `
                .${id} .digiblocks-separator-text {
                    ${typographyStyles}
                }
            `;
      }
      let animationCSS = "";
      if (animation && animation !== "none" && animations20[animation]) {
        animationCSS = animations20[animation].keyframes;
      }
      let alignmentStyles = "";
      switch (align) {
        case "center":
          alignmentStyles = "margin-left: auto; margin-right: auto;";
          break;
        case "right":
          alignmentStyles = "margin-left: auto; margin-right: 0;";
          break;
        default:
          alignmentStyles = "margin-left: 0; margin-right: auto;";
          break;
      }
      return `
            /* Separator Block - ${id} */
            .${id} {
                margin-top: ${marginValue.top}${marginValue.unit};
                margin-bottom: ${marginValue.bottom}${marginValue.unit};
                display: flex;
                align-items: center;
                justify-content: ${align === "center" ? "center" : align === "right" ? "flex-end" : "flex-start"};
                position: relative;
                clear: both;
                width: 100%;
            }
            
            .${id} .digiblocks-separator-container {
                position: relative;
                display: flex;
                flex-direction: column;
                align-items: ${align === "center" ? "center" : align === "right" ? "flex-end" : "flex-start"};
                width: 100%;
            }
            
            .${id} .digiblocks-separator-line {
                ${separatorBaseStyles}
                ${alignmentStyles}
            }
            
            ${separatorSpecificStyles}
            ${contentStyles}
            ${animationCSS}
            
            /* Responsive styles will be handled by media queries */
            @media (max-width: 991px) {
                .${id} {
                    margin-top: ${margin.tablet ? margin.tablet.top + (margin.tablet.unit || "px") : marginValue.top + marginValue.unit};
                    margin-bottom: ${margin.tablet ? margin.tablet.bottom + (margin.tablet.unit || "px") : marginValue.bottom + marginValue.unit};
                }
                
                .${id} .digiblocks-separator-line {
                    width: ${width.tablet ? width.tablet + widthUnit : currentWidth + widthUnit};
                    height: ${height.tablet ? height.tablet + heightUnit : currentHeight + heightUnit};
                    ${borderRadius.tablet ? `border-radius: ${borderRadius.tablet}px;` : ""}
                }
                
                ${contentType === "icon" ? `
                .${id} .digiblocks-separator-icon svg {
                    width: ${iconSize.tablet || 20}px;
                    height: ${iconSize.tablet || 20}px;
                }` : ""}
            }
            
            @media (max-width: 767px) {
                .${id} {
                    margin-top: ${margin.mobile ? margin.mobile.top + (margin.mobile.unit || "px") : marginValue.top + marginValue.unit};
                    margin-bottom: ${margin.mobile ? margin.mobile.bottom + (margin.mobile.unit || "px") : marginValue.bottom + marginValue.unit};
                }
                
                .${id} .digiblocks-separator-line {
                    width: ${width.mobile ? width.mobile + widthUnit : currentWidth + widthUnit};
                    height: ${height.mobile ? height.mobile + heightUnit : currentHeight + heightUnit};
                    ${borderRadius.mobile ? `border-radius: ${borderRadius.mobile}px;` : ""}
                }
                
                ${contentType === "icon" ? `
                .${id} .digiblocks-separator-icon svg {
                    width: ${iconSize.mobile || 16}px;
                    height: ${iconSize.mobile || 16}px;
                }` : ""}
            }

			/* Visibility Controls */
			${visibility.desktop ? `
				@media (min-width: 992px) {
					.${id} {
						opacity: 0.5 !important;
					}
				}
			` : ""}

			${visibility.tablet ? `
				@media (min-width: 768px) and (max-width: 991px) {
					.${id} {
						opacity: 0.5 !important;
					}
				}
			` : ""}

			${visibility.mobile ? `
				@media (max-width: 767px) {
					.${id} {
						opacity: 0.5 !important;
					}
				}
			` : ""}
        `;
    };
    const renderIcon = () => {
      if (!iconValue || !iconValue.svg || iconValue.svg.trim() === "") {
        return null;
      }
      return /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-separator-icon" }, /* @__PURE__ */ wp.element.createElement(
        "span",
        {
          dangerouslySetInnerHTML: {
            __html: iconValue.svg
          }
        }
      ));
    };
    const renderSeparatorStyleGrid = () => {
      const separatorStyleOptions = [
        { label: "Line", value: "line" },
        { label: "Dashed", value: "dashed" },
        { label: "Dotted", value: "dotted" },
        { label: "Double", value: "double" },
        { label: "Gradient", value: "gradient" },
        { label: "Shadow", value: "shadow" },
        { label: "Wave", value: "wave" },
        { label: "Zigzag", value: "zigzag" },
        { label: "Slant", value: "slant" }
      ];
      const containerStyle = {
        display: "flex",
        flexWrap: "wrap",
        gap: "4px",
        justifyContent: "center",
        margin: "0 -5px",
        maxHeight: "200px",
        overflow: "auto",
        padding: "4px 0",
        border: "1px solid #e0e0e0",
        borderRadius: "4px",
        backgroundColor: "#f9f9f9"
      };
      return /* @__PURE__ */ wp.element.createElement("div", { style: containerStyle }, separatorStyleOptions.map((option) => /* @__PURE__ */ wp.element.createElement(
        SeparatorStylePreview,
        {
          key: option.value,
          style: option.value,
          primaryColor: primaryColor || "#1e73be",
          secondaryColor,
          isSelected: separatorStyle === option.value,
          onClick: () => {
            if (["wave", "zigzag", "slant"].includes(option.value) && contentType !== "none") {
              setAttributes({
                separatorStyle: option.value,
                contentType: "none"
              });
            } else {
              setAttributes({ separatorStyle: option.value });
            }
          }
        }
      )));
    };
    const renderTabContent = () => {
      switch (activeTab) {
        case "options":
          return /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement("div", { className: "components-panel__body is-opened" }, /* @__PURE__ */ wp.element.createElement(
            BaseControl5,
            {
              label: __26("Separator Style", "digiblocks"),
              id: "separator-style-selector",
              __nextHasNoMarginBottom: true
            },
            renderSeparatorStyleGrid()
          ), !["wave", "zigzag", "slant"].includes(separatorStyle) ? /* @__PURE__ */ wp.element.createElement(
            ToggleGroupControl21,
            {
              label: __26("Content Type", "digiblocks"),
              value: contentType,
              onChange: (value) => setAttributes({ contentType: value }),
              isBlock: true,
              __next40pxDefaultSize: true,
              __nextHasNoMarginBottom: true
            },
            contentTypeOptions.map((option) => /* @__PURE__ */ wp.element.createElement(
              ToggleGroupControlOption21,
              {
                key: option.value,
                value: option.value,
                label: option.label
              }
            ))
          ) : /* @__PURE__ */ wp.element.createElement("div", { className: "components-notice is-warning", style: { margin: "0 0 16px 0" } }, /* @__PURE__ */ wp.element.createElement("div", { className: "components-notice__content" }, __26("Content is not available with this separator style.", "digiblocks"))), contentType === "text" && /* @__PURE__ */ wp.element.createElement(
            TextControl13,
            {
              label: __26("Text Content", "digiblocks"),
              value: content,
              onChange: (value) => setAttributes({ content: value }),
              __next40pxDefaultSize: true,
              __nextHasNoMarginBottom: true
            }
          ), contentType === "icon" && /* @__PURE__ */ wp.element.createElement("div", { style: { marginTop: "15px" } }, !componentsLoaded ? /* @__PURE__ */ wp.element.createElement("div", { style: { textAlign: "center", padding: "20px 0" } }, /* @__PURE__ */ wp.element.createElement("div", { className: "components-spinner" }), /* @__PURE__ */ wp.element.createElement("p", null, __26("Loading icon selector...", "digiblocks"))) : /* @__PURE__ */ wp.element.createElement(
            FontAwesomeControl6,
            {
              label: __26("Select Icon", "digiblocks"),
              value: iconValue,
              onChange: setIconValue
            }
          ))));
        case "style":
          return /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(
            TabPanelBody23,
            {
              tab: "style",
              name: "colors",
              title: __26("Colors", "digiblocks"),
              initialOpen: true
            },
            /* @__PURE__ */ wp.element.createElement(
              PanelColorSettings21,
              {
                title: __26("Separator Colors", "digiblocks"),
                initialOpen: true,
                enableAlpha: true,
                colorSettings: [
                  {
                    value: primaryColor,
                    onChange: (value) => setAttributes({ primaryColor: value }),
                    label: __26("Primary Color", "digiblocks")
                  },
                  ...separatorStyle === "gradient" ? [
                    {
                      value: secondaryColor,
                      onChange: (value) => setAttributes({ secondaryColor: value }),
                      label: __26("Secondary Color", "digiblocks")
                    }
                  ] : [],
                  ...contentType !== "none" ? [
                    {
                      value: textColor,
                      onChange: (value) => setAttributes({ textColor: value }),
                      label: contentType === "text" ? __26("Text Color", "digiblocks") : __26("Icon Color", "digiblocks")
                    }
                  ] : []
                ]
              }
            )
          ), /* @__PURE__ */ wp.element.createElement(
            TabPanelBody23,
            {
              tab: "style",
              name: "dimensions",
              title: __26("Dimensions", "digiblocks"),
              initialOpen: false
            },
            !["wave", "zigzag", "slant"].includes(separatorStyle) && /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-size-type-field-tabs" }, /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-responsive-control-inner" }, /* @__PURE__ */ wp.element.createElement("div", { className: "components-base-control" }, /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-range-control digiblocks-size-type-field-tabs" }, /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-control__header" }, /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-responsive-label-wrap" }, /* @__PURE__ */ wp.element.createElement("span", { className: "digiblocks-control-label" }, __26("Width", "digiblocks")), /* @__PURE__ */ wp.element.createElement(
              "button",
              {
                type: "button",
                "aria-label": __26(`Switch to ${window.digi.responsiveState.getNextDevice()} view`, "digiblocks"),
                className: `components-button digiblocks-responsive-common-button digiblocks-device-${localActiveDevice}`,
                onClick: () => window.digi.responsiveState.toggleDevice()
              },
              window.digi.icons.deviceIcons[localActiveDevice]
            )), /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-range-control__actions digiblocks-control__actions" }, /* @__PURE__ */ wp.element.createElement("div", { tabIndex: "0" }, /* @__PURE__ */ wp.element.createElement(
              "button",
              {
                type: "button",
                disabled: width[localActiveDevice] === 100,
                className: "components-button digiblocks-reset is-secondary is-small",
                onClick: () => setAttributes({
                  width: {
                    ...width,
                    [localActiveDevice]: 100
                  }
                })
              },
              /* @__PURE__ */ wp.element.createElement("span", { className: "dashicon dashicons dashicons-image-rotate" })
            )), /* @__PURE__ */ wp.element.createElement(
              ToggleGroupControl21,
              {
                value: widthUnit,
                onChange: (value) => setAttributes({ widthUnit: value }),
                isBlock: true,
                isSmall: true,
                hideLabelFromVision: true,
                "aria-label": __26("Width Unit", "digiblocks"),
                __next40pxDefaultSize: true,
                __nextHasNoMarginBottom: true
              },
              widthUnitOptions.map((option) => /* @__PURE__ */ wp.element.createElement(
                ToggleGroupControlOption21,
                {
                  key: option.value,
                  value: option.value,
                  label: option.label
                }
              ))
            ))), /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-range-control__mobile-controls" }, /* @__PURE__ */ wp.element.createElement(
              RangeControl21,
              {
                value: width[localActiveDevice],
                onChange: (value) => setAttributes({
                  width: {
                    ...width,
                    [localActiveDevice]: value
                  }
                }),
                min: 1,
                max: widthUnit === "%" ? 100 : 1e3,
                step: 1,
                __next40pxDefaultSize: true,
                __nextHasNoMarginBottom: true
              }
            )))))), /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-size-type-field-tabs" }, /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-responsive-control-inner" }, /* @__PURE__ */ wp.element.createElement("div", { className: "components-base-control" }, /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-range-control digiblocks-size-type-field-tabs" }, /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-control__header" }, /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-responsive-label-wrap" }, /* @__PURE__ */ wp.element.createElement("span", { className: "digiblocks-control-label" }, __26("Height", "digiblocks")), /* @__PURE__ */ wp.element.createElement(
              "button",
              {
                type: "button",
                "aria-label": __26(`Switch to ${window.digi.responsiveState.getNextDevice()} view`, "digiblocks"),
                className: `components-button digiblocks-responsive-common-button digiblocks-device-${localActiveDevice}`,
                onClick: () => window.digi.responsiveState.toggleDevice()
              },
              window.digi.icons.deviceIcons[localActiveDevice]
            )), /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-range-control__actions digiblocks-control__actions" }, /* @__PURE__ */ wp.element.createElement("div", { tabIndex: "0" }, /* @__PURE__ */ wp.element.createElement(
              "button",
              {
                type: "button",
                disabled: height[localActiveDevice] === 3,
                className: "components-button digiblocks-reset is-secondary is-small",
                onClick: () => setAttributes({
                  height: {
                    ...height,
                    [localActiveDevice]: 3
                  }
                })
              },
              /* @__PURE__ */ wp.element.createElement("span", { className: "dashicon dashicons dashicons-image-rotate" })
            )), /* @__PURE__ */ wp.element.createElement(
              ToggleGroupControl21,
              {
                value: heightUnit,
                onChange: (value) => setAttributes({ heightUnit: value }),
                isBlock: true,
                isSmall: true,
                hideLabelFromVision: true,
                "aria-label": __26("Height Unit", "digiblocks"),
                __next40pxDefaultSize: true,
                __nextHasNoMarginBottom: true
              },
              heightUnitOptions.map((option) => /* @__PURE__ */ wp.element.createElement(
                ToggleGroupControlOption21,
                {
                  key: option.value,
                  value: option.value,
                  label: option.label
                }
              ))
            ))), /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-range-control__mobile-controls" }, /* @__PURE__ */ wp.element.createElement(
              RangeControl21,
              {
                value: height[localActiveDevice],
                onChange: (value) => setAttributes({
                  height: {
                    ...height,
                    [localActiveDevice]: value
                  }
                }),
                min: 1,
                max: heightUnit === "%" ? 20 : 100,
                step: 1,
                __next40pxDefaultSize: true,
                __nextHasNoMarginBottom: true
              }
            ))))))),
            ["line", "gradient", "shadow"].includes(separatorStyle) && /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-responsive-control" }, /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-control__header" }, /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-responsive-label-wrap" }, /* @__PURE__ */ wp.element.createElement("span", { className: "digiblocks-control-label" }, __26("Border Radius", "digiblocks")), /* @__PURE__ */ wp.element.createElement(
              "button",
              {
                type: "button",
                "aria-label": __26(`Switch to ${window.digi.responsiveState.getNextDevice()} view`, "digiblocks"),
                className: `components-button digiblocks-responsive-common-button digiblocks-device-${localActiveDevice}`,
                onClick: () => window.digi.responsiveState.toggleDevice()
              },
              window.digi.icons.deviceIcons[localActiveDevice]
            ))), /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-responsive-control-content" }, /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-unit-control" }, /* @__PURE__ */ wp.element.createElement(
              RangeControl21,
              {
                value: borderRadius[localActiveDevice],
                onChange: (value) => setAttributes({
                  borderRadius: {
                    ...borderRadius,
                    [localActiveDevice]: value
                  }
                }),
                min: 0,
                max: 50,
                __next40pxDefaultSize: true,
                __nextHasNoMarginBottom: true
              }
            )))),
            (contentType === "text" || contentType === "icon") && /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-responsive-control" }, /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-control__header" }, /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-responsive-label-wrap" }, /* @__PURE__ */ wp.element.createElement("span", { className: "digiblocks-control-label" }, __26("Gap", "digiblocks")), /* @__PURE__ */ wp.element.createElement(
              "button",
              {
                type: "button",
                "aria-label": __26(`Switch to ${window.digi.responsiveState.getNextDevice()} view`, "digiblocks"),
                className: `components-button digiblocks-responsive-common-button digiblocks-device-${localActiveDevice}`,
                onClick: () => window.digi.responsiveState.toggleDevice()
              },
              window.digi.icons.deviceIcons[localActiveDevice]
            ))), /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-responsive-control-content" }, /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-unit-control" }, /* @__PURE__ */ wp.element.createElement(
              RangeControl21,
              {
                value: gap[localActiveDevice],
                onChange: (value) => setAttributes({
                  gap: {
                    ...gap,
                    [localActiveDevice]: value
                  }
                }),
                min: 0,
                max: 100,
                __next40pxDefaultSize: true,
                __nextHasNoMarginBottom: true
              }
            )))),
            contentType === "icon" && /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-responsive-control" }, /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-control__header" }, /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-responsive-label-wrap" }, /* @__PURE__ */ wp.element.createElement("span", { className: "digiblocks-control-label" }, __26("Icon Size", "digiblocks")), /* @__PURE__ */ wp.element.createElement(
              "button",
              {
                type: "button",
                "aria-label": __26(`Switch to ${window.digi.responsiveState.getNextDevice()} view`, "digiblocks"),
                className: `components-button digiblocks-responsive-common-button digiblocks-device-${localActiveDevice}`,
                onClick: () => window.digi.responsiveState.toggleDevice()
              },
              window.digi.icons.deviceIcons[localActiveDevice]
            ))), /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-responsive-control-content" }, /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-unit-control" }, /* @__PURE__ */ wp.element.createElement(
              RangeControl21,
              {
                value: iconSize[localActiveDevice],
                onChange: (value) => setAttributes({
                  iconSize: {
                    ...iconSize,
                    [localActiveDevice]: value
                  }
                }),
                min: 8,
                max: 100,
                __next40pxDefaultSize: true,
                __nextHasNoMarginBottom: true
              }
            )))),
            /* @__PURE__ */ wp.element.createElement(
              ResponsiveControl22,
              {
                label: __26("Margin", "digiblocks")
              },
              /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-margin-control" }, /* @__PURE__ */ wp.element.createElement(
                RangeControl21,
                {
                  label: __26("Top", "digiblocks"),
                  value: margin[localActiveDevice]?.top || 30,
                  onChange: (value) => {
                    const updatedMargin = {
                      ...margin,
                      [localActiveDevice]: {
                        ...margin[localActiveDevice],
                        top: value,
                        unit: margin[localActiveDevice]?.unit || "px"
                      }
                    };
                    setAttributes({ margin: updatedMargin });
                  },
                  min: 0,
                  max: 200,
                  __next40pxDefaultSize: true,
                  __nextHasNoMarginBottom: true
                }
              ), /* @__PURE__ */ wp.element.createElement(
                RangeControl21,
                {
                  label: __26("Bottom", "digiblocks"),
                  value: margin[localActiveDevice]?.bottom || 30,
                  onChange: (value) => {
                    const updatedMargin = {
                      ...margin,
                      [localActiveDevice]: {
                        ...margin[localActiveDevice],
                        bottom: value,
                        unit: margin[localActiveDevice]?.unit || "px"
                      }
                    };
                    setAttributes({ margin: updatedMargin });
                  },
                  min: 0,
                  max: 200,
                  __next40pxDefaultSize: true,
                  __nextHasNoMarginBottom: true
                }
              ))
            )
          ), contentType === "text" && /* @__PURE__ */ wp.element.createElement(
            TabPanelBody23,
            {
              tab: "style",
              name: "typography",
              title: __26("Typography", "digiblocks"),
              initialOpen: false
            },
            /* @__PURE__ */ wp.element.createElement(
              TypographyControl16,
              {
                label: __26("Text Typography", "digiblocks"),
                value: typography,
                onChange: (value) => setAttributes({ typography: value }),
                defaults: {
                  fontSize: { desktop: 16, tablet: 15, mobile: 14 },
                  fontSizeUnit: "px",
                  lineHeight: { desktop: 1.5, tablet: 1.5, mobile: 1.5 },
                  lineHeightUnit: "em"
                }
              }
            )
          ));
        case "advanced":
          return /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(
            TabPanelBody23,
            {
              tab: "advanced",
              name: "animation",
              title: __26("Animation", "digiblocks"),
              initialOpen: true
            },
            /* @__PURE__ */ wp.element.createElement(
              SelectControl23,
              {
                label: __26("Animation Effect", "digiblocks"),
                value: animation,
                options: animationOptions,
                onChange: (value) => setAttributes({ animation: value }),
                __next40pxDefaultSize: true,
                __nextHasNoMarginBottom: true
              }
            ),
            animation && animation !== "none" && /* @__PURE__ */ wp.element.createElement("div", { style: { marginTop: "10px" } }, /* @__PURE__ */ wp.element.createElement(
              Button21,
              {
                variant: "secondary",
                isSecondary: true,
                onClick: handlePreviewClick,
                style: { width: "100%" }
              },
              __26("Preview Animation", "digiblocks")
            ))
          ), /* @__PURE__ */ wp.element.createElement(
            TabPanelBody23,
            {
              tab: "advanced",
              name: "visibility",
              title: __26("Visibility", "digiblocks"),
              initialOpen: false
            },
            /* @__PURE__ */ wp.element.createElement("div", { className: "components-base-control__help", style: {
              padding: "12px",
              backgroundColor: "#f0f6fc",
              border: "1px solid #c3ddfd",
              borderRadius: "4px",
              marginBottom: "16px"
            } }, /* @__PURE__ */ wp.element.createElement("strong", null, __26("Editor Note:", "digiblocks")), /* @__PURE__ */ wp.element.createElement("br", null), __26("Hidden elements appear with reduced opacity in the editor for easy editing. Visibility changes only take effect on the frontend.", "digiblocks")),
            /* @__PURE__ */ wp.element.createElement(
              ToggleControl22,
              {
                label: __26("Hide on Desktop", "digiblocks"),
                checked: visibility.desktop,
                onChange: (value) => setAttributes({
                  visibility: {
                    ...visibility,
                    desktop: value
                  }
                }),
                __nextHasNoMarginBottom: true
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              ToggleControl22,
              {
                label: __26("Hide on Tablet", "digiblocks"),
                checked: visibility.tablet,
                onChange: (value) => setAttributes({
                  visibility: {
                    ...visibility,
                    tablet: value
                  }
                }),
                __nextHasNoMarginBottom: true
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              ToggleControl22,
              {
                label: __26("Hide on Mobile", "digiblocks"),
                checked: visibility.mobile,
                onChange: (value) => setAttributes({
                  visibility: {
                    ...visibility,
                    mobile: value
                  }
                }),
                __nextHasNoMarginBottom: true
              }
            )
          ), /* @__PURE__ */ wp.element.createElement(
            TabPanelBody23,
            {
              tab: "advanced",
              name: "additional",
              title: __26("Additional", "digiblocks"),
              initialOpen: false
            },
            /* @__PURE__ */ wp.element.createElement("div", { className: "components-base-control html-anchor-control" }, /* @__PURE__ */ wp.element.createElement("div", { className: "components-base-control__field" }, /* @__PURE__ */ wp.element.createElement("label", { className: "components-base-control__label", htmlFor: "html-anchor" }, __26("HTML anchor", "digiblocks")), /* @__PURE__ */ wp.element.createElement(
              "input",
              {
                className: "components-text-control__input",
                type: "text",
                id: "html-anchor",
                value: anchor || "",
                onChange: (e) => setAttributes({ anchor: e.target.value }),
                "aria-describedby": "html-anchor-help",
                autoCapitalize: "none",
                autoComplete: "off"
              }
            )), /* @__PURE__ */ wp.element.createElement("p", { id: "html-anchor-help", className: "components-base-control__help" }, __26(`Enter a word or two \u2014 without spaces \u2014 to make a unique web address just for this block, called an "anchor". Then, you'll be able to link directly to this section of your page.`, "digiblocks"), " ", /* @__PURE__ */ wp.element.createElement(
              "a",
              {
                className: "components-external-link",
                href: "https://wordpress.org/documentation/article/page-jumps/",
                target: "_blank",
                rel: "external noreferrer noopener"
              },
              /* @__PURE__ */ wp.element.createElement("span", { className: "components-external-link__contents" }, __26("Learn more about anchors", "digiblocks")),
              /* @__PURE__ */ wp.element.createElement("span", { className: "components-external-link__icon", "aria-label": "(opens in a new tab)" }, "\u2197")
            ))),
            /* @__PURE__ */ wp.element.createElement("div", { className: "components-base-control" }, /* @__PURE__ */ wp.element.createElement("div", { className: "components-base-control__field" }, /* @__PURE__ */ wp.element.createElement("label", { className: "components-base-control__label", htmlFor: "additional-css-classes" }, __26("Additional CSS class(es)", "digiblocks")), /* @__PURE__ */ wp.element.createElement(
              "input",
              {
                className: "components-text-control__input",
                type: "text",
                id: "additional-css-classes",
                value: customClasses || "",
                onChange: (e) => setAttributes({ customClasses: e.target.value }),
                "aria-describedby": "additional-css-classes-help",
                autoComplete: "off"
              }
            )), /* @__PURE__ */ wp.element.createElement("p", { id: "additional-css-classes-help", className: "components-base-control__help" }, __26("Separate multiple classes with spaces.", "digiblocks")))
          ));
        default:
          return null;
      }
    };
    const blockProps = useBlockProps41({
      className: `digiblocks-separator ${id} ${contentType !== "none" && !["wave", "zigzag", "slant"].includes(separatorStyle) ? "digiblocks-separator-has-content" : ""} ${customClasses || ""}`,
      id: anchor || null
      // Set the anchor as ID if provided
    });
    return /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(BlockControls5, null, /* @__PURE__ */ wp.element.createElement(
      AlignmentToolbar5,
      {
        value: align,
        onChange: (value) => setAttributes({ align: value })
      }
    )), /* @__PURE__ */ wp.element.createElement(InspectorControls22, null, /* @__PURE__ */ wp.element.createElement(
      CustomTabPanel22,
      {
        tabs: tabList,
        activeTab,
        onSelect: setActiveTab
      },
      renderTabContent()
    )), /* @__PURE__ */ wp.element.createElement("style", { dangerouslySetInnerHTML: { __html: generateCSS() } }), /* @__PURE__ */ wp.element.createElement("div", { ...blockProps }, /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-separator-container" }, contentType !== "none" && !["wave", "zigzag", "slant"].includes(separatorStyle) && /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-separator-content" }, contentType === "text" && /* @__PURE__ */ wp.element.createElement("span", { className: "digiblocks-separator-text" }, content), contentType === "icon" && renderIcon()), ["wave", "zigzag", "slant"].includes(separatorStyle) ? /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-separator-shape" }, renderStyleSVG()) : /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-separator-line" }))));
  };
  var edit_default22 = SeparatorEdit;

  // blocks/separator/save.js
  var { useBlockProps: useBlockProps42, RichText: RichText21 } = window.wp.blockEditor;
  var SeparatorSave = ({ attributes }) => {
    const {
      id,
      anchor,
      customClasses,
      contentType,
      content,
      align,
      iconValue,
      separatorStyle,
      primaryColor,
      secondaryColor,
      animation
    } = attributes;
    const renderStyleSVG = () => {
      switch (separatorStyle) {
        case "wave":
          return /* @__PURE__ */ wp.element.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 1200 120", preserveAspectRatio: "none" }, /* @__PURE__ */ wp.element.createElement("path", { d: "M321.39,56.44c58-10.79,114.16-30.13,172-41.86,82.39-16.72,168.19-17.73,250.45-.39C823.78,31,906.67,72,985.66,92.83c70.05,18.48,146.53,26.09,214.34,3V0H0V27.35A600.21,600.21,0,0,0,321.39,56.44Z", fill: primaryColor }));
        case "zigzag":
          return /* @__PURE__ */ wp.element.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 1200 120", preserveAspectRatio: "none" }, /* @__PURE__ */ wp.element.createElement("path", { d: "M0,0 L100,120 L200,0 L300,120 L400,0 L500,120 L600,0 L700,120 L800,0 L900,120 L1000,0 L1100,120 L1200,0", fill: primaryColor }));
        case "slant":
          return /* @__PURE__ */ wp.element.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 1200 120", preserveAspectRatio: "none" }, /* @__PURE__ */ wp.element.createElement("path", { d: "M1200 120L0 16.48 0 0 1200 0 1200 120z", fill: primaryColor }));
        default:
          return null;
      }
    };
    const renderIcon = () => {
      if (!iconValue || !iconValue.svg || iconValue.svg.trim() === "") {
        return null;
      }
      return /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-separator-icon" }, /* @__PURE__ */ wp.element.createElement("span", { dangerouslySetInnerHTML: { __html: iconValue.svg } }));
    };
    const blockClasses = [
      "digiblocks-separator",
      id,
      contentType !== "none" && !["wave", "zigzag", "slant"].includes(separatorStyle) ? "digiblocks-separator-has-content" : "",
      `align-${align}`,
      animation !== "none" ? `animate-${animation}` : "",
      customClasses || ""
    ].filter(Boolean).join(" ");
    const blockProps = useBlockProps42.save({
      className: blockClasses,
      id: anchor || null,
      "data-separator-style": separatorStyle
    });
    return /* @__PURE__ */ wp.element.createElement("div", { ...blockProps }, /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-separator-container" }, contentType !== "none" && !["wave", "zigzag", "slant"].includes(separatorStyle) && /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-separator-content" }, contentType === "text" && /* @__PURE__ */ wp.element.createElement("span", { className: "digiblocks-separator-text" }, content), contentType === "icon" && renderIcon()), ["wave", "zigzag", "slant"].includes(separatorStyle) ? /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-separator-shape" }, renderStyleSVG()) : /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-separator-line" })));
  };
  var save_default22 = SeparatorSave;

  // blocks/social-icons/edit.js
  var { __: __27 } = window.wp.i18n;
  var {
    useBlockProps: useBlockProps43,
    InspectorControls: InspectorControls23,
    PanelColorSettings: PanelColorSettings22
  } = window.wp.blockEditor;
  var {
    SelectControl: SelectControl24,
    RangeControl: RangeControl22,
    TabPanel: TabPanel15,
    Button: Button22,
    ToggleControl: ToggleControl23,
    TextControl: TextControl14,
    Popover,
    __experimentalToggleGroupControl: ToggleGroupControl22,
    __experimentalToggleGroupControlOption: ToggleGroupControlOption22
  } = window.wp.components;
  var { useState: useState23, useEffect: useEffect23, useRef: useRef20 } = window.wp.element;
  var { useBlockId: useBlockId23, getDimensionCSS: getDimensionCSS20, animations: animations21, animationPreview: animationPreview21 } = digi.utils;
  var { tabIcons: tabIcons23 } = digi.icons;
  var { ResponsiveControl: ResponsiveControl23, ResponsiveButtonGroup: ResponsiveButtonGroup6, DimensionControl: DimensionControl21, TypographyControl: TypographyControl17, CustomTabPanel: CustomTabPanel23, TabPanelBody: TabPanelBody24 } = digi.components;
  var socialIconsSVG = {
    facebook: /* @__PURE__ */ wp.element.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 320 512", width: "1em", height: "1em" }, /* @__PURE__ */ wp.element.createElement("path", { d: "M80 299.3V512H196V299.3h86.5l18-97.8H196V166.9c0-51.7 20.3-71.5 72.7-71.5c16.3 0 29.4 .4 37 1.2V7.9C291.4 4 256.4 0 236.2 0C129.3 0 80 50.5 80 159.4v42.1H14v97.8H80z" })),
    twitter: /* @__PURE__ */ wp.element.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 512 512", width: "1em", height: "1em" }, /* @__PURE__ */ wp.element.createElement("path", { d: "M389.2 48h70.6L305.6 224.2 487 464H345L233.7 318.6 106.5 464H35.8L200.7 275.5 26.8 48H172.4L272.9 180.9 389.2 48zM364.4 421.8h39.1L151.1 88h-42L364.4 421.8z" })),
    linkedin: /* @__PURE__ */ wp.element.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 448 512", width: "1em", height: "1em" }, /* @__PURE__ */ wp.element.createElement("path", { d: "M100.3 448H7.4V148.9h92.9zM53.8 108.1C24.1 108.1 0 83.5 0 53.8a53.8 53.8 0 0 1 107.6 0c0 29.7-24.1 54.3-53.8 54.3zM447.9 448h-92.7V302.4c0-34.7-.7-79.2-48.3-79.2-48.3 0-55.7 37.7-55.7 76.7V448h-92.8V148.9h89.1v40.8h1.3c12.4-23.5 42.7-48.3 87.9-48.3 94 0 111.3 61.9 111.3 142.3V448z" })),
    instagram: /* @__PURE__ */ wp.element.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 448 512", width: "1em", height: "1em" }, /* @__PURE__ */ wp.element.createElement("path", { d: "M224.1 141c-63.6 0-114.9 51.3-114.9 114.9s51.3 114.9 114.9 114.9S339 319.5 339 255.9 287.7 141 224.1 141zm0 189.6c-41.1 0-74.7-33.5-74.7-74.7s33.5-74.7 74.7-74.7 74.7 33.5 74.7 74.7-33.6 74.7-74.7 74.7zm146.4-194.3c0 14.9-12 26.8-26.8 26.8-14.9 0-26.8-12-26.8-26.8s12-26.8 26.8-26.8 26.8 12 26.8 26.8zm76.1 27.2c-1.7-35.9-9.9-67.7-36.2-93.9-26.2-26.2-58-34.4-93.9-36.2-37-2.1-147.9-2.1-184.9 0-35.8 1.7-67.6 9.9-93.9 36.1s-34.4 58-36.2 93.9c-2.1 37-2.1 147.9 0 184.9 1.7 35.9 9.9 67.7 36.2 93.9s58 34.4 93.9 36.2c37 2.1 147.9 2.1 184.9 0 35.9-1.7 67.7-9.9 93.9-36.2 26.2-26.2 34.4-58 36.2-93.9 2.1-37 2.1-147.8 0-184.8zM398.8 388c-7.8 19.6-22.9 34.7-42.6 42.6-29.5 11.7-99.5 9-132.1 9s-102.7 2.6-132.1-9c-19.6-7.8-34.7-22.9-42.6-42.6-11.7-29.5-9-99.5-9-132.1s-2.6-102.7 9-132.1c7.8-19.6 22.9-34.7 42.6-42.6 29.5-11.7 99.5-9 132.1-9s102.7-2.6 132.1 9c19.6 7.8 34.7 22.9 42.6 42.6 11.7 29.5 9 99.5 9 132.1s2.7 102.7-9 132.1z" })),
    pinterest: /* @__PURE__ */ wp.element.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 384 512", width: "1em", height: "1em" }, /* @__PURE__ */ wp.element.createElement("path", { d: "M204 6.5C101.4 6.5 0 74.9 0 185.6 0 256 39.6 296 63.6 296c9.9 0 15.6-27.6 15.6-35.4 0-9.3-23.7-29.1-23.7-67.8 0-80.4 61.2-137.4 140.4-137.4 68.1 0 118.5 38.7 118.5 109.8 0 53.1-21.3 152.7-90.3 152.7-24.9 0-46.2-18-46.2-43.8 0-37.8 26.4-74.4 26.4-113.4 0-66.2-93.9-54.2-93.9 25.8 0 16.8 2.1 35.4 9.6 50.7-13.8 59.4-42 147.9-42 209.1 0 18.9 2.7 37.5 4.5 56.4 3.4 3.8 1.7 3.4 6.9 1.5 50.4-69 48.6-82.5 71.4-172.8 12.3 23.4 44.1 36 69.3 36 106.2 0 153.9-103.5 153.9-196.8C384 71.3 298.2 6.5 204 6.5z" })),
    youtube: /* @__PURE__ */ wp.element.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 576 512", width: "1em", height: "1em" }, /* @__PURE__ */ wp.element.createElement("path", { d: "M549.7 124.1c-6.3-23.7-24.8-42.3-48.3-48.6C458.8 64 288 64 288 64S117.2 64 74.6 75.5c-23.5 6.3-42 24.9-48.3 48.6-11.4 42.9-11.4 132.3-11.4 132.3s0 89.4 11.4 132.3c6.3 23.7 24.8 41.5 48.3 47.8C117.2 448 288 448 288 448s170.8 0 213.4-11.5c23.5-6.3 42-24.2 48.3-47.8 11.4-42.9 11.4-132.3 11.4-132.3s0-89.4-11.4-132.3zm-317.5 213.5V175.2l142.7 81.2-142.7 81.2z" })),
    dribbble: /* @__PURE__ */ wp.element.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 512 512", width: "1em", height: "1em" }, /* @__PURE__ */ wp.element.createElement("path", { d: "M86.6 64l85.2 85.2C194.5 121.7 208 86.4 208 48c0-14.7-2-28.9-5.7-42.4C158.6 15 119 35.5 86.6 64zM64 86.6C35.5 119 15 158.6 5.6 202.3C19.1 206 33.3 208 48 208c38.4 0 73.7-13.5 101.3-36.1L64 86.6zM256 0c-7.3 0-14.6 .3-21.8 .9C238 16 240 31.8 240 48c0 47.3-17.1 90.5-45.4 124L256 233.4 425.4 64C380.2 24.2 320.9 0 256 0zM48 240c-16.2 0-32-2-47.1-5.8C.3 241.4 0 248.7 0 256c0 64.9 24.2 124.2 64 169.4L233.4 256 172 194.6C138.5 222.9 95.3 240 48 240zm463.1 37.8c.6-7.2 .9-14.5 .9-21.8c0-64.9-24.2-124.2-64-169.4L278.6 256 340 317.4c33.4-28.3 76.7-45.4 124-45.4c16.2 0 32 2 47.1 5.8zm-4.7 31.9C492.9 306 478.7 304 464 304c-38.4 0-73.7 13.5-101.3 36.1L448 425.4c28.5-32.3 49.1-71.9 58.4-115.7zM340.1 362.7C317.5 390.3 304 425.6 304 464c0 14.7 2 28.9 5.7 42.4C353.4 497 393 476.5 425.4 448l-85.2-85.2zM317.4 340L256 278.6 86.6 448c45.1 39.8 104.4 64 169.4 64c7.3 0 14.6-.3 21.8-.9C274 496 272 480.2 272 464c0-47.3 17.1-90.5 45.4-124z" })),
    github: /* @__PURE__ */ wp.element.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 496 512", width: "1em", height: "1em" }, /* @__PURE__ */ wp.element.createElement("path", { d: "M165.9 397.4c0 2-2.3 3.6-5.2 3.6-3.3 .3-5.6-1.3-5.6-3.6 0-2 2.3-3.6 5.2-3.6 3-.3 5.6 1.3 5.6 3.6zm-31.1-4.5c-.7 2 1.3 4.3 4.3 4.9 2.6 1 5.6 0 6.2-2s-1.3-4.3-4.3-5.2c-2.6-.7-5.5 .3-6.2 2.3zm44.2-1.7c-2.9 .7-4.9 2.6-4.6 4.9 .3 2 2.9 3.3 5.9 2.6 2.9-.7 4.9-2.6 4.6-4.6-.3-1.9-3-3.2-5.9-2.9zM244.8 8C106.1 8 0 113.3 0 252c0 110.9 69.8 205.8 169.5 239.2 12.8 2.3 17.3-5.6 17.3-12.1 0-6.2-.3-40.4-.3-61.4 0 0-70 15-84.7-29.8 0 0-11.4-29.1-27.8-36.6 0 0-22.9-15.7 1.6-15.4 0 0 24.9 2 38.6 25.8 21.9 38.6 58.6 27.5 72.9 20.9 2.3-16 8.8-27.1 16-33.7-55.9-6.2-112.3-14.3-112.3-110.5 0-27.5 7.6-41.3 23.6-58.9-2.6-6.5-11.1-33.3 2.6-67.9 20.9-6.5 69 27 69 27 20-5.6 41.5-8.5 62.8-8.5s42.8 2.9 62.8 8.5c0 0 48.1-33.6 69-27 13.7 34.7 5.2 61.4 2.6 67.9 16 17.7 25.8 31.5 25.8 58.9 0 96.5-58.9 104.2-114.8 110.5 9.2 7.9 17 22.9 17 46.4 0 33.7-.3 75.4-.3 83.6 0 6.5 4.6 14.4 17.3 12.1C428.2 457.8 496 362.9 496 252 496 113.3 383.5 8 244.8 8zM97.2 352.9c-1.3 1-1 3.3 .7 5.2 1.6 1.6 3.9 2.3 5.2 1 1.3-1 1-3.3-.7-5.2-1.6-1.6-3.9-2.3-5.2-1zm-10.8-8.1c-.7 1.3 .3 2.9 2.3 3.9 1.6 1 3.6 .7 4.3-.7 .7-1.3-.3-2.9-2.3-3.9-2-.6-3.6-.3-4.3 .7zm32.4 35.6c-1.6 1.3-1 4.3 1.3 6.2 2.3 2.3 5.2 2.6 6.5 1 1.3-1.3 .7-4.3-1.3-6.2-2.2-2.3-5.2-2.6-6.5-1zm-11.4-14.7c-1.6 1-1.6 3.6 0 5.9 1.6 2.3 4.3 3.3 5.6 2.3 1.6-1.3 1.6-3.9 0-6.2-1.4-2.3-4-3.3-5.6-2z" })),
    behance: /* @__PURE__ */ wp.element.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 576 512", width: "1em", height: "1em" }, /* @__PURE__ */ wp.element.createElement("path", { d: "M232 237.2c31.8-15.2 48.4-38.2 48.4-74 0-70.6-52.6-87.8-113.3-87.8H0v354.4h171.8c64.4 0 124.9-30.9 124.9-102.9 0-44.5-21.1-77.4-64.7-89.7zM77.9 135.9H151c28.1 0 53.4 7.9 53.4 40.5 0 30.1-19.7 42.2-47.5 42.2h-79v-82.7zm83.3 233.7H77.9V272h84.9c34.3 0 56 14.3 56 50.6 0 35.8-25.9 47-57.6 47zm358.5-240.7H376V94h143.7v34.9zM576 305.2c0-75.9-44.4-139.2-124.9-139.2-78.2 0-131.3 58.8-131.3 135.8 0 79.9 50.3 134.7 131.3 134.7 61.3 0 101-27.6 120.1-86.3H509c-6.7 21.9-34.3 33.5-55.7 33.5-41.3 0-63-24.2-63-65.3h185.1c.3-4.2 .6-8.7 .6-13.2zM390.4 274c2.3-33.7 24.7-54.8 58.5-54.8 35.4 0 53.2 20.8 56.2 54.8H390.4z" })),
    vimeo: /* @__PURE__ */ wp.element.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 448 512", width: "1em", height: "1em" }, /* @__PURE__ */ wp.element.createElement("path", { d: "M447.8 153.6c-2 43.6-32.4 103.3-91.4 179.1-60.9 79.2-112.4 118.8-154.6 118.8-26.1 0-48.2-24.1-66.3-72.3C100.3 250 85.3 174.3 56.2 174.3c-3.4 0-15.1 7.1-35.2 21.1L0 168.2c51.6-45.3 100.9-95.7 131.8-98.5 34.9-3.4 56.3 20.5 64.4 71.5 28.7 181.5 41.4 208.9 93.6 126.7 18.7-29.6 28.8-52.1 30.2-67.6 4.8-45.9-35.8-42.8-63.3-31 22-72.1 64.1-107.1 126.2-105.1 45.8 1.2 67.5 31.1 64.9 89.4z" })),
    tiktok: /* @__PURE__ */ wp.element.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 448 512", width: "1em", height: "1em" }, /* @__PURE__ */ wp.element.createElement("path", { d: "M448 209.9a210.1 210.1 0 0 1 -122.8-39.3V349.4A162.6 162.6 0 1 1 185 188.3V278.2a74.6 74.6 0 1 0 52.2 71.2V0l88 0a121.2 121.2 0 0 0 1.9 22.2h0A122.2 122.2 0 0 0 381 102.4a121.4 121.4 0 0 0 67 20.1z" })),
    email: /* @__PURE__ */ wp.element.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 512 512", width: "1em", height: "1em" }, /* @__PURE__ */ wp.element.createElement("path", { d: "M48 64C21.5 64 0 85.5 0 112c0 15.1 7.1 29.3 19.2 38.4L236.8 313.6c11.4 8.5 27 8.5 38.4 0L492.8 150.4c12.1-9.1 19.2-23.3 19.2-38.4c0-26.5-21.5-48-48-48L48 64zM0 176L0 384c0 35.3 28.7 64 64 64l384 0c35.3 0 64-28.7 64-64l0-208L294.4 339.2c-22.8 17.1-54 17.1-76.8 0L0 176z" })),
    website: /* @__PURE__ */ wp.element.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 640 512", width: "1em", height: "1em" }, /* @__PURE__ */ wp.element.createElement("path", { d: "M579.8 267.7c56.5-56.5 56.5-148 0-204.5c-50-50-128.8-56.5-186.3-15.4l-1.6 1.1c-14.4 10.3-17.7 30.3-7.4 44.6s30.3 17.7 44.6 7.4l1.6-1.1c32.1-22.9 76-19.3 103.8 8.6c31.5 31.5 31.5 82.5 0 114L422.3 334.8c-31.5 31.5-82.5 31.5-114 0c-27.9-27.9-31.5-71.8-8.6-103.8l1.1-1.6c10.3-14.4 6.9-34.4-7.4-44.6s-34.4-6.9-44.6 7.4l-1.1 1.6C206.5 251.2 213 330 263 380c56.5 56.5 148 56.5 204.5 0L579.8 267.7zM60.2 244.3c-56.5 56.5-56.5 148 0 204.5c50 50 128.8 56.5 186.3 15.4l1.6-1.1c14.4-10.3 17.7-30.3 7.4-44.6s-30.3-17.7-44.6-7.4l-1.6 1.1c-32.1 22.9-76 19.3-103.8-8.6C74 372 74 321 105.5 289.5L217.7 177.2c31.5-31.5 82.5-31.5 114 0c27.9 27.9 31.5 71.8 8.6 103.9l-1.1 1.6c-10.3 14.4-6.9 34.4 7.4 44.6s34.4 6.9 44.6-7.4l1.1-1.6C433.5 260.8 427 182 377 132c-56.5-56.5-148-56.5-204.5 0L60.2 244.3z" }))
  };
  var plusIcon = /* @__PURE__ */ wp.element.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 448 512", width: "1em", height: "1em" }, /* @__PURE__ */ wp.element.createElement("path", { d: "M256 80c0-17.7-14.3-32-32-32s-32 14.3-32 32l0 144L48 224c-17.7 0-32 14.3-32 32s14.3 32 32 32l144 0 0 144c0 17.7 14.3 32 32 32s32-14.3 32-32l0-144 144 0c17.7 0 32-14.3 32-32s-14.3-32-32-32l-144 0 0-144z" }));
  var SocialIconsEdit = ({ attributes, setAttributes, clientId }) => {
    const {
      id,
      anchor,
      visibility,
      customClasses,
      align,
      icons,
      iconSize,
      iconSpacing,
      iconColor,
      iconHoverColor,
      iconBackground,
      iconHoverBackground,
      iconBorderStyle,
      iconBorderWidth,
      iconBorderRadius,
      iconBorderColor,
      iconHoverBorderColor,
      labelColor,
      labelHoverColor,
      labelSpacing,
      padding,
      animation,
      showLabels,
      labelPosition,
      textTypography
    } = attributes;
    useBlockId23(id, clientId, setAttributes);
    const [localActiveDevice, setLocalActiveDevice] = useState23(window.digi.responsiveState.activeDevice);
    const [activeTab, setActiveTab] = useState23(() => {
      if (window.digi.uiState) {
        const savedTab = window.digi.uiState.getActiveTab(clientId);
        if (savedTab)
          return savedTab;
      }
      return "options";
    });
    const [urlPopover, setUrlPopover] = useState23(null);
    const [socialSelectPopover, setSocialSelectPopover] = useState23(null);
    useEffect23(() => {
      const unsubscribe = window.digi.responsiveState.subscribe((device) => {
        setLocalActiveDevice(device);
      });
      return unsubscribe;
    }, []);
    useEffect23(() => {
      if (!icons || icons.length === 0) {
        setAttributes({
          icons: [
            {
              id: `social-icon-${clientId.substr(0, 8)}-1`,
              iconValue: {
                name: "Facebook",
                network: "facebook",
                svg: "M80 299.3V512H196V299.3h86.5l18-97.8H196V166.9c0-51.7 20.3-71.5 72.7-71.5c16.3 0 29.4 .4 37 1.2V7.9C291.4 4 256.4 0 236.2 0C129.3 0 80 50.5 80 159.4v42.1H14v97.8H80z"
              },
              url: "https://facebook.com",
              label: "Facebook",
              openInNewTab: true,
              rel: "nofollow"
            }
          ]
        });
      }
    }, [clientId, icons, setAttributes, id]);
    const previewTimeoutRef = useRef20(null);
    useEffect23(() => {
      if (animation && animation !== "none") {
        const timeoutId = setTimeout(() => {
          animationPreview21(id, animation, animations21, previewTimeoutRef);
        }, 100);
        return () => clearTimeout(timeoutId);
      }
    }, [animation]);
    const handlePreviewClick = () => {
      animationPreview21(id, animation, animations21, previewTimeoutRef);
    };
    const borderStyleOptions = [
      { label: __27("None", "digiblocks"), value: "none" },
      { label: __27("Solid", "digiblocks"), value: "solid" },
      { label: __27("Dotted", "digiblocks"), value: "dotted" },
      { label: __27("Dashed", "digiblocks"), value: "dashed" },
      { label: __27("Double", "digiblocks"), value: "double" }
    ];
    const animationOptions = [
      { label: __27("None", "digiblocks"), value: "none" },
      ...Object.keys(animations21).map((animation2) => ({
        label: animation2.replace(/-/g, " ").replace(/\b\w/g, (l) => l.toUpperCase()),
        value: animation2
      }))
    ];
    const socialNetworks = [
      { label: __27("Facebook", "digiblocks"), value: "facebook" },
      { label: __27("Twitter", "digiblocks"), value: "twitter" },
      { label: __27("LinkedIn", "digiblocks"), value: "linkedin" },
      { label: __27("Instagram", "digiblocks"), value: "instagram" },
      { label: __27("Pinterest", "digiblocks"), value: "pinterest" },
      { label: __27("YouTube", "digiblocks"), value: "youtube" },
      { label: __27("Dribbble", "digiblocks"), value: "dribbble" },
      { label: __27("GitHub", "digiblocks"), value: "github" },
      { label: __27("Behance", "digiblocks"), value: "behance" },
      { label: __27("Vimeo", "digiblocks"), value: "vimeo" },
      { label: __27("TikTok", "digiblocks"), value: "tiktok" },
      { label: __27("Email", "digiblocks"), value: "email" },
      { label: __27("Website", "digiblocks"), value: "website" }
    ];
    const tabList = [
      {
        name: "options",
        title: __27("Options", "digiblocks"),
        icon: tabIcons23.optionsIcon
      },
      {
        name: "style",
        title: __27("Style", "digiblocks"),
        icon: tabIcons23.styleIcon
      },
      {
        name: "advanced",
        title: __27("Advanced", "digiblocks"),
        icon: tabIcons23.advancedIcon
      }
    ];
    const stateTabList = [
      {
        name: "normal",
        title: __27("Normal", "digiblocks"),
        className: "digiblocks-tab-1 normal"
      },
      {
        name: "hover",
        title: __27("Hover", "digiblocks"),
        className: "digiblocks-tab-2 hover"
      }
    ];
    const addSocialIcon = () => {
      openSocialSelectPopover();
    };
    const openSocialSelectPopover = () => {
      setSocialSelectPopover({
        target: document.querySelector(".add-social")
      });
    };
    const closeSocialSelectPopover = () => {
      setSocialSelectPopover(null);
    };
    const addSpecificSocialNetwork = (network) => {
      const usedNetworks = icons.map(
        (icon) => icon.iconValue && icon.iconValue.network ? icon.iconValue.network : null
      ).filter(Boolean);
      if (usedNetworks.includes(network)) {
        return;
      }
      const newSocialId = `social-icon-${clientId.substr(0, 8)}-${Date.now()}`;
      const newIcon = {
        id: newSocialId,
        iconValue: {
          name: network.charAt(0).toUpperCase() + network.slice(1),
          network,
          svg: socialIconsSVG[network] ? socialIconsSVG[network].props.children.props.d : ""
        },
        url: "",
        label: network.charAt(0).toUpperCase() + network.slice(1),
        openInNewTab: true,
        rel: "nofollow"
      };
      setAttributes({
        icons: [...icons, newIcon]
      });
      closeSocialSelectPopover();
      setTimeout(() => {
        const socialIndex = icons.length;
        openUrlPopover(socialIndex);
      }, 100);
    };
    const removeSocialIcon = (index) => {
      if (icons.length > 1) {
        const newIcons = [...icons];
        newIcons.splice(index, 1);
        setAttributes({
          icons: newIcons
        });
      }
    };
    const updateSocialIcon = (index, key, value) => {
      const newIcons = [...icons];
      newIcons[index] = {
        ...newIcons[index],
        [key]: value
      };
      setAttributes({
        icons: newIcons
      });
    };
    const openUrlPopover = (index) => {
      setUrlPopover({
        index,
        target: document.getElementById(`social-icon-${index}`)
      });
    };
    const closeUrlPopover = () => {
      setUrlPopover(null);
    };
    const generateCSS = () => {
      const activeDevice = localActiveDevice;
      const currentIconSize = iconSize[activeDevice] || 24;
      const currentIconSpacing = iconSpacing[activeDevice] || 10;
      const currentLabelSpacing = labelSpacing[activeDevice] || 5;
      let borderCSS = "";
      if (iconBorderStyle && iconBorderStyle !== "none") {
        borderCSS = `
                border-style: ${iconBorderStyle};
                border-color: ${iconBorderColor || "#e0e0e0"};
				${getDimensionCSS20(iconBorderWidth, "border-width", activeDevice)}
				${getDimensionCSS20(iconBorderRadius, "border-radius", activeDevice)}
            `;
      }
      let textTypographyCSS = "";
      if (textTypography) {
        if (textTypography.fontFamily) {
          textTypographyCSS += `font-family: ${textTypography.fontFamily};`;
        }
        if (textTypography.fontSize && textTypography.fontSize[activeDevice]) {
          textTypographyCSS += `font-size: ${textTypography.fontSize[activeDevice]}${textTypography.fontSizeUnit || "px"};`;
        }
        if (textTypography.fontWeight) {
          textTypographyCSS += `font-weight: ${textTypography.fontWeight};`;
        }
        if (textTypography.fontStyle) {
          textTypographyCSS += `font-style: ${textTypography.fontStyle};`;
        }
        if (textTypography.textTransform) {
          textTypographyCSS += `text-transform: ${textTypography.textTransform};`;
        }
        if (textTypography.textDecoration) {
          textTypographyCSS += `text-decoration: ${textTypography.textDecoration};`;
        }
        if (textTypography.lineHeight && textTypography.lineHeight[activeDevice]) {
          textTypographyCSS += `line-height: ${textTypography.lineHeight[activeDevice]}${textTypography.lineHeightUnit || "em"};`;
        }
        if (textTypography.letterSpacing && textTypography.letterSpacing[activeDevice]) {
          textTypographyCSS += `letter-spacing: ${textTypography.letterSpacing[activeDevice]}${textTypography.letterSpacingUnit || "px"};`;
        }
      }
      const paddingCSS = padding && padding[activeDevice] ? `${getDimensionCSS20(padding, "padding", activeDevice)}` : "";
      let animationCSS = "";
      if (animation && animation !== "none" && animations21[animation]) {
        animationCSS = animations21[animation].keyframes;
      }
      let labelPositionCSS = "";
      if (showLabels && labelPosition) {
        switch (labelPosition) {
          case "top":
            labelPositionCSS = `
                        .${id} .digiblocks-social-icon {
                            flex-direction: column-reverse;
                        }
                    `;
            break;
          case "right":
            labelPositionCSS = `
                        .${id} .digiblocks-social-icon {
                            flex-direction: row;
                        }
                    `;
            break;
          case "bottom":
            labelPositionCSS = `
                        .${id} .digiblocks-social-icon {
                            flex-direction: column;
                        }
                    `;
            break;
          case "left":
            labelPositionCSS = `
                        .${id} .digiblocks-social-icon {
                            flex-direction: row-reverse;
                        }
                    `;
            break;
        }
      }
      return `
            /* Social Icons Block - ${id} */
            .${id} {
                display: flex;
                align-items: center;
                flex-wrap: wrap;
                gap: ${currentIconSpacing}px;
                justify-content: ${align[activeDevice]};
            }
            
            .${id} .digiblocks-social-wrapper {
                position: relative;
				display: flex;
            }
            
            .${id} .digiblocks-social-icon {
                display: flex;
                align-items: center;
                text-decoration: none;
                gap: ${currentLabelSpacing}px;
            }
            
            .${id} .digiblocks-social-icon-icon {
                display: flex;
                align-items: center;
                justify-content: center;
                background-color: ${iconBackground || "transparent"};
                color: ${iconColor || "#333333"};
                ${borderCSS}
                ${paddingCSS}
                transition: all 0.3s ease;
                cursor: pointer;
            }
            
            .${id} .digiblocks-social-icon-icon span {
                display: flex;
                align-items: center;
                justify-content: center;
            }
            
            .${id} .digiblocks-social-icon-icon svg {
                width: ${currentIconSize}px;
                height: ${currentIconSize}px;
                fill: currentColor;
                transition: all 0.3s ease;
            }
            
            .${id} .digiblocks-social-icon:hover .digiblocks-social-icon-icon {
                background-color: ${iconHoverBackground || iconBackground || "transparent"};
                ${iconHoverBorderColor ? `border-color: ${iconHoverBorderColor};` : ""}
                ${iconHoverColor ? `color: ${iconHoverColor};` : ""}
            }
            
            .${id} .digiblocks-social-icon-label {
                ${textTypographyCSS}
                color: ${labelColor || iconColor || "#333333"};
                transition: color 0.3s ease;
            }
            
            .${id} .digiblocks-social-icon:hover .digiblocks-social-icon-label {
                color: ${labelHoverColor || iconHoverColor || labelColor || iconColor || "#333333"};
            }
            
            /* Editor-specific styles */
            .${id} .digiblocks-social-icon-remove {
                position: absolute;
                top: -18px;
                right: -10px;
                background-color: #fff;
                border-radius: 50%;
                padding: 2px;
                display: none;
                box-shadow: 0 1px 3px rgba(0,0,0,0.2);
                z-index: 10;
            }
            
            .${id} .digiblocks-social-wrapper:hover .digiblocks-social-icon-remove {
                display: block;
            }
            
            .${id} .digiblocks-social-icon.add-social {
                background-color: #f0f0f0;
                color: #333;
                border-radius: 50%;
                width: 30px;
                height: 30px;
                display: flex;
                align-items: center;
                justify-content: center;
                cursor: pointer;
            }
            
            .${id} .digiblocks-social-icon.add-social svg {
                width: .6rem;
                height: .6rem;
                fill: currentColor;
            }
            
            ${labelPositionCSS}
            ${animationCSS}
            
            /* Responsive styles */
            @media (max-width: 991px) {
                .${id} {
                    gap: ${iconSpacing.tablet || currentIconSpacing}px;
                }
                
                .${id} .digiblocks-social-icon {
                    gap: ${labelSpacing.tablet || currentLabelSpacing}px;
                }
                
                .${id} .digiblocks-social-icon-icon svg {
                    width: ${iconSize.tablet || currentIconSize}px;
                    height: ${iconSize.tablet || currentIconSize}px;
                }
                
                ${textTypography && textTypography.fontSize && textTypography.fontSize.tablet ? `
                .${id} .digiblocks-social-icon-label {
                    font-size: ${textTypography.fontSize.tablet}${textTypography.fontSizeUnit || "px"};
                }
                ` : ""}
                
                .${id} .digiblocks-social-icon.add-social {
                    width: ${iconSize.tablet || currentIconSize}px;
                    height: ${iconSize.tablet || currentIconSize}px;
                }
            }
            
            @media (max-width: 767px) {
                .${id} {
                    gap: ${iconSpacing.mobile || iconSpacing.tablet || currentIconSpacing}px;
                }
                
                .${id} .digiblocks-social-icon {
                    gap: ${labelSpacing.mobile || labelSpacing.tablet || currentLabelSpacing}px;
                }
                
                .${id} .digiblocks-social-icon-icon svg {
                    width: ${iconSize.mobile || iconSize.tablet || currentIconSize}px;
                    height: ${iconSize.mobile || iconSize.tablet || currentIconSize}px;
                }
                
                ${textTypography && textTypography.fontSize && textTypography.fontSize.mobile ? `
                .${id} .digiblocks-social-icon-label {
                    font-size: ${textTypography.fontSize.mobile}${textTypography.fontSizeUnit || "px"};
                }
                ` : ""}
                
                .${id} .digiblocks-social-icon.add-social {
                    width: ${iconSize.mobile || iconSize.tablet || currentIconSize}px;
                    height: ${iconSize.mobile || iconSize.tablet || currentIconSize}px;
                }
            }

			/* Visibility Controls */
			${visibility.desktop ? `
				@media (min-width: 992px) {
					.${id} {
						opacity: 0.5 !important;
					}
				}
			` : ""}

			${visibility.tablet ? `
				@media (min-width: 768px) and (max-width: 991px) {
					.${id} {
						opacity: 0.5 !important;
					}
				}
			` : ""}

			${visibility.mobile ? `
				@media (max-width: 767px) {
					.${id} {
						opacity: 0.5 !important;
					}
				}
			` : ""}
        `;
    };
    const renderStylesTabContent = (tabName) => {
      if (tabName === "normal") {
        return /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(
          PanelColorSettings22,
          {
            title: __27("Icon Colors", "digiblocks"),
            initialOpen: true,
            enableAlpha: true,
            colorSettings: [
              {
                value: iconColor,
                onChange: (value) => setAttributes({ iconColor: value }),
                label: __27("Icon Color", "digiblocks")
              },
              {
                value: iconBackground,
                onChange: (value) => setAttributes({ iconBackground: value }),
                label: __27("Background Color", "digiblocks")
              },
              {
                value: iconBorderColor,
                onChange: (value) => setAttributes({ iconBorderColor: value }),
                label: __27("Border Color", "digiblocks")
              },
              ...showLabels ? [
                {
                  value: labelColor,
                  onChange: (value) => setAttributes({ labelColor: value }),
                  label: __27("Label Color", "digiblocks")
                }
              ] : []
            ]
          }
        ));
      } else {
        return /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(
          PanelColorSettings22,
          {
            title: __27("Icon Hover Colors", "digiblocks"),
            initialOpen: true,
            enableAlpha: true,
            colorSettings: [
              {
                value: iconHoverColor,
                onChange: (value) => setAttributes({ iconHoverColor: value }),
                label: __27("Icon Hover Color", "digiblocks")
              },
              {
                value: iconHoverBackground,
                onChange: (value) => setAttributes({ iconHoverBackground: value }),
                label: __27("Hover Background", "digiblocks")
              },
              {
                value: iconHoverBorderColor,
                onChange: (value) => setAttributes({ iconHoverBorderColor: value }),
                label: __27("Hover Border Color", "digiblocks")
              },
              ...showLabels ? [
                {
                  value: labelHoverColor,
                  onChange: (value) => setAttributes({ labelHoverColor: value }),
                  label: __27("Label Hover Color", "digiblocks")
                }
              ] : []
            ]
          }
        ));
      }
    };
    const renderSocialSelectPopover = () => {
      if (!socialSelectPopover)
        return null;
      const { target } = socialSelectPopover;
      const usedNetworks = icons.map(
        (icon) => icon.iconValue && icon.iconValue.network ? icon.iconValue.network : null
      ).filter(Boolean);
      const availableNetworks = socialNetworks.filter(
        (network) => !usedNetworks.includes(network.value)
      );
      if (availableNetworks.length === 0) {
        closeSocialSelectPopover();
        return null;
      }
      return /* @__PURE__ */ wp.element.createElement(
        Popover,
        {
          anchor: target,
          onClose: closeSocialSelectPopover,
          position: "bottom center",
          expandOnMobile: true,
          className: "digiblocks-social-select-popover"
        },
        /* @__PURE__ */ wp.element.createElement("div", { style: { padding: "12px", width: "280px", maxHeight: "400px", overflowY: "auto" } }, /* @__PURE__ */ wp.element.createElement("div", { style: { marginBottom: "10px", fontWeight: "bold" } }, __27("Select Social Network", "digiblocks")), /* @__PURE__ */ wp.element.createElement("div", { style: { display: "grid", gridTemplateColumns: "1fr 1fr", gap: "8px" } }, availableNetworks.map((network) => /* @__PURE__ */ wp.element.createElement(
          Button22,
          {
            key: network.value,
            variant: "secondary",
            onClick: () => addSpecificSocialNetwork(network.value),
            style: {
              display: "flex",
              alignItems: "center",
              justifyContent: "flex-start",
              padding: "8px",
              gap: "8px"
            }
          },
          /* @__PURE__ */ wp.element.createElement("span", { style: { display: "inline-flex", alignItems: "center" } }, socialIconsSVG[network.value]),
          /* @__PURE__ */ wp.element.createElement("span", null, network.label)
        ))))
      );
    };
    const renderUrlPopover = () => {
      if (!urlPopover)
        return null;
      const { index, target } = urlPopover;
      const icon = icons[index];
      return /* @__PURE__ */ wp.element.createElement(
        Popover,
        {
          anchor: target,
          onClose: closeUrlPopover,
          position: "bottom center",
          expandOnMobile: true,
          className: "digiblocks-social-url-popover"
        },
        /* @__PURE__ */ wp.element.createElement("div", { style: { display: "flex", flexDirection: "column", gap: "1rem", padding: "12px", minWidth: "280px" } }, /* @__PURE__ */ wp.element.createElement(
          SelectControl24,
          {
            label: __27("Social Network", "digiblocks"),
            value: icon.iconValue ? icon.iconValue.network : "",
            options: socialNetworks,
            onChange: (value) => {
              const newIcons = [...icons];
              newIcons[index] = {
                ...newIcons[index],
                iconValue: {
                  name: value.charAt(0).toUpperCase() + value.slice(1),
                  network: value,
                  svg: socialIconsSVG[value] ? socialIconsSVG[value].props.children.props.d : ""
                }
              };
              setAttributes({ icons: newIcons });
            },
            __next40pxDefaultSize: true,
            __nextHasNoMarginBottom: true
          }
        ), /* @__PURE__ */ wp.element.createElement(
          TextControl14,
          {
            label: __27("URL", "digiblocks"),
            value: icon.url || "",
            onChange: (value) => updateSocialIcon(index, "url", value),
            placeholder: icon.iconValue && icon.iconValue.network === "email" ? "mailto:example@domain.com" : icon.iconValue && icon.iconValue.network === "website" ? "https://example.com" : `https://${icon.iconValue ? icon.iconValue.network : "example"}.com/username`,
            __next40pxDefaultSize: true,
            __nextHasNoMarginBottom: true
          }
        ), /* @__PURE__ */ wp.element.createElement(
          TextControl14,
          {
            label: __27("Label", "digiblocks"),
            value: icon.label || "",
            onChange: (value) => updateSocialIcon(index, "label", value),
            placeholder: icon.iconValue ? icon.iconValue.name : __27("Social Media", "digiblocks"),
            __next40pxDefaultSize: true,
            __nextHasNoMarginBottom: true
          }
        ), /* @__PURE__ */ wp.element.createElement(
          ToggleControl23,
          {
            label: __27("Open in new tab", "digiblocks"),
            checked: icon.openInNewTab === void 0 ? true : icon.openInNewTab,
            onChange: (value) => updateSocialIcon(index, "openInNewTab", value),
            __nextHasNoMarginBottom: true
          }
        ), /* @__PURE__ */ wp.element.createElement(
          TextControl14,
          {
            label: __27("Rel Attribute", "digiblocks"),
            value: icon.rel || "",
            onChange: (value) => updateSocialIcon(index, "rel", value),
            placeholder: __27("e.g. nofollow", "digiblocks"),
            help: __27('Optional. Add rel attributes like "nofollow", "sponsored", etc.', "digiblocks"),
            __next40pxDefaultSize: true,
            __nextHasNoMarginBottom: true
          }
        ), /* @__PURE__ */ wp.element.createElement(
          Button22,
          {
            variant: "primary",
            onClick: closeUrlPopover,
            style: { justifyContent: "center", width: "100%" }
          },
          __27("Done", "digiblocks")
        ))
      );
    };
    const renderTabContent = () => {
      switch (activeTab) {
        case "options":
          return /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement("div", { className: "components-panel__body is-opened" }, /* @__PURE__ */ wp.element.createElement(
            ResponsiveButtonGroup6,
            {
              label: __27("Alignment", "digiblocks"),
              value: align,
              onChange: (value) => setAttributes({ align: value }),
              options: [
                { label: __27("Left", "digiblocks"), value: "flex-start" },
                { label: __27("Center", "digiblocks"), value: "center" },
                { label: __27("Right", "digiblocks"), value: "flex-end" }
              ]
            }
          ), /* @__PURE__ */ wp.element.createElement(
            ToggleControl23,
            {
              label: __27("Show Labels", "digiblocks"),
              checked: showLabels,
              onChange: (value) => setAttributes({ showLabels: value }),
              __nextHasNoMarginBottom: true
            }
          ), showLabels && /* @__PURE__ */ wp.element.createElement(
            ToggleGroupControl22,
            {
              label: __27("Label Position", "digiblocks"),
              value: labelPosition,
              onChange: (value) => setAttributes({ labelPosition: value }),
              isBlock: true,
              __next40pxDefaultSize: true,
              __nextHasNoMarginBottom: true
            },
            /* @__PURE__ */ wp.element.createElement(
              ToggleGroupControlOption22,
              {
                value: "bottom",
                label: __27("Bottom", "digiblocks")
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              ToggleGroupControlOption22,
              {
                value: "right",
                label: __27("Right", "digiblocks")
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              ToggleGroupControlOption22,
              {
                value: "left",
                label: __27("Left", "digiblocks")
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              ToggleGroupControlOption22,
              {
                value: "top",
                label: __27("Top", "digiblocks")
              }
            )
          )));
        case "style":
          return /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(
            TabPanelBody24,
            {
              tab: "style",
              name: "colors",
              title: __27("Colors", "digiblocks"),
              initialOpen: true
            },
            /* @__PURE__ */ wp.element.createElement(
              TabPanel15,
              {
                className: "digiblocks-control-tabs",
                activeClass: "active-tab",
                tabs: stateTabList
              },
              (tab) => renderStylesTabContent(tab.name)
            )
          ), /* @__PURE__ */ wp.element.createElement(
            TabPanelBody24,
            {
              tab: "style",
              name: "size-shape",
              title: __27("Size & Shape", "digiblocks"),
              initialOpen: false
            },
            /* @__PURE__ */ wp.element.createElement(
              ResponsiveControl23,
              {
                label: __27(
                  "Icon Size",
                  "digiblocks"
                )
              },
              /* @__PURE__ */ wp.element.createElement(
                RangeControl22,
                {
                  value: iconSize[localActiveDevice],
                  onChange: (value) => setAttributes({
                    iconSize: {
                      ...iconSize,
                      [localActiveDevice]: value
                    }
                  }),
                  min: 0,
                  max: 100,
                  step: 1,
                  __next40pxDefaultSize: true,
                  __nextHasNoMarginBottom: true
                }
              )
            ),
            /* @__PURE__ */ wp.element.createElement(
              ResponsiveControl23,
              {
                label: __27(
                  "Icon Spacing",
                  "digiblocks"
                )
              },
              /* @__PURE__ */ wp.element.createElement(
                RangeControl22,
                {
                  value: iconSpacing[localActiveDevice],
                  onChange: (value) => setAttributes({
                    iconSpacing: {
                      ...iconSpacing,
                      [localActiveDevice]: value
                    }
                  }),
                  min: 0,
                  max: 100,
                  step: 1,
                  __next40pxDefaultSize: true,
                  __nextHasNoMarginBottom: true
                }
              )
            ),
            showLabels && /* @__PURE__ */ wp.element.createElement(
              ResponsiveControl23,
              {
                label: __27(
                  "Label Spacing",
                  "digiblocks"
                )
              },
              /* @__PURE__ */ wp.element.createElement(
                RangeControl22,
                {
                  value: labelSpacing[localActiveDevice],
                  onChange: (value) => setAttributes({
                    labelSpacing: {
                      ...labelSpacing,
                      [localActiveDevice]: value
                    }
                  }),
                  min: 0,
                  max: 100,
                  step: 1,
                  __next40pxDefaultSize: true,
                  __nextHasNoMarginBottom: true
                }
              )
            ),
            /* @__PURE__ */ wp.element.createElement(
              SelectControl24,
              {
                label: __27("Border Style", "digiblocks"),
                value: iconBorderStyle || "none",
                options: borderStyleOptions,
                onChange: (value) => {
                  if (value !== "none" && (!iconBorderWidth || Object.keys(iconBorderWidth).length === 0)) {
                    setAttributes({
                      iconBorderWidth: {
                        desktop: { value: 1, unit: "px" },
                        tablet: { value: 1, unit: "px" },
                        mobile: { value: 1, unit: "px" }
                      }
                    });
                  }
                  if (value !== "none" && (!iconBorderRadius || Object.keys(iconBorderRadius).length === 0)) {
                    setAttributes({
                      iconBorderRadius: {
                        desktop: { value: 0, unit: "px" },
                        tablet: { value: 0, unit: "px" },
                        mobile: { value: 0, unit: "px" }
                      }
                    });
                  }
                  setAttributes({ iconBorderStyle: value });
                },
                __next40pxDefaultSize: true,
                __nextHasNoMarginBottom: true
              }
            ),
            iconBorderStyle && iconBorderStyle !== "none" && /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(
              ResponsiveControl23,
              {
                label: __27("Border Width", "digiblocks")
              },
              /* @__PURE__ */ wp.element.createElement(
                DimensionControl21,
                {
                  values: iconBorderWidth[localActiveDevice],
                  onChange: (value) => setAttributes({
                    iconBorderWidth: {
                      ...iconBorderWidth,
                      [localActiveDevice]: value
                    }
                  })
                }
              )
            ), /* @__PURE__ */ wp.element.createElement(
              ResponsiveControl23,
              {
                label: __27("Border Radius", "digiblocks")
              },
              /* @__PURE__ */ wp.element.createElement(
                DimensionControl21,
                {
                  values: iconBorderRadius[localActiveDevice],
                  onChange: (value) => setAttributes({
                    iconBorderRadius: {
                      ...iconBorderRadius,
                      [localActiveDevice]: value
                    }
                  })
                }
              )
            )),
            /* @__PURE__ */ wp.element.createElement(
              ResponsiveControl23,
              {
                label: __27("Padding", "digiblocks")
              },
              /* @__PURE__ */ wp.element.createElement(
                DimensionControl21,
                {
                  values: padding[localActiveDevice],
                  onChange: (value) => setAttributes({
                    padding: {
                      ...padding,
                      [localActiveDevice]: value
                    }
                  })
                }
              )
            )
          ), showLabels && /* @__PURE__ */ wp.element.createElement(
            TabPanelBody24,
            {
              tab: "style",
              name: "typography",
              title: __27("Typography", "digiblocks"),
              initialOpen: false
            },
            /* @__PURE__ */ wp.element.createElement(
              TypographyControl17,
              {
                label: __27(
                  "Label Typography",
                  "digiblocks"
                ),
                value: textTypography,
                onChange: (value) => setAttributes({
                  textTypography: value
                }),
                defaults: {
                  fontSize: { desktop: 14, tablet: 13, mobile: 12 },
                  fontSizeUnit: "px",
                  lineHeight: { desktop: 1.5, tablet: 1.4, mobile: 1.3 },
                  lineHeightUnit: "em"
                }
              }
            )
          ));
        case "advanced":
          return /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(
            TabPanelBody24,
            {
              tab: "advanced",
              name: "animation",
              title: __27("Animation", "digiblocks"),
              initialOpen: true
            },
            /* @__PURE__ */ wp.element.createElement(
              SelectControl24,
              {
                label: __27("Animation Effect", "digiblocks"),
                value: animation,
                options: animationOptions,
                onChange: (value) => setAttributes({ animation: value }),
                __next40pxDefaultSize: true,
                __nextHasNoMarginBottom: true
              }
            ),
            animation && animation !== "none" && /* @__PURE__ */ wp.element.createElement("div", { style: { marginTop: "10px" } }, /* @__PURE__ */ wp.element.createElement(
              Button22,
              {
                variant: "secondary",
                isSecondary: true,
                onClick: handlePreviewClick,
                style: { width: "100%" }
              },
              __27("Preview Animation", "digiblocks")
            ))
          ), /* @__PURE__ */ wp.element.createElement(
            TabPanelBody24,
            {
              tab: "advanced",
              name: "visibility",
              title: __27("Visibility", "digiblocks"),
              initialOpen: false
            },
            /* @__PURE__ */ wp.element.createElement("div", { className: "components-base-control__help", style: {
              padding: "12px",
              backgroundColor: "#f0f6fc",
              border: "1px solid #c3ddfd",
              borderRadius: "4px",
              marginBottom: "16px"
            } }, /* @__PURE__ */ wp.element.createElement("strong", null, __27("Editor Note:", "digiblocks")), /* @__PURE__ */ wp.element.createElement("br", null), __27("Hidden elements appear with reduced opacity in the editor for easy editing. Visibility changes only take effect on the frontend.", "digiblocks")),
            /* @__PURE__ */ wp.element.createElement(
              ToggleControl23,
              {
                label: __27("Hide on Desktop", "digiblocks"),
                checked: visibility.desktop,
                onChange: (value) => setAttributes({
                  visibility: {
                    ...visibility,
                    desktop: value
                  }
                }),
                __nextHasNoMarginBottom: true
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              ToggleControl23,
              {
                label: __27("Hide on Tablet", "digiblocks"),
                checked: visibility.tablet,
                onChange: (value) => setAttributes({
                  visibility: {
                    ...visibility,
                    tablet: value
                  }
                }),
                __nextHasNoMarginBottom: true
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              ToggleControl23,
              {
                label: __27("Hide on Mobile", "digiblocks"),
                checked: visibility.mobile,
                onChange: (value) => setAttributes({
                  visibility: {
                    ...visibility,
                    mobile: value
                  }
                }),
                __nextHasNoMarginBottom: true
              }
            )
          ), /* @__PURE__ */ wp.element.createElement(
            TabPanelBody24,
            {
              tab: "advanced",
              name: "additional",
              title: __27("Additional", "digiblocks"),
              initialOpen: false
            },
            /* @__PURE__ */ wp.element.createElement("div", { className: "components-base-control html-anchor-control" }, /* @__PURE__ */ wp.element.createElement("div", { className: "components-base-control__field" }, /* @__PURE__ */ wp.element.createElement("label", { className: "components-base-control__label", htmlFor: "html-anchor" }, __27("HTML anchor", "digiblocks")), /* @__PURE__ */ wp.element.createElement(
              "input",
              {
                className: "components-text-control__input",
                type: "text",
                id: "html-anchor",
                value: anchor || "",
                onChange: (e) => setAttributes({ anchor: e.target.value }),
                "aria-describedby": "html-anchor-help",
                autoCapitalize: "none",
                autoComplete: "off"
              }
            )), /* @__PURE__ */ wp.element.createElement("p", { id: "html-anchor-help", className: "components-base-control__help" }, __27(`Enter a word or two \u2014 without spaces \u2014 to make a unique web address just for this block, called an "anchor". Then, you'll be able to link directly to this section of your page.`, "digiblocks"), " ", /* @__PURE__ */ wp.element.createElement(
              "a",
              {
                className: "components-external-link",
                href: "https://wordpress.org/documentation/article/page-jumps/",
                target: "_blank",
                rel: "external noreferrer noopener"
              },
              /* @__PURE__ */ wp.element.createElement("span", { className: "components-external-link__contents" }, __27("Learn more about anchors", "digiblocks")),
              /* @__PURE__ */ wp.element.createElement("span", { className: "components-external-link__icon", "aria-label": "(opens in a new tab)" }, "\u2197")
            ))),
            /* @__PURE__ */ wp.element.createElement("div", { className: "components-base-control" }, /* @__PURE__ */ wp.element.createElement("div", { className: "components-base-control__field" }, /* @__PURE__ */ wp.element.createElement("label", { className: "components-base-control__label", htmlFor: "additional-css-classes" }, __27("Additional CSS class(es)", "digiblocks")), /* @__PURE__ */ wp.element.createElement(
              "input",
              {
                className: "components-text-control__input",
                type: "text",
                id: "additional-css-classes",
                value: customClasses || "",
                onChange: (e) => setAttributes({ customClasses: e.target.value }),
                "aria-describedby": "additional-css-classes-help",
                autoComplete: "off"
              }
            )), /* @__PURE__ */ wp.element.createElement("p", { id: "additional-css-classes-help", className: "components-base-control__help" }, __27("Separate multiple classes with spaces.", "digiblocks")))
          ));
        default:
          return null;
      }
    };
    const blockProps = useBlockProps43({
      className: `digiblocks-social-icons ${id} ${customClasses || ""}`,
      id: anchor || null
      // Set the anchor as ID if provided
    });
    const renderSocialIcons = () => {
      const socialIconsList = icons.map((icon, index) => {
        return /* @__PURE__ */ wp.element.createElement(
          "div",
          {
            key: icon.id || index,
            className: "digiblocks-social-wrapper",
            id: `social-icon-${index}`
          },
          /* @__PURE__ */ wp.element.createElement(
            "div",
            {
              className: "digiblocks-social-icon",
              onClick: () => {
                openUrlPopover(index);
              }
            },
            /* @__PURE__ */ wp.element.createElement(
              "div",
              {
                className: "digiblocks-social-icon-icon"
              },
              icon.iconValue && icon.iconValue.network ? /* @__PURE__ */ wp.element.createElement("span", { dangerouslySetInnerHTML: {
                __html: `<svg xmlns="http://www.w3.org/2000/svg" viewBox="${icon.iconValue.network === "facebook" ? "0 0 320 512" : icon.iconValue.network === "twitter" ? "0 0 512 512" : icon.iconValue.network === "linkedin" ? "0 0 448 512" : icon.iconValue.network === "instagram" ? "0 0 448 512" : icon.iconValue.network === "pinterest" ? "0 0 384 512" : icon.iconValue.network === "youtube" ? "0 0 576 512" : icon.iconValue.network === "dribbble" ? "0 0 512 512" : icon.iconValue.network === "github" ? "0 0 496 512" : icon.iconValue.network === "behance" ? "0 0 576 512" : icon.iconValue.network === "vimeo" ? "0 0 448 512" : icon.iconValue.network === "tiktok" ? "0 0 448 512" : icon.iconValue.network === "email" ? "0 0 512 512" : "0 0 640 512"}" fill="currentColor"><path d="${icon.iconValue.svg}"/></svg>`
              } }) : /* @__PURE__ */ wp.element.createElement(
                "div",
                {
                  style: {
                    width: "100%",
                    height: "100%",
                    display: "flex",
                    alignItems: "center",
                    justifyContent: "center",
                    backgroundColor: "#f0f0f0",
                    borderRadius: "50%",
                    fontSize: "20px",
                    color: "#555"
                  }
                },
                "?"
              )
            ),
            showLabels && icon.label && /* @__PURE__ */ wp.element.createElement("span", { className: "digiblocks-social-icon-label" }, icon.label)
          ),
          icons.length > 1 && /* @__PURE__ */ wp.element.createElement(
            Button22,
            {
              className: "digiblocks-social-icon-remove",
              onClick: () => removeSocialIcon(index),
              icon: "no-alt",
              isSmall: true,
              label: __27("Remove", "digiblocks")
            }
          )
        );
      });
      socialIconsList.push(
        /* @__PURE__ */ wp.element.createElement(
          "div",
          {
            key: "add-social-icon",
            className: "digiblocks-social-icon add-social",
            onClick: addSocialIcon,
            title: __27("Add Social Icon", "digiblocks")
          },
          plusIcon
        )
      );
      return socialIconsList;
    };
    return /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(InspectorControls23, null, /* @__PURE__ */ wp.element.createElement(
      CustomTabPanel23,
      {
        tabs: tabList,
        activeTab,
        onSelect: setActiveTab
      },
      renderTabContent()
    )), /* @__PURE__ */ wp.element.createElement("style", { dangerouslySetInnerHTML: { __html: generateCSS() } }), /* @__PURE__ */ wp.element.createElement("div", { ...blockProps }, renderSocialIcons(), renderSocialSelectPopover(), renderUrlPopover()));
  };
  var edit_default23 = SocialIconsEdit;

  // blocks/social-icons/save.js
  var { useBlockProps: useBlockProps44 } = window.wp.blockEditor;
  var SocialIconsSave = ({ attributes }) => {
    const {
      id,
      anchor,
      customClasses,
      icons,
      align,
      animation,
      showLabels,
      labelPosition
    } = attributes;
    const blockClasses = [
      "digiblocks-social-icons",
      id,
      `align-${align}`,
      animation !== "none" ? `animate-${animation}` : "",
      customClasses || ""
    ].filter(Boolean).join(" ");
    const blockProps = useBlockProps44.save({
      className: blockClasses,
      id: anchor || null
    });
    const renderSocialIcons = () => {
      return icons.map((icon, index) => {
        if (!icon.iconValue || !icon.iconValue.network || !icon.url) {
          return null;
        }
        let relAttr = icon.openInNewTab ? "noopener noreferrer" : "";
        if (icon.rel) {
          relAttr = relAttr ? `${relAttr} ${icon.rel}` : icon.rel;
        }
        return /* @__PURE__ */ wp.element.createElement(
          "a",
          {
            key: icon.id || index,
            href: icon.url,
            className: "digiblocks-social-icon",
            target: icon.openInNewTab ? "_blank" : "_self",
            rel: relAttr || void 0,
            "aria-label": icon.label || icon.iconValue.name || "Social icon"
          },
          /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-social-icon-icon" }, /* @__PURE__ */ wp.element.createElement(
            "span",
            {
              dangerouslySetInnerHTML: {
                __html: `<svg xmlns="http://www.w3.org/2000/svg" viewBox="${icon.iconValue.network === "facebook" ? "0 0 320 512" : icon.iconValue.network === "twitter" ? "0 0 512 512" : icon.iconValue.network === "linkedin" ? "0 0 448 512" : icon.iconValue.network === "instagram" ? "0 0 448 512" : icon.iconValue.network === "pinterest" ? "0 0 384 512" : icon.iconValue.network === "youtube" ? "0 0 576 512" : icon.iconValue.network === "dribbble" ? "0 0 512 512" : icon.iconValue.network === "github" ? "0 0 496 512" : icon.iconValue.network === "behance" ? "0 0 576 512" : icon.iconValue.network === "vimeo" ? "0 0 448 512" : icon.iconValue.network === "tiktok" ? "0 0 448 512" : icon.iconValue.network === "email" ? "0 0 512 512" : "0 0 640 512"}" fill="currentColor"><path d="${icon.iconValue.network === "facebook" ? "M80 299.3V512H196V299.3h86.5l18-97.8H196V166.9c0-51.7 20.3-71.5 72.7-71.5c16.3 0 29.4 .4 37 1.2V7.9C291.4 4 256.4 0 236.2 0C129.3 0 80 50.5 80 159.4v42.1H14v97.8H80z" : icon.iconValue.network === "twitter" ? "M389.2 48h70.6L305.6 224.2 487 464H345L233.7 318.6 106.5 464H35.8L200.7 275.5 26.8 48H172.4L272.9 180.9 389.2 48zM364.4 421.8h39.1L151.1 88h-42L364.4 421.8z" : icon.iconValue.network === "linkedin" ? "M100.3 448H7.4V148.9h92.9zM53.8 108.1C24.1 108.1 0 83.5 0 53.8a53.8 53.8 0 0 1 107.6 0c0 29.7-24.1 54.3-53.8 54.3zM447.9 448h-92.7V302.4c0-34.7-.7-79.2-48.3-79.2-48.3 0-55.7 37.7-55.7 76.7V448h-92.8V148.9h89.1v40.8h1.3c12.4-23.5 42.7-48.3 87.9-48.3 94 0 111.3 61.9 111.3 142.3V448z" : icon.iconValue.network === "instagram" ? "M224.1 141c-63.6 0-114.9 51.3-114.9 114.9s51.3 114.9 114.9 114.9S339 319.5 339 255.9 287.7 141 224.1 141zm0 189.6c-41.1 0-74.7-33.5-74.7-74.7s33.5-74.7 74.7-74.7 74.7 33.5 74.7 74.7-33.6 74.7-74.7 74.7zm146.4-194.3c0 14.9-12 26.8-26.8 26.8-14.9 0-26.8-12-26.8-26.8s12-26.8 26.8-26.8 26.8 12 26.8 26.8zm76.1 27.2c-1.7-35.9-9.9-67.7-36.2-93.9-26.2-26.2-58-34.4-93.9-36.2-37-2.1-147.9-2.1-184.9 0-35.8 1.7-67.6 9.9-93.9 36.1s-34.4 58-36.2 93.9c-2.1 37-2.1 147.9 0 184.9 1.7 35.9 9.9 67.7 36.2 93.9s58 34.4 93.9 36.2c37 2.1 147.9 2.1 184.9 0 35.9-1.7 67.7-9.9 93.9-36.2 26.2-26.2 34.4-58 36.2-93.9 2.1-37 2.1-147.8 0-184.8zM398.8 388c-7.8 19.6-22.9 34.7-42.6 42.6-29.5 11.7-99.5 9-132.1 9s-102.7 2.6-132.1-9c-19.6-7.8-34.7-22.9-42.6-42.6-11.7-29.5-9-99.5-9-132.1s-2.6-102.7 9-132.1c7.8-19.6 22.9-34.7 42.6-42.6 29.5-11.7 99.5-9 132.1-9s102.7-2.6 132.1 9c19.6 7.8 34.7 22.9 42.6 42.6 11.7 29.5 9 99.5 9 132.1s2.7 102.7-9 132.1z" : icon.iconValue.network === "pinterest" ? "M204 6.5C101.4 6.5 0 74.9 0 185.6 0 256 39.6 296 63.6 296c9.9 0 15.6-27.6 15.6-35.4 0-9.3-23.7-29.1-23.7-67.8 0-80.4 61.2-137.4 140.4-137.4 68.1 0 118.5 38.7 118.5 109.8 0 53.1-21.3 152.7-90.3 152.7-24.9 0-46.2-18-46.2-43.8 0-37.8 26.4-74.4 26.4-113.4 0-66.2-93.9-54.2-93.9 25.8 0 16.8 2.1 35.4 9.6 50.7-13.8 59.4-42 147.9-42 209.1 0 18.9 2.7 37.5 4.5 56.4 3.4 3.8 1.7 3.4 6.9 1.5 50.4-69 48.6-82.5 71.4-172.8 12.3 23.4 44.1 36 69.3 36 106.2 0 153.9-103.5 153.9-196.8C384 71.3 298.2 6.5 204 6.5z" : icon.iconValue.network === "youtube" ? "M549.7 124.1c-6.3-23.7-24.8-42.3-48.3-48.6C458.8 64 288 64 288 64S117.2 64 74.6 75.5c-23.5 6.3-42 24.9-48.3 48.6-11.4 42.9-11.4 132.3-11.4 132.3s0 89.4 11.4 132.3c6.3 23.7 24.8 41.5 48.3 47.8C117.2 448 288 448 288 448s170.8 0 213.4-11.5c23.5-6.3 42-24.2 48.3-47.8 11.4-42.9 11.4-132.3 11.4-132.3s0-89.4-11.4-132.3zm-317.5 213.5V175.2l142.7 81.2-142.7 81.2z" : icon.iconValue.network === "dribbble" ? "M86.6 64l85.2 85.2C194.5 121.7 208 86.4 208 48c0-14.7-2-28.9-5.7-42.4C158.6 15 119 35.5 86.6 64zM64 86.6C35.5 119 15 158.6 5.6 202.3C19.1 206 33.3 208 48 208c38.4 0 73.7-13.5 101.3-36.1L64 86.6zM256 0c-7.3 0-14.6 .3-21.8 .9C238 16 240 31.8 240 48c0 47.3-17.1 90.5-45.4 124L256 233.4 425.4 64C380.2 24.2 320.9 0 256 0zM48 240c-16.2 0-32-2-47.1-5.8C.3 241.4 0 248.7 0 256c0 64.9 24.2 124.2 64 169.4L233.4 256 172 194.6C138.5 222.9 95.3 240 48 240zm463.1 37.8c.6-7.2 .9-14.5 .9-21.8c0-64.9-24.2-124.2-64-169.4L278.6 256 340 317.4c33.4-28.3 76.7-45.4 124-45.4c16.2 0 32 2 47.1 5.8zm-4.7 31.9C492.9 306 478.7 304 464 304c-38.4 0-73.7 13.5-101.3 36.1L448 425.4c28.5-32.3 49.1-71.9 58.4-115.7zM340.1 362.7C317.5 390.3 304 425.6 304 464c0 14.7 2 28.9 5.7 42.4C353.4 497 393 476.5 425.4 448l-85.2-85.2zM317.4 340L256 278.6 86.6 448c45.1 39.8 104.4 64 169.4 64c7.3 0 14.6-.3 21.8-.9C274 496 272 480.2 272 464c0-47.3 17.1-90.5 45.4-124z" : icon.iconValue.network === "github" ? "M165.9 397.4c0 2-2.3 3.6-5.2 3.6-3.3 .3-5.6-1.3-5.6-3.6 0-2 2.3-3.6 5.2-3.6 3-.3 5.6 1.3 5.6 3.6zm-31.1-4.5c-.7 2 1.3 4.3 4.3 4.9 2.6 1 5.6 0 6.2-2s-1.3-4.3-4.3-5.2c-2.6-.7-5.5 .3-6.2 2.3zm44.2-1.7c-2.9 .7-4.9 2.6-4.6 4.9 .3 2 2.9 3.3 5.9 2.6 2.9-.7 4.9-2.6 4.6-4.6-.3-1.9-3-3.2-5.9-2.9zM244.8 8C106.1 8 0 113.3 0 252c0 110.9 69.8 205.8 169.5 239.2 12.8 2.3 17.3-5.6 17.3-12.1 0-6.2-.3-40.4-.3-61.4 0 0-70 15-84.7-29.8 0 0-11.4-29.1-27.8-36.6 0 0-22.9-15.7 1.6-15.4 0 0 24.9 2 38.6 25.8 21.9 38.6 58.6 27.5 72.9 20.9 2.3-16 8.8-27.1 16-33.7-55.9-6.2-112.3-14.3-112.3-110.5 0-27.5 7.6-41.3 23.6-58.9-2.6-6.5-11.1-33.3 2.6-67.9 20.9-6.5 69 27 69 27 20-5.6 41.5-8.5 62.8-8.5s42.8 2.9 62.8 8.5c0 0 48.1-33.6 69-27 13.7 34.7 5.2 61.4 2.6 67.9 16 17.7 25.8 31.5 25.8 58.9 0 96.5-58.9 104.2-114.8 110.5 9.2 7.9 17 22.9 17 46.4 0 33.7-.3 75.4-.3 83.6 0 6.5 4.6 14.4 17.3 12.1C428.2 457.8 496 362.9 496 252 496 113.3 383.5 8 244.8 8zM97.2 352.9c-1.3 1-1 3.3 .7 5.2 1.6 1.6 3.9 2.3 5.2 1 1.3-1 1-3.3-.7-5.2-1.6-1.6-3.9-2.3-5.2-1zm-10.8-8.1c-.7 1.3 .3 2.9 2.3 3.9 1.6 1 3.6 .7 4.3-.7 .7-1.3-.3-2.9-2.3-3.9-2-.6-3.6-.3-4.3 .7zm32.4 35.6c-1.6 1.3-1 4.3 1.3 6.2 2.3 2.3 5.2 2.6 6.5 1 1.3-1.3 .7-4.3-1.3-6.2-2.2-2.3-5.2-2.6-6.5-1zm-11.4-14.7c-1.6 1-1.6 3.6 0 5.9 1.6 2.3 4.3 3.3 5.6 2.3 1.6-1.3 1.6-3.9 0-6.2-1.4-2.3-4-3.3-5.6-2z" : icon.iconValue.network === "behance" ? "M232 237.2c31.8-15.2 48.4-38.2 48.4-74 0-70.6-52.6-87.8-113.3-87.8H0v354.4h171.8c64.4 0 124.9-30.9 124.9-102.9 0-44.5-21.1-77.4-64.7-89.7zM77.9 135.9H151c28.1 0 53.4 7.9 53.4 40.5 0 30.1-19.7 42.2-47.5 42.2h-79v-82.7zm83.3 233.7H77.9V272h84.9c34.3 0 56 14.3 56 50.6 0 35.8-25.9 47-57.6 47zm358.5-240.7H376V94h143.7v34.9zM576 305.2c0-75.9-44.4-139.2-124.9-139.2-78.2 0-131.3 58.8-131.3 135.8 0 79.9 50.3 134.7 131.3 134.7 61.3 0 101-27.6 120.1-86.3H509c-6.7 21.9-34.3 33.5-55.7 33.5-41.3 0-63-24.2-63-65.3h185.1c.3-4.2 .6-8.7 .6-13.2zM390.4 274c2.3-33.7 24.7-54.8 58.5-54.8 35.4 0 53.2 20.8 56.2 54.8H390.4z" : icon.iconValue.network === "vimeo" ? "M447.8 153.6c-2 43.6-32.4 103.3-91.4 179.1-60.9 79.2-112.4 118.8-154.6 118.8-26.1 0-48.2-24.1-66.3-72.3C100.3 250 85.3 174.3 56.2 174.3c-3.4 0-15.1 7.1-35.2 21.1L0 168.2c51.6-45.3 100.9-95.7 131.8-98.5 34.9-3.4 56.3 20.5 64.4 71.5 28.7 181.5 41.4 208.9 93.6 126.7 18.7-29.6 28.8-52.1 30.2-67.6 4.8-45.9-35.8-42.8-63.3-31 22-72.1 64.1-107.1 126.2-105.1 45.8 1.2 67.5 31.1 64.9 89.4z" : icon.iconValue.network === "tiktok" ? "M448 209.9a210.1 210.1 0 0 1 -122.8-39.3V349.4A162.6 162.6 0 1 1 185 188.3V278.2a74.6 74.6 0 1 0 52.2 71.2V0l88 0a121.2 121.2 0 0 0 1.9 22.2h0A122.2 122.2 0 0 0 381 102.4a121.4 121.4 0 0 0 67 20.1z" : icon.iconValue.network === "email" ? "M48 64C21.5 64 0 85.5 0 112c0 15.1 7.1 29.3 19.2 38.4L236.8 313.6c11.4 8.5 27 8.5 38.4 0L492.8 150.4c12.1-9.1 19.2-23.3 19.2-38.4c0-26.5-21.5-48-48-48L48 64zM0 176L0 384c0 35.3 28.7 64 64 64l384 0c35.3 0 64-28.7 64-64l0-208L294.4 339.2c-22.8 17.1-54 17.1-76.8 0L0 176z" : "M579.8 267.7c56.5-56.5 56.5-148 0-204.5c-50-50-128.8-56.5-186.3-15.4l-1.6 1.1c-14.4 10.3-17.7 30.3-7.4 44.6s30.3 17.7 44.6 7.4l1.6-1.1c32.1-22.9 76-19.3 103.8 8.6c31.5 31.5 31.5 82.5 0 114L422.3 334.8c-31.5 31.5-82.5 31.5-114 0c-27.9-27.9-31.5-71.8-8.6-103.8l1.1-1.6c10.3-14.4 6.9-34.4-7.4-44.6s-34.4-6.9-44.6 7.4l-1.1 1.6C206.5 251.2 213 330 263 380c56.5 56.5 148 56.5 204.5 0L579.8 267.7zM60.2 244.3c-56.5 56.5-56.5 148 0 204.5c50 50 128.8 56.5 186.3 15.4l1.6-1.1c14.4-10.3 17.7-30.3 7.4-44.6s-30.3-17.7-44.6-7.4l-1.6 1.1c-32.1 22.9-76 19.3-103.8-8.6C74 372 74 321 105.5 289.5L217.7 177.2c31.5-31.5 82.5-31.5 114 0c27.9 27.9 31.5 71.8 8.6 103.9l-1.1 1.6c-10.3 14.4-6.9 34.4 7.4 44.6s34.4 6.9 44.6-7.4l1.1-1.6C433.5 260.8 427 182 377 132c-56.5-56.5-148-56.5-204.5 0L60.2 244.3z"}"/></svg>`
              }
            }
          )),
          showLabels && icon.label && /* @__PURE__ */ wp.element.createElement("span", { className: "digiblocks-social-icon-label" }, icon.label)
        );
      }).filter(Boolean);
    };
    return /* @__PURE__ */ wp.element.createElement("div", { ...blockProps }, renderSocialIcons());
  };
  var save_default23 = SocialIconsSave;

  // blocks/spacer/edit.js
  var { __: __28 } = window.wp.i18n;
  var {
    useBlockProps: useBlockProps45,
    InspectorControls: InspectorControls24
  } = window.wp.blockEditor;
  var {
    ToggleControl: ToggleControl24,
    RangeControl: RangeControl23
  } = window.wp.components;
  var { useState: useState24, useEffect: useEffect24 } = window.wp.element;
  var { useBlockId: useBlockId24 } = digi.utils;
  var { tabIcons: tabIcons24 } = digi.icons;
  var { ResponsiveControl: ResponsiveControl24, CustomTabPanel: CustomTabPanel24 } = digi.components;
  var SpacerEdit = ({ attributes, setAttributes, clientId }) => {
    const {
      id,
      anchor,
      visibility,
      customClasses,
      height
    } = attributes;
    useBlockId24(id, clientId, setAttributes);
    const [localActiveDevice, setLocalActiveDevice] = useState24(window.digi.responsiveState.activeDevice);
    useEffect24(() => {
      const unsubscribe = window.digi.responsiveState.subscribe((device) => {
        setLocalActiveDevice(device);
      });
      return unsubscribe;
    }, []);
    const [activeTab, setActiveTab] = useState24(() => {
      if (window.digi.uiState) {
        const savedTab = window.digi.uiState.getActiveTab(clientId);
        if (savedTab)
          return savedTab;
      }
      return "options";
    });
    const tabList = [
      {
        name: "options",
        title: __28("Options", "digiblocks"),
        icon: tabIcons24.optionsIcon
      },
      {
        name: "advanced",
        title: __28("Advanced", "digiblocks"),
        icon: tabIcons24.advancedIcon
      }
    ];
    const generateCSS = () => {
      const activeDevice = window.digi.responsiveState.activeDevice;
      const currentHeight = height[activeDevice] || (activeDevice === "tablet" ? 60 : activeDevice === "mobile" ? 40 : 80);
      return `
            /* Spacer Block Styles */
            .${id} {
                height: ${currentHeight}px;
                position: relative;
            }
            
            /* Editor-only styles */
            .editor-styles-wrapper .${id} .digiblocks-spacer-icon-wrapper {
                display: flex;
                align-items: center;
                justify-content: center;
                background-color: #e4e4e4;
                height: 100%;
                border-radius: 4px;
                pointer-events: none;
            }
            
            .editor-styles-wrapper .${id} .digiblocks-spacer-icon-wrapper svg {
                width: 1em;
				min-width: 1.5rem;
                height: 100%;
                fill: #949494;
            }

			/* Visibility Controls */
			${visibility.desktop ? `
				@media (min-width: 992px) {
					.${id} {
						opacity: 0.5 !important;
					}
				}
			` : ""}

			${visibility.tablet ? `
				@media (min-width: 768px) and (max-width: 991px) {
					.${id} {
						opacity: 0.5 !important;
					}
				}
			` : ""}

			${visibility.mobile ? `
				@media (max-width: 767px) {
					.${id} {
						opacity: 0.5 !important;
					}
				}
			` : ""}
        `;
    };
    const renderTabContent = () => {
      switch (activeTab) {
        case "options":
          return /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement("div", { className: "components-panel__body is-opened" }, /* @__PURE__ */ wp.element.createElement(
            ResponsiveControl24,
            {
              label: __28("Height", "digiblocks")
            },
            /* @__PURE__ */ wp.element.createElement(
              RangeControl23,
              {
                value: height[localActiveDevice],
                onChange: (value) => setAttributes({
                  height: {
                    ...height,
                    [localActiveDevice]: value
                  }
                }),
                min: 1,
                max: 500,
                step: 1,
                __next40pxDefaultSize: true,
                __nextHasNoMarginBottom: true
              }
            )
          )));
        case "advanced":
          return /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(
            TabPanelBody,
            {
              tab: "advanced",
              name: "visibility",
              title: __28("Visibility", "digiblocks"),
              initialOpen: false
            },
            /* @__PURE__ */ wp.element.createElement("div", { className: "components-base-control__help", style: {
              padding: "12px",
              backgroundColor: "#f0f6fc",
              border: "1px solid #c3ddfd",
              borderRadius: "4px",
              marginBottom: "16px"
            } }, /* @__PURE__ */ wp.element.createElement("strong", null, __28("Editor Note:", "digiblocks")), /* @__PURE__ */ wp.element.createElement("br", null), __28("Hidden elements appear with reduced opacity in the editor for easy editing. Visibility changes only take effect on the frontend.", "digiblocks")),
            /* @__PURE__ */ wp.element.createElement(
              ToggleControl24,
              {
                label: __28("Hide on Desktop", "digiblocks"),
                checked: visibility.desktop,
                onChange: (value) => setAttributes({
                  visibility: {
                    ...visibility,
                    desktop: value
                  }
                }),
                __nextHasNoMarginBottom: true
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              ToggleControl24,
              {
                label: __28("Hide on Tablet", "digiblocks"),
                checked: visibility.tablet,
                onChange: (value) => setAttributes({
                  visibility: {
                    ...visibility,
                    tablet: value
                  }
                }),
                __nextHasNoMarginBottom: true
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              ToggleControl24,
              {
                label: __28("Hide on Mobile", "digiblocks"),
                checked: visibility.mobile,
                onChange: (value) => setAttributes({
                  visibility: {
                    ...visibility,
                    mobile: value
                  }
                }),
                __nextHasNoMarginBottom: true
              }
            )
          ), /* @__PURE__ */ wp.element.createElement("div", { className: "components-panel__body is-opened" }, /* @__PURE__ */ wp.element.createElement("div", { className: "components-base-control html-anchor-control" }, /* @__PURE__ */ wp.element.createElement("div", { className: "components-base-control__field" }, /* @__PURE__ */ wp.element.createElement("label", { className: "components-base-control__label", htmlFor: "html-anchor" }, __28("HTML anchor", "digiblocks")), /* @__PURE__ */ wp.element.createElement(
            "input",
            {
              className: "components-text-control__input",
              type: "text",
              id: "html-anchor",
              value: anchor || "",
              onChange: (e) => setAttributes({ anchor: e.target.value }),
              "aria-describedby": "html-anchor-help",
              autoCapitalize: "none",
              autoComplete: "off"
            }
          )), /* @__PURE__ */ wp.element.createElement("p", { id: "html-anchor-help", className: "components-base-control__help" }, __28(`Enter a word or two \u2014 without spaces \u2014 to make a unique web address just for this block, called an "anchor". Then, you'll be able to link directly to this section of your page.`, "digiblocks"), " ", /* @__PURE__ */ wp.element.createElement(
            "a",
            {
              className: "components-external-link",
              href: "https://wordpress.org/documentation/article/page-jumps/",
              target: "_blank",
              rel: "external noreferrer noopener"
            },
            /* @__PURE__ */ wp.element.createElement("span", { className: "components-external-link__contents" }, __28("Learn more about anchors", "digiblocks")),
            /* @__PURE__ */ wp.element.createElement("span", { className: "components-external-link__icon", "aria-label": "(opens in a new tab)" }, "\u2197")
          ))), /* @__PURE__ */ wp.element.createElement("div", { className: "components-base-control" }, /* @__PURE__ */ wp.element.createElement("div", { className: "components-base-control__field" }, /* @__PURE__ */ wp.element.createElement("label", { className: "components-base-control__label", htmlFor: "additional-css-classes" }, __28("Additional CSS class(es)", "digiblocks")), /* @__PURE__ */ wp.element.createElement(
            "input",
            {
              className: "components-text-control__input",
              type: "text",
              id: "additional-css-classes",
              value: customClasses || "",
              onChange: (e) => setAttributes({ customClasses: e.target.value }),
              "aria-describedby": "additional-css-classes-help",
              autoComplete: "off"
            }
          )), /* @__PURE__ */ wp.element.createElement("p", { id: "additional-css-classes-help", className: "components-base-control__help" }, __28("Separate multiple classes with spaces.", "digiblocks")))));
        default:
          return null;
      }
    };
    const blockProps = useBlockProps45({
      className: `digiblocks-spacer ${id} ${customClasses || ""}`,
      id: anchor || null
      // Set the anchor as ID if provided
    });
    return /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(InspectorControls24, null, /* @__PURE__ */ wp.element.createElement(
      CustomTabPanel24,
      {
        tabs: tabList,
        activeTab,
        onSelect: (tab) => {
          requestAnimationFrame(() => {
            setActiveTab(tab);
          });
        }
      },
      renderTabContent()
    )), /* @__PURE__ */ wp.element.createElement("style", { dangerouslySetInnerHTML: { __html: generateCSS() } }), /* @__PURE__ */ wp.element.createElement("div", { ...blockProps }, /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-spacer-icon-wrapper" }, /* @__PURE__ */ wp.element.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 512 512" }, /* @__PURE__ */ wp.element.createElement("path", { d: "M512 464c0-8.8-7.2-16-16-16L16 448c-8.8 0-16 7.2-16 16s7.2 16 16 16l480 0c8.8 0 16-7.2 16-16zM144 320c-8.8 0-16-7.2-16-16l0-96c0-8.8 7.2-16 16-16l224 0c8.8 0 16 7.2 16 16l0 96c0 8.8-7.2 16-16 16l-224 0zm224 32c26.5 0 48-21.5 48-48l0-96c0-26.5-21.5-48-48-48l-224 0c-26.5 0-48 21.5-48 48l0 96c0 26.5 21.5 48 48 48l224 0zM496 64c8.8 0 16-7.2 16-16s-7.2-16-16-16L16 32C7.2 32 0 39.2 0 48s7.2 16 16 16l480 0z" })))));
  };
  var edit_default24 = SpacerEdit;

  // blocks/spacer/save.js
  var { useBlockProps: useBlockProps46 } = window.wp.blockEditor;
  var SpacerSave = ({ attributes }) => {
    const {
      id,
      anchor,
      customClasses,
      height
    } = attributes;
    const blockClasses = [
      "digiblocks-spacer",
      id,
      customClasses || ""
    ].filter(Boolean).join(" ");
    const blockProps = useBlockProps46.save({
      className: blockClasses,
      id: anchor || null
    });
    return /* @__PURE__ */ wp.element.createElement("div", { ...blockProps });
  };
  var save_default24 = SpacerSave;

  // blocks/table/edit.js
  var { __: __29 } = window.wp.i18n;
  var {
    useBlockProps: useBlockProps47,
    RichText: RichText22,
    InspectorControls: InspectorControls25,
    PanelColorSettings: PanelColorSettings23,
    BlockControls: BlockControls6
  } = window.wp.blockEditor;
  var {
    SelectControl: SelectControl25,
    RangeControl: RangeControl24,
    ToggleControl: ToggleControl25,
    Button: Button23,
    ToolbarGroup,
    ToolbarButton,
    BaseControl: BaseControl6,
    Popover: Popover2,
    __experimentalToggleGroupControl: ToggleGroupControl23,
    __experimentalToggleGroupControlOption: ToggleGroupControlOption23
  } = window.wp.components;
  var { useState: useState25, useEffect: useEffect25, useRef: useRef21 } = window.wp.element;
  var { useBlockId: useBlockId25, getDimensionCSS: getDimensionCSS21, animations: animations22, animationPreview: animationPreview22 } = digi.utils;
  var { tabIcons: tabIcons25 } = digi.icons;
  var { ResponsiveControl: ResponsiveControl25, DimensionControl: DimensionControl22, TypographyControl: TypographyControl18, BoxShadowControl: BoxShadowControl20, CustomTabPanel: CustomTabPanel25, TabPanelBody: TabPanelBody25 } = digi.components;
  var TableEdit = ({ attributes, setAttributes, clientId }) => {
    const {
      id,
      anchor,
      visibility,
      customClasses,
      tableData,
      hasHeader,
      hasFooter,
      tableBorderColor,
      tableBorderWidth,
      tableBorderStyle,
      cellPadding,
      tableBorderCollapse,
      headerBackgroundColor,
      headerTextColor,
      headingTypography,
      bodyBackgroundColor,
      altRowBackgroundColor,
      bodyTextColor,
      textTypography,
      footerBackgroundColor,
      footerTextColor,
      contentTypography,
      borderRadius,
      boxShadow,
      boxShadowHover,
      margin,
      cellAlignment,
      headerAlignment,
      footerAlignment,
      tablePreset,
      responsiveMode,
      animation,
      firstColHeader,
      cellControls
    } = attributes;
    useBlockId25(id, clientId, setAttributes);
    const [localActiveDevice, setLocalActiveDevice] = useState25(window.digi.responsiveState.activeDevice);
    const [isAnimating, setIsAnimating] = useState25(false);
    const [activeTab, setActiveTab] = useState25(() => {
      if (window.digi.uiState) {
        const savedTab = window.digi.uiState.getActiveTab(clientId);
        if (savedTab)
          return savedTab;
      }
      return "options";
    });
    const [selectedCell, setSelectedCell] = useState25({ row: -1, col: -1 });
    const [isRatingPopoverOpen, setIsRatingPopoverOpen] = useState25(false);
    useEffect25(() => {
      const unsubscribe = window.digi.responsiveState.subscribe((device) => {
        setLocalActiveDevice(device);
      });
      return unsubscribe;
    }, []);
    useEffect25(() => {
      if (!tableData || tableData.length === 0) {
        setAttributes({
          tableData: [
            ["Header 1", "Header 2", "Header 3"],
            ["Row 1, Cell 1", "Row 1, Cell 2", "Row 1, Cell 3"],
            ["Row 2, Cell 1", "Row 2, Cell 2", "Row 2, Cell 3"]
          ]
        });
      }
      if (!cellControls) {
        setAttributes({
          cellControls: {}
        });
      }
    }, [tableData, cellControls, setAttributes]);
    const previewTimeoutRef = useRef21(null);
    useEffect25(() => {
      if (animation && animation !== "none") {
        const timeoutId = setTimeout(() => {
          animationPreview22(id, animation, animations22, previewTimeoutRef);
        }, 100);
        return () => clearTimeout(timeoutId);
      }
    }, [animation]);
    const handlePreviewClick = () => {
      animationPreview22(id, animation, animations22, previewTimeoutRef);
    };
    const borderStyleOptions = [
      { label: __29("Solid", "digiblocks"), value: "solid" },
      { label: __29("Dotted", "digiblocks"), value: "dotted" },
      { label: __29("Dashed", "digiblocks"), value: "dashed" },
      { label: __29("Double", "digiblocks"), value: "double" },
      { label: __29("None", "digiblocks"), value: "none" }
    ];
    const tablePresetOptions = [
      { label: __29("Default", "digiblocks"), value: "default" },
      { label: __29("Striped", "digiblocks"), value: "striped" },
      { label: __29("Bordered", "digiblocks"), value: "bordered" },
      { label: __29("Borderless", "digiblocks"), value: "borderless" },
      { label: __29("Modern", "digiblocks"), value: "modern" },
      { label: __29("Minimal", "digiblocks"), value: "minimal" }
    ];
    const animationOptions = [
      { label: __29("None", "digiblocks"), value: "none" },
      ...Object.keys(animations22).map((animation2) => ({
        label: animation2.replace(/-/g, " ").replace(/\b\w/g, (l) => l.toUpperCase()),
        value: animation2
      }))
    ];
    const tabList = [
      {
        name: "options",
        title: __29("Options", "digiblocks"),
        icon: tabIcons25.optionsIcon
      },
      {
        name: "style",
        title: __29("Style", "digiblocks"),
        icon: tabIcons25.styleIcon
      },
      {
        name: "advanced",
        title: __29("Advanced", "digiblocks"),
        icon: tabIcons25.advancedIcon
      }
    ];
    const addRow = (index) => {
      if (!tableData || tableData.length === 0)
        return;
      const newTableData = [...tableData];
      const columnsCount = newTableData[0].length;
      const newRow = Array(columnsCount).fill("");
      newTableData.splice(index + 1, 0, newRow);
      setAttributes({ tableData: newTableData });
    };
    const deleteRow = (index) => {
      if (!tableData || tableData.length <= 1) {
        return;
      }
      const newTableData = [...tableData];
      newTableData.splice(index, 1);
      setAttributes({ tableData: newTableData });
    };
    const addColumn = (index) => {
      if (!tableData || tableData.length === 0)
        return;
      const newTableData = tableData.map((row) => {
        const newRow = [...row];
        newRow.splice(index + 1, 0, "");
        return newRow;
      });
      setAttributes({ tableData: newTableData });
    };
    const deleteColumn = (index) => {
      if (!tableData || tableData[0].length <= 1) {
        return;
      }
      const newTableData = tableData.map((row) => {
        const newRow = [...row];
        newRow.splice(index, 1);
        return newRow;
      });
      setAttributes({ tableData: newTableData });
    };
    const updateCellContent = (value, rowIndex, colIndex) => {
      const newTableData = [...tableData];
      newTableData[rowIndex][colIndex] = value;
      setAttributes({ tableData: newTableData });
    };
    const handleCellClick = (rowIndex, colIndex) => {
      setSelectedCell({ row: rowIndex, col: colIndex });
    };
    const getCellControl = (row, col, controlType) => {
      if (!cellControls)
        return null;
      const cellKey = `${row}-${col}`;
      if (cellControls[cellKey] && cellControls[cellKey][controlType]) {
        return cellControls[cellKey][controlType];
      }
      return null;
    };
    const setCellControl = (row, col, controlType, value) => {
      const cellKey = `${row}-${col}`;
      const updatedControls = { ...cellControls || {} };
      if (!updatedControls[cellKey]) {
        updatedControls[cellKey] = {};
      }
      updatedControls[cellKey][controlType] = value;
      setAttributes({ cellControls: updatedControls });
    };
    const clearCellControl = (row, col, controlType) => {
      if (!cellControls)
        return;
      const cellKey = `${row}-${col}`;
      const updatedControls = { ...cellControls };
      if (updatedControls[cellKey] && updatedControls[cellKey][controlType]) {
        delete updatedControls[cellKey][controlType];
        if (Object.keys(updatedControls[cellKey]).length === 0) {
          delete updatedControls[cellKey];
        }
        setAttributes({ cellControls: updatedControls });
      }
    };
    const applyTablePreset = (preset) => {
      let newAttributes = {};
      switch (preset) {
        case "striped":
          newAttributes = {
            tablePreset: preset,
            tableBorderStyle: "solid",
            tableBorderWidth: 1,
            tableBorderColor: "#dee2e6",
            tableBorderCollapse: "collapse",
            headerBackgroundColor: "#f8f9fa",
            headerTextColor: "#212529",
            bodyBackgroundColor: "#ffffff",
            altRowBackgroundColor: "#f2f2f2",
            bodyTextColor: "#212529"
          };
          break;
        case "bordered":
          newAttributes = {
            tablePreset: preset,
            tableBorderStyle: "solid",
            tableBorderWidth: 2,
            tableBorderColor: "#dee2e6",
            tableBorderCollapse: "collapse",
            headerBackgroundColor: "#f8f9fa",
            headerTextColor: "#212529",
            bodyBackgroundColor: "#ffffff",
            altRowBackgroundColor: "",
            bodyTextColor: "#212529"
          };
          break;
        case "borderless":
          newAttributes = {
            tablePreset: preset,
            tableBorderStyle: "none",
            tableBorderWidth: 0,
            tableBorderColor: "transparent",
            tableBorderCollapse: "collapse",
            headerBackgroundColor: "transparent",
            headerTextColor: "#212529",
            bodyBackgroundColor: "transparent",
            altRowBackgroundColor: "",
            bodyTextColor: "#212529"
          };
          break;
        case "modern":
          newAttributes = {
            tablePreset: preset,
            tableBorderStyle: "solid",
            tableBorderWidth: 1,
            tableBorderColor: "#e0e0e0",
            tableBorderCollapse: "separate",
            headerBackgroundColor: "#4a6cf7",
            headerTextColor: "#ffffff",
            bodyBackgroundColor: "#ffffff",
            altRowBackgroundColor: "#f8f9fa",
            bodyTextColor: "#212529",
            boxShadow: {
              enable: true,
              color: "rgba(0, 0, 0, 0.1)",
              horizontal: 0,
              vertical: 4,
              blur: 15,
              spread: 0,
              position: "outset"
            },
            borderRadius: {
              desktop: { top: 8, right: 8, bottom: 8, left: 8, unit: "px" },
              tablet: { top: "", right: "", bottom: "", left: "", unit: "px" },
              mobile: { top: "", right: "", bottom: "", left: "", unit: "px" }
            }
          };
          break;
        case "minimal":
          newAttributes = {
            tablePreset: preset,
            tableBorderStyle: "solid",
            tableBorderWidth: 1,
            tableBorderColor: "#e0e0e0",
            tableBorderCollapse: "collapse",
            headerBackgroundColor: "#ffffff",
            headerTextColor: "#212529",
            bodyBackgroundColor: "#ffffff",
            altRowBackgroundColor: "",
            bodyTextColor: "#212529",
            boxShadow: {
              enable: false,
              color: "rgba(0, 0, 0, 0.1)",
              horizontal: 0,
              vertical: 0,
              blur: 0,
              spread: 0,
              position: "outset"
            },
            borderRadius: {
              desktop: { top: "", right: "", bottom: "", left: "", unit: "px" },
              tablet: { top: "", right: "", bottom: "", left: "", unit: "px" },
              mobile: { top: "", right: "", bottom: "", left: "", unit: "px" }
            }
          };
          break;
        default:
          newAttributes = {
            tablePreset: "default",
            tableBorderStyle: "solid",
            tableBorderWidth: 1,
            tableBorderColor: "#e0e0e0",
            tableBorderCollapse: "collapse",
            headerBackgroundColor: "#f8f9fa",
            headerTextColor: "#333333",
            bodyBackgroundColor: "#ffffff",
            altRowBackgroundColor: "",
            bodyTextColor: "#666666",
            boxShadow: {
              enable: false,
              color: "rgba(0, 0, 0, 0.1)",
              horizontal: 0,
              vertical: 0,
              blur: 0,
              spread: 0,
              position: "outset"
            },
            borderRadius: {
              desktop: { top: "", right: "", bottom: "", left: "", unit: "px" },
              tablet: { top: "", right: "", bottom: "", left: "", unit: "px" },
              mobile: { top: "", right: "", bottom: "", left: "", unit: "px" }
            }
          };
      }
      setAttributes(newAttributes);
    };
    const generateCSS = () => {
      const activeDevice = window.digi.responsiveState.activeDevice;
      if (!id)
        return "";
      const getFlexAlignment = (textAlign) => {
        switch (textAlign) {
          case "left":
            return "flex-start";
          case "center":
            return "center";
          case "right":
            return "flex-end";
          default:
            return "flex-start";
        }
      };
      let borderCSS = "";
      if (tableBorderStyle !== "none") {
        borderCSS = `
                border-style: ${tableBorderStyle};
                border-width: ${tableBorderWidth}px;
                border-color: ${tableBorderColor};
            `;
      } else {
        borderCSS = "border: none;";
      }
      let boxShadowCSS = "box-shadow: none;";
      if (boxShadow && boxShadow.enable) {
        const inset = boxShadow.position === "inset" ? "inset " : "";
        boxShadowCSS = `box-shadow: ${inset}${boxShadow.horizontal}px ${boxShadow.vertical}px ${boxShadow.blur}px ${boxShadow.spread}px ${boxShadow.color};`;
      }
      let boxShadowHoverCSS = "";
      if (boxShadowHover && boxShadowHover.enable) {
        const insetHover = boxShadowHover.position === "inset" ? "inset " : "";
        boxShadowHoverCSS = `box-shadow: ${insetHover}${boxShadowHover.horizontal}px ${boxShadowHover.vertical}px ${boxShadowHover.blur}px ${boxShadowHover.spread}px ${boxShadowHover.color};`;
      }
      const borderRadiusCSS = `${getDimensionCSS21(borderRadius, "border-radius", activeDevice)}`;
      const cellPaddingCSS = `${getDimensionCSS21(cellPadding, "padding", activeDevice)}`;
      const marginCSS = `${getDimensionCSS21(margin, "margin", activeDevice)}`;
      let headingTypographyCSS = "";
      if (headingTypography) {
        if (headingTypography.fontFamily) {
          headingTypographyCSS += `font-family: ${headingTypography.fontFamily};`;
        }
        if (headingTypography.fontSize && headingTypography.fontSize[activeDevice]) {
          headingTypographyCSS += `font-size: ${headingTypography.fontSize[activeDevice]}${headingTypography.fontSizeUnit || "px"};`;
        }
        if (headingTypography.fontWeight) {
          headingTypographyCSS += `font-weight: ${headingTypography.fontWeight};`;
        }
        if (headingTypography.fontStyle) {
          headingTypographyCSS += `font-style: ${headingTypography.fontStyle};`;
        }
        if (headingTypography.textTransform) {
          headingTypographyCSS += `text-transform: ${headingTypography.textTransform};`;
        }
        if (headingTypography.textDecoration) {
          headingTypographyCSS += `text-decoration: ${headingTypography.textDecoration};`;
        }
        if (headingTypography.lineHeight && headingTypography.lineHeight[activeDevice]) {
          headingTypographyCSS += `line-height: ${headingTypography.lineHeight[activeDevice]}${headingTypography.lineHeightUnit || "em"};`;
        }
        if (headingTypography.letterSpacing && headingTypography.letterSpacing[activeDevice]) {
          headingTypographyCSS += `letter-spacing: ${headingTypography.letterSpacing[activeDevice]}${headingTypography.letterSpacingUnit || "px"};`;
        }
      }
      let bodyTypographyCSS = "";
      if (textTypography) {
        if (textTypography.fontFamily) {
          bodyTypographyCSS += `font-family: ${textTypography.fontFamily};`;
        }
        if (textTypography.fontSize && textTypography.fontSize[activeDevice]) {
          bodyTypographyCSS += `font-size: ${textTypography.fontSize[activeDevice]}${textTypography.fontSizeUnit || "px"};`;
        }
        if (textTypography.fontWeight) {
          bodyTypographyCSS += `font-weight: ${textTypography.fontWeight};`;
        }
        if (textTypography.fontStyle) {
          bodyTypographyCSS += `font-style: ${textTypography.fontStyle};`;
        }
        if (textTypography.textTransform) {
          bodyTypographyCSS += `text-transform: ${textTypography.textTransform};`;
        }
        if (textTypography.textDecoration) {
          bodyTypographyCSS += `text-decoration: ${textTypography.textDecoration};`;
        }
        if (textTypography.lineHeight && textTypography.lineHeight[activeDevice]) {
          bodyTypographyCSS += `line-height: ${textTypography.lineHeight[activeDevice]}${textTypography.lineHeightUnit || "em"};`;
        }
        if (textTypography.letterSpacing && textTypography.letterSpacing[activeDevice]) {
          bodyTypographyCSS += `letter-spacing: ${textTypography.letterSpacing[activeDevice]}${textTypography.letterSpacingUnit || "px"};`;
        }
      }
      let contentTypographyCSS = "";
      if (contentTypography) {
        if (contentTypography.fontFamily) {
          contentTypographyCSS += `font-family: ${contentTypography.fontFamily};`;
        }
        if (contentTypography.fontSize && contentTypography.fontSize[activeDevice]) {
          contentTypographyCSS += `font-size: ${contentTypography.fontSize[activeDevice]}${contentTypography.fontSizeUnit || "px"};`;
        }
        if (contentTypography.fontWeight) {
          contentTypographyCSS += `font-weight: ${contentTypography.fontWeight};`;
        }
        if (contentTypography.fontStyle) {
          contentTypographyCSS += `font-style: ${contentTypography.fontStyle};`;
        }
        if (contentTypography.textTransform) {
          contentTypographyCSS += `text-transform: ${contentTypography.textTransform};`;
        }
        if (contentTypography.textDecoration) {
          contentTypographyCSS += `text-decoration: ${contentTypography.textDecoration};`;
        }
        if (contentTypography.lineHeight && contentTypography.lineHeight[activeDevice]) {
          contentTypographyCSS += `line-height: ${contentTypography.lineHeight[activeDevice]}${contentTypography.lineHeightUnit || "em"};`;
        }
        if (contentTypography.letterSpacing && contentTypography.letterSpacing[activeDevice]) {
          contentTypographyCSS += `letter-spacing: ${contentTypography.letterSpacing[activeDevice]}${contentTypography.letterSpacingUnit || "px"};`;
        }
      }
      return `
            /* Table Block - ${id} */
            .${id} {
                ${marginCSS}
                ${boxShadowCSS}
                ${borderRadiusCSS}
                width: 100%;
                transition: all 0.3s ease;
            }

			/* Hover effects */
            ${boxShadowHover && boxShadowHover.enable ? `
                .${id}:hover {
                    ${boxShadowHoverCSS}
                }
            ` : ""}
            
            /* Set up main table styles */
            .${id} .digiblocks-table {
                width: 100%;
                border-collapse: ${tableBorderCollapse};
                border-spacing: 0;
                color: ${bodyTextColor};
                ${bodyTypographyCSS}
                ${borderCSS}
                ${borderRadiusCSS}
            }
            
            /* Table header styles */
            .${id} .digiblocks-table thead th {
                background-color: ${headerBackgroundColor};
                color: ${headerTextColor};
                ${headingTypographyCSS}
                ${cellPaddingCSS}
                vertical-align: middle;
                border: ${tableBorderWidth}px ${tableBorderStyle} ${tableBorderColor};
            }

            .${id} .digiblocks-table thead th .digiblocks-cell-content {
                justify-content: ${getFlexAlignment(headerAlignment)};
            }
            
            /* Table body styles */
            .${id} .digiblocks-table tbody td {
                background-color: ${bodyBackgroundColor};
                ${cellPaddingCSS}
                vertical-align: middle;
                border: ${tableBorderWidth}px ${tableBorderStyle} ${tableBorderColor};
            }

            .${id} .digiblocks-table tbody td .digiblocks-cell-content {
                justify-content: ${getFlexAlignment(cellAlignment)};
            }
            
            /* First column styles if it's a header */
            ${firstColHeader ? `
            .${id} .digiblocks-table tbody td:first-child {
                background-color: ${headerBackgroundColor};
                color: ${headerTextColor};
                ${headingTypographyCSS}
                font-weight: bold;
            }

            .${id} .digiblocks-table tbody td:first-child .digiblocks-cell-content {
                justify-content: ${getFlexAlignment(headerAlignment)};
            }
            ` : ""}
            
            /* Alternating row styles if enabled */
            ${altRowBackgroundColor ? `
            .${id} .digiblocks-table tbody tr:nth-child(even) td {
                background-color: ${altRowBackgroundColor};
            }
            ${firstColHeader ? `
            .${id} .digiblocks-table tbody tr:nth-child(even) td:first-child {
                background-color: ${headerBackgroundColor};
            }
            ` : ""}
            ` : ""}
            
            /* Footer styles if enabled */
            ${hasFooter ? `
            .${id} .digiblocks-table tfoot td {
                background-color: ${footerBackgroundColor};
                color: ${footerTextColor};
                ${contentTypographyCSS}
                ${cellPaddingCSS}
                vertical-align: middle;
                border: ${tableBorderWidth}px ${tableBorderStyle} ${tableBorderColor};
            }

            .${id} .digiblocks-table tfoot td .digiblocks-cell-content {
                justify-content: ${getFlexAlignment(footerAlignment)};
            }
            ` : ""}
            
            /* Responsive styles */
            @media (max-width: 767px) {
                /* Stack mode */
                ${responsiveMode === "stack" ? `
                .${id} {
					border-radius: 0;
					box-shadow: none;
                }

                .${id} .digiblocks-table {
                    border-collapse: collapse;
					border: 0;
					border-radius: 0;
                }
                
                .${id} .digiblocks-table thead,
                .${id} .digiblocks-table tfoot {
                    display: none;
                }

				.${id} .digiblocks-table tbody {
					display: flex;
					flex-direction: column;
					gap: 1rem;
				}
                
                .${id} .digiblocks-table tbody tr {
                    display: block;
                    border: ${tableBorderWidth}px ${tableBorderStyle} ${tableBorderColor};
					${boxShadowCSS}
					transition: all 0.3s ease;
                }

				/* Hover effects */
				${boxShadowHover && boxShadowHover.enable ? `
				.${id} .digiblocks-table tbody tr:hover {
						${boxShadowHoverCSS}
					}
				` : ""}
                
                .${id} .digiblocks-table tbody td {
                    display: flex;
                    justify-content: space-between;
					gap: 1rem;
                    text-align: right;
                    border-bottom: 1px solid ${tableBorderColor};
                    border-top: none;
                    border-left: none;
                    border-right: none;
                }
                
                .${id} .digiblocks-table tbody td::before {
                    content: attr(data-label);
                    font-weight: bold;
                    text-align: left;
                    flex: 1;
                }
                
                .${id} .digiblocks-table tbody td:last-child {
                    border-bottom: none;
                }
                
                ${firstColHeader ? `
                .${id} .digiblocks-table tbody td:first-child {
                    text-align: center;
                    background-color: ${headerBackgroundColor};
                    color: ${headerTextColor};
                    justify-content: center;
                }
                
                .${id} .digiblocks-table tbody td:first-child::before {
                    content: '';
                    display: none;
                }
                ` : ""}
                ` : ""}
                
                /* Scroll mode */
                ${responsiveMode === "scroll" ? `
                .${id} {
                    overflow-x: auto;
                }
                
                .${id} .digiblocks-table {
                    min-width: 600px; /* Ensure it's wider than most mobile screens */
                }
                ` : ""}
            }
            
            /* Cell content layout */
            .${id} .digiblocks-cell-content {
                display: flex;
                align-items: center;
                gap: 6px;
            }
            
            .${id} .digiblocks-cell-icon {
                flex-shrink: 0;
            }
            
            /* Cell control icons */
            .${id} .digiblocks-table .digiblocks-cell-icon {
                display: inline-flex;
                align-items: center;
                justify-content: center;
            }
            
            .${id} .digiblocks-table .digiblocks-cell-check {
                color: #28a745;
            }
            
            .${id} .digiblocks-table .digiblocks-cell-cross {
                color: #dc3545;
            }
            
            .${id} .digiblocks-table .digiblocks-cell-stars {
                color: #ffc107;
                display: inline-flex;
				gap: 5px;
            }
            
            /* Selected cell highlight */
            .${id} .digiblocks-table .digiblocks-selected-cell {
                position: relative;
                outline: 2px solid #4a6cf7;
                outline-offset: -2px;
                z-index: 1;
            }
            
            /* Cell Controls Toolbar */
            .${id} .digiblocks-cell-controls-toolbar {
                margin-bottom: 15px;
                padding: 12px;
                background-color: #f0f0f1;
                border-radius: 4px;
                display: flex;
                flex-wrap: wrap;
                align-items: center;
                justify-content: space-between;
                gap: 10px;
            }
            
            .${id} .digiblocks-cell-controls-label {
                font-weight: bold;
            }

			.${id} .digiblocks-cell-controls-buttons .components-button-group {
                display: flex;
                align-items: center;
            }

			.${id} .digiblocks-cell-controls-buttons .digiblocks-cell-control-check-button {
                color: #28a745;
            }

			.${id} .digiblocks-cell-controls-buttons .digiblocks-cell-control-cross-button {
                color: #dc3545;
            }

			.${id} .digiblocks-cell-controls-buttons .digiblocks-cell-control-rating-button {
                color: #ffc107;
            }

			.${id} .digiblocks-cell-controls-buttons .digiblocks-cell-control-remove-button {
                color: #fe5252;
            }
            
            .components-popover.digiblocks-cell-control-popover .components-popover__content {
				min-width: 200px;
				padding: 1rem;
			}
            
            .components-popover.digiblocks-cell-control-popover .components-popover__content h3 {
				font-size: 1rem;
				margin: 0 0 1rem;
			}

			.components-popover.digiblocks-cell-control-popover .components-button-group {
				display: flex;
			}

			.components-popover.digiblocks-cell-control-popover .components-button-group button {
				flex: 1;
			}
            
            /* Table instructions */
            .${id} .digiblocks-table-instructions {
                margin-bottom: 15px;
                font-style: italic;
                color: #555;
            }
            
            /* Editor controls */
            .${id} .digiblocks-table-controls {
                margin-top: 20px;
                margin-bottom: 10px;
                display: flex;
                flex-wrap: wrap;
                align-items: center;
                gap: 10px;
            }
            
            .${id} .digiblocks-row-controls,
            .${id} .digiblocks-col-controls {
                position: relative;
            }
            
            .${id} .digiblocks-cell-control-panel {
                position: absolute;
                top: 100%;
                left: 0;
                background: white;
                padding: 10px;
                border: 1px solid #ccc;
                border-radius: 4px;
                box-shadow: 0 2px 5px rgba(0,0,0,0.15);
                z-index: 100;
                width: 240px;
            }
            
            .${id} .digiblocks-cell-control-panel h3 {
                margin-top: 0;
                font-size: 14px;
                margin-bottom: 10px;
            }
            
            .${id} .digiblocks-control-buttons {
                display: flex;
                flex-wrap: wrap;
                gap: 5px;
                margin-top: 5px;
            }
            
            /* Table caption if any */
            .${id} .digiblocks-table-caption {
                text-align: center;
                margin-bottom: 10px;
                font-style: italic;
            }
            
            /* Animation CSS for the table */
            ${animation && animation !== "none" && animations22[animation] ? animations22[animation].keyframes : ""}

			/* Visibility Controls */
			${visibility.desktop ? `
				@media (min-width: 992px) {
					.${id} {
						opacity: 0.5 !important;
					}
				}
			` : ""}

			${visibility.tablet ? `
				@media (min-width: 768px) and (max-width: 991px) {
					.${id} {
						opacity: 0.5 !important;
					}
				}
			` : ""}

			${visibility.mobile ? `
				@media (max-width: 767px) {
					.${id} {
						opacity: 0.5 !important;
					}
				}
			` : ""}
        `;
    };
    const renderCellControlToolbar = () => {
      if (selectedCell.row === -1 || selectedCell.col === -1) {
        return null;
      }
      return /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-cell-controls-toolbar" }, /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-cell-controls-label" }, __29("Selected Cell:", "digiblocks"), " Row ", selectedCell.row + 1, ", Column ", selectedCell.col + 1), /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-cell-controls-buttons" }, /* @__PURE__ */ wp.element.createElement("div", { className: "components-button-group" }, /* @__PURE__ */ wp.element.createElement(
        Button23,
        {
          className: "digiblocks-cell-control-check-button",
          icon: () => /* @__PURE__ */ wp.element.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 512 512", width: "20", height: "20", fill: "currentColor" }, /* @__PURE__ */ wp.element.createElement("path", { d: "M256 512A256 256 0 1 0 256 0a256 256 0 1 0 0 512zM369 209L241 337c-9.4 9.4-24.6 9.4-33.9 0l-64-64c-9.4-9.4-9.4-24.6 0-33.9s24.6-9.4 33.9 0l47 47L335 175c9.4-9.4 24.6-9.4 33.9 0s9.4 24.6 0 33.9z" })),
          label: __29("Add Check", "digiblocks"),
          onClick: () => {
            clearCellControl(selectedCell.row, selectedCell.col, "stars");
            setCellControl(selectedCell.row, selectedCell.col, "icon", "check");
          }
        }
      ), /* @__PURE__ */ wp.element.createElement(
        Button23,
        {
          className: "digiblocks-cell-control-cross-button",
          icon: () => /* @__PURE__ */ wp.element.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 512 512", width: "20", height: "20", fill: "currentColor" }, /* @__PURE__ */ wp.element.createElement("path", { d: "M256 512A256 256 0 1 0 256 0a256 256 0 1 0 0 512zM175 175c9.4-9.4 24.6-9.4 33.9 0l47 47 47-47c9.4-9.4 24.6-9.4 33.9 0s9.4 24.6 0 33.9l-47 47 47 47c9.4 9.4 9.4 24.6 0 33.9s-24.6 9.4-33.9 0l-47-47-47 47c-9.4 9.4-24.6 9.4-33.9 0s-9.4-24.6 0-33.9l47-47-47-47c-9.4-9.4-9.4-24.6 0-33.9z" })),
          label: __29("Add Cross", "digiblocks"),
          onClick: () => {
            clearCellControl(selectedCell.row, selectedCell.col, "stars");
            setCellControl(selectedCell.row, selectedCell.col, "icon", "cross");
          }
        }
      ), /* @__PURE__ */ wp.element.createElement(
        Button23,
        {
          className: "digiblocks-cell-control-rating-button",
          icon: () => /* @__PURE__ */ wp.element.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 16 16", width: "16", height: "16", fill: "currentColor" }, /* @__PURE__ */ wp.element.createElement("path", { d: "M3.612 15.443c-.386.198-.824-.149-.746-.592l.83-4.73L.173 6.765c-.329-.314-.158-.888.283-.95l4.898-.696L7.538.792c.197-.39.73-.39.927 0l2.184 4.327l4.898.696c.441.062.612.636.282.95l-3.522 3.356l.83 4.73c.078.443-.36.79-.746.592L8 13.187l-4.389 2.256z" })),
          label: __29("Add Rating", "digiblocks"),
          onClick: () => {
            clearCellControl(selectedCell.row, selectedCell.col, "icon");
            setIsRatingPopoverOpen(true);
          }
        }
      ), getCellControl(selectedCell.row, selectedCell.col, "icon") || getCellControl(selectedCell.row, selectedCell.col, "stars") ? /* @__PURE__ */ wp.element.createElement(
        Button23,
        {
          className: "digiblocks-cell-control-remove-button",
          icon: () => /* @__PURE__ */ wp.element.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 448 512", width: "16", height: "16", fill: "currentColor" }, /* @__PURE__ */ wp.element.createElement("path", { d: "M135.2 17.7L128 32 32 32C14.3 32 0 46.3 0 64S14.3 96 32 96l384 0c17.7 0 32-14.3 32-32s-14.3-32-32-32l-96 0-7.2-14.3C307.4 6.8 296.3 0 284.2 0L163.8 0c-12.1 0-23.2 6.8-28.6 17.7zM416 128L32 128 53.2 467c1.6 25.3 22.6 45 47.9 45l245.8 0c25.3 0 46.3-19.7 47.9-45L416 128z" })),
          label: __29("Remove Icons", "digiblocks"),
          onClick: () => {
            clearCellControl(selectedCell.row, selectedCell.col, "icon");
            clearCellControl(selectedCell.row, selectedCell.col, "stars");
          }
        }
      ) : null), isRatingPopoverOpen && /* @__PURE__ */ wp.element.createElement(
        Popover2,
        {
          className: "digiblocks-cell-control-popover",
          onClose: () => setIsRatingPopoverOpen(false),
          position: "bottom center"
        },
        /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-rating-selector" }, /* @__PURE__ */ wp.element.createElement("h3", null, __29("Select Rating", "digiblocks")), /* @__PURE__ */ wp.element.createElement(
          ToggleGroupControl23,
          {
            isBlock: true,
            onChange: (value) => {
              setCellControl(selectedCell.row, selectedCell.col, "stars", value.toString());
              setIsRatingPopoverOpen(false);
            },
            __next40pxDefaultSize: true,
            __nextHasNoMarginBottom: true
          },
          [1, 2, 3, 4, 5].map((num) => /* @__PURE__ */ wp.element.createElement(
            ToggleGroupControlOption23,
            {
              key: `star-${num}`,
              value: num,
              label: num.toString()
            }
          ))
        ))
      )));
    };
    const renderCellIcon = (row, col) => {
      if (!cellControls)
        return null;
      const cellKey = `${row}-${col}`;
      if (!cellControls[cellKey]) {
        return null;
      }
      if (cellControls[cellKey].icon) {
        const icon = cellControls[cellKey].icon;
        switch (icon) {
          case "check":
            return /* @__PURE__ */ wp.element.createElement("span", { className: "digiblocks-cell-icon digiblocks-cell-check" }, /* @__PURE__ */ wp.element.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 512 512", width: "20", height: "20", fill: "currentColor" }, /* @__PURE__ */ wp.element.createElement("path", { d: "M256 512A256 256 0 1 0 256 0a256 256 0 1 0 0 512zM369 209L241 337c-9.4 9.4-24.6 9.4-33.9 0l-64-64c-9.4-9.4-9.4-24.6 0-33.9s24.6-9.4 33.9 0l47 47L335 175c9.4-9.4 24.6-9.4 33.9 0s9.4 24.6 0 33.9z" })));
          case "cross":
            return /* @__PURE__ */ wp.element.createElement("span", { className: "digiblocks-cell-icon digiblocks-cell-cross" }, /* @__PURE__ */ wp.element.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 512 512", width: "20", height: "20", fill: "currentColor" }, /* @__PURE__ */ wp.element.createElement("path", { d: "M256 512A256 256 0 1 0 256 0a256 256 0 1 0 0 512zM175 175c9.4-9.4 24.6-9.4 33.9 0l47 47 47-47c9.4-9.4 24.6-9.4 33.9 0s9.4 24.6 0 33.9l-47 47 47 47c9.4 9.4 9.4 24.6 0 33.9s-24.6 9.4-33.9 0l-47-47-47 47c-9.4 9.4-24.6 9.4-33.9 0s-9.4-24.6 0-33.9l47-47-47-47c-9.4-9.4-9.4-24.6 0-33.9z" })));
          default:
            return null;
        }
      }
      if (cellControls[cellKey].stars) {
        const starCount = parseInt(cellControls[cellKey].stars) || 0;
        const stars = [];
        for (let i = 0; i < 5; i++) {
          if (i < starCount) {
            stars.push(
              /* @__PURE__ */ wp.element.createElement("span", { key: `star-${i}`, className: "digiblocks-cell-icon" }, /* @__PURE__ */ wp.element.createElement("svg", { width: "16", height: "16", viewBox: "0 0 16 16", fill: "currentColor" }, /* @__PURE__ */ wp.element.createElement("path", { d: "M3.612 15.443c-.386.198-.824-.149-.746-.592l.83-4.73L.173 6.765c-.329-.314-.158-.888.283-.95l4.898-.696L7.538.792c.197-.39.73-.39.927 0l2.184 4.327l4.898.696c.441.062.612.636.282.95l-3.522 3.356l.83 4.73c.078.443-.36.79-.746.592L8 13.187l-4.389 2.256z" })))
            );
          } else {
            stars.push(
              /* @__PURE__ */ wp.element.createElement("span", { key: `star-empty-${i}`, className: "digiblocks-cell-icon" }, /* @__PURE__ */ wp.element.createElement("svg", { width: "16", height: "16", viewBox: "0 0 16 16", fill: "currentColor", opacity: "0.5" }, /* @__PURE__ */ wp.element.createElement("path", { d: "M2.866 14.85c-.078.444.36.791.746.593l4.39-2.256l4.389 2.256c.386.198.824-.149.746-.592l-.83-4.73l3.522-3.356c.33-.314.16-.888-.282-.95l-4.898-.696L7.538.792c-.197-.39-.73-.39-.927 0L4.427 5.124l-4.898.696c-.441.062-.612.636-.283.95l3.523 3.356-.83 4.73z" })))
            );
          }
        }
        return /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-cell-stars" }, stars);
      }
      return null;
    };
    const renderTabContent = () => {
      switch (activeTab) {
        case "options":
          return /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(
            TabPanelBody25,
            {
              tab: "options",
              name: "general-settings",
              title: __29("Table Structure", "digiblocks"),
              initialOpen: true
            },
            /* @__PURE__ */ wp.element.createElement(
              ToggleControl25,
              {
                label: __29("Enable Header Row", "digiblocks"),
                checked: hasHeader,
                onChange: () => setAttributes({ hasHeader: !hasHeader }),
                help: __29("Display the first row as table header.", "digiblocks"),
                __nextHasNoMarginBottom: true
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              ToggleControl25,
              {
                label: __29("Enable Footer Row", "digiblocks"),
                checked: hasFooter,
                onChange: () => setAttributes({ hasFooter: !hasFooter }),
                help: __29("Display the last row as table footer.", "digiblocks"),
                __nextHasNoMarginBottom: true
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              ToggleControl25,
              {
                label: __29("First Column as Header", "digiblocks"),
                checked: firstColHeader,
                onChange: () => setAttributes({ firstColHeader: !firstColHeader }),
                help: __29("Use the first column as a header column.", "digiblocks"),
                __nextHasNoMarginBottom: true
              }
            )
          ), /* @__PURE__ */ wp.element.createElement(
            TabPanelBody25,
            {
              tab: "options",
              name: "preset-settings",
              title: __29("Table Presets", "digiblocks"),
              initialOpen: false
            },
            /* @__PURE__ */ wp.element.createElement(
              SelectControl25,
              {
                label: __29("Table Style Preset", "digiblocks"),
                value: tablePreset,
                options: tablePresetOptions,
                onChange: (value) => applyTablePreset(value),
                __next40pxDefaultSize: true,
                __nextHasNoMarginBottom: true
              }
            )
          ), /* @__PURE__ */ wp.element.createElement(
            TabPanelBody25,
            {
              tab: "options",
              name: "responsive-settings",
              title: __29("Responsive Settings", "digiblocks"),
              initialOpen: false
            },
            /* @__PURE__ */ wp.element.createElement(
              BaseControl6,
              {
                label: __29("Mobile Behavior", "digiblocks"),
                __nextHasNoMarginBottom: true
              },
              /* @__PURE__ */ wp.element.createElement(
                ToggleGroupControl23,
                {
                  value: responsiveMode,
                  onChange: (value) => setAttributes({ responsiveMode: value }),
                  help: __29("How the table should behave on small screens.", "digiblocks"),
                  isBlock: true,
                  __next40pxDefaultSize: true,
                  __nextHasNoMarginBottom: true
                },
                /* @__PURE__ */ wp.element.createElement(
                  ToggleGroupControlOption23,
                  {
                    value: "stack",
                    label: __29("Stack", "digiblocks"),
                    "aria-label": __29("Stack Behavior", "digiblocks")
                  }
                ),
                /* @__PURE__ */ wp.element.createElement(
                  ToggleGroupControlOption23,
                  {
                    value: "scroll",
                    label: __29("Scroll", "digiblocks"),
                    "aria-label": __29("Scroll Behavior", "digiblocks")
                  }
                )
              )
            )
          ));
        case "style":
          return /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(
            TabPanelBody25,
            {
              tab: "style",
              name: "border-settings",
              title: __29("Borders & Shadow", "digiblocks"),
              initialOpen: true
            },
            /* @__PURE__ */ wp.element.createElement(
              SelectControl25,
              {
                label: __29("Border Style", "digiblocks"),
                value: tableBorderStyle,
                options: borderStyleOptions,
                onChange: (value) => setAttributes({ tableBorderStyle: value }),
                __next40pxDefaultSize: true,
                __nextHasNoMarginBottom: true
              }
            ),
            tableBorderStyle !== "none" && /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(
              RangeControl24,
              {
                label: __29("Border Width", "digiblocks"),
                value: tableBorderWidth,
                onChange: (value) => setAttributes({ tableBorderWidth: value }),
                min: 1,
                max: 10,
                step: 1,
                __next40pxDefaultSize: true,
                __nextHasNoMarginBottom: true
              }
            ), /* @__PURE__ */ wp.element.createElement(
              PanelColorSettings23,
              {
                title: __29("Border Color", "digiblocks"),
                initialOpen: true,
                enableAlpha: true,
                colorSettings: [
                  {
                    value: tableBorderColor,
                    onChange: (value) => setAttributes({ tableBorderColor: value }),
                    label: __29("Border Color", "digiblocks")
                  }
                ]
              }
            )),
            /* @__PURE__ */ wp.element.createElement(
              SelectControl25,
              {
                label: __29("Border Collapse", "digiblocks"),
                value: tableBorderCollapse,
                options: [
                  { label: __29("Collapse", "digiblocks"), value: "collapse" },
                  { label: __29("Separate", "digiblocks"), value: "separate" }
                ],
                onChange: (value) => setAttributes({ tableBorderCollapse: value }),
                __next40pxDefaultSize: true,
                __nextHasNoMarginBottom: true
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              ResponsiveControl25,
              {
                label: __29("Border Radius", "digiblocks")
              },
              /* @__PURE__ */ wp.element.createElement(
                DimensionControl22,
                {
                  values: borderRadius[localActiveDevice],
                  onChange: (value) => setAttributes({
                    borderRadius: {
                      ...borderRadius,
                      [localActiveDevice]: value
                    }
                  }),
                  units: [
                    { label: "px", value: "px" },
                    { label: "%", value: "%" }
                  ]
                }
              )
            ),
            /* @__PURE__ */ wp.element.createElement(
              BoxShadowControl20,
              {
                label: __29("Box Shadow", "digiblocks"),
                normalValue: boxShadow,
                hoverValue: boxShadowHover,
                onNormalChange: (value) => setAttributes({ boxShadow: value }),
                onHoverChange: (value) => setAttributes({ boxShadowHover: value })
              }
            )
          ), /* @__PURE__ */ wp.element.createElement(
            TabPanelBody25,
            {
              tab: "style",
              name: "header-settings",
              title: __29("Header Styles", "digiblocks"),
              initialOpen: false
            },
            /* @__PURE__ */ wp.element.createElement(
              PanelColorSettings23,
              {
                title: __29(
                  "Header Colors",
                  "digiblocks"
                ),
                initialOpen: true,
                enableAlpha: true,
                colorSettings: [
                  {
                    value: headerBackgroundColor,
                    onChange: (value) => setAttributes({
                      headerBackgroundColor: value
                    }),
                    label: __29(
                      "Background Color",
                      "digiblocks"
                    )
                  },
                  {
                    value: headerTextColor,
                    onChange: (value) => setAttributes({
                      headerTextColor: value
                    }),
                    label: __29(
                      "Text Color",
                      "digiblocks"
                    )
                  }
                ]
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              TypographyControl18,
              {
                label: __29(
                  "Header Typography",
                  "digiblocks"
                ),
                value: headingTypography,
                onChange: (value) => setAttributes({
                  headingTypography: value
                }),
                defaults: {
                  fontSize: { desktop: 18, tablet: 16, mobile: 15 },
                  fontSizeUnit: "px",
                  lineHeight: { desktop: 1.5, tablet: 1.4, mobile: 1.3 },
                  lineHeightUnit: "em"
                }
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              BaseControl6,
              {
                label: __29("Text Alignment", "digiblocks"),
                __nextHasNoMarginBottom: true
              },
              /* @__PURE__ */ wp.element.createElement(
                ToggleGroupControl23,
                {
                  value: headerAlignment,
                  onChange: (value) => setAttributes({ headerAlignment: value }),
                  isBlock: true,
                  __next40pxDefaultSize: true,
                  __nextHasNoMarginBottom: true
                },
                /* @__PURE__ */ wp.element.createElement(
                  ToggleGroupControlOption23,
                  {
                    value: "left",
                    label: __29("Left", "digiblocks"),
                    "aria-label": __29("Left", "digiblocks")
                  }
                ),
                /* @__PURE__ */ wp.element.createElement(
                  ToggleGroupControlOption23,
                  {
                    value: "center",
                    label: __29("Center", "digiblocks"),
                    "aria-label": __29("Center", "digiblocks")
                  }
                ),
                /* @__PURE__ */ wp.element.createElement(
                  ToggleGroupControlOption23,
                  {
                    value: "right",
                    label: __29("Right", "digiblocks"),
                    "aria-label": __29("Right", "digiblocks")
                  }
                )
              )
            )
          ), /* @__PURE__ */ wp.element.createElement(
            TabPanelBody25,
            {
              tab: "style",
              name: "body-settings",
              title: __29("Body Styles", "digiblocks"),
              initialOpen: false
            },
            /* @__PURE__ */ wp.element.createElement(
              PanelColorSettings23,
              {
                title: __29(
                  "Body Colors",
                  "digiblocks"
                ),
                initialOpen: true,
                enableAlpha: true,
                colorSettings: [
                  {
                    value: bodyBackgroundColor,
                    onChange: (value) => setAttributes({
                      bodyBackgroundColor: value
                    }),
                    label: __29(
                      "Background Color",
                      "digiblocks"
                    )
                  },
                  {
                    value: altRowBackgroundColor,
                    onChange: (value) => setAttributes({
                      altRowBackgroundColor: value
                    }),
                    label: __29(
                      "Alternate Row Color",
                      "digiblocks"
                    )
                  },
                  {
                    value: bodyTextColor,
                    onChange: (value) => setAttributes({
                      bodyTextColor: value
                    }),
                    label: __29(
                      "Text Color",
                      "digiblocks"
                    )
                  }
                ]
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              TypographyControl18,
              {
                label: __29(
                  "Body Typography",
                  "digiblocks"
                ),
                value: textTypography,
                onChange: (value) => setAttributes({
                  textTypography: value
                }),
                defaults: {
                  fontSize: { desktop: 16, tablet: 15, mobile: 14 },
                  fontSizeUnit: "px",
                  lineHeight: { desktop: 1.5, tablet: 1.4, mobile: 1.3 },
                  lineHeightUnit: "em"
                }
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              BaseControl6,
              {
                label: __29("Text Alignment", "digiblocks"),
                __nextHasNoMarginBottom: true
              },
              /* @__PURE__ */ wp.element.createElement(
                ToggleGroupControl23,
                {
                  value: cellAlignment,
                  onChange: (value) => setAttributes({ cellAlignment: value }),
                  isBlock: true,
                  __next40pxDefaultSize: true,
                  __nextHasNoMarginBottom: true
                },
                /* @__PURE__ */ wp.element.createElement(
                  ToggleGroupControlOption23,
                  {
                    value: "left",
                    label: __29("Left", "digiblocks"),
                    "aria-label": __29("Left", "digiblocks")
                  }
                ),
                /* @__PURE__ */ wp.element.createElement(
                  ToggleGroupControlOption23,
                  {
                    value: "center",
                    label: __29("Center", "digiblocks"),
                    "aria-label": __29("Center", "digiblocks")
                  }
                ),
                /* @__PURE__ */ wp.element.createElement(
                  ToggleGroupControlOption23,
                  {
                    value: "right",
                    label: __29("Right", "digiblocks"),
                    "aria-label": __29("Right", "digiblocks")
                  }
                )
              )
            )
          ), hasFooter && /* @__PURE__ */ wp.element.createElement(
            TabPanelBody25,
            {
              tab: "style",
              name: "footer-settings",
              title: __29("Footer Styles", "digiblocks"),
              initialOpen: false
            },
            /* @__PURE__ */ wp.element.createElement(
              PanelColorSettings23,
              {
                title: __29(
                  "Footer Colors",
                  "digiblocks"
                ),
                initialOpen: true,
                enableAlpha: true,
                colorSettings: [
                  {
                    value: footerBackgroundColor,
                    onChange: (value) => setAttributes({
                      footerBackgroundColor: value
                    }),
                    label: __29(
                      "Background Color",
                      "digiblocks"
                    )
                  },
                  {
                    value: footerTextColor,
                    onChange: (value) => setAttributes({
                      footerTextColor: value
                    }),
                    label: __29(
                      "Text Color",
                      "digiblocks"
                    )
                  }
                ]
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              TypographyControl18,
              {
                label: __29(
                  "Footer Typography",
                  "digiblocks"
                ),
                value: contentTypography,
                onChange: (value) => setAttributes({
                  contentTypography: value
                }),
                defaults: {
                  fontSize: { desktop: 16, tablet: 15, mobile: 14 },
                  fontSizeUnit: "px",
                  lineHeight: { desktop: 1.5, tablet: 1.4, mobile: 1.3 },
                  lineHeightUnit: "em"
                }
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              BaseControl6,
              {
                label: __29("Text Alignment", "digiblocks"),
                __nextHasNoMarginBottom: true
              },
              /* @__PURE__ */ wp.element.createElement(
                ToggleGroupControl23,
                {
                  value: footerAlignment,
                  onChange: (value) => setAttributes({ footerAlignment: value }),
                  isBlock: true,
                  __next40pxDefaultSize: true,
                  __nextHasNoMarginBottom: true
                },
                /* @__PURE__ */ wp.element.createElement(
                  ToggleGroupControlOption23,
                  {
                    value: "left",
                    label: __29("Left", "digiblocks"),
                    "aria-label": __29("Left", "digiblocks")
                  }
                ),
                /* @__PURE__ */ wp.element.createElement(
                  ToggleGroupControlOption23,
                  {
                    value: "center",
                    label: __29("Center", "digiblocks"),
                    "aria-label": __29("Center", "digiblocks")
                  }
                ),
                /* @__PURE__ */ wp.element.createElement(
                  ToggleGroupControlOption23,
                  {
                    value: "right",
                    label: __29("Right", "digiblocks"),
                    "aria-label": __29("Right", "digiblocks")
                  }
                )
              )
            )
          ), /* @__PURE__ */ wp.element.createElement(
            TabPanelBody25,
            {
              tab: "style",
              name: "spacing",
              title: __29("Spacing", "digiblocks"),
              initialOpen: false
            },
            /* @__PURE__ */ wp.element.createElement(
              ResponsiveControl25,
              {
                label: __29("Cell Padding", "digiblocks")
              },
              /* @__PURE__ */ wp.element.createElement(
                DimensionControl22,
                {
                  values: cellPadding && cellPadding[localActiveDevice] ? cellPadding[localActiveDevice] : {
                    top: 15,
                    right: 15,
                    bottom: 15,
                    left: 15,
                    unit: "px"
                  },
                  onChange: (value) => setAttributes({
                    cellPadding: {
                      ...cellPadding,
                      [localActiveDevice]: value
                    }
                  })
                }
              )
            ),
            /* @__PURE__ */ wp.element.createElement(
              ResponsiveControl25,
              {
                label: __29("Margin", "digiblocks")
              },
              /* @__PURE__ */ wp.element.createElement(
                DimensionControl22,
                {
                  values: margin && margin[localActiveDevice] ? margin[localActiveDevice] : {
                    top: 0,
                    right: 0,
                    bottom: 30,
                    left: 0,
                    unit: "px"
                  },
                  onChange: (value) => setAttributes({
                    margin: {
                      ...margin,
                      [localActiveDevice]: value
                    }
                  })
                }
              )
            )
          ));
        case "advanced":
          return /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(
            TabPanelBody25,
            {
              tab: "advanced",
              name: "animation",
              title: __29("Animation", "digiblocks"),
              initialOpen: true
            },
            /* @__PURE__ */ wp.element.createElement(
              SelectControl25,
              {
                label: __29(
                  "Animation Effect",
                  "digiblocks"
                ),
                value: animation,
                options: animationOptions,
                onChange: (value) => setAttributes({
                  animation: value
                }),
                __next40pxDefaultSize: true,
                __nextHasNoMarginBottom: true
              }
            ),
            animation && animation !== "none" && /* @__PURE__ */ wp.element.createElement("div", { style: { marginTop: "10px" } }, /* @__PURE__ */ wp.element.createElement(
              Button23,
              {
                variant: "secondary",
                isSecondary: true,
                onClick: handlePreviewClick,
                style: { width: "100%" }
              },
              __29("Preview Animation", "digiblocks")
            ))
          ), /* @__PURE__ */ wp.element.createElement(
            TabPanelBody25,
            {
              tab: "advanced",
              name: "visibility",
              title: __29("Visibility", "digiblocks"),
              initialOpen: false
            },
            /* @__PURE__ */ wp.element.createElement("div", { className: "components-base-control__help", style: {
              padding: "12px",
              backgroundColor: "#f0f6fc",
              border: "1px solid #c3ddfd",
              borderRadius: "4px",
              marginBottom: "16px"
            } }, /* @__PURE__ */ wp.element.createElement("strong", null, __29("Editor Note:", "digiblocks")), /* @__PURE__ */ wp.element.createElement("br", null), __29("Hidden elements appear with reduced opacity in the editor for easy editing. Visibility changes only take effect on the frontend.", "digiblocks")),
            /* @__PURE__ */ wp.element.createElement(
              ToggleControl25,
              {
                label: __29("Hide on Desktop", "digiblocks"),
                checked: visibility.desktop,
                onChange: (value) => setAttributes({
                  visibility: {
                    ...visibility,
                    desktop: value
                  }
                }),
                __nextHasNoMarginBottom: true
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              ToggleControl25,
              {
                label: __29("Hide on Tablet", "digiblocks"),
                checked: visibility.tablet,
                onChange: (value) => setAttributes({
                  visibility: {
                    ...visibility,
                    tablet: value
                  }
                }),
                __nextHasNoMarginBottom: true
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              ToggleControl25,
              {
                label: __29("Hide on Mobile", "digiblocks"),
                checked: visibility.mobile,
                onChange: (value) => setAttributes({
                  visibility: {
                    ...visibility,
                    mobile: value
                  }
                }),
                __nextHasNoMarginBottom: true
              }
            )
          ), /* @__PURE__ */ wp.element.createElement(
            TabPanelBody25,
            {
              tab: "advanced",
              name: "additional",
              title: __29("Additional", "digiblocks"),
              initialOpen: false
            },
            /* @__PURE__ */ wp.element.createElement("div", { className: "components-base-control html-anchor-control" }, /* @__PURE__ */ wp.element.createElement("div", { className: "components-base-control__field" }, /* @__PURE__ */ wp.element.createElement("label", { className: "components-base-control__label", htmlFor: "html-anchor" }, __29("HTML anchor", "digiblocks")), /* @__PURE__ */ wp.element.createElement(
              "input",
              {
                className: "components-text-control__input",
                type: "text",
                id: "html-anchor",
                value: anchor || "",
                onChange: (e) => setAttributes({ anchor: e.target.value }),
                "aria-describedby": "html-anchor-help",
                autoCapitalize: "none",
                autoComplete: "off"
              }
            )), /* @__PURE__ */ wp.element.createElement("p", { id: "html-anchor-help", className: "components-base-control__help" }, __29(`Enter a word or two \u2014 without spaces \u2014 to make a unique web address just for this block, called an "anchor". Then, you'll be able to link directly to this section of your page.`, "digiblocks"), " ", /* @__PURE__ */ wp.element.createElement(
              "a",
              {
                className: "components-external-link",
                href: "https://wordpress.org/documentation/article/page-jumps/",
                target: "_blank",
                rel: "external noreferrer noopener"
              },
              /* @__PURE__ */ wp.element.createElement("span", { className: "components-external-link__contents" }, __29("Learn more about anchors", "digiblocks")),
              /* @__PURE__ */ wp.element.createElement("span", { className: "components-external-link__icon", "aria-label": "(opens in a new tab)" }, "\u2197")
            ))),
            /* @__PURE__ */ wp.element.createElement("div", { className: "components-base-control" }, /* @__PURE__ */ wp.element.createElement("div", { className: "components-base-control__field" }, /* @__PURE__ */ wp.element.createElement("label", { className: "components-base-control__label", htmlFor: "additional-css-classes" }, __29("Additional CSS class(es)", "digiblocks")), /* @__PURE__ */ wp.element.createElement(
              "input",
              {
                className: "components-text-control__input",
                type: "text",
                id: "additional-css-classes",
                value: customClasses || "",
                onChange: (e) => setAttributes({ customClasses: e.target.value }),
                "aria-describedby": "additional-css-classes-help",
                autoComplete: "off"
              }
            )), /* @__PURE__ */ wp.element.createElement("p", { id: "additional-css-classes-help", className: "components-base-control__help" }, __29("Separate multiple classes with spaces.", "digiblocks")))
          ));
        default:
          return null;
      }
    };
    const renderTableContent = () => {
      return /* @__PURE__ */ wp.element.createElement("table", { className: "digiblocks-table" }, hasHeader && tableData.length > 0 && /* @__PURE__ */ wp.element.createElement("thead", null, /* @__PURE__ */ wp.element.createElement("tr", null, tableData[0].map((cell, colIndex) => /* @__PURE__ */ wp.element.createElement(
        "th",
        {
          key: `header-${colIndex}`,
          onClick: () => handleCellClick(0, colIndex),
          className: selectedCell.row === 0 && selectedCell.col === colIndex ? "digiblocks-selected-cell" : ""
        },
        /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-cell-content" }, renderCellIcon(0, colIndex), /* @__PURE__ */ wp.element.createElement(
          RichText22,
          {
            tagName: "span",
            value: cell,
            onChange: (value) => updateCellContent(value, 0, colIndex),
            placeholder: __29("Header text", "digiblocks")
          }
        ))
      )))), /* @__PURE__ */ wp.element.createElement("tbody", null, tableData.slice(
        hasHeader ? 1 : 0,
        hasFooter ? tableData.length - 1 : tableData.length
      ).map((row, rowIndex) => {
        const actualRowIndex = hasHeader ? rowIndex + 1 : rowIndex;
        return /* @__PURE__ */ wp.element.createElement("tr", { key: `row-${actualRowIndex}` }, row.map((cell, colIndex) => /* @__PURE__ */ wp.element.createElement(
          "td",
          {
            key: `cell-${actualRowIndex}-${colIndex}`,
            "data-label": hasHeader && tableData[0] && tableData[0][colIndex] ? tableData[0][colIndex] : "",
            onClick: () => handleCellClick(actualRowIndex, colIndex),
            className: selectedCell.row === actualRowIndex && selectedCell.col === colIndex ? "digiblocks-selected-cell" : ""
          },
          /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-cell-content" }, renderCellIcon(actualRowIndex, colIndex), /* @__PURE__ */ wp.element.createElement(
            RichText22,
            {
              tagName: "span",
              value: cell,
              onChange: (value) => updateCellContent(value, actualRowIndex, colIndex),
              placeholder: __29("Cell text", "digiblocks")
            }
          ))
        )));
      })), hasFooter && tableData.length > 1 && /* @__PURE__ */ wp.element.createElement("tfoot", null, /* @__PURE__ */ wp.element.createElement("tr", null, tableData[tableData.length - 1].map((cell, colIndex) => /* @__PURE__ */ wp.element.createElement(
        "td",
        {
          key: `footer-${colIndex}`,
          onClick: () => handleCellClick(tableData.length - 1, colIndex),
          className: selectedCell.row === tableData.length - 1 && selectedCell.col === colIndex ? "digiblocks-selected-cell" : ""
        },
        /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-cell-content" }, renderCellIcon(tableData.length - 1, colIndex), /* @__PURE__ */ wp.element.createElement(
          RichText22,
          {
            tagName: "span",
            value: cell,
            onChange: (value) => updateCellContent(value, tableData.length - 1, colIndex),
            placeholder: __29("Footer text", "digiblocks")
          }
        ))
      )))));
    };
    const blockProps = useBlockProps47({
      className: `digiblocks-table-block ${id} ${customClasses || ""}`,
      id: anchor || null
      // Set the anchor as ID if provided
    });
    if (!tableData || !Array.isArray(tableData) || tableData.length === 0) {
      return /* @__PURE__ */ wp.element.createElement("div", { ...blockProps }, /* @__PURE__ */ wp.element.createElement("p", null, __29("Initializing table...", "digiblocks")));
    }
    return /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(BlockControls6, null, /* @__PURE__ */ wp.element.createElement(ToolbarGroup, null, /* @__PURE__ */ wp.element.createElement(
      ToolbarButton,
      {
        icon: "table-row-before",
        label: __29("Add Row Before", "digiblocks"),
        onClick: () => {
          if (selectedCell.row >= 0) {
            addRow(selectedCell.row - 1);
          } else {
            addRow(0);
          }
        }
      }
    ), /* @__PURE__ */ wp.element.createElement(
      ToolbarButton,
      {
        icon: "table-row-after",
        label: __29("Add Row After", "digiblocks"),
        onClick: () => {
          if (selectedCell.row >= 0) {
            addRow(selectedCell.row);
          } else {
            addRow(tableData.length - 1);
          }
        }
      }
    ), /* @__PURE__ */ wp.element.createElement(
      ToolbarButton,
      {
        icon: "table-row-delete",
        label: __29("Delete Row", "digiblocks"),
        onClick: () => {
          if (selectedCell.row >= 0) {
            deleteRow(selectedCell.row);
            setSelectedCell({ row: -1, col: -1 });
          }
        },
        disabled: tableData.length <= 1 || selectedCell.row < 0
      }
    )), /* @__PURE__ */ wp.element.createElement(ToolbarGroup, null, /* @__PURE__ */ wp.element.createElement(
      ToolbarButton,
      {
        icon: "table-col-before",
        label: __29("Add Column Before", "digiblocks"),
        onClick: () => {
          if (selectedCell.col >= 0) {
            addColumn(selectedCell.col - 1);
          } else {
            addColumn(0);
          }
        }
      }
    ), /* @__PURE__ */ wp.element.createElement(
      ToolbarButton,
      {
        icon: "table-col-after",
        label: __29("Add Column After", "digiblocks"),
        onClick: () => {
          if (selectedCell.col >= 0) {
            addColumn(selectedCell.col);
          } else {
            addColumn(tableData[0].length - 1);
          }
        }
      }
    ), /* @__PURE__ */ wp.element.createElement(
      ToolbarButton,
      {
        icon: "table-col-delete",
        label: __29("Delete Column", "digiblocks"),
        onClick: () => {
          if (selectedCell.col >= 0) {
            deleteColumn(selectedCell.col);
            setSelectedCell({ row: -1, col: -1 });
          }
        },
        disabled: tableData[0].length <= 1 || selectedCell.col < 0
      }
    ))), /* @__PURE__ */ wp.element.createElement(InspectorControls25, null, /* @__PURE__ */ wp.element.createElement(
      CustomTabPanel25,
      {
        tabs: tabList,
        activeTab,
        onSelect: setActiveTab
      },
      renderTabContent()
    )), /* @__PURE__ */ wp.element.createElement("style", { dangerouslySetInnerHTML: { __html: generateCSS() } }), /* @__PURE__ */ wp.element.createElement("div", { ...blockProps }, /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-table-instructions" }, /* @__PURE__ */ wp.element.createElement("p", null, __29("Click on any cell to select it and add icons, checks, crosses, or star ratings.", "digiblocks"))), selectedCell.row !== -1 && selectedCell.col !== -1 && renderCellControlToolbar(), /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-table-container" }, renderTableContent()), /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-table-controls" }, /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-row-controls" }, /* @__PURE__ */ wp.element.createElement(
      Button23,
      {
        isPrimary: true,
        icon: "plus",
        onClick: () => addRow(tableData.length - 1)
      },
      __29("Add Row", "digiblocks")
    )), /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-col-controls" }, /* @__PURE__ */ wp.element.createElement(
      Button23,
      {
        isPrimary: true,
        icon: "plus",
        onClick: () => addColumn(tableData[0].length - 1)
      },
      __29("Add Column", "digiblocks")
    )))));
  };
  var edit_default25 = TableEdit;

  // blocks/table/save.js
  var { __: __30 } = window.wp.i18n;
  var { useBlockProps: useBlockProps48, RichText: RichText23 } = window.wp.blockEditor;
  var TableSave = ({ attributes }) => {
    const {
      id,
      anchor,
      customClasses,
      tableData,
      hasHeader,
      hasFooter,
      responsiveMode,
      animation,
      cellControls
    } = attributes;
    const blockClasses = [
      "digiblocks-table-block",
      id,
      `responsive-${responsiveMode}`,
      animation !== "none" ? `animate-${animation}` : "",
      customClasses || ""
    ].filter(Boolean).join(" ");
    const getCellControl = (row, col, controlType) => {
      const cellKey = `${row}-${col}`;
      if (cellControls[cellKey] && cellControls[cellKey][controlType]) {
        return cellControls[cellKey][controlType];
      }
      return null;
    };
    const renderCellIcon = (row, col) => {
      const cellKey = `${row}-${col}`;
      if (!cellControls[cellKey]) {
        return null;
      }
      if (cellControls[cellKey].icon) {
        const icon = cellControls[cellKey].icon;
        switch (icon) {
          case "check":
            return /* @__PURE__ */ wp.element.createElement("span", { className: "digiblocks-cell-icon digiblocks-cell-check" }, /* @__PURE__ */ wp.element.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 512 512", width: "20", height: "20", fill: "currentColor" }, /* @__PURE__ */ wp.element.createElement("path", { d: "M256 512A256 256 0 1 0 256 0a256 256 0 1 0 0 512zM369 209L241 337c-9.4 9.4-24.6 9.4-33.9 0l-64-64c-9.4-9.4-9.4-24.6 0-33.9s24.6-9.4 33.9 0l47 47L335 175c9.4-9.4 24.6-9.4 33.9 0s9.4 24.6 0 33.9z" })));
          case "cross":
            return /* @__PURE__ */ wp.element.createElement("span", { className: "digiblocks-cell-icon digiblocks-cell-cross" }, /* @__PURE__ */ wp.element.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 512 512", width: "20", height: "20", fill: "currentColor" }, /* @__PURE__ */ wp.element.createElement("path", { d: "M256 512A256 256 0 1 0 256 0a256 256 0 1 0 0 512zM175 175c9.4-9.4 24.6-9.4 33.9 0l47 47 47-47c9.4-9.4 24.6-9.4 33.9 0s9.4 24.6 0 33.9l-47 47 47 47c9.4 9.4 9.4 24.6 0 33.9s-24.6 9.4-33.9 0l-47-47-47 47c-9.4 9.4-24.6 9.4-33.9 0s-9.4-24.6 0-33.9l47-47-47-47c-9.4-9.4-9.4-24.6 0-33.9z" })));
          default:
            return null;
        }
      }
      if (cellControls[cellKey].stars) {
        const starCount = parseInt(cellControls[cellKey].stars);
        const stars = [];
        for (let i = 0; i < 5; i++) {
          if (i < starCount) {
            stars.push(
              /* @__PURE__ */ wp.element.createElement("span", { key: `star-${i}`, className: "digiblocks-cell-icon" }, /* @__PURE__ */ wp.element.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", width: "16", height: "16", viewBox: "0 0 16 16", fill: "currentColor" }, /* @__PURE__ */ wp.element.createElement("path", { d: "M3.612 15.443c-.386.198-.824-.149-.746-.592l.83-4.73L.173 6.765c-.329-.314-.158-.888.283-.95l4.898-.696L7.538.792c.197-.39.73-.39.927 0l2.184 4.327l4.898.696c.441.062.612.636.282.95l-3.522 3.356l.83 4.73c.078.443-.36.79-.746.592L8 13.187l-4.389 2.256z" })))
            );
          } else {
            stars.push(
              /* @__PURE__ */ wp.element.createElement("span", { key: `star-empty-${i}`, className: "digiblocks-cell-icon" }, /* @__PURE__ */ wp.element.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", width: "16", height: "16", viewBox: "0 0 16 16", fill: "currentColor", opacity: "0.5" }, /* @__PURE__ */ wp.element.createElement("path", { d: "M2.866 14.85c-.078.444.36.791.746.593l4.39-2.256l4.389 2.256c.386.198.824-.149.746-.592l-.83-4.73l3.522-3.356c.33-.314.16-.888-.282-.95l-4.898-.696L7.538.792c-.197-.39-.73-.39-.927 0L4.427 5.124l-4.898.696c-.441.062-.612.636-.283.95l3.523 3.356-.83 4.73z" })))
            );
          }
        }
        return /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-cell-stars" }, stars);
      }
      return null;
    };
    const commonProps = {
      className: blockClasses,
      id: anchor || null
    };
    return /* @__PURE__ */ wp.element.createElement("div", { ...commonProps }, /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-table-container" }, /* @__PURE__ */ wp.element.createElement("table", { className: "digiblocks-table" }, hasHeader && /* @__PURE__ */ wp.element.createElement("thead", null, /* @__PURE__ */ wp.element.createElement("tr", null, tableData[0].map((cell, colIndex) => /* @__PURE__ */ wp.element.createElement("th", { key: `header-${colIndex}` }, /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-cell-content" }, renderCellIcon(0, colIndex), /* @__PURE__ */ wp.element.createElement(
      RichText23.Content,
      {
        tagName: "span",
        value: cell
      }
    )))))), /* @__PURE__ */ wp.element.createElement("tbody", null, tableData.slice(hasHeader ? 1 : 0, hasFooter ? tableData.length - 1 : tableData.length).map((row, rowIndex) => {
      const actualRowIndex = hasHeader ? rowIndex + 1 : rowIndex;
      return /* @__PURE__ */ wp.element.createElement("tr", { key: `row-${actualRowIndex}` }, row.map((cell, colIndex) => /* @__PURE__ */ wp.element.createElement(
        "td",
        {
          key: `cell-${actualRowIndex}-${colIndex}`,
          "data-label": hasHeader ? tableData[0][colIndex] : ""
        },
        /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-cell-content" }, renderCellIcon(actualRowIndex, colIndex), /* @__PURE__ */ wp.element.createElement(
          RichText23.Content,
          {
            tagName: "span",
            value: cell
          }
        ))
      )));
    })), hasFooter && /* @__PURE__ */ wp.element.createElement("tfoot", null, /* @__PURE__ */ wp.element.createElement("tr", null, tableData[tableData.length - 1].map((cell, colIndex) => /* @__PURE__ */ wp.element.createElement("td", { key: `footer-${colIndex}` }, /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-cell-content" }, renderCellIcon(tableData.length - 1, colIndex), /* @__PURE__ */ wp.element.createElement(
      RichText23.Content,
      {
        tagName: "span",
        value: cell
      }
    )))))))));
  };
  var save_default25 = TableSave;

  // blocks/team/edit.js
  var { __: __31 } = window.wp.i18n;
  var {
    useBlockProps: useBlockProps49,
    RichText: RichText24,
    InspectorControls: InspectorControls26,
    PanelColorSettings: PanelColorSettings24,
    MediaUpload: MediaUpload7,
    MediaUploadCheck: MediaUploadCheck7,
    URLPopover
  } = window.wp.blockEditor;
  var {
    SelectControl: SelectControl26,
    RangeControl: RangeControl25,
    Button: Button24,
    ToggleControl: ToggleControl26,
    Tooltip: Tooltip7,
    TextControl: TextControl15,
    Popover: Popover3,
    __experimentalToggleGroupControl: ToggleGroupControl24,
    __experimentalToggleGroupControlOption: ToggleGroupControlOption24,
    BaseControl: BaseControl7,
    Icon
  } = window.wp.components;
  var { useState: useState26, useEffect: useEffect26, useRef: useRef22, Fragment } = window.wp.element;
  var { useBlockId: useBlockId26, getDimensionCSS: getDimensionCSS22, animations: animations23, animationPreview: animationPreview23 } = digi.utils;
  var { tabIcons: tabIcons26 } = digi.icons;
  var { ResponsiveControl: ResponsiveControl26, DimensionControl: DimensionControl23, TypographyControl: TypographyControl19, BoxShadowControl: BoxShadowControl21, CustomTabPanel: CustomTabPanel26, TabPanelBody: TabPanelBody26 } = digi.components;
  var socialIconsSVG2 = {
    facebook: /* @__PURE__ */ wp.element.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 320 512", width: "1em", height: "1em" }, /* @__PURE__ */ wp.element.createElement("path", { d: "M80 299.3V512H196V299.3h86.5l18-97.8H196V166.9c0-51.7 20.3-71.5 72.7-71.5c16.3 0 29.4 .4 37 1.2V7.9C291.4 4 256.4 0 236.2 0C129.3 0 80 50.5 80 159.4v42.1H14v97.8H80z" })),
    twitter: /* @__PURE__ */ wp.element.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 512 512", width: "1em", height: "1em" }, /* @__PURE__ */ wp.element.createElement("path", { d: "M389.2 48h70.6L305.6 224.2 487 464H345L233.7 318.6 106.5 464H35.8L200.7 275.5 26.8 48H172.4L272.9 180.9 389.2 48zM364.4 421.8h39.1L151.1 88h-42L364.4 421.8z" })),
    linkedin: /* @__PURE__ */ wp.element.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 448 512", width: "1em", height: "1em" }, /* @__PURE__ */ wp.element.createElement("path", { d: "M100.3 448H7.4V148.9h92.9zM53.8 108.1C24.1 108.1 0 83.5 0 53.8a53.8 53.8 0 0 1 107.6 0c0 29.7-24.1 54.3-53.8 54.3zM447.9 448h-92.7V302.4c0-34.7-.7-79.2-48.3-79.2-48.3 0-55.7 37.7-55.7 76.7V448h-92.8V148.9h89.1v40.8h1.3c12.4-23.5 42.7-48.3 87.9-48.3 94 0 111.3 61.9 111.3 142.3V448z" })),
    instagram: /* @__PURE__ */ wp.element.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 448 512", width: "1em", height: "1em" }, /* @__PURE__ */ wp.element.createElement("path", { d: "M224.1 141c-63.6 0-114.9 51.3-114.9 114.9s51.3 114.9 114.9 114.9S339 319.5 339 255.9 287.7 141 224.1 141zm0 189.6c-41.1 0-74.7-33.5-74.7-74.7s33.5-74.7 74.7-74.7 74.7 33.5 74.7 74.7-33.6 74.7-74.7 74.7zm146.4-194.3c0 14.9-12 26.8-26.8 26.8-14.9 0-26.8-12-26.8-26.8s12-26.8 26.8-26.8 26.8 12 26.8 26.8zm76.1 27.2c-1.7-35.9-9.9-67.7-36.2-93.9-26.2-26.2-58-34.4-93.9-36.2-37-2.1-147.9-2.1-184.9 0-35.8 1.7-67.6 9.9-93.9 36.1s-34.4 58-36.2 93.9c-2.1 37-2.1 147.9 0 184.9 1.7 35.9 9.9 67.7 36.2 93.9s58 34.4 93.9 36.2c37 2.1 147.9 2.1 184.9 0 35.9-1.7 67.7-9.9 93.9-36.2 26.2-26.2 34.4-58 36.2-93.9 2.1-37 2.1-147.8 0-184.8zM398.8 388c-7.8 19.6-22.9 34.7-42.6 42.6-29.5 11.7-99.5 9-132.1 9s-102.7 2.6-132.1-9c-19.6-7.8-34.7-22.9-42.6-42.6-11.7-29.5-9-99.5-9-132.1s-2.6-102.7 9-132.1c7.8-19.6 22.9-34.7 42.6-42.6 29.5-11.7 99.5-9 132.1-9s102.7-2.6 132.1 9c19.6 7.8 34.7 22.9 42.6 42.6 11.7 29.5 9 99.5 9 132.1s2.7 102.7-9 132.1z" })),
    pinterest: /* @__PURE__ */ wp.element.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 384 512", width: "1em", height: "1em" }, /* @__PURE__ */ wp.element.createElement("path", { d: "M204 6.5C101.4 6.5 0 74.9 0 185.6 0 256 39.6 296 63.6 296c9.9 0 15.6-27.6 15.6-35.4 0-9.3-23.7-29.1-23.7-67.8 0-80.4 61.2-137.4 140.4-137.4 68.1 0 118.5 38.7 118.5 109.8 0 53.1-21.3 152.7-90.3 152.7-24.9 0-46.2-18-46.2-43.8 0-37.8 26.4-74.4 26.4-113.4 0-66.2-93.9-54.2-93.9 25.8 0 16.8 2.1 35.4 9.6 50.7-13.8 59.4-42 147.9-42 209.1 0 18.9 2.7 37.5 4.5 56.4 3.4 3.8 1.7 3.4 6.9 1.5 50.4-69 48.6-82.5 71.4-172.8 12.3 23.4 44.1 36 69.3 36 106.2 0 153.9-103.5 153.9-196.8C384 71.3 298.2 6.5 204 6.5z" })),
    youtube: /* @__PURE__ */ wp.element.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 576 512", width: "1em", height: "1em" }, /* @__PURE__ */ wp.element.createElement("path", { d: "M549.7 124.1c-6.3-23.7-24.8-42.3-48.3-48.6C458.8 64 288 64 288 64S117.2 64 74.6 75.5c-23.5 6.3-42 24.9-48.3 48.6-11.4 42.9-11.4 132.3-11.4 132.3s0 89.4 11.4 132.3c6.3 23.7 24.8 41.5 48.3 47.8C117.2 448 288 448 288 448s170.8 0 213.4-11.5c23.5-6.3 42-24.2 48.3-47.8 11.4-42.9 11.4-132.3 11.4-132.3s0-89.4-11.4-132.3zm-317.5 213.5V175.2l142.7 81.2-142.7 81.2z" })),
    dribbble: /* @__PURE__ */ wp.element.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 512 512", width: "1em", height: "1em" }, /* @__PURE__ */ wp.element.createElement("path", { d: "M86.6 64l85.2 85.2C194.5 121.7 208 86.4 208 48c0-14.7-2-28.9-5.7-42.4C158.6 15 119 35.5 86.6 64zM64 86.6C35.5 119 15 158.6 5.6 202.3C19.1 206 33.3 208 48 208c38.4 0 73.7-13.5 101.3-36.1L64 86.6zM256 0c-7.3 0-14.6 .3-21.8 .9C238 16 240 31.8 240 48c0 47.3-17.1 90.5-45.4 124L256 233.4 425.4 64C380.2 24.2 320.9 0 256 0zM48 240c-16.2 0-32-2-47.1-5.8C.3 241.4 0 248.7 0 256c0 64.9 24.2 124.2 64 169.4L233.4 256 172 194.6C138.5 222.9 95.3 240 48 240zm463.1 37.8c.6-7.2 .9-14.5 .9-21.8c0-64.9-24.2-124.2-64-169.4L278.6 256 340 317.4c33.4-28.3 76.7-45.4 124-45.4c16.2 0 32 2 47.1 5.8zm-4.7 31.9C492.9 306 478.7 304 464 304c-38.4 0-73.7 13.5-101.3 36.1L448 425.4c28.5-32.3 49.1-71.9 58.4-115.7zM340.1 362.7C317.5 390.3 304 425.6 304 464c0 14.7 2 28.9 5.7 42.4C353.4 497 393 476.5 425.4 448l-85.2-85.2zM317.4 340L256 278.6 86.6 448c45.1 39.8 104.4 64 169.4 64c7.3 0 14.6-.3 21.8-.9C274 496 272 480.2 272 464c0-47.3 17.1-90.5 45.4-124z" })),
    github: /* @__PURE__ */ wp.element.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 496 512", width: "1em", height: "1em" }, /* @__PURE__ */ wp.element.createElement("path", { d: "M165.9 397.4c0 2-2.3 3.6-5.2 3.6-3.3 .3-5.6-1.3-5.6-3.6 0-2 2.3-3.6 5.2-3.6 3-.3 5.6 1.3 5.6 3.6zm-31.1-4.5c-.7 2 1.3 4.3 4.3 4.9 2.6 1 5.6 0 6.2-2s-1.3-4.3-4.3-5.2c-2.6-.7-5.5 .3-6.2 2.3zm44.2-1.7c-2.9 .7-4.9 2.6-4.6 4.9 .3 2 2.9 3.3 5.9 2.6 2.9-.7 4.9-2.6 4.6-4.6-.3-1.9-3-3.2-5.9-2.9zM244.8 8C106.1 8 0 113.3 0 252c0 110.9 69.8 205.8 169.5 239.2 12.8 2.3 17.3-5.6 17.3-12.1 0-6.2-.3-40.4-.3-61.4 0 0-70 15-84.7-29.8 0 0-11.4-29.1-27.8-36.6 0 0-22.9-15.7 1.6-15.4 0 0 24.9 2 38.6 25.8 21.9 38.6 58.6 27.5 72.9 20.9 2.3-16 8.8-27.1 16-33.7-55.9-6.2-112.3-14.3-112.3-110.5 0-27.5 7.6-41.3 23.6-58.9-2.6-6.5-11.1-33.3 2.6-67.9 20.9-6.5 69 27 69 27 20-5.6 41.5-8.5 62.8-8.5s42.8 2.9 62.8 8.5c0 0 48.1-33.6 69-27 13.7 34.7 5.2 61.4 2.6 67.9 16 17.7 25.8 31.5 25.8 58.9 0 96.5-58.9 104.2-114.8 110.5 9.2 7.9 17 22.9 17 46.4 0 33.7-.3 75.4-.3 83.6 0 6.5 4.6 14.4 17.3 12.1C428.2 457.8 496 362.9 496 252 496 113.3 383.5 8 244.8 8zM97.2 352.9c-1.3 1-1 3.3 .7 5.2 1.6 1.6 3.9 2.3 5.2 1 1.3-1 1-3.3-.7-5.2-1.6-1.6-3.9-2.3-5.2-1zm-10.8-8.1c-.7 1.3 .3 2.9 2.3 3.9 1.6 1 3.6 .7 4.3-.7 .7-1.3-.3-2.9-2.3-3.9-2-.6-3.6-.3-4.3 .7zm32.4 35.6c-1.6 1.3-1 4.3 1.3 6.2 2.3 2.3 5.2 2.6 6.5 1 1.3-1.3 .7-4.3-1.3-6.2-2.2-2.3-5.2-2.6-6.5-1zm-11.4-14.7c-1.6 1-1.6 3.6 0 5.9 1.6 2.3 4.3 3.3 5.6 2.3 1.6-1.3 1.6-3.9 0-6.2-1.4-2.3-4-3.3-5.6-2z" })),
    behance: /* @__PURE__ */ wp.element.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 576 512", width: "1em", height: "1em" }, /* @__PURE__ */ wp.element.createElement("path", { d: "M232 237.2c31.8-15.2 48.4-38.2 48.4-74 0-70.6-52.6-87.8-113.3-87.8H0v354.4h171.8c64.4 0 124.9-30.9 124.9-102.9 0-44.5-21.1-77.4-64.7-89.7zM77.9 135.9H151c28.1 0 53.4 7.9 53.4 40.5 0 30.1-19.7 42.2-47.5 42.2h-79v-82.7zm83.3 233.7H77.9V272h84.9c34.3 0 56 14.3 56 50.6 0 35.8-25.9 47-57.6 47zm358.5-240.7H376V94h143.7v34.9zM576 305.2c0-75.9-44.4-139.2-124.9-139.2-78.2 0-131.3 58.8-131.3 135.8 0 79.9 50.3 134.7 131.3 134.7 61.3 0 101-27.6 120.1-86.3H509c-6.7 21.9-34.3 33.5-55.7 33.5-41.3 0-63-24.2-63-65.3h185.1c.3-4.2 .6-8.7 .6-13.2zM390.4 274c2.3-33.7 24.7-54.8 58.5-54.8 35.4 0 53.2 20.8 56.2 54.8H390.4z" })),
    vimeo: /* @__PURE__ */ wp.element.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 448 512", width: "1em", height: "1em" }, /* @__PURE__ */ wp.element.createElement("path", { d: "M447.8 153.6c-2 43.6-32.4 103.3-91.4 179.1-60.9 79.2-112.4 118.8-154.6 118.8-26.1 0-48.2-24.1-66.3-72.3C100.3 250 85.3 174.3 56.2 174.3c-3.4 0-15.1 7.1-35.2 21.1L0 168.2c51.6-45.3 100.9-95.7 131.8-98.5 34.9-3.4 56.3 20.5 64.4 71.5 28.7 181.5 41.4 208.9 93.6 126.7 18.7-29.6 28.8-52.1 30.2-67.6 4.8-45.9-35.8-42.8-63.3-31 22-72.1 64.1-107.1 126.2-105.1 45.8 1.2 67.5 31.1 64.9 89.4z" })),
    tiktok: /* @__PURE__ */ wp.element.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 448 512", width: "1em", height: "1em" }, /* @__PURE__ */ wp.element.createElement("path", { d: "M448 209.9a210.1 210.1 0 0 1 -122.8-39.3V349.4A162.6 162.6 0 1 1 185 188.3V278.2a74.6 74.6 0 1 0 52.2 71.2V0l88 0a121.2 121.2 0 0 0 1.9 22.2h0A122.2 122.2 0 0 0 381 102.4a121.4 121.4 0 0 0 67 20.1z" })),
    email: /* @__PURE__ */ wp.element.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 512 512", width: "1em", height: "1em" }, /* @__PURE__ */ wp.element.createElement("path", { d: "M48 64C21.5 64 0 85.5 0 112c0 15.1 7.1 29.3 19.2 38.4L236.8 313.6c11.4 8.5 27 8.5 38.4 0L492.8 150.4c12.1-9.1 19.2-23.3 19.2-38.4c0-26.5-21.5-48-48-48L48 64zM0 176L0 384c0 35.3 28.7 64 64 64l384 0c35.3 0 64-28.7 64-64l0-208L294.4 339.2c-22.8 17.1-54 17.1-76.8 0L0 176z" })),
    website: /* @__PURE__ */ wp.element.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 640 512", width: "1em", height: "1em" }, /* @__PURE__ */ wp.element.createElement("path", { d: "M579.8 267.7c56.5-56.5 56.5-148 0-204.5c-50-50-128.8-56.5-186.3-15.4l-1.6 1.1c-14.4 10.3-17.7 30.3-7.4 44.6s30.3 17.7 44.6 7.4l1.6-1.1c32.1-22.9 76-19.3 103.8 8.6c31.5 31.5 31.5 82.5 0 114L422.3 334.8c-31.5 31.5-82.5 31.5-114 0c-27.9-27.9-31.5-71.8-8.6-103.8l1.1-1.6c10.3-14.4 6.9-34.4-7.4-44.6s-34.4-6.9-44.6 7.4l-1.1 1.6C206.5 251.2 213 330 263 380c56.5 56.5 148 56.5 204.5 0L579.8 267.7zM60.2 244.3c-56.5 56.5-56.5 148 0 204.5c50 50 128.8 56.5 186.3 15.4l1.6-1.1c14.4-10.3 17.7-30.3 7.4-44.6s-30.3-17.7-44.6-7.4l-1.6 1.1c-32.1 22.9-76 19.3-103.8-8.6C74 372 74 321 105.5 289.5L217.7 177.2c31.5-31.5 82.5-31.5 114 0c27.9 27.9 31.5 71.8 8.6 103.9l-1.1 1.6c-10.3 14.4-6.9 34.4 7.4 44.6s34.4 6.9 44.6-7.4l1.1-1.6C433.5 260.8 427 182 377 132c-56.5-56.5-148-56.5-204.5 0L60.2 244.3z" }))
  };
  var plusIcon2 = /* @__PURE__ */ wp.element.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 448 512" }, /* @__PURE__ */ wp.element.createElement("path", { d: "M256 80c0-17.7-14.3-32-32-32s-32 14.3-32 32l0 144L48 224c-17.7 0-32 14.3-32 32s14.3 32 32 32l144 0 0 144c0 17.7 14.3 32 32 32s32-14.3 32-32l0-144 144 0c17.7 0 32-14.3 32-32s-14.3-32-32-32l-144 0 0-144z" }));
  var TeamEdit = ({ attributes, setAttributes, clientId }) => {
    const {
      id,
      anchor,
      visibility,
      customClasses,
      members,
      columns,
      gutter,
      layout,
      alignment,
      imageStyle,
      imageSize,
      imageBorderRadius,
      imageBorderWidth,
      imageBorderColor,
      imageBorderStyle,
      typography,
      textTypography,
      contentTypography,
      nameColor,
      positionColor,
      bioColor,
      iconColor,
      iconHoverColor,
      iconSize,
      iconSpacing,
      iconBackgroundColor,
      iconBackgroundHoverColor,
      iconBorderRadius,
      iconPadding,
      boxBackgroundColor,
      boxBorderColor,
      boxBorderRadius,
      boxBorderWidth,
      boxBorderStyle,
      boxPadding,
      boxMargin,
      boxShadow,
      boxShadowHover,
      animation,
      showName,
      showPosition,
      showBio,
      showSocial
    } = attributes;
    useBlockId26(id, clientId, setAttributes);
    const [activeTab, setActiveTab] = useState26(() => {
      if (window.digi.uiState) {
        const savedTab = window.digi.uiState.getActiveTab(clientId);
        if (savedTab)
          return savedTab;
      }
      return "options";
    });
    const [socialSelectPopover, setSocialSelectPopover] = useState26(null);
    const [urlPopover, setUrlPopover] = useState26(null);
    const [localActiveDevice, setLocalActiveDevice] = useState26(window.digi.responsiveState.activeDevice);
    const [animating, setAnimating] = useState26(false);
    useEffect26(() => {
      const unsubscribe = window.digi.responsiveState.subscribe((device) => {
        setLocalActiveDevice(device);
      });
      return unsubscribe;
    }, []);
    useEffect26(() => {
      if (members && members.length > 0) {
        const updatedMembers = members.map((member, index) => {
          if (!member.id) {
            return { ...member, id: `team-member-${clientId.substr(0, 8)}-${index}` };
          }
          if (member.socials && member.socials.length > 0) {
            const updatedSocials = member.socials.map((social, sIndex) => {
              if (!social.id) {
                return { ...social, id: `social-${index}-${sIndex}` };
              }
              return social;
            });
            return { ...member, socials: updatedSocials };
          }
          return member;
        });
        if (JSON.stringify(updatedMembers) !== JSON.stringify(members)) {
          setAttributes({ members: updatedMembers });
        }
      }
    }, [clientId, members, setAttributes]);
    const previewTimeoutRef = useRef22(null);
    useEffect26(() => {
      if (animation && animation !== "none") {
        const timeoutId = setTimeout(() => {
          animationPreview23(id, animation, animations23, previewTimeoutRef);
        }, 100);
        return () => clearTimeout(timeoutId);
      }
    }, [animation]);
    const handlePreviewClick = () => {
      animationPreview23(id, animation, animations23, previewTimeoutRef);
    };
    const imageStyleOptions = [
      { label: __31("Default", "digiblocks"), value: "default" },
      { label: __31("Circle", "digiblocks"), value: "circle" },
      { label: __31("Square", "digiblocks"), value: "square" },
      { label: __31("Rounded", "digiblocks"), value: "rounded" }
    ];
    const borderStyleOptions = [
      { label: __31("None", "digiblocks"), value: "none" },
      { label: __31("Solid", "digiblocks"), value: "solid" },
      { label: __31("Dotted", "digiblocks"), value: "dotted" },
      { label: __31("Dashed", "digiblocks"), value: "dashed" },
      { label: __31("Double", "digiblocks"), value: "double" },
      { label: __31("Groove", "digiblocks"), value: "groove" },
      { label: __31("Ridge", "digiblocks"), value: "ridge" },
      { label: __31("Inset", "digiblocks"), value: "inset" },
      { label: __31("Outset", "digiblocks"), value: "outset" }
    ];
    const socialNetworks = [
      { label: __31("Facebook", "digiblocks"), value: "facebook" },
      { label: __31("Twitter", "digiblocks"), value: "twitter" },
      { label: __31("LinkedIn", "digiblocks"), value: "linkedin" },
      { label: __31("Instagram", "digiblocks"), value: "instagram" },
      { label: __31("Pinterest", "digiblocks"), value: "pinterest" },
      { label: __31("YouTube", "digiblocks"), value: "youtube" },
      { label: __31("Dribbble", "digiblocks"), value: "dribbble" },
      { label: __31("GitHub", "digiblocks"), value: "github" },
      { label: __31("Behance", "digiblocks"), value: "behance" },
      { label: __31("Vimeo", "digiblocks"), value: "vimeo" },
      { label: __31("TikTok", "digiblocks"), value: "tiktok" },
      { label: __31("Email", "digiblocks"), value: "email" },
      { label: __31("Website", "digiblocks"), value: "website" }
    ];
    const animationOptions = [
      { label: __31("None", "digiblocks"), value: "none" },
      ...Object.keys(animations23).map((animation2) => ({
        label: animation2.replace(/-/g, " ").replace(/\b\w/g, (l) => l.toUpperCase()),
        value: animation2
      }))
    ];
    const tabList = [
      {
        name: "options",
        title: __31("Options", "digiblocks"),
        icon: tabIcons26.optionsIcon
      },
      {
        name: "style",
        title: __31("Style", "digiblocks"),
        icon: tabIcons26.styleIcon
      },
      {
        name: "advanced",
        title: __31("Advanced", "digiblocks"),
        icon: tabIcons26.advancedIcon
      }
    ];
    const addTeamMember = () => {
      const newMemberId = `team-member-${clientId.substr(0, 8)}-${Date.now()}`;
      const newMember = {
        id: newMemberId,
        name: __31("New Team Member", "digiblocks"),
        position: __31("Position", "digiblocks"),
        bio: __31("Add a short bio about this team member.", "digiblocks"),
        image: {
          url: "",
          id: "",
          alt: ""
        },
        socials: [
          {
            id: `social-${newMemberId}-1`,
            network: "facebook",
            url: "https://facebook.com"
          },
          {
            id: `social-${newMemberId}-2`,
            network: "twitter",
            url: "https://twitter.com"
          }
        ]
      };
      setAttributes({
        members: [...members, newMember]
      });
    };
    const removeTeamMember = (index) => {
      const newMembers = [...members];
      newMembers.splice(index, 1);
      setAttributes({
        members: newMembers
      });
    };
    const duplicateTeamMember = (index) => {
      const memberToDuplicate = members[index];
      const timestamp = Date.now();
      const newMemberId = `team-member-${clientId.substr(0, 8)}-${timestamp}`;
      const newMember = {
        ...memberToDuplicate,
        id: newMemberId,
        socials: memberToDuplicate.socials ? memberToDuplicate.socials.map((social, sIndex) => ({
          ...social,
          id: `social-${newMemberId}-${sIndex}`
        })) : []
      };
      const newMembers = [...members];
      newMembers.splice(index + 1, 0, newMember);
      setAttributes({
        members: newMembers
      });
    };
    const moveTeamMemberUp = (index) => {
      if (index === 0)
        return;
      const newMembers = [...members];
      const member = newMembers[index];
      newMembers.splice(index, 1);
      newMembers.splice(index - 1, 0, member);
      setAttributes({
        members: newMembers
      });
    };
    const moveTeamMemberDown = (index) => {
      if (index === members.length - 1)
        return;
      const newMembers = [...members];
      const member = newMembers[index];
      newMembers.splice(index, 1);
      newMembers.splice(index + 1, 0, member);
      setAttributes({
        members: newMembers
      });
    };
    const updateTeamMember = (index, key, value) => {
      const newMembers = [...members];
      newMembers[index] = {
        ...newMembers[index],
        [key]: value
      };
      setAttributes({
        members: newMembers
      });
    };
    const updateTeamMemberImage = (index, media) => {
      const newMembers = [...members];
      if (!newMembers[index].image) {
        newMembers[index].image = {};
      }
      newMembers[index].image = {
        url: media.url || "",
        id: media.id || "",
        alt: media.alt || ""
      };
      setAttributes({
        members: newMembers
      });
    };
    const openSocialSelectPopover = (memberIndex) => {
      setSocialSelectPopover({
        memberIndex,
        target: document.getElementById(`add-social-${memberIndex}`)
      });
    };
    const closeSocialSelectPopover = () => {
      setSocialSelectPopover(null);
    };
    const addSpecificSocialLink = (memberIndex, network) => {
      const newMembers = [...members];
      const member = newMembers[memberIndex];
      const socials = member.socials || [];
      socials.push({
        id: `social-${member.id}-${Date.now()}`,
        network,
        url: ""
      });
      newMembers[memberIndex] = {
        ...member,
        socials
      };
      setAttributes({
        members: newMembers
      });
      closeSocialSelectPopover();
      setTimeout(() => {
        const socialIndex = socials.length - 1;
        openUrlPopover(memberIndex, socialIndex);
      }, 100);
    };
    const renderSocialSelectPopover = () => {
      if (!socialSelectPopover)
        return null;
      const { memberIndex, target } = socialSelectPopover;
      const usedNetworks = members[memberIndex].socials ? members[memberIndex].socials.map((social) => social.network) : [];
      const availableNetworks = socialNetworks.filter((network) => !usedNetworks.includes(network.value));
      return /* @__PURE__ */ wp.element.createElement(
        Popover3,
        {
          anchor: target,
          onClose: closeSocialSelectPopover,
          position: "bottom center",
          expandOnMobile: true,
          className: "digiblocks-team-social-select-popover"
        },
        /* @__PURE__ */ wp.element.createElement("div", { style: { padding: "12px", width: "280px", maxHeight: "400px", overflowY: "auto" } }, /* @__PURE__ */ wp.element.createElement("div", { style: { marginBottom: "10px", fontWeight: "bold" } }, __31("Select Social Network", "digiblocks")), /* @__PURE__ */ wp.element.createElement("div", { style: { display: "grid", gridTemplateColumns: "1fr 1fr", gap: "8px" } }, availableNetworks.map((network) => /* @__PURE__ */ wp.element.createElement(
          Button24,
          {
            key: network.value,
            variant: "secondary",
            onClick: () => addSpecificSocialLink(memberIndex, network.value),
            style: {
              display: "flex",
              alignItems: "center",
              justifyContent: "flex-start",
              padding: "8px",
              gap: "8px"
            }
          },
          /* @__PURE__ */ wp.element.createElement("span", { style: { display: "inline-flex", alignItems: "center" } }, socialIconsSVG2[network.value]),
          /* @__PURE__ */ wp.element.createElement("span", null, network.label)
        ))))
      );
    };
    const removeSocialLink = (memberIndex, socialIndex) => {
      const newMembers = [...members];
      const member = newMembers[memberIndex];
      const socials = [...member.socials];
      socials.splice(socialIndex, 1);
      newMembers[memberIndex] = {
        ...member,
        socials
      };
      setAttributes({
        members: newMembers
      });
    };
    const updateSocialLink = (memberIndex, socialIndex, key, value) => {
      const newMembers = [...members];
      const member = newMembers[memberIndex];
      const socials = [...member.socials];
      socials[socialIndex] = {
        ...socials[socialIndex],
        [key]: value
      };
      newMembers[memberIndex] = {
        ...member,
        socials
      };
      setAttributes({
        members: newMembers
      });
    };
    const openUrlPopover = (memberIndex, socialIndex) => {
      setUrlPopover({
        memberIndex,
        socialIndex,
        target: document.getElementById(`social-link-${memberIndex}-${socialIndex}`)
      });
    };
    const closeUrlPopover = () => {
      setUrlPopover(null);
    };
    const generateCSS = () => {
      const activeDevice = localActiveDevice;
      const columnWidth = {
        desktop: `calc((100% - ${(columns.desktop - 1) * gutter.desktop}px) / ${columns.desktop})`,
        tablet: `calc((100% - ${(columns.tablet - 1) * gutter.tablet}px) / ${columns.tablet})`,
        mobile: `calc((100% - ${(columns.mobile - 1) * gutter.mobile}px) / ${columns.mobile})`
      };
      let boxShadowCSS = "box-shadow: none;";
      if (boxShadow && boxShadow.enable) {
        const inset = boxShadow.position === "inset" ? "inset " : "";
        boxShadowCSS = `box-shadow: ${inset}${boxShadow.horizontal}px ${boxShadow.vertical}px ${boxShadow.blur}px ${boxShadow.spread}px ${boxShadow.color};`;
      }
      let boxShadowHoverCSS = "";
      if (boxShadowHover && boxShadowHover.enable) {
        const insetHover = boxShadowHover.position === "inset" ? "inset " : "";
        boxShadowHoverCSS = `box-shadow: ${insetHover}${boxShadowHover.horizontal}px ${boxShadowHover.vertical}px ${boxShadowHover.blur}px ${boxShadowHover.spread}px ${boxShadowHover.color};`;
      }
      let nameTypographyCSS = "";
      if (typography) {
        if (typography.fontFamily) {
          nameTypographyCSS += `font-family: ${typography.fontFamily};`;
        }
        if (typography.fontSize && typography.fontSize[activeDevice]) {
          nameTypographyCSS += `font-size: ${typography.fontSize[activeDevice]}${typography.fontSizeUnit || "px"};`;
        }
        if (typography.fontWeight) {
          nameTypographyCSS += `font-weight: ${typography.fontWeight};`;
        }
        if (typography.fontStyle) {
          nameTypographyCSS += `font-style: ${typography.fontStyle};`;
        }
        if (typography.textTransform) {
          nameTypographyCSS += `text-transform: ${typography.textTransform};`;
        }
        if (typography.textDecoration) {
          nameTypographyCSS += `text-decoration: ${typography.textDecoration};`;
        }
        if (typography.lineHeight && typography.lineHeight[activeDevice]) {
          nameTypographyCSS += `line-height: ${typography.lineHeight[activeDevice]}${typography.lineHeightUnit || "em"};`;
        }
        if (typography.letterSpacing && typography.letterSpacing[activeDevice]) {
          nameTypographyCSS += `letter-spacing: ${typography.letterSpacing[activeDevice]}${typography.letterSpacingUnit || "px"};`;
        }
      }
      let positionTypographyCSS = "";
      if (textTypography) {
        if (textTypography.fontFamily) {
          positionTypographyCSS += `font-family: ${textTypography.fontFamily};`;
        }
        if (textTypography.fontSize && textTypography.fontSize[activeDevice]) {
          positionTypographyCSS += `font-size: ${textTypography.fontSize[activeDevice]}${textTypography.fontSizeUnit || "px"};`;
        }
        if (textTypography.fontWeight) {
          positionTypographyCSS += `font-weight: ${textTypography.fontWeight};`;
        }
        if (textTypography.fontStyle) {
          positionTypographyCSS += `font-style: ${textTypography.fontStyle};`;
        }
        if (textTypography.textTransform) {
          positionTypographyCSS += `text-transform: ${textTypography.textTransform};`;
        }
        if (textTypography.textDecoration) {
          positionTypographyCSS += `text-decoration: ${textTypography.textDecoration};`;
        }
        if (textTypography.lineHeight && textTypography.lineHeight[activeDevice]) {
          positionTypographyCSS += `line-height: ${textTypography.lineHeight[activeDevice]}${textTypography.lineHeightUnit || "em"};`;
        }
        if (textTypography.letterSpacing && textTypography.letterSpacing[activeDevice]) {
          positionTypographyCSS += `letter-spacing: ${textTypography.letterSpacing[activeDevice]}${textTypography.letterSpacingUnit || "px"};`;
        }
      }
      let bioTypographyCSS = "";
      if (contentTypography) {
        if (contentTypography.fontFamily) {
          bioTypographyCSS += `font-family: ${contentTypography.fontFamily};`;
        }
        if (contentTypography.fontSize && contentTypography.fontSize[activeDevice]) {
          bioTypographyCSS += `font-size: ${contentTypography.fontSize[activeDevice]}${contentTypography.fontSizeUnit || "px"};`;
        }
        if (contentTypography.fontWeight) {
          bioTypographyCSS += `font-weight: ${contentTypography.fontWeight};`;
        }
        if (contentTypography.fontStyle) {
          bioTypographyCSS += `font-style: ${contentTypography.fontStyle};`;
        }
        if (contentTypography.textTransform) {
          bioTypographyCSS += `text-transform: ${contentTypography.textTransform};`;
        }
        if (contentTypography.textDecoration) {
          bioTypographyCSS += `text-decoration: ${contentTypography.textDecoration};`;
        }
        if (contentTypography.lineHeight && contentTypography.lineHeight[activeDevice]) {
          bioTypographyCSS += `line-height: ${contentTypography.lineHeight[activeDevice]}${contentTypography.lineHeightUnit || "em"};`;
        }
        if (contentTypography.letterSpacing && contentTypography.letterSpacing[activeDevice]) {
          bioTypographyCSS += `letter-spacing: ${contentTypography.letterSpacing[activeDevice]}${contentTypography.letterSpacingUnit || "px"};`;
        }
      }
      let imageBorderRadiusValue;
      if (imageStyle === "circle") {
        imageBorderRadiusValue = "border-radius: 50%;";
      } else if (imageStyle === "square") {
        imageBorderRadiusValue = "border-radius: 0;";
      } else if (imageStyle === "rounded") {
        imageBorderRadiusValue = "border-radius: 8px;";
      } else {
        imageBorderRadiusValue = `${getDimensionCSS22(imageBorderRadius, "border-radius", activeDevice)}`;
      }
      const boxBorderRadiusValue = `${getDimensionCSS22(boxBorderRadius, "border-radius", activeDevice)}`;
      const boxBorderWidthValue = `${getDimensionCSS22(boxBorderWidth, "border-width", activeDevice)}`;
      const boxPaddingValue = `${getDimensionCSS22(boxPadding, "padding", activeDevice)}`;
      const boxMarginValue = `${getDimensionCSS22(boxMargin, "margin", activeDevice)}`;
      const imageBorderWidthValue = `${getDimensionCSS22(imageBorderWidth, "border-width", activeDevice)}`;
      const iconBorderRadiusValue = `${getDimensionCSS22(iconBorderRadius, "border-radius", activeDevice)}`;
      const iconPaddingValue = `${getDimensionCSS22(iconPadding, "border-width", activeDevice)}`;
      return `
            /* Team Block - ${id} */
            .${id} {
                ${boxMarginValue}
            }
            
            /* Grid Layout */
            .${id} .digiblocks-team-container {
                display: flex;
                flex-wrap: wrap;
                gap: ${gutter[activeDevice]}px;
                justify-content: ${alignment === "center" ? "center" : alignment === "right" ? "flex-end" : "flex-start"};
            }
            
            /* List Layout */
            .${id}.layout-list .digiblocks-team-container {
                display: flex;
				flex-direction: column;
				gap: ${gutter[activeDevice]}px;
            }
            
            .${id}.layout-list .digiblocks-team-member {
                display: flex;
                align-items: center;
                width: 100%;
				gap: ${gutter[activeDevice]}px;
            }
            
            .${id}.layout-list .digiblocks-team-member-image {
                margin: 0;
            }
            
            .${id}.layout-list .digiblocks-team-member-content {
                text-align: left !important;
            }

			.${id}.layout-list .digiblocks-team-member-social {
				justify-content: flex-start;
			}
            
            /* Team Member */
            .${id} .digiblocks-team-member {
				display: flex;
				align-items: ${alignment === "center" ? "center" : alignment === "right" ? "flex-end" : "flex-start"};
				gap: 15px;
                ${layout === "grid" ? `width: ${columnWidth[activeDevice]}; flex-direction: column;` : ""}
                text-align: ${alignment};
                position: relative;
				background-color: ${boxBackgroundColor || "transparent"};
				${boxBorderStyle !== "none" ? `
					border-style: ${boxBorderStyle};
					border-color: ${boxBorderColor || "#e0e0e0"};
					${boxBorderWidthValue}
				` : ""}
				${boxBorderRadiusValue}
				${boxShadowCSS}
				${boxPaddingValue}
				transition: all 0.3s ease;
            }
            
            /* Hover effects */
            ${boxShadowHover && boxShadowHover.enable ? `
                .${id} .digiblocks-team-member:hover {
                    ${boxShadowHoverCSS}
                }
            ` : ""}
            
            /* Team Member Image */
            .${id} .digiblocks-team-member-image {
                width: ${imageSize[activeDevice]}px;
                height: ${imageSize[activeDevice]}px;
				max-width: 100%;
                ${imageBorderRadiusValue}
                overflow: hidden;
                display: flex;
                ${imageBorderStyle !== "none" ? `
					${imageBorderWidthValue}
					border-style: ${imageBorderStyle};
					border-color: ${imageBorderColor};
                ` : ""}
            }
            
            .${id} .digiblocks-team-member-image img {
                width: 100%;
                height: 100%;
                object-fit: cover;
                display: block;
            }
            
            /* Team Member Name */
            .${id} .digiblocks-team-member-name {
                color: ${nameColor};
                margin-top: 0;
                margin-bottom: 5px;
                ${nameTypographyCSS}
            }
            
            /* Team Member Position */
            .${id} .digiblocks-team-member-position {
                color: ${positionColor};
                margin-bottom: 10px;
                ${positionTypographyCSS}
            }
            
            /* Team Member Bio */
            .${id} .digiblocks-team-member-bio {
                color: ${bioColor};
                margin-bottom: ${showSocial ? "15px" : "0"};
                ${bioTypographyCSS}
            }
            
            /* Team Member Social */
            .${id} .digiblocks-team-member-social {
				display: flex;
				align-items: center;
				justify-content: ${alignment === "center" ? "center" : alignment === "right" ? "flex-end" : "flex-start"};
				gap: ${iconSpacing[activeDevice]}px;
				flex-wrap: wrap;
			}
			
			.${id} .digiblocks-team-member-social-icon {
				color: ${iconColor};
				display: flex;
				align-items: center;
				justify-content: center;
				${iconBorderRadiusValue}
				background-color: ${iconBackgroundColor};
				${iconPaddingValue}
				transition: all 0.3s ease;
				cursor: pointer;
				position: relative;
				z-index: 1;
			}
			
			.${id} .digiblocks-team-member-social-icon:hover {
				color: ${iconHoverColor};
				${iconBackgroundHoverColor ? `background-color: ${iconBackgroundHoverColor};` : ""}
			}
			
			.${id} .digiblocks-team-member-social-icon svg {
				width: ${iconSize[activeDevice] ? `${iconSize[activeDevice]}px` : "1.2rem"};
				height: ${iconSize[activeDevice] ? `${iconSize[activeDevice]}px` : "1.2rem"};
				fill: currentColor;
			}
			
			.${id} .digiblocks-team-member-social-icon-wrapper {
				position: relative;
			}
			
			.${id} .digiblocks-team-member-social-icon.add-social {
				background-color: #f0f0f0;
				color: #333;
				width: 30px;
				height: 30px;
			}
			
			.${id} .digiblocks-team-member-social-icon.add-social svg {
				width: .6rem;
				height: .6rem;
			}
            
            /* Editor Styles */
            .${id} .digiblocks-team-member-controls {
                display: flex;
                gap: 5px;
                position: absolute;
                right: 5px;
                top: 5px;
                background-color: rgba(255, 255, 255, 0.8);
                padding: 5px;
                border-radius: 5px;
                z-index: 10;
            }
            
            .${id} .digiblocks-team-member-placeholder {
                width: 100%;
                height: 100%;
                display: flex;
                align-items: center;
                justify-content: center;
                background-color: #f0f0f0;
                color: #888;
                font-size: 14px;
                cursor: pointer;
            }
            
            .${id} .digiblocks-team-member-social-icon.add-social {
                background-color: #f0f0f0;
                color: #333;
            }
            
            .${id} .digiblocks-team-member-social-icon-controls {
                position: absolute;
                top: -5px;
                right: -5px;
                display: none;
                background-color: rgba(255, 255, 255, 0.8);
                border-radius: 50%;
                padding: 2px;
                z-index: 2;
            }
            
            .${id} .digiblocks-team-member-social-icon-wrapper {
                position: relative;
            }
            
            .${id} .digiblocks-team-member-social-icon-wrapper:hover .digiblocks-team-member-social-icon-controls {
                display: block;
            }

			.${id} .digiblocks-image-upload-container {
				position: relative;
				width: 100%;
				height: 100%;
				overflow: hidden;
			}
			
			.${id} .digiblocks-image-upload-container img {
				width: 100%;
				height: 100%;
				object-fit: cover;
				display: block;
				cursor: pointer;
				transition: transform 0.3s ease;
			}
			
			.${id} .digiblocks-image-upload-container:hover img {
				transform: scale(1.05);
			}
			
			.${id} .digiblocks-change-image-button {
				position: absolute;
				top: 0;
				bottom: 0;
				left: 0;
				right: 0;
				background-color: rgba(0, 0, 0, 0.5);
				color: white;
				padding: 8px 0;
				text-align: center;
				font-size: 12px;
				cursor: pointer;
				opacity: 0;
				transition: opacity 0.3s ease;
				border: none;
				width: 100%;
			}
			
			.${id} .digiblocks-image-upload-container:hover .digiblocks-change-image-button {
				opacity: 1;
			}

			/* Visibility Controls */
			${visibility.desktop ? `
				@media (min-width: 992px) {
					.${id} {
						opacity: 0.5 !important;
					}
				}
			` : ""}

			${visibility.tablet ? `
				@media (min-width: 768px) and (max-width: 991px) {
					.${id} {
						opacity: 0.5 !important;
					}
				}
			` : ""}

			${visibility.mobile ? `
				@media (max-width: 767px) {
					.${id} {
						opacity: 0.5 !important;
					}
				}
			` : ""}
        `;
    };
    const renderTeamMembers = () => {
      return members.map((member, index) => {
        return /* @__PURE__ */ wp.element.createElement("div", { key: member.id, className: "digiblocks-team-member" }, /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-team-member-controls" }, /* @__PURE__ */ wp.element.createElement(Tooltip7, { text: __31("Move Up", "digiblocks") }, /* @__PURE__ */ wp.element.createElement(
          Button24,
          {
            className: "digiblocks-team-member-move-up",
            onClick: () => moveTeamMemberUp(index),
            icon: "arrow-up-alt2",
            disabled: index === 0,
            isSmall: true
          }
        )), /* @__PURE__ */ wp.element.createElement(Tooltip7, { text: __31("Move Down", "digiblocks") }, /* @__PURE__ */ wp.element.createElement(
          Button24,
          {
            className: "digiblocks-team-member-move-down",
            onClick: () => moveTeamMemberDown(index),
            icon: "arrow-down-alt2",
            disabled: index === members.length - 1,
            isSmall: true
          }
        )), /* @__PURE__ */ wp.element.createElement(Tooltip7, { text: __31("Duplicate", "digiblocks") }, /* @__PURE__ */ wp.element.createElement(
          Button24,
          {
            className: "digiblocks-team-member-duplicate",
            onClick: () => duplicateTeamMember(index),
            icon: "admin-page",
            isSmall: true
          }
        )), /* @__PURE__ */ wp.element.createElement(Tooltip7, { text: __31("Remove", "digiblocks") }, /* @__PURE__ */ wp.element.createElement(
          Button24,
          {
            className: "digiblocks-team-member-remove",
            onClick: () => removeTeamMember(index),
            icon: "trash",
            isSmall: true,
            disabled: members.length <= 1
          }
        ))), showName && /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-team-member-image" }, /* @__PURE__ */ wp.element.createElement(MediaUploadCheck7, null, /* @__PURE__ */ wp.element.createElement(
          MediaUpload7,
          {
            onSelect: (media) => updateTeamMemberImage(index, media),
            allowedTypes: ["image"],
            value: member.image && member.image.id ? member.image.id : "",
            render: ({ open }) => /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-image-upload-container" }, member.image && member.image.url ? /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(
              "img",
              {
                src: member.image.url,
                alt: member.image.alt || member.name,
                onClick: open
              }
            ), /* @__PURE__ */ wp.element.createElement(
              "button",
              {
                className: "digiblocks-change-image-button",
                onClick: open
              },
              __31("Change Image", "digiblocks")
            )) : /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-team-member-placeholder", onClick: open }, __31("Choose Image", "digiblocks")))
          }
        ))), /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-team-member-content" }, showName && /* @__PURE__ */ wp.element.createElement(
          RichText24,
          {
            tagName: "h3",
            className: "digiblocks-team-member-name",
            value: member.name,
            onChange: (value) => updateTeamMember(index, "name", value),
            placeholder: __31("Team Member Name", "digiblocks"),
            allowedFormats: ["core/bold", "core/italic"]
          }
        ), showPosition && /* @__PURE__ */ wp.element.createElement(
          RichText24,
          {
            tagName: "div",
            className: "digiblocks-team-member-position",
            value: member.position,
            onChange: (value) => updateTeamMember(index, "position", value),
            placeholder: __31("Position or Role", "digiblocks"),
            allowedFormats: ["core/bold", "core/italic"]
          }
        ), showBio && /* @__PURE__ */ wp.element.createElement(
          RichText24,
          {
            tagName: "div",
            className: "digiblocks-team-member-bio",
            value: member.bio,
            onChange: (value) => updateTeamMember(index, "bio", value),
            placeholder: __31("Add a short bio about this team member.", "digiblocks"),
            allowedFormats: ["core/bold", "core/italic", "core/link"]
          }
        ), showSocial && /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-team-member-social" }, member.socials && member.socials.map((social, socialIndex) => /* @__PURE__ */ wp.element.createElement("div", { key: social.id, className: "digiblocks-team-member-social-icon-wrapper" }, /* @__PURE__ */ wp.element.createElement(
          "div",
          {
            id: `social-link-${index}-${socialIndex}`,
            className: "digiblocks-team-member-social-icon",
            onClick: () => openUrlPopover(index, socialIndex)
          },
          socialIconsSVG2[social.network]
        ), /* @__PURE__ */ wp.element.createElement(
          Button24,
          {
            className: "digiblocks-team-member-social-icon-remove",
            onClick: () => removeSocialLink(index, socialIndex),
            icon: "no-alt",
            isSmall: true,
            label: __31("Remove", "digiblocks"),
            style: {
              position: "absolute",
              top: "-12px",
              right: "-10px",
              background: "#fff",
              borderRadius: "50%",
              padding: "2px",
              boxShadow: "0 1px 3px rgba(0,0,0,0.2)",
              zIndex: 2
            }
          }
        ))), /* @__PURE__ */ wp.element.createElement(
          "div",
          {
            id: `add-social-${index}`,
            className: "digiblocks-team-member-social-icon add-social",
            onClick: () => openSocialSelectPopover(index),
            title: __31("Add Social Link", "digiblocks")
          },
          plusIcon2
        ))));
      });
    };
    const renderUrlPopover = () => {
      if (!urlPopover)
        return null;
      const { memberIndex, socialIndex, target } = urlPopover;
      const social = members[memberIndex].socials[socialIndex];
      return /* @__PURE__ */ wp.element.createElement(
        Popover3,
        {
          anchor: target,
          onClose: closeUrlPopover,
          position: "bottom center",
          expandOnMobile: true,
          className: "digiblocks-team-social-url-popover"
        },
        /* @__PURE__ */ wp.element.createElement("div", { style: { display: "flex", flexDirection: "column", gap: "1rem", padding: "12px", minWidth: "280px" } }, /* @__PURE__ */ wp.element.createElement(
          SelectControl26,
          {
            label: __31("Social Network", "digiblocks"),
            value: social.network,
            options: socialNetworks,
            onChange: (value) => updateSocialLink(memberIndex, socialIndex, "network", value),
            __next40pxDefaultSize: true,
            __nextHasNoMarginBottom: true
          }
        ), /* @__PURE__ */ wp.element.createElement(
          TextControl15,
          {
            label: __31("URL", "digiblocks"),
            value: social.url,
            onChange: (value) => updateSocialLink(memberIndex, socialIndex, "url", value),
            placeholder: social.network === "email" ? "mailto:example@domain.com" : social.network === "website" ? "https://example.com" : `https://${social.network}.com/username`,
            __next40pxDefaultSize: true,
            __nextHasNoMarginBottom: true
          }
        ), /* @__PURE__ */ wp.element.createElement(
          Button24,
          {
            variant: "primary",
            onClick: closeUrlPopover,
            style: { justifyContent: "center", width: "100%" }
          },
          __31("Done", "digiblocks")
        ))
      );
    };
    const renderTabContent = () => {
      switch (activeTab) {
        case "options":
          return /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(
            TabPanelBody26,
            {
              tab: "options",
              name: "layout-settings",
              title: __31("Layout Settings", "digiblocks"),
              initialOpen: true
            },
            /* @__PURE__ */ wp.element.createElement(
              BaseControl7,
              {
                id: "team-alignment-control",
                label: __31("Layout Type", "digiblocks"),
                __nextHasNoMarginBottom: true
              },
              /* @__PURE__ */ wp.element.createElement(
                ToggleGroupControl24,
                {
                  value: layout,
                  onChange: (value) => setAttributes({ layout: value }),
                  isBlock: true,
                  __next40pxDefaultSize: true,
                  __nextHasNoMarginBottom: true
                },
                /* @__PURE__ */ wp.element.createElement(
                  ToggleGroupControlOption24,
                  {
                    value: "grid",
                    label: __31("Grid", "digiblocks"),
                    "aria-label": __31("Grid Layout", "digiblocks")
                  }
                ),
                /* @__PURE__ */ wp.element.createElement(
                  ToggleGroupControlOption24,
                  {
                    value: "list",
                    label: __31("List", "digiblocks"),
                    "aria-label": __31("List Layout", "digiblocks")
                  }
                )
              )
            ),
            layout === "grid" && /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(
              BaseControl7,
              {
                id: "team-alignment-control",
                label: __31("Alignment", "digiblocks"),
                __nextHasNoMarginBottom: true
              },
              /* @__PURE__ */ wp.element.createElement(
                ToggleGroupControl24,
                {
                  value: alignment,
                  onChange: (value) => setAttributes({ alignment: value }),
                  isBlock: true,
                  __next40pxDefaultSize: true,
                  __nextHasNoMarginBottom: true
                },
                /* @__PURE__ */ wp.element.createElement(
                  ToggleGroupControlOption24,
                  {
                    value: "left",
                    label: __31("Left", "digiblocks"),
                    "aria-label": __31("Left alignment", "digiblocks")
                  }
                ),
                /* @__PURE__ */ wp.element.createElement(
                  ToggleGroupControlOption24,
                  {
                    value: "center",
                    label: __31("Center", "digiblocks"),
                    "aria-label": __31("Center alignment", "digiblocks")
                  }
                ),
                /* @__PURE__ */ wp.element.createElement(
                  ToggleGroupControlOption24,
                  {
                    value: "right",
                    label: __31("Right", "digiblocks"),
                    "aria-label": __31("Right alignment", "digiblocks")
                  }
                )
              )
            ), /* @__PURE__ */ wp.element.createElement(
              ResponsiveControl26,
              {
                label: __31("Columns", "digiblocks")
              },
              /* @__PURE__ */ wp.element.createElement(
                RangeControl25,
                {
                  value: columns[localActiveDevice],
                  onChange: (value) => setAttributes({
                    columns: {
                      ...columns,
                      [localActiveDevice]: value
                    }
                  }),
                  min: 1,
                  max: 6,
                  step: 1,
                  __next40pxDefaultSize: true,
                  __nextHasNoMarginBottom: true
                }
              )
            ), /* @__PURE__ */ wp.element.createElement(
              ResponsiveControl26,
              {
                label: __31("Spacing", "digiblocks")
              },
              /* @__PURE__ */ wp.element.createElement(
                RangeControl25,
                {
                  value: gutter[localActiveDevice],
                  onChange: (value) => setAttributes({
                    gutter: {
                      ...gutter,
                      [localActiveDevice]: value
                    }
                  }),
                  min: 0,
                  max: 100,
                  step: 1,
                  __next40pxDefaultSize: true,
                  __nextHasNoMarginBottom: true
                }
              )
            ))
          ), /* @__PURE__ */ wp.element.createElement(
            TabPanelBody26,
            {
              tab: "options",
              name: "content-settings",
              title: __31("Content Settings", "digiblocks"),
              initialOpen: false
            },
            /* @__PURE__ */ wp.element.createElement(
              ToggleControl26,
              {
                label: __31("Show Name", "digiblocks"),
                checked: showName,
                onChange: () => setAttributes({ showName: !showName }),
                __nextHasNoMarginBottom: true
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              ToggleControl26,
              {
                label: __31("Show Position", "digiblocks"),
                checked: showPosition,
                onChange: () => setAttributes({ showPosition: !showPosition }),
                __nextHasNoMarginBottom: true
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              ToggleControl26,
              {
                label: __31("Show Bio", "digiblocks"),
                checked: showBio,
                onChange: () => setAttributes({ showBio: !showBio }),
                __nextHasNoMarginBottom: true
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              ToggleControl26,
              {
                label: __31("Show Social Icons", "digiblocks"),
                checked: showSocial,
                onChange: () => setAttributes({ showSocial: !showSocial }),
                __nextHasNoMarginBottom: true
              }
            )
          ), /* @__PURE__ */ wp.element.createElement(
            TabPanelBody26,
            {
              tab: "options",
              name: "image-settings",
              title: __31("Image Settings", "digiblocks"),
              initialOpen: false
            },
            /* @__PURE__ */ wp.element.createElement(
              SelectControl26,
              {
                label: __31("Image Style", "digiblocks"),
                value: imageStyle,
                options: imageStyleOptions,
                onChange: (value) => setAttributes({ imageStyle: value }),
                __next40pxDefaultSize: true,
                __nextHasNoMarginBottom: true
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              ResponsiveControl26,
              {
                label: __31("Image Size", "digiblocks")
              },
              /* @__PURE__ */ wp.element.createElement(
                RangeControl25,
                {
                  value: imageSize[localActiveDevice],
                  onChange: (value) => setAttributes({
                    imageSize: {
                      ...imageSize,
                      [localActiveDevice]: value
                    }
                  }),
                  min: 50,
                  max: 300,
                  step: 1,
                  __next40pxDefaultSize: true,
                  __nextHasNoMarginBottom: true
                }
              )
            ),
            /* @__PURE__ */ wp.element.createElement(
              SelectControl26,
              {
                label: __31("Border Style", "digiblocks"),
                value: imageBorderStyle,
                options: borderStyleOptions,
                onChange: (value) => setAttributes({ imageBorderStyle: value }),
                __next40pxDefaultSize: true,
                __nextHasNoMarginBottom: true
              }
            ),
            imageBorderStyle !== "none" && /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(
              PanelColorSettings24,
              {
                title: __31("Border Color", "digiblocks"),
                initialOpen: false,
                enableAlpha: true,
                colorSettings: [
                  {
                    value: imageBorderColor,
                    onChange: (value) => setAttributes({ imageBorderColor: value }),
                    label: __31("Border Color", "digiblocks")
                  }
                ]
              }
            ), /* @__PURE__ */ wp.element.createElement(
              ResponsiveControl26,
              {
                label: __31("Border Width", "digiblocks")
              },
              /* @__PURE__ */ wp.element.createElement(
                DimensionControl23,
                {
                  values: imageBorderWidth[localActiveDevice],
                  onChange: (value) => setAttributes({
                    imageBorderWidth: {
                      ...imageBorderWidth,
                      [localActiveDevice]: value
                    }
                  })
                }
              )
            )),
            imageStyle === "default" && /* @__PURE__ */ wp.element.createElement(
              ResponsiveControl26,
              {
                label: __31("Border Radius", "digiblocks")
              },
              /* @__PURE__ */ wp.element.createElement(
                DimensionControl23,
                {
                  values: imageBorderRadius[localActiveDevice],
                  onChange: (value) => setAttributes({
                    imageBorderRadius: {
                      ...imageBorderRadius,
                      [localActiveDevice]: value
                    }
                  })
                }
              )
            )
          ));
        case "style":
          return /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(
            TabPanelBody26,
            {
              tab: "style",
              name: "colors",
              title: __31("Colors", "digiblocks"),
              initialOpen: true
            },
            /* @__PURE__ */ wp.element.createElement(
              PanelColorSettings24,
              {
                title: __31("Text Colors", "digiblocks"),
                initialOpen: true,
                colorSettings: [
                  {
                    value: nameColor,
                    onChange: (value) => setAttributes({ nameColor: value }),
                    label: __31("Name Color", "digiblocks")
                  },
                  {
                    value: positionColor,
                    onChange: (value) => setAttributes({ positionColor: value }),
                    label: __31("Position Color", "digiblocks")
                  },
                  {
                    value: bioColor,
                    onChange: (value) => setAttributes({ bioColor: value }),
                    label: __31("Bio Color", "digiblocks")
                  }
                ]
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              PanelColorSettings24,
              {
                title: __31("Social Icon Colors", "digiblocks"),
                initialOpen: false,
                colorSettings: [
                  {
                    value: iconColor,
                    onChange: (value) => setAttributes({ iconColor: value }),
                    label: __31("Icon Color", "digiblocks")
                  },
                  {
                    value: iconHoverColor,
                    onChange: (value) => setAttributes({ iconHoverColor: value }),
                    label: __31("Icon Hover Color", "digiblocks")
                  },
                  {
                    value: iconBackgroundColor,
                    onChange: (value) => setAttributes({ iconBackgroundColor: value }),
                    label: __31("Icon Background", "digiblocks")
                  },
                  {
                    value: iconBackgroundHoverColor,
                    onChange: (value) => setAttributes({ iconBackgroundHoverColor: value }),
                    label: __31("Icon Background Hover", "digiblocks")
                  }
                ]
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              PanelColorSettings24,
              {
                title: __31("Box Colors", "digiblocks"),
                initialOpen: false,
                colorSettings: [
                  {
                    value: boxBackgroundColor,
                    onChange: (value) => setAttributes({ boxBackgroundColor: value }),
                    label: __31("Background Color", "digiblocks")
                  },
                  {
                    value: boxBorderColor,
                    onChange: (value) => setAttributes({ boxBorderColor: value }),
                    label: __31("Border Color", "digiblocks")
                  }
                ]
              }
            )
          ), /* @__PURE__ */ wp.element.createElement(
            TabPanelBody26,
            {
              tab: "style",
              name: "typography",
              title: __31("Typography", "digiblocks"),
              initialOpen: false
            },
            /* @__PURE__ */ wp.element.createElement(
              TypographyControl19,
              {
                label: __31("Name Typography", "digiblocks"),
                value: typography,
                onChange: (value) => setAttributes({ typography: value }),
                defaults: {
                  fontSize: { desktop: 22, tablet: 20, mobile: 18 },
                  fontSizeUnit: "px",
                  lineHeight: { desktop: 1.5, tablet: 1.4, mobile: 1.3 },
                  lineHeightUnit: "em"
                }
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              TypographyControl19,
              {
                label: __31("Position Typography", "digiblocks"),
                value: textTypography,
                onChange: (value) => setAttributes({ textTypography: value }),
                defaults: {
                  fontSize: { desktop: 16, tablet: 15, mobile: 14 },
                  fontSizeUnit: "px",
                  lineHeight: { desktop: 1.5, tablet: 1.4, mobile: 1.3 },
                  lineHeightUnit: "em"
                }
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              TypographyControl19,
              {
                label: __31("Bio Typography", "digiblocks"),
                value: contentTypography,
                onChange: (value) => setAttributes({ contentTypography: value }),
                defaults: {
                  fontSize: { desktop: 16, tablet: 15, mobile: 14 },
                  fontSizeUnit: "px",
                  lineHeight: { desktop: 1.5, tablet: 1.4, mobile: 1.3 },
                  lineHeightUnit: "em"
                }
              }
            )
          ), /* @__PURE__ */ wp.element.createElement(
            TabPanelBody26,
            {
              tab: "style",
              name: "social-icons",
              title: __31("Social Icons", "digiblocks"),
              initialOpen: false
            },
            /* @__PURE__ */ wp.element.createElement(
              ResponsiveControl26,
              {
                label: __31("Icon Size", "digiblocks")
              },
              /* @__PURE__ */ wp.element.createElement(
                RangeControl25,
                {
                  value: iconSize[localActiveDevice],
                  onChange: (value) => setAttributes({
                    iconSize: {
                      ...iconSize,
                      [localActiveDevice]: value
                    }
                  }),
                  min: 10,
                  max: 50,
                  step: 1,
                  __next40pxDefaultSize: true,
                  __nextHasNoMarginBottom: true
                }
              )
            ),
            /* @__PURE__ */ wp.element.createElement(
              ResponsiveControl26,
              {
                label: __31("Icon Spacing", "digiblocks")
              },
              /* @__PURE__ */ wp.element.createElement(
                RangeControl25,
                {
                  value: iconSpacing[localActiveDevice],
                  onChange: (value) => setAttributes({
                    iconSpacing: {
                      ...iconSpacing,
                      [localActiveDevice]: value
                    }
                  }),
                  min: 0,
                  max: 30,
                  step: 1,
                  __next40pxDefaultSize: true,
                  __nextHasNoMarginBottom: true
                }
              )
            ),
            /* @__PURE__ */ wp.element.createElement(
              ResponsiveControl26,
              {
                label: __31("Icon Padding", "digiblocks")
              },
              /* @__PURE__ */ wp.element.createElement(
                DimensionControl23,
                {
                  values: iconPadding[localActiveDevice],
                  onChange: (value) => setAttributes({
                    iconPadding: {
                      ...iconPadding,
                      [localActiveDevice]: value
                    }
                  })
                }
              )
            ),
            /* @__PURE__ */ wp.element.createElement(
              ResponsiveControl26,
              {
                label: __31("Border Radius", "digiblocks")
              },
              /* @__PURE__ */ wp.element.createElement(
                DimensionControl23,
                {
                  values: iconBorderRadius[localActiveDevice],
                  onChange: (value) => setAttributes({
                    iconBorderRadius: {
                      ...iconBorderRadius,
                      [localActiveDevice]: value
                    }
                  })
                }
              )
            )
          ), /* @__PURE__ */ wp.element.createElement(
            TabPanelBody26,
            {
              tab: "style",
              name: "box-style",
              title: __31("Box Style", "digiblocks"),
              initialOpen: false
            },
            /* @__PURE__ */ wp.element.createElement(
              SelectControl26,
              {
                label: __31("Border Style", "digiblocks"),
                value: boxBorderStyle,
                options: borderStyleOptions,
                onChange: (value) => setAttributes({ boxBorderStyle: value }),
                __next40pxDefaultSize: true,
                __nextHasNoMarginBottom: true
              }
            ),
            boxBorderStyle !== "none" && /* @__PURE__ */ wp.element.createElement(
              ResponsiveControl26,
              {
                label: __31("Border Width", "digiblocks")
              },
              /* @__PURE__ */ wp.element.createElement(
                DimensionControl23,
                {
                  values: boxBorderWidth[localActiveDevice],
                  onChange: (value) => setAttributes({
                    boxBorderWidth: {
                      ...boxBorderWidth,
                      [localActiveDevice]: value
                    }
                  })
                }
              )
            ),
            /* @__PURE__ */ wp.element.createElement(
              ResponsiveControl26,
              {
                label: __31("Border Radius", "digiblocks")
              },
              /* @__PURE__ */ wp.element.createElement(
                DimensionControl23,
                {
                  values: boxBorderRadius[localActiveDevice],
                  onChange: (value) => setAttributes({
                    boxBorderRadius: {
                      ...boxBorderRadius,
                      [localActiveDevice]: value
                    }
                  })
                }
              )
            ),
            /* @__PURE__ */ wp.element.createElement(
              BoxShadowControl21,
              {
                label: __31("Box Shadow", "digiblocks"),
                normalValue: boxShadow,
                hoverValue: boxShadowHover,
                onNormalChange: (value) => setAttributes({ boxShadow: value }),
                onHoverChange: (value) => setAttributes({ boxShadowHover: value })
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              ResponsiveControl26,
              {
                label: __31("Padding", "digiblocks")
              },
              /* @__PURE__ */ wp.element.createElement(
                DimensionControl23,
                {
                  values: boxPadding[localActiveDevice],
                  onChange: (value) => setAttributes({
                    boxPadding: {
                      ...boxPadding,
                      [localActiveDevice]: value
                    }
                  })
                }
              )
            ),
            /* @__PURE__ */ wp.element.createElement(
              ResponsiveControl26,
              {
                label: __31("Margin", "digiblocks")
              },
              /* @__PURE__ */ wp.element.createElement(
                DimensionControl23,
                {
                  values: boxMargin[localActiveDevice],
                  onChange: (value) => setAttributes({
                    boxMargin: {
                      ...boxMargin,
                      [localActiveDevice]: value
                    }
                  })
                }
              )
            )
          ));
        case "advanced":
          return /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(
            TabPanelBody26,
            {
              tab: "advanced",
              name: "animation",
              title: __31("Animation", "digiblocks"),
              initialOpen: true
            },
            /* @__PURE__ */ wp.element.createElement(
              SelectControl26,
              {
                label: __31("Animation Effect", "digiblocks"),
                value: animation,
                options: animationOptions,
                onChange: (value) => setAttributes({ animation: value }),
                __next40pxDefaultSize: true,
                __nextHasNoMarginBottom: true
              }
            ),
            animation && animation !== "none" && /* @__PURE__ */ wp.element.createElement("div", { style: { marginTop: "10px" } }, /* @__PURE__ */ wp.element.createElement(
              Button24,
              {
                variant: "secondary",
                onClick: handlePreviewClick,
                style: { width: "100%" },
                disabled: animating
              },
              animating ? __31("Previewing...", "digiblocks") : __31("Preview Animation", "digiblocks")
            ))
          ), /* @__PURE__ */ wp.element.createElement(
            TabPanelBody26,
            {
              tab: "advanced",
              name: "visibility",
              title: __31("Visibility", "digiblocks"),
              initialOpen: false
            },
            /* @__PURE__ */ wp.element.createElement("div", { className: "components-base-control__help", style: {
              padding: "12px",
              backgroundColor: "#f0f6fc",
              border: "1px solid #c3ddfd",
              borderRadius: "4px",
              marginBottom: "16px"
            } }, /* @__PURE__ */ wp.element.createElement("strong", null, __31("Editor Note:", "digiblocks")), /* @__PURE__ */ wp.element.createElement("br", null), __31("Hidden elements appear with reduced opacity in the editor for easy editing. Visibility changes only take effect on the frontend.", "digiblocks")),
            /* @__PURE__ */ wp.element.createElement(
              ToggleControl26,
              {
                label: __31("Hide on Desktop", "digiblocks"),
                checked: visibility.desktop,
                onChange: (value) => setAttributes({
                  visibility: {
                    ...visibility,
                    desktop: value
                  }
                }),
                __nextHasNoMarginBottom: true
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              ToggleControl26,
              {
                label: __31("Hide on Tablet", "digiblocks"),
                checked: visibility.tablet,
                onChange: (value) => setAttributes({
                  visibility: {
                    ...visibility,
                    tablet: value
                  }
                }),
                __nextHasNoMarginBottom: true
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              ToggleControl26,
              {
                label: __31("Hide on Mobile", "digiblocks"),
                checked: visibility.mobile,
                onChange: (value) => setAttributes({
                  visibility: {
                    ...visibility,
                    mobile: value
                  }
                }),
                __nextHasNoMarginBottom: true
              }
            )
          ), /* @__PURE__ */ wp.element.createElement(
            TabPanelBody26,
            {
              tab: "advanced",
              name: "additional",
              title: __31("Additional", "digiblocks"),
              initialOpen: false
            },
            /* @__PURE__ */ wp.element.createElement("div", { className: "components-base-control html-anchor-control" }, /* @__PURE__ */ wp.element.createElement("div", { className: "components-base-control__field" }, /* @__PURE__ */ wp.element.createElement("label", { className: "components-base-control__label", htmlFor: "html-anchor" }, __31("HTML anchor", "digiblocks")), /* @__PURE__ */ wp.element.createElement(
              "input",
              {
                className: "components-text-control__input",
                type: "text",
                id: "html-anchor",
                value: anchor || "",
                onChange: (e) => setAttributes({ anchor: e.target.value }),
                "aria-describedby": "html-anchor-help",
                autoCapitalize: "none",
                autoComplete: "off"
              }
            )), /* @__PURE__ */ wp.element.createElement("p", { id: "html-anchor-help", className: "components-base-control__help" }, __31(`Enter a word or two \u2014 without spaces \u2014 to make a unique web address just for this block, called an "anchor". Then, you'll be able to link directly to this section of your page.`, "digiblocks"), " ", /* @__PURE__ */ wp.element.createElement(
              "a",
              {
                className: "components-external-link",
                href: "https://wordpress.org/documentation/article/page-jumps/",
                target: "_blank",
                rel: "external noreferrer noopener"
              },
              /* @__PURE__ */ wp.element.createElement("span", { className: "components-external-link__contents" }, __31("Learn more about anchors", "digiblocks")),
              /* @__PURE__ */ wp.element.createElement("span", { className: "components-external-link__icon", "aria-label": "(opens in a new tab)" }, "\u2197")
            ))),
            /* @__PURE__ */ wp.element.createElement("div", { className: "components-base-control" }, /* @__PURE__ */ wp.element.createElement("div", { className: "components-base-control__field" }, /* @__PURE__ */ wp.element.createElement("label", { className: "components-base-control__label", htmlFor: "additional-css-classes" }, __31("Additional CSS class(es)", "digiblocks")), /* @__PURE__ */ wp.element.createElement(
              "input",
              {
                className: "components-text-control__input",
                type: "text",
                id: "additional-css-classes",
                value: customClasses || "",
                onChange: (e) => setAttributes({ customClasses: e.target.value }),
                "aria-describedby": "additional-css-classes-help",
                autoComplete: "off"
              }
            )), /* @__PURE__ */ wp.element.createElement("p", { id: "additional-css-classes-help", className: "components-base-control__help" }, __31("Separate multiple classes with spaces.", "digiblocks")))
          ));
        default:
          return null;
      }
    };
    const blockProps = useBlockProps49({
      className: `digiblocks-team-block ${id} layout-${layout} align-${alignment} ${customClasses || ""}`,
      id: anchor || null
      // Set the anchor as ID if provided
    });
    return /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(InspectorControls26, null, /* @__PURE__ */ wp.element.createElement(
      CustomTabPanel26,
      {
        tabs: tabList,
        activeTab,
        onSelect: setActiveTab
      },
      renderTabContent()
    )), /* @__PURE__ */ wp.element.createElement("style", { dangerouslySetInnerHTML: { __html: generateCSS() } }), /* @__PURE__ */ wp.element.createElement("div", { ...blockProps }, /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-team-container" }, renderTeamMembers()), /* @__PURE__ */ wp.element.createElement(
      Button24,
      {
        variant: "primary",
        icon: "plus",
        onClick: addTeamMember,
        style: { width: "100%", marginTop: "20px", justifyContent: "center" }
      },
      __31("Add Team Member", "digiblocks")
    ), renderUrlPopover(), renderSocialSelectPopover()));
  };
  var edit_default26 = TeamEdit;

  // blocks/team/save.js
  var { useBlockProps: useBlockProps50, RichText: RichText25 } = window.wp.blockEditor;
  var socialIconsSVG3 = {
    facebook: /* @__PURE__ */ wp.element.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 320 512" }, /* @__PURE__ */ wp.element.createElement("path", { d: "M80 299.3V512H196V299.3h86.5l18-97.8H196V166.9c0-51.7 20.3-71.5 72.7-71.5c16.3 0 29.4 .4 37 1.2V7.9C291.4 4 256.4 0 236.2 0C129.3 0 80 50.5 80 159.4v42.1H14v97.8H80z" })),
    twitter: /* @__PURE__ */ wp.element.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 512 512" }, /* @__PURE__ */ wp.element.createElement("path", { d: "M389.2 48h70.6L305.6 224.2 487 464H345L233.7 318.6 106.5 464H35.8L200.7 275.5 26.8 48H172.4L272.9 180.9 389.2 48zM364.4 421.8h39.1L151.1 88h-42L364.4 421.8z" })),
    linkedin: /* @__PURE__ */ wp.element.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 448 512" }, /* @__PURE__ */ wp.element.createElement("path", { d: "M100.3 448H7.4V148.9h92.9zM53.8 108.1C24.1 108.1 0 83.5 0 53.8a53.8 53.8 0 0 1 107.6 0c0 29.7-24.1 54.3-53.8 54.3zM447.9 448h-92.7V302.4c0-34.7-.7-79.2-48.3-79.2-48.3 0-55.7 37.7-55.7 76.7V448h-92.8V148.9h89.1v40.8h1.3c12.4-23.5 42.7-48.3 87.9-48.3 94 0 111.3 61.9 111.3 142.3V448z" })),
    instagram: /* @__PURE__ */ wp.element.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 448 512" }, /* @__PURE__ */ wp.element.createElement("path", { d: "M224.1 141c-63.6 0-114.9 51.3-114.9 114.9s51.3 114.9 114.9 114.9S339 319.5 339 255.9 287.7 141 224.1 141zm0 189.6c-41.1 0-74.7-33.5-74.7-74.7s33.5-74.7 74.7-74.7 74.7 33.5 74.7 74.7-33.6 74.7-74.7 74.7zm146.4-194.3c0 14.9-12 26.8-26.8 26.8-14.9 0-26.8-12-26.8-26.8s12-26.8 26.8-26.8 26.8 12 26.8 26.8zm76.1 27.2c-1.7-35.9-9.9-67.7-36.2-93.9-26.2-26.2-58-34.4-93.9-36.2-37-2.1-147.9-2.1-184.9 0-35.8 1.7-67.6 9.9-93.9 36.1s-34.4 58-36.2 93.9c-2.1 37-2.1 147.9 0 184.9 1.7 35.9 9.9 67.7 36.2 93.9s58 34.4 93.9 36.2c37 2.1 147.9 2.1 184.9 0 35.9-1.7 67.7-9.9 93.9-36.2 26.2-26.2 34.4-58 36.2-93.9 2.1-37 2.1-147.8 0-184.8zM398.8 388c-7.8 19.6-22.9 34.7-42.6 42.6-29.5 11.7-99.5 9-132.1 9s-102.7 2.6-132.1-9c-19.6-7.8-34.7-22.9-42.6-42.6-11.7-29.5-9-99.5-9-132.1s-2.6-102.7 9-132.1c7.8-19.6 22.9-34.7 42.6-42.6 29.5-11.7 99.5-9 132.1-9s102.7-2.6 132.1 9c19.6 7.8 34.7 22.9 42.6 42.6 11.7 29.5 9 99.5 9 132.1s2.7 102.7-9 132.1z" })),
    pinterest: /* @__PURE__ */ wp.element.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 384 512" }, /* @__PURE__ */ wp.element.createElement("path", { d: "M204 6.5C101.4 6.5 0 74.9 0 185.6 0 256 39.6 296 63.6 296c9.9 0 15.6-27.6 15.6-35.4 0-9.3-23.7-29.1-23.7-67.8 0-80.4 61.2-137.4 140.4-137.4 68.1 0 118.5 38.7 118.5 109.8 0 53.1-21.3 152.7-90.3 152.7-24.9 0-46.2-18-46.2-43.8 0-37.8 26.4-74.4 26.4-113.4 0-66.2-93.9-54.2-93.9 25.8 0 16.8 2.1 35.4 9.6 50.7-13.8 59.4-42 147.9-42 209.1 0 18.9 2.7 37.5 4.5 56.4 3.4 3.8 1.7 3.4 6.9 1.5 50.4-69 48.6-82.5 71.4-172.8 12.3 23.4 44.1 36 69.3 36 106.2 0 153.9-103.5 153.9-196.8C384 71.3 298.2 6.5 204 6.5z" })),
    youtube: /* @__PURE__ */ wp.element.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 576 512" }, /* @__PURE__ */ wp.element.createElement("path", { d: "M549.7 124.1c-6.3-23.7-24.8-42.3-48.3-48.6C458.8 64 288 64 288 64S117.2 64 74.6 75.5c-23.5 6.3-42 24.9-48.3 48.6-11.4 42.9-11.4 132.3-11.4 132.3s0 89.4 11.4 132.3c6.3 23.7 24.8 41.5 48.3 47.8C117.2 448 288 448 288 448s170.8 0 213.4-11.5c23.5-6.3 42-24.2 48.3-47.8 11.4-42.9 11.4-132.3 11.4-132.3s0-89.4-11.4-132.3zm-317.5 213.5V175.2l142.7 81.2-142.7 81.2z" })),
    dribbble: /* @__PURE__ */ wp.element.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 512 512" }, /* @__PURE__ */ wp.element.createElement("path", { d: "M86.6 64l85.2 85.2C194.5 121.7 208 86.4 208 48c0-14.7-2-28.9-5.7-42.4C158.6 15 119 35.5 86.6 64zM64 86.6C35.5 119 15 158.6 5.6 202.3C19.1 206 33.3 208 48 208c38.4 0 73.7-13.5 101.3-36.1L64 86.6zM256 0c-7.3 0-14.6 .3-21.8 .9C238 16 240 31.8 240 48c0 47.3-17.1 90.5-45.4 124L256 233.4 425.4 64C380.2 24.2 320.9 0 256 0zM48 240c-16.2 0-32-2-47.1-5.8C.3 241.4 0 248.7 0 256c0 64.9 24.2 124.2 64 169.4L233.4 256 172 194.6C138.5 222.9 95.3 240 48 240zm463.1 37.8c.6-7.2 .9-14.5 .9-21.8c0-64.9-24.2-124.2-64-169.4L278.6 256 340 317.4c33.4-28.3 76.7-45.4 124-45.4c16.2 0 32 2 47.1 5.8zm-4.7 31.9C492.9 306 478.7 304 464 304c-38.4 0-73.7 13.5-101.3 36.1L448 425.4c28.5-32.3 49.1-71.9 58.4-115.7zM340.1 362.7C317.5 390.3 304 425.6 304 464c0 14.7 2 28.9 5.7 42.4C353.4 497 393 476.5 425.4 448l-85.2-85.2zM317.4 340L256 278.6 86.6 448c45.1 39.8 104.4 64 169.4 64c7.3 0 14.6-.3 21.8-.9C274 496 272 480.2 272 464c0-47.3 17.1-90.5 45.4-124z" })),
    github: /* @__PURE__ */ wp.element.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 496 512" }, /* @__PURE__ */ wp.element.createElement("path", { d: "M165.9 397.4c0 2-2.3 3.6-5.2 3.6-3.3 .3-5.6-1.3-5.6-3.6 0-2 2.3-3.6 5.2-3.6 3-.3 5.6 1.3 5.6 3.6zm-31.1-4.5c-.7 2 1.3 4.3 4.3 4.9 2.6 1 5.6 0 6.2-2s-1.3-4.3-4.3-5.2c-2.6-.7-5.5 .3-6.2 2.3zm44.2-1.7c-2.9 .7-4.9 2.6-4.6 4.9 .3 2 2.9 3.3 5.9 2.6 2.9-.7 4.9-2.6 4.6-4.6-.3-1.9-3-3.2-5.9-2.9zM244.8 8C106.1 8 0 113.3 0 252c0 110.9 69.8 205.8 169.5 239.2 12.8 2.3 17.3-5.6 17.3-12.1 0-6.2-.3-40.4-.3-61.4 0 0-70 15-84.7-29.8 0 0-11.4-29.1-27.8-36.6 0 0-22.9-15.7 1.6-15.4 0 0 24.9 2 38.6 25.8 21.9 38.6 58.6 27.5 72.9 20.9 2.3-16 8.8-27.1 16-33.7-55.9-6.2-112.3-14.3-112.3-110.5 0-27.5 7.6-41.3 23.6-58.9-2.6-6.5-11.1-33.3 2.6-67.9 20.9-6.5 69 27 69 27 20-5.6 41.5-8.5 62.8-8.5s42.8 2.9 62.8 8.5c0 0 48.1-33.6 69-27 13.7 34.7 5.2 61.4 2.6 67.9 16 17.7 25.8 31.5 25.8 58.9 0 96.5-58.9 104.2-114.8 110.5 9.2 7.9 17 22.9 17 46.4 0 33.7-.3 75.4-.3 83.6 0 6.5 4.6 14.4 17.3 12.1C428.2 457.8 496 362.9 496 252 496 113.3 383.5 8 244.8 8zM97.2 352.9c-1.3 1-1 3.3 .7 5.2 1.6 1.6 3.9 2.3 5.2 1 1.3-1 1-3.3-.7-5.2-1.6-1.6-3.9-2.3-5.2-1zm-10.8-8.1c-.7 1.3 .3 2.9 2.3 3.9 1.6 1 3.6 .7 4.3-.7 .7-1.3-.3-2.9-2.3-3.9-2-.6-3.6-.3-4.3 .7zm32.4 35.6c-1.6 1.3-1 4.3 1.3 6.2 2.3 2.3 5.2 2.6 6.5 1 1.3-1.3 .7-4.3-1.3-6.2-2.2-2.3-5.2-2.6-6.5-1zm-11.4-14.7c-1.6 1-1.6 3.6 0 5.9 1.6 2.3 4.3 3.3 5.6 2.3 1.6-1.3 1.6-3.9 0-6.2-1.4-2.3-4-3.3-5.6-2z" })),
    behance: /* @__PURE__ */ wp.element.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 576 512" }, /* @__PURE__ */ wp.element.createElement("path", { d: "M232 237.2c31.8-15.2 48.4-38.2 48.4-74 0-70.6-52.6-87.8-113.3-87.8H0v354.4h171.8c64.4 0 124.9-30.9 124.9-102.9 0-44.5-21.1-77.4-64.7-89.7zM77.9 135.9H151c28.1 0 53.4 7.9 53.4 40.5 0 30.1-19.7 42.2-47.5 42.2h-79v-82.7zm83.3 233.7H77.9V272h84.9c34.3 0 56 14.3 56 50.6 0 35.8-25.9 47-57.6 47zm358.5-240.7H376V94h143.7v34.9zM576 305.2c0-75.9-44.4-139.2-124.9-139.2-78.2 0-131.3 58.8-131.3 135.8 0 79.9 50.3 134.7 131.3 134.7 61.3 0 101-27.6 120.1-86.3H509c-6.7 21.9-34.3 33.5-55.7 33.5-41.3 0-63-24.2-63-65.3h185.1c.3-4.2 .6-8.7 .6-13.2zM390.4 274c2.3-33.7 24.7-54.8 58.5-54.8 35.4 0 53.2 20.8 56.2 54.8H390.4z" })),
    vimeo: /* @__PURE__ */ wp.element.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 448 512" }, /* @__PURE__ */ wp.element.createElement("path", { d: "M447.8 153.6c-2 43.6-32.4 103.3-91.4 179.1-60.9 79.2-112.4 118.8-154.6 118.8-26.1 0-48.2-24.1-66.3-72.3C100.3 250 85.3 174.3 56.2 174.3c-3.4 0-15.1 7.1-35.2 21.1L0 168.2c51.6-45.3 100.9-95.7 131.8-98.5 34.9-3.4 56.3 20.5 64.4 71.5 28.7 181.5 41.4 208.9 93.6 126.7 18.7-29.6 28.8-52.1 30.2-67.6 4.8-45.9-35.8-42.8-63.3-31 22-72.1 64.1-107.1 126.2-105.1 45.8 1.2 67.5 31.1 64.9 89.4z" })),
    tiktok: /* @__PURE__ */ wp.element.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 448 512" }, /* @__PURE__ */ wp.element.createElement("path", { d: "M448 209.9a210.1 210.1 0 0 1 -122.8-39.3V349.4A162.6 162.6 0 1 1 185 188.3V278.2a74.6 74.6 0 1 0 52.2 71.2V0l88 0a121.2 121.2 0 0 0 1.9 22.2h0A122.2 122.2 0 0 0 381 102.4a121.4 121.4 0 0 0 67 20.1z" })),
    email: /* @__PURE__ */ wp.element.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 512 512" }, /* @__PURE__ */ wp.element.createElement("path", { d: "M48 64C21.5 64 0 85.5 0 112c0 15.1 7.1 29.3 19.2 38.4L236.8 313.6c11.4 8.5 27 8.5 38.4 0L492.8 150.4c12.1-9.1 19.2-23.3 19.2-38.4c0-26.5-21.5-48-48-48L48 64zM0 176L0 384c0 35.3 28.7 64 64 64l384 0c35.3 0 64-28.7 64-64l0-208L294.4 339.2c-22.8 17.1-54 17.1-76.8 0L0 176z" })),
    website: /* @__PURE__ */ wp.element.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 640 512" }, /* @__PURE__ */ wp.element.createElement("path", { d: "M579.8 267.7c56.5-56.5 56.5-148 0-204.5c-50-50-128.8-56.5-186.3-15.4l-1.6 1.1c-14.4 10.3-17.7 30.3-7.4 44.6s30.3 17.7 44.6 7.4l1.6-1.1c32.1-22.9 76-19.3 103.8 8.6c31.5 31.5 31.5 82.5 0 114L422.3 334.8c-31.5 31.5-82.5 31.5-114 0c-27.9-27.9-31.5-71.8-8.6-103.8l1.1-1.6c10.3-14.4 6.9-34.4-7.4-44.6s-34.4-6.9-44.6 7.4l-1.1 1.6C206.5 251.2 213 330 263 380c56.5 56.5 148 56.5 204.5 0L579.8 267.7zM60.2 244.3c-56.5 56.5-56.5 148 0 204.5c50 50 128.8 56.5 186.3 15.4l1.6-1.1c14.4-10.3 17.7-30.3 7.4-44.6s-30.3-17.7-44.6-7.4l-1.6 1.1c-32.1 22.9-76 19.3-103.8-8.6C74 372 74 321 105.5 289.5L217.7 177.2c31.5-31.5 82.5-31.5 114 0c27.9 27.9 31.5 71.8 8.6 103.9l-1.1 1.6c-10.3 14.4-6.9 34.4 7.4 44.6s34.4 6.9 44.6-7.4l1.1-1.6C433.5 260.8 427 182 377 132c-56.5-56.5-148-56.5-204.5 0L60.2 244.3z" }))
  };
  var TeamSave = ({ attributes }) => {
    const {
      id,
      members,
      layout,
      alignment,
      animation,
      anchor,
      customClasses,
      showName,
      showPosition,
      showBio,
      showSocial
    } = attributes;
    const blockClass = `digiblocks-team-block ${id} layout-${layout} align-${alignment} ${animation !== "none" ? `animate-${animation}` : ""} ${customClasses || ""}`;
    const blockProps = useBlockProps50.save({
      className: blockClass,
      id: anchor || null
    });
    const renderTeamMembers = () => {
      return members.map((member) => {
        return /* @__PURE__ */ wp.element.createElement("div", { key: member.id, className: "digiblocks-team-member" }, showName && member.image && member.image.url && /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-team-member-image" }, /* @__PURE__ */ wp.element.createElement(
          "img",
          {
            src: member.image.url,
            alt: member.image.alt || member.name
          }
        )), /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-team-member-content" }, showName && /* @__PURE__ */ wp.element.createElement(
          RichText25.Content,
          {
            tagName: "h3",
            className: "digiblocks-team-member-name",
            value: member.name
          }
        ), showPosition && /* @__PURE__ */ wp.element.createElement(
          RichText25.Content,
          {
            tagName: "div",
            className: "digiblocks-team-member-position",
            value: member.position
          }
        ), showBio && /* @__PURE__ */ wp.element.createElement(
          RichText25.Content,
          {
            tagName: "div",
            className: "digiblocks-team-member-bio",
            value: member.bio
          }
        ), showSocial && member.socials && member.socials.length > 0 && /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-team-member-social" }, member.socials.map((social) => {
          const SocialIcon = socialIconsSVG3[social.network];
          return /* @__PURE__ */ wp.element.createElement(
            "a",
            {
              key: social.id,
              href: social.url,
              className: "digiblocks-team-member-social-icon",
              rel: "noopener noreferrer",
              target: "_blank",
              "aria-label": social.network
            },
            SocialIcon
          );
        }))));
      });
    };
    return /* @__PURE__ */ wp.element.createElement("div", { ...blockProps }, /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-team-container" }, renderTeamMembers()));
  };
  var save_default26 = TeamSave;

  // blocks/testimonials/edit.js
  var { __: __32 } = window.wp.i18n;
  var {
    useBlockProps: useBlockProps51,
    RichText: RichText26,
    InspectorControls: InspectorControls27,
    PanelColorSettings: PanelColorSettings25,
    MediaUpload: MediaUpload8,
    MediaUploadCheck: MediaUploadCheck8
  } = window.wp.blockEditor;
  var {
    BaseControl: BaseControl8,
    SelectControl: SelectControl27,
    RangeControl: RangeControl26,
    ToggleControl: ToggleControl27,
    Button: Button25,
    TabPanel: TabPanel16,
    Tooltip: Tooltip8,
    __experimentalToggleGroupControl: ToggleGroupControl25,
    __experimentalToggleGroupControlOption: ToggleGroupControlOption25
  } = window.wp.components;
  var { useState: useState27, useEffect: useEffect27, useRef: useRef23 } = window.wp.element;
  var { useBlockId: useBlockId27, getDimensionCSS: getDimensionCSS23, animations: animations24, animationPreview: animationPreview24 } = digi.utils;
  var { tabIcons: tabIcons27 } = digi.icons;
  var { ResponsiveControl: ResponsiveControl27, DimensionControl: DimensionControl24, TypographyControl: TypographyControl20, BoxShadowControl: BoxShadowControl22, CustomTabPanel: CustomTabPanel27, TabPanelBody: TabPanelBody27 } = digi.components;
  var TestimonialsEdit = ({ attributes, setAttributes, clientId }) => {
    const {
      id,
      anchor,
      visibility,
      customClasses,
      testimonials,
      columns,
      nameColor,
      nameHoverColor,
      positionColor,
      contentColor,
      backgroundColor,
      backgroundHoverColor,
      quoteIconColor,
      ratingColor,
      borderStyle,
      borderWidth,
      borderRadius,
      borderColor,
      boxShadow,
      boxShadowHover,
      padding,
      margin,
      contentTypography,
      headingTypography,
      textTypography,
      imageSize,
      quoteIconSize,
      showRating,
      showQuoteIcon,
      animation,
      align,
      itemSpacing
    } = attributes;
    useBlockId27(id, clientId, setAttributes);
    const [activeTab, setActiveTab] = useState27(() => {
      if (window.digi.uiState) {
        const savedTab = window.digi.uiState.getActiveTab(clientId);
        if (savedTab)
          return savedTab;
      }
      return "options";
    });
    const [localActiveDevice, setLocalActiveDevice] = useState27(window.digi.responsiveState.activeDevice);
    const [isAnimating, setIsAnimating] = useState27(false);
    useEffect27(() => {
      const unsubscribe = window.digi.responsiveState.subscribe((device) => {
        setLocalActiveDevice(device);
      });
      return unsubscribe;
    }, []);
    useEffect27(() => {
      if (testimonials && testimonials.length > 0) {
        const updatedTestimonials = testimonials.map((item, index) => {
          if (!item.id) {
            return { ...item, id: `testimonial-${clientId.substr(0, 8)}-${index}` };
          }
          return item;
        });
        if (JSON.stringify(updatedTestimonials) !== JSON.stringify(testimonials)) {
          setAttributes({ testimonials: updatedTestimonials });
        }
      }
    }, [clientId, testimonials, setAttributes]);
    const previewTimeoutRef = useRef23(null);
    useEffect27(() => {
      if (animation && animation !== "none") {
        const timeoutId = setTimeout(() => {
          animationPreview24(id, animation, animations24, previewTimeoutRef);
        }, 100);
        return () => clearTimeout(timeoutId);
      }
    }, [animation]);
    const handlePreviewClick = () => {
      animationPreview24(id, animation, animations24, previewTimeoutRef);
    };
    const borderStyleOptions = [
      { label: __32("Default", "digiblocks"), value: "default" },
      { label: __32("None", "digiblocks"), value: "none" },
      { label: __32("Solid", "digiblocks"), value: "solid" },
      { label: __32("Dotted", "digiblocks"), value: "dotted" },
      { label: __32("Dashed", "digiblocks"), value: "dashed" },
      { label: __32("Double", "digiblocks"), value: "double" },
      { label: __32("Groove", "digiblocks"), value: "groove" },
      { label: __32("Inset", "digiblocks"), value: "inset" },
      { label: __32("Outset", "digiblocks"), value: "outset" },
      { label: __32("Ridge", "digiblocks"), value: "ridge" }
    ];
    const animationOptions = [
      { label: __32("None", "digiblocks"), value: "none" },
      ...Object.keys(animations24).map((animation2) => ({
        label: animation2.replace(/-/g, " ").replace(/\b\w/g, (l) => l.toUpperCase()),
        value: animation2
      }))
    ];
    const tabList = [
      {
        name: "options",
        title: __32("Options", "digiblocks"),
        icon: tabIcons27.optionsIcon
      },
      {
        name: "style",
        title: __32("Style", "digiblocks"),
        icon: tabIcons27.styleIcon
      },
      {
        name: "advanced",
        title: __32("Advanced", "digiblocks"),
        icon: tabIcons27.advancedIcon
      }
    ];
    const stateTabList = [
      {
        name: "normal",
        title: __32("Normal", "digiblocks"),
        className: "digiblocks-tab-1 normal"
      },
      {
        name: "hover",
        title: __32("Hover", "digiblocks"),
        className: "digiblocks-tab-2 hover"
      }
    ];
    const addNewTestimonial = () => {
      const newTestimonialIndex = testimonials.length;
      const newTestimonial = {
        id: `testimonial-${clientId.substr(0, 8)}-${newTestimonialIndex}`,
        name: __32("New Name", "digiblocks"),
        position: __32("Position", "digiblocks"),
        company: __32("Company", "digiblocks"),
        content: __32("Add your testimonial content here...", "digiblocks"),
        imageUrl: "",
        imageId: "",
        rating: 5
      };
      setAttributes({
        testimonials: [...testimonials, newTestimonial]
      });
    };
    const removeTestimonial = (index) => {
      const newTestimonials = [...testimonials];
      newTestimonials.splice(index, 1);
      setAttributes({
        testimonials: newTestimonials
      });
    };
    const duplicateTestimonial = (index) => {
      const itemToDuplicate = testimonials[index];
      const timestamp = Date.now();
      const newTestimonial = {
        ...itemToDuplicate,
        id: `testimonial-${clientId.substr(0, 8)}-${timestamp}`
      };
      const newTestimonials = [...testimonials];
      newTestimonials.splice(index + 1, 0, newTestimonial);
      setAttributes({
        testimonials: newTestimonials
      });
    };
    const moveTestimonialUp = (index) => {
      if (index === 0)
        return;
      const newTestimonials = [...testimonials];
      const item = newTestimonials[index];
      newTestimonials.splice(index, 1);
      newTestimonials.splice(index - 1, 0, item);
      setAttributes({
        testimonials: newTestimonials
      });
    };
    const moveTestimonialDown = (index) => {
      if (index === testimonials.length - 1)
        return;
      const newTestimonials = [...testimonials];
      const item = newTestimonials[index];
      newTestimonials.splice(index, 1);
      newTestimonials.splice(index + 1, 0, item);
      setAttributes({
        testimonials: newTestimonials
      });
    };
    const updateTestimonialName = (value, index) => {
      const newTestimonials = [...testimonials];
      newTestimonials[index].name = value;
      setAttributes({
        testimonials: newTestimonials
      });
    };
    const updateTestimonialPosition = (value, index) => {
      const newTestimonials = [...testimonials];
      newTestimonials[index].position = value;
      setAttributes({
        testimonials: newTestimonials
      });
    };
    const updateTestimonialCompany = (value, index) => {
      const newTestimonials = [...testimonials];
      newTestimonials[index].company = value;
      setAttributes({
        testimonials: newTestimonials
      });
    };
    const updateTestimonialContent = (value, index) => {
      const newTestimonials = [...testimonials];
      newTestimonials[index].content = value;
      setAttributes({
        testimonials: newTestimonials
      });
    };
    const updateTestimonialRating = (value, index) => {
      const newTestimonials = [...testimonials];
      newTestimonials[index].rating = value;
      setAttributes({
        testimonials: newTestimonials
      });
    };
    const updateTestimonialImage = (media, index) => {
      const newTestimonials = [...testimonials];
      newTestimonials[index].imageUrl = media.url;
      newTestimonials[index].imageId = media.id;
      setAttributes({
        testimonials: newTestimonials
      });
    };
    const generateStars = (rating) => {
      const stars = [];
      for (let i = 1; i <= 5; i++) {
        stars.push(
          /* @__PURE__ */ wp.element.createElement(
            "span",
            {
              key: i,
              className: `digiblocks-rating-star ${i <= rating ? "filled" : ""}`,
              style: { color: i <= rating ? ratingColor : "#e0e0e0" }
            },
            /* @__PURE__ */ wp.element.createElement("svg", { width: "16", height: "16", viewBox: "0 0 16 16", fill: "currentColor" }, /* @__PURE__ */ wp.element.createElement("path", { d: "M3.612 15.443c-.386.198-.824-.149-.746-.592l.83-4.73L.173 6.765c-.329-.314-.158-.888.283-.95l4.898-.696L7.538.792c.197-.39.73-.39.927 0l2.184 4.327l4.898.696c.441.062.612.636.282.95l-3.522 3.356l.83 4.73c.078.443-.36.79-.746.592L8 13.187l-4.389 2.256z" }))
          )
        );
      }
      return stars;
    };
    const generateCSS = () => {
      const activeDevice = window.digi.responsiveState.activeDevice;
      let borderCSS = "";
      if (borderStyle && borderStyle !== "default" && borderStyle !== "none") {
        borderCSS = `
                border-style: ${borderStyle};
                border-color: ${borderColor || "#e0e0e0"};
				${getDimensionCSS23(borderWidth, "border-width", activeDevice)}
				${getDimensionCSS23(borderRadius, "border-radius", activeDevice)}
            `;
      } else {
        borderCSS = "border: none;";
      }
      let boxShadowCSS = "box-shadow: none;";
      if (boxShadow && boxShadow.enable) {
        const inset = boxShadow.position === "inset" ? "inset " : "";
        boxShadowCSS = `box-shadow: ${inset}${boxShadow.horizontal}px ${boxShadow.vertical}px ${boxShadow.blur}px ${boxShadow.spread}px ${boxShadow.color};`;
      }
      const paddingCSS = `${getDimensionCSS23(padding, "padding", activeDevice)}`;
      const marginCSS = `${getDimensionCSS23(margin, "margin", activeDevice)}`;
      let contentTypographyCSS = "";
      if (contentTypography) {
        if (contentTypography.fontFamily) {
          contentTypographyCSS += `font-family: ${contentTypography.fontFamily};`;
        }
        if (contentTypography.fontSize && contentTypography.fontSize[activeDevice]) {
          contentTypographyCSS += `font-size: ${contentTypography.fontSize[activeDevice]}${contentTypography.fontSizeUnit || "px"};`;
        }
        if (contentTypography.fontWeight) {
          contentTypographyCSS += `font-weight: ${contentTypography.fontWeight};`;
        }
        if (contentTypography.fontStyle) {
          contentTypographyCSS += `font-style: ${contentTypography.fontStyle};`;
        }
        if (contentTypography.textTransform) {
          contentTypographyCSS += `text-transform: ${contentTypography.textTransform};`;
        }
        if (contentTypography.textDecoration) {
          contentTypographyCSS += `text-decoration: ${contentTypography.textDecoration};`;
        }
        if (contentTypography.lineHeight && contentTypography.lineHeight[activeDevice]) {
          contentTypographyCSS += `line-height: ${contentTypography.lineHeight[activeDevice]}${contentTypography.lineHeightUnit || "em"};`;
        }
        if (contentTypography.letterSpacing && contentTypography.letterSpacing[activeDevice]) {
          contentTypographyCSS += `letter-spacing: ${contentTypography.letterSpacing[activeDevice]}${contentTypography.letterSpacingUnit || "px"};`;
        }
      }
      let headingTypographyCSS = "";
      if (headingTypography) {
        if (headingTypography.fontFamily) {
          headingTypographyCSS += `font-family: ${headingTypography.fontFamily};`;
        }
        if (headingTypography.fontSize && headingTypography.fontSize[activeDevice]) {
          headingTypographyCSS += `font-size: ${headingTypography.fontSize[activeDevice]}${headingTypography.fontSizeUnit || "px"};`;
        }
        if (headingTypography.fontWeight) {
          headingTypographyCSS += `font-weight: ${headingTypography.fontWeight};`;
        }
        if (headingTypography.fontStyle) {
          headingTypographyCSS += `font-style: ${headingTypography.fontStyle};`;
        }
        if (headingTypography.textTransform) {
          headingTypographyCSS += `text-transform: ${headingTypography.textTransform};`;
        }
        if (headingTypography.textDecoration) {
          headingTypographyCSS += `text-decoration: ${headingTypography.textDecoration};`;
        }
        if (headingTypography.lineHeight && headingTypography.lineHeight[activeDevice]) {
          headingTypographyCSS += `line-height: ${headingTypography.lineHeight[activeDevice]}${headingTypography.lineHeightUnit || "em"};`;
        }
        if (headingTypography.letterSpacing && headingTypography.letterSpacing[activeDevice]) {
          headingTypographyCSS += `letter-spacing: ${headingTypography.letterSpacing[activeDevice]}${headingTypography.letterSpacingUnit || "px"};`;
        }
      }
      let textTypographyCSS = "";
      if (textTypography) {
        if (textTypography.fontFamily) {
          textTypographyCSS += `font-family: ${textTypography.fontFamily};`;
        }
        if (textTypography.fontSize && textTypography.fontSize[activeDevice]) {
          textTypographyCSS += `font-size: ${textTypography.fontSize[activeDevice]}${textTypography.fontSizeUnit || "px"};`;
        }
        if (textTypography.fontWeight) {
          textTypographyCSS += `font-weight: ${textTypography.fontWeight};`;
        }
        if (textTypography.fontStyle) {
          textTypographyCSS += `font-style: ${textTypography.fontStyle};`;
        }
        if (textTypography.textTransform) {
          textTypographyCSS += `text-transform: ${textTypography.textTransform};`;
        }
        if (textTypography.textDecoration) {
          textTypographyCSS += `text-decoration: ${textTypography.textDecoration};`;
        }
        if (textTypography.lineHeight && textTypography.lineHeight[activeDevice]) {
          textTypographyCSS += `line-height: ${textTypography.lineHeight[activeDevice]}${textTypography.lineHeightUnit || "em"};`;
        }
        if (textTypography.letterSpacing && textTypography.letterSpacing[activeDevice]) {
          textTypographyCSS += `letter-spacing: ${textTypography.letterSpacing[activeDevice]}${textTypography.letterSpacingUnit || "px"};`;
        }
      }
      let hoverCSS = "";
      if (boxShadowHover && boxShadowHover.enable) {
        const insetHover = boxShadowHover.position === "inset" ? "inset " : "";
        hoverCSS += `box-shadow: ${insetHover}${boxShadowHover.horizontal}px ${boxShadowHover.vertical}px ${boxShadowHover.blur}px ${boxShadowHover.spread}px ${boxShadowHover.color};`;
      }
      const columnsDevice = columns[activeDevice] || 2;
      const spacingDevice = itemSpacing[activeDevice] || 30;
      return `
            /* Testimonials Block - ${id} */
            .${id} {
                position: relative;
                width: 100%;
            }

			.${id} .digiblocks-testimonials-grid {
				display: grid;
				grid-template-columns: repeat(${columnsDevice}, 1fr);
				gap: ${spacingDevice}px;
			}
            
            .${id} .digiblocks-testimonial-content {
				display: flex;
				flex-direction: column;
				gap: 1rem;
                ${paddingCSS}
                ${marginCSS}
                ${borderCSS}
                ${boxShadowCSS}
                background-color: ${backgroundColor || "transparent"};
                transition: all 0.3s ease;
                position: relative;
				text-align: ${align};
            }
            
            .${id} .digiblocks-testimonial-content:hover {
                ${backgroundHoverColor ? `background-color: ${backgroundHoverColor};` : ""}
                ${hoverCSS}
            }
            
            ${showQuoteIcon ? `
            .${id} .digiblocks-testimonial-quote-icon {
                position: absolute;
                top: 6px;
                left: 10px;
                color: ${quoteIconColor};
                opacity: 0.3;
                line-height: 1;
            }

            .${id} .digiblocks-testimonial-quote-icon svg {
                width: ${quoteIconSize[activeDevice]}px;
				height: ${quoteIconSize[activeDevice]}px;
            }
            ` : ""}
            
            .${id} .digiblocks-testimonial-text {
                ${contentTypographyCSS}
                color: ${contentColor};
                margin: 0;
				position: relative;
				z-index: 1;
            }
            
            .${id} .digiblocks-testimonial-author {
                display: flex;
                align-items: center;
                gap: 15px;
				justify-content: ${align === "center" ? "center" : "flex-start"};
				${align === "center" ? "flex-direction: column;" : ""}
				${align === "right" ? "flex-direction: row-reverse;" : ""}
				position: relative;
				z-index: 1;
            }
            
            .${id} .digiblocks-testimonial-image {
                width: ${imageSize[activeDevice]}px;
                height: ${imageSize[activeDevice]}px;
                border-radius: 50%;
                object-fit: cover;
                background: ${quoteIconColor};
                flex-shrink: 0;
            }
            
            .${id} .digiblocks-testimonial-name {
                ${headingTypographyCSS}
                color: ${nameColor};
                margin: 0;
                transition: color 0.3s ease;
            }
            
            .${id} .digiblocks-testimonial-content:hover .digiblocks-testimonial-name {
                ${nameHoverColor ? `color: ${nameHoverColor};` : ""}
            }
            
            .${id} .digiblocks-testimonial-position {
                ${textTypographyCSS}
                color: ${positionColor};
                margin: 5px 0 0 0;
            }
            
            ${showRating ? `
            .${id} .digiblocks-testimonial-rating {
                display: flex;
				align-items: center;
				gap: 2px;
				justify-content: ${align === "center" ? "center" : align === "right" ? "flex-end" : "flex-start"};
				position: relative;
				z-index: 1;
            }
            
            .${id} .digiblocks-rating-star {
                font-size: 16px;
            }
            ` : ""}
            
            /* Editor-specific styles */
            .${id} .digiblocks-testimonial-item-controls {
                display: flex;
                gap: 5px;
                position: absolute;
                right: 10px;
                top: -28px;
                background-color: #fff;
                padding: 2px;
                border-radius: 3px;
                box-shadow: 0 1px 3px rgba(0,0,0,0.12);
                z-index: 10;
            }

			.${id} .digiblocks-image-button {
				position: relative;
				height: auto;
				padding: 0;
			}

			.${id} .digiblocks-image-button span {
				position: absolute;
			}

			/* Visibility Controls */
			${visibility.desktop ? `
				@media (min-width: 992px) {
					.${id} {
						opacity: 0.5 !important;
					}
				}
			` : ""}

			${visibility.tablet ? `
				@media (min-width: 768px) and (max-width: 991px) {
					.${id} {
						opacity: 0.5 !important;
					}
				}
			` : ""}

			${visibility.mobile ? `
				@media (max-width: 767px) {
					.${id} {
						opacity: 0.5 !important;
					}
				}
			` : ""}
        `;
    };
    const renderTabContent = () => {
      switch (activeTab) {
        case "options":
          return /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(
            TabPanelBody27,
            {
              tab: "options",
              name: "layouts",
              title: __32("Layout", "digiblocks"),
              initialOpen: true
            },
            /* @__PURE__ */ wp.element.createElement(
              ResponsiveControl27,
              {
                label: __32("Columns", "digiblocks")
              },
              /* @__PURE__ */ wp.element.createElement(
                RangeControl26,
                {
                  value: columns[localActiveDevice],
                  onChange: (value) => setAttributes({
                    columns: {
                      ...columns,
                      [localActiveDevice]: value
                    }
                  }),
                  min: 1,
                  max: 5,
                  step: 1,
                  __next40pxDefaultSize: true,
                  __nextHasNoMarginBottom: true
                }
              )
            ),
            /* @__PURE__ */ wp.element.createElement(
              ResponsiveControl27,
              {
                label: __32("Item Spacing", "digiblocks")
              },
              /* @__PURE__ */ wp.element.createElement(
                RangeControl26,
                {
                  value: itemSpacing[localActiveDevice],
                  onChange: (value) => setAttributes({
                    itemSpacing: {
                      ...itemSpacing,
                      [localActiveDevice]: value
                    }
                  }),
                  min: 0,
                  max: 100,
                  step: 5,
                  __next40pxDefaultSize: true,
                  __nextHasNoMarginBottom: true
                }
              )
            ),
            /* @__PURE__ */ wp.element.createElement(
              BaseControl8,
              {
                label: __32("Alignment", "digiblocks"),
                __nextHasNoMarginBottom: true
              },
              /* @__PURE__ */ wp.element.createElement(
                ToggleGroupControl25,
                {
                  value: align,
                  onChange: (value) => setAttributes({ align: value }),
                  isBlock: true,
                  __next40pxDefaultSize: true,
                  __nextHasNoMarginBottom: true
                },
                /* @__PURE__ */ wp.element.createElement(
                  ToggleGroupControlOption25,
                  {
                    value: "left",
                    label: __32("Left", "digiblocks"),
                    "aria-label": __32("Left alignment", "digiblocks")
                  }
                ),
                /* @__PURE__ */ wp.element.createElement(
                  ToggleGroupControlOption25,
                  {
                    value: "center",
                    label: __32("Center", "digiblocks"),
                    "aria-label": __32("Center alignment", "digiblocks")
                  }
                ),
                /* @__PURE__ */ wp.element.createElement(
                  ToggleGroupControlOption25,
                  {
                    value: "right",
                    label: __32("Right", "digiblocks"),
                    "aria-label": __32("Right alignment", "digiblocks")
                  }
                )
              )
            )
          ), /* @__PURE__ */ wp.element.createElement(
            TabPanelBody27,
            {
              tab: "options",
              name: "testimonial-items",
              title: __32("Testimonials", "digiblocks"),
              initialOpen: false
            },
            /* @__PURE__ */ wp.element.createElement(
              ToggleControl27,
              {
                label: __32("Show Ratings", "digiblocks"),
                checked: showRating,
                onChange: () => setAttributes({ showRating: !showRating }),
                __nextHasNoMarginBottom: true
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              ToggleControl27,
              {
                label: __32("Show Quote Icon", "digiblocks"),
                checked: showQuoteIcon,
                onChange: () => setAttributes({ showQuoteIcon: !showQuoteIcon }),
                __nextHasNoMarginBottom: true
              }
            )
          ));
        case "style":
          return /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(
            TabPanelBody27,
            {
              tab: "style",
              name: "colors",
              title: __32("Colors", "digiblocks"),
              initialOpen: true
            },
            /* @__PURE__ */ wp.element.createElement(
              TabPanel16,
              {
                className: "digiblocks-control-tabs",
                activeClass: "active-tab",
                tabs: stateTabList
              },
              (tab) => {
                if (tab.name === "normal") {
                  return /* @__PURE__ */ wp.element.createElement(
                    PanelColorSettings25,
                    {
                      title: __32("Color Settings", "digiblocks"),
                      initialOpen: true,
                      enableAlpha: true,
                      colorSettings: [
                        {
                          value: nameColor,
                          onChange: (value) => setAttributes({
                            nameColor: value
                          }),
                          label: __32("Name Color", "digiblocks")
                        },
                        {
                          value: positionColor,
                          onChange: (value) => setAttributes({
                            positionColor: value
                          }),
                          label: __32("Position Color", "digiblocks")
                        },
                        {
                          value: contentColor,
                          onChange: (value) => setAttributes({
                            contentColor: value
                          }),
                          label: __32("Content Color", "digiblocks")
                        },
                        {
                          value: backgroundColor,
                          onChange: (value) => setAttributes({
                            backgroundColor: value
                          }),
                          label: __32("Background Color", "digiblocks")
                        },
                        {
                          value: quoteIconColor,
                          onChange: (value) => setAttributes({
                            quoteIconColor: value
                          }),
                          label: __32("Quote Icon Color", "digiblocks")
                        },
                        {
                          value: ratingColor,
                          onChange: (value) => setAttributes({
                            ratingColor: value
                          }),
                          label: __32("Rating Color", "digiblocks")
                        }
                      ]
                    }
                  );
                } else if (tab.name === "hover") {
                  return /* @__PURE__ */ wp.element.createElement(
                    PanelColorSettings25,
                    {
                      title: __32("Hover Color Settings", "digiblocks"),
                      initialOpen: true,
                      enableAlpha: true,
                      colorSettings: [
                        {
                          value: nameHoverColor,
                          onChange: (value) => setAttributes({
                            nameHoverColor: value
                          }),
                          label: __32("Name Color", "digiblocks")
                        },
                        {
                          value: backgroundHoverColor,
                          onChange: (value) => setAttributes({
                            backgroundHoverColor: value
                          }),
                          label: __32("Background Color", "digiblocks")
                        }
                      ]
                    }
                  );
                }
                return null;
              }
            )
          ), /* @__PURE__ */ wp.element.createElement(
            TabPanelBody27,
            {
              tab: "style",
              name: "typography",
              title: __32("Typography", "digiblocks"),
              initialOpen: false
            },
            /* @__PURE__ */ wp.element.createElement(
              TypographyControl20,
              {
                label: __32("Content Typography", "digiblocks"),
                value: contentTypography,
                onChange: (value) => setAttributes({
                  contentTypography: value
                }),
                defaults: {
                  fontSize: { desktop: 16, tablet: 15, mobile: 14 },
                  fontSizeUnit: "px",
                  lineHeight: { desktop: 1.7, tablet: 1.6, mobile: 1.5 },
                  lineHeightUnit: "em"
                }
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              TypographyControl20,
              {
                label: __32("Name Typography", "digiblocks"),
                value: headingTypography,
                onChange: (value) => setAttributes({
                  headingTypography: value
                }),
                defaults: {
                  fontSize: { desktop: 20, tablet: 18, mobile: 16 },
                  fontSizeUnit: "px",
                  lineHeight: { desktop: 1.3, tablet: 1.3, mobile: 1.3 },
                  lineHeightUnit: "em"
                }
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              TypographyControl20,
              {
                label: __32("Position Typography", "digiblocks"),
                value: textTypography,
                onChange: (value) => setAttributes({
                  textTypography: value
                }),
                defaults: {
                  fontSize: { desktop: 14, tablet: 13, mobile: 12 },
                  fontSizeUnit: "px",
                  lineHeight: { desktop: 1.4, tablet: 1.4, mobile: 1.4 },
                  lineHeightUnit: "em"
                }
              }
            )
          ), /* @__PURE__ */ wp.element.createElement(
            TabPanelBody27,
            {
              tab: "style",
              name: "sizes",
              title: __32("Sizes & Spacing", "digiblocks"),
              initialOpen: false
            },
            /* @__PURE__ */ wp.element.createElement(
              ResponsiveControl27,
              {
                label: __32("Image Size", "digiblocks")
              },
              /* @__PURE__ */ wp.element.createElement(
                RangeControl26,
                {
                  value: imageSize[localActiveDevice],
                  onChange: (value) => setAttributes({
                    imageSize: {
                      ...imageSize,
                      [localActiveDevice]: value
                    }
                  }),
                  min: 32,
                  max: 200,
                  step: 4,
                  __next40pxDefaultSize: true,
                  __nextHasNoMarginBottom: true
                }
              )
            ),
            /* @__PURE__ */ wp.element.createElement(
              ResponsiveControl27,
              {
                label: __32("Quote Icon Size", "digiblocks")
              },
              /* @__PURE__ */ wp.element.createElement(
                RangeControl26,
                {
                  value: quoteIconSize[localActiveDevice],
                  onChange: (value) => setAttributes({
                    quoteIconSize: {
                      ...quoteIconSize,
                      [localActiveDevice]: value
                    }
                  }),
                  min: 20,
                  max: 200,
                  step: 5,
                  __next40pxDefaultSize: true,
                  __nextHasNoMarginBottom: true
                }
              )
            )
          ), /* @__PURE__ */ wp.element.createElement(
            TabPanelBody27,
            {
              tab: "style",
              name: "border-shadow",
              title: __32("Border & Shadow", "digiblocks"),
              initialOpen: false
            },
            /* @__PURE__ */ wp.element.createElement(
              SelectControl27,
              {
                label: __32("Border Style", "digiblocks"),
                value: borderStyle || "default",
                options: borderStyleOptions,
                onChange: (value) => {
                  if (value !== "default" && value !== "none" && (borderStyle === "default" || borderStyle === "none" || !borderStyle)) {
                    if (!borderWidth || Object.keys(borderWidth).length === 0) {
                      setAttributes({
                        borderWidth: {
                          desktop: { top: 1, right: 1, bottom: 1, left: 1, unit: "px" },
                          tablet: { top: "", right: "", bottom: "", left: "", unit: "px" },
                          mobile: { top: "", right: "", bottom: "", left: "", unit: "px" }
                        }
                      });
                    }
                    if (!borderRadius || Object.keys(borderRadius).length === 0) {
                      setAttributes({
                        borderRadius: {
                          desktop: { top: 12, right: 12, bottom: 12, left: 12, unit: "px" },
                          tablet: { top: "", right: "", bottom: "", left: "", unit: "px" },
                          mobile: { top: "", right: "", bottom: "", left: "", unit: "px" }
                        }
                      });
                    }
                  }
                  setAttributes({
                    borderStyle: value
                  });
                },
                __next40pxDefaultSize: true,
                __nextHasNoMarginBottom: true
              }
            ),
            borderStyle && borderStyle !== "default" && borderStyle !== "none" && /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(
              PanelColorSettings25,
              {
                title: __32("Border Color", "digiblocks"),
                enableAlpha: true,
                colorSettings: [
                  {
                    value: borderColor,
                    onChange: (value) => setAttributes({
                      borderColor: value
                    }),
                    label: __32("Border Color", "digiblocks")
                  }
                ]
              }
            ), /* @__PURE__ */ wp.element.createElement(
              ResponsiveControl27,
              {
                label: __32("Border Width", "digiblocks")
              },
              /* @__PURE__ */ wp.element.createElement(
                DimensionControl24,
                {
                  values: borderWidth[localActiveDevice],
                  onChange: (value) => setAttributes({
                    borderWidth: {
                      ...borderWidth,
                      [localActiveDevice]: value
                    }
                  })
                }
              )
            ), /* @__PURE__ */ wp.element.createElement(
              ResponsiveControl27,
              {
                label: __32("Border Radius", "digiblocks")
              },
              /* @__PURE__ */ wp.element.createElement(
                DimensionControl24,
                {
                  values: borderRadius[localActiveDevice],
                  onChange: (value) => setAttributes({
                    borderRadius: {
                      ...borderRadius,
                      [localActiveDevice]: value
                    }
                  }),
                  units: [
                    { label: "px", value: "px" },
                    { label: "%", value: "%" }
                  ]
                }
              )
            )),
            /* @__PURE__ */ wp.element.createElement(
              BoxShadowControl22,
              {
                normalValue: boxShadow,
                hoverValue: boxShadowHover,
                onNormalChange: (value) => setAttributes({
                  boxShadow: value
                }),
                onHoverChange: (value) => setAttributes({
                  boxShadowHover: value
                })
              }
            )
          ), /* @__PURE__ */ wp.element.createElement(
            TabPanelBody27,
            {
              tab: "style",
              name: "spacing",
              title: __32("Spacing", "digiblocks"),
              initialOpen: false
            },
            /* @__PURE__ */ wp.element.createElement(
              ResponsiveControl27,
              {
                label: __32("Padding", "digiblocks")
              },
              /* @__PURE__ */ wp.element.createElement(
                DimensionControl24,
                {
                  values: padding[localActiveDevice],
                  onChange: (value) => setAttributes({
                    padding: {
                      ...padding,
                      [localActiveDevice]: value
                    }
                  })
                }
              )
            ),
            /* @__PURE__ */ wp.element.createElement(
              ResponsiveControl27,
              {
                label: __32("Margin", "digiblocks")
              },
              /* @__PURE__ */ wp.element.createElement(
                DimensionControl24,
                {
                  values: margin[localActiveDevice],
                  onChange: (value) => setAttributes({
                    margin: {
                      ...margin,
                      [localActiveDevice]: value
                    }
                  })
                }
              )
            )
          ));
        case "advanced":
          return /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(
            TabPanelBody27,
            {
              tab: "advanced",
              name: "animation",
              title: __32("Animation", "digiblocks"),
              initialOpen: true
            },
            /* @__PURE__ */ wp.element.createElement(
              SelectControl27,
              {
                label: __32("Animation Effect", "digiblocks"),
                value: animation,
                options: animationOptions,
                onChange: (value) => setAttributes({ animation: value }),
                __next40pxDefaultSize: true,
                __nextHasNoMarginBottom: true
              }
            ),
            animation && animation !== "none" && /* @__PURE__ */ wp.element.createElement("div", { style: { marginTop: "10px" } }, /* @__PURE__ */ wp.element.createElement(
              Button25,
              {
                variant: "secondary",
                isSecondary: true,
                onClick: handlePreviewClick,
                style: { width: "100%" }
              },
              __32("Preview Animation", "digiblocks")
            ))
          ), /* @__PURE__ */ wp.element.createElement(
            TabPanelBody27,
            {
              tab: "advanced",
              name: "visibility",
              title: __32("Visibility", "digiblocks"),
              initialOpen: false
            },
            /* @__PURE__ */ wp.element.createElement("div", { className: "components-base-control__help", style: {
              padding: "12px",
              backgroundColor: "#f0f6fc",
              border: "1px solid #c3ddfd",
              borderRadius: "4px",
              marginBottom: "16px"
            } }, /* @__PURE__ */ wp.element.createElement("strong", null, __32("Editor Note:", "digiblocks")), /* @__PURE__ */ wp.element.createElement("br", null), __32("Hidden elements appear with reduced opacity in the editor for easy editing. Visibility changes only take effect on the frontend.", "digiblocks")),
            /* @__PURE__ */ wp.element.createElement(
              ToggleControl27,
              {
                label: __32("Hide on Desktop", "digiblocks"),
                checked: visibility.desktop,
                onChange: (value) => setAttributes({
                  visibility: {
                    ...visibility,
                    desktop: value
                  }
                }),
                __nextHasNoMarginBottom: true
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              ToggleControl27,
              {
                label: __32("Hide on Tablet", "digiblocks"),
                checked: visibility.tablet,
                onChange: (value) => setAttributes({
                  visibility: {
                    ...visibility,
                    tablet: value
                  }
                }),
                __nextHasNoMarginBottom: true
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              ToggleControl27,
              {
                label: __32("Hide on Mobile", "digiblocks"),
                checked: visibility.mobile,
                onChange: (value) => setAttributes({
                  visibility: {
                    ...visibility,
                    mobile: value
                  }
                }),
                __nextHasNoMarginBottom: true
              }
            )
          ), /* @__PURE__ */ wp.element.createElement(
            TabPanelBody27,
            {
              tab: "advanced",
              name: "additional",
              title: __32("Additional", "digiblocks"),
              initialOpen: false
            },
            /* @__PURE__ */ wp.element.createElement("div", { className: "components-base-control html-anchor-control" }, /* @__PURE__ */ wp.element.createElement("div", { className: "components-base-control__field" }, /* @__PURE__ */ wp.element.createElement("label", { className: "components-base-control__label", htmlFor: "html-anchor" }, __32("HTML anchor", "digiblocks")), /* @__PURE__ */ wp.element.createElement(
              "input",
              {
                className: "components-text-control__input",
                type: "text",
                id: "html-anchor",
                value: anchor || "",
                onChange: (e) => setAttributes({ anchor: e.target.value }),
                "aria-describedby": "html-anchor-help",
                autoCapitalize: "none",
                autoComplete: "off"
              }
            )), /* @__PURE__ */ wp.element.createElement("p", { id: "html-anchor-help", className: "components-base-control__help" }, __32(`Enter a word or two \u2014 without spaces \u2014 to make a unique web address just for this block, called an "anchor". Then, you'll be able to link directly to this section of your page.`, "digiblocks"), " ", /* @__PURE__ */ wp.element.createElement(
              "a",
              {
                className: "components-external-link",
                href: "https://wordpress.org/documentation/article/page-jumps/",
                target: "_blank",
                rel: "external noreferrer noopener"
              },
              /* @__PURE__ */ wp.element.createElement("span", { className: "components-external-link__contents" }, __32("Learn more about anchors", "digiblocks")),
              /* @__PURE__ */ wp.element.createElement("span", { className: "components-external-link__icon", "aria-label": "(opens in a new tab)" }, "\u2197")
            ))),
            /* @__PURE__ */ wp.element.createElement("div", { className: "components-base-control" }, /* @__PURE__ */ wp.element.createElement("div", { className: "components-base-control__field" }, /* @__PURE__ */ wp.element.createElement("label", { className: "components-base-control__label", htmlFor: "additional-css-classes" }, __32("Additional CSS class(es)", "digiblocks")), /* @__PURE__ */ wp.element.createElement(
              "input",
              {
                className: "components-text-control__input",
                type: "text",
                id: "additional-css-classes",
                value: customClasses || "",
                onChange: (e) => setAttributes({ customClasses: e.target.value }),
                "aria-describedby": "additional-css-classes-help",
                autoComplete: "off"
              }
            )), /* @__PURE__ */ wp.element.createElement("p", { id: "additional-css-classes-help", className: "components-base-control__help" }, __32("Separate multiple classes with spaces.", "digiblocks")))
          ));
        default:
          return null;
      }
    };
    const renderSingleTestimonial = (testimonial, index) => /* @__PURE__ */ wp.element.createElement(
      "div",
      {
        key: testimonial.id,
        className: "digiblocks-testimonial-item"
      },
      /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-testimonial-content" }, showQuoteIcon && /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-testimonial-quote-icon" }, /* @__PURE__ */ wp.element.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 100 100", fill: "currentColor" }, /* @__PURE__ */ wp.element.createElement("path", { d: "m54.75 61.7309799v-2.3699951c0-21.9786606 16.2715454-39.8894348 37.5211639-42.4388428 2.7931672-.3351097 5.2288361 1.917471 5.2288361 4.7306748v.0000095c0 2.4273148-1.8343735 4.4202805-4.2426605 4.7236137-7.4862671.9429264-14.1913986 4.3405972-19.203804 9.2676563-1.7802734 1.7499619-.5009689 4.7270927 1.9953613 4.7170334.0236969-.0000954.0474014-.000145.0710983-.000145 12.2492294 0 21.9682159 10.0996895 21.3522568 22.4834023-.538559 10.8274422-9.4114075 19.7002907-20.2388535 20.2388496-12.3837051.6159593-22.4833984-9.1030272-22.4833984-21.3522567z" }), /* @__PURE__ */ wp.element.createElement("path", { d: "m2.5000021 61.2574081.000001-1.8964233c0-21.9786606 16.2715454-39.8894348 37.5211601-42.4388428 2.7931755-.3351097 5.2288368 1.917471 5.2288368 4.7306748v.0003147c0 2.4272079-1.8342209 4.4199734-4.2423592 4.7236252-7.481739.9434032-14.1888084 4.3410473-19.1987572 9.2678051-1.779623 1.7500687-.500473 4.7271957 1.9954643 4.7165833.025219-.0001068.0504398-.0001602.0756588-.0001602 11.8699932 0 21.3699932 9.5 21.3699932 21.3699951 0 12.0883865-9.8361855 21.7125397-21.996748 21.3711853-11.6399678-.3267442-20.7532557-10.200203-20.7532498-21.8447572z" }))), showRating && /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-testimonial-rating" }, generateStars(testimonial.rating)), /* @__PURE__ */ wp.element.createElement(
        RichText26,
        {
          tagName: "p",
          className: "digiblocks-testimonial-text",
          value: testimonial.content,
          onChange: (value) => updateTestimonialContent(value, index),
          placeholder: __32("Enter testimonial content...", "digiblocks"),
          allowedFormats: ["core/bold", "core/italic", "core/link"]
        }
      ), /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-testimonial-author" }, /* @__PURE__ */ wp.element.createElement(MediaUploadCheck8, null, /* @__PURE__ */ wp.element.createElement(
        MediaUpload8,
        {
          onSelect: (media) => updateTestimonialImage(media, index),
          allowedTypes: ["image"],
          value: testimonial.imageId,
          render: ({ open }) => /* @__PURE__ */ wp.element.createElement(
            Button25,
            {
              className: `digiblocks-image-button ${!testimonial.imageUrl ? "empty" : ""}`,
              onClick: open,
              icon: !testimonial.imageUrl ? "format-image" : ""
            },
            testimonial.imageUrl ? /* @__PURE__ */ wp.element.createElement(
              "img",
              {
                src: testimonial.imageUrl,
                alt: testimonial.name,
                className: "digiblocks-testimonial-image"
              }
            ) : /* @__PURE__ */ wp.element.createElement(
              "div",
              {
                className: "digiblocks-testimonial-image",
                style: { background: quoteIconColor }
              }
            )
          )
        }
      )), /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-testimonial-info" }, /* @__PURE__ */ wp.element.createElement(
        RichText26,
        {
          tagName: "h3",
          className: "digiblocks-testimonial-name",
          value: testimonial.name,
          onChange: (value) => updateTestimonialName(value, index),
          placeholder: __32("Testimonial Name", "digiblocks"),
          allowedFormats: ["core/bold", "core/italic"]
        }
      ), /* @__PURE__ */ wp.element.createElement(
        RichText26,
        {
          tagName: "p",
          className: "digiblocks-testimonial-position",
          value: testimonial.position + (testimonial.company ? `, ${testimonial.company}` : ""),
          onChange: (value) => {
            const parts = value.split(",");
            updateTestimonialPosition(parts[0].trim(), index);
            if (parts[1]) {
              updateTestimonialCompany(parts[1].trim(), index);
            }
          },
          placeholder: __32("Position, Company", "digiblocks"),
          allowedFormats: ["core/bold", "core/italic"]
        }
      ))), /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-testimonial-item-controls" }, /* @__PURE__ */ wp.element.createElement(Tooltip8, { text: __32("Move Up", "digiblocks") }, /* @__PURE__ */ wp.element.createElement(
        Button25,
        {
          className: "digiblocks-testimonial-item-move-up",
          onClick: () => moveTestimonialUp(index),
          icon: "arrow-up-alt2",
          disabled: index === 0,
          isSmall: true
        }
      )), /* @__PURE__ */ wp.element.createElement(Tooltip8, { text: __32("Move Down", "digiblocks") }, /* @__PURE__ */ wp.element.createElement(
        Button25,
        {
          className: "digiblocks-testimonial-item-move-down",
          onClick: () => moveTestimonialDown(index),
          icon: "arrow-down-alt2",
          disabled: index === testimonials.length - 1,
          isSmall: true
        }
      )), /* @__PURE__ */ wp.element.createElement(Tooltip8, { text: __32("Duplicate", "digiblocks") }, /* @__PURE__ */ wp.element.createElement(
        Button25,
        {
          className: "digiblocks-testimonial-item-duplicate",
          onClick: () => duplicateTestimonial(index),
          icon: "admin-page",
          isSmall: true
        }
      )), /* @__PURE__ */ wp.element.createElement(Tooltip8, { text: __32("Remove", "digiblocks") }, /* @__PURE__ */ wp.element.createElement(
        Button25,
        {
          className: "digiblocks-testimonial-item-remove",
          onClick: () => removeTestimonial(index),
          icon: "trash",
          isSmall: true
        }
      ))))
    );
    const renderTestimonials = () => {
      if (!testimonials || testimonials.length === 0) {
        return /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-no-testimonials" }, /* @__PURE__ */ wp.element.createElement("p", null, __32("No testimonials found. Please add some testimonials.", "digiblocks")));
      }
      return testimonials.map((testimonial, index) => renderSingleTestimonial(testimonial, index));
    };
    const blockProps = useBlockProps51({
      className: `digiblocks-testimonials-block ${id} grid ${customClasses || ""}`,
      id: anchor || null
      // Set the anchor as ID if provided
    });
    return /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(InspectorControls27, null, /* @__PURE__ */ wp.element.createElement(
      CustomTabPanel27,
      {
        tabs: tabList,
        activeTab,
        onSelect: setActiveTab
      },
      renderTabContent()
    )), /* @__PURE__ */ wp.element.createElement("style", { dangerouslySetInnerHTML: { __html: generateCSS() } }), /* @__PURE__ */ wp.element.createElement("div", { ...blockProps }, /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-testimonials-grid" }, renderTestimonials()), /* @__PURE__ */ wp.element.createElement(
      Button25,
      {
        variant: "primary",
        icon: "plus",
        onClick: addNewTestimonial,
        style: { width: "100%", marginTop: "40px", justifyContent: "center" }
      },
      __32("Add Testimonial", "digiblocks")
    )));
  };
  var edit_default27 = TestimonialsEdit;

  // blocks/testimonials/save.js
  var { useBlockProps: useBlockProps52, RichText: RichText27 } = window.wp.blockEditor;
  var TestimonialsSave = ({ attributes }) => {
    const {
      id,
      anchor,
      customClasses,
      testimonials,
      showRating,
      showQuoteIcon,
      animation,
      columns,
      autoplay,
      autoplaySpeed,
      showArrows,
      showDots,
      ratingColor
    } = attributes;
    const blockClasses = [
      "digiblocks-testimonials-block",
      id,
      "grid",
      animation !== "none" ? `animate-${animation}` : "",
      customClasses || ""
    ].filter(Boolean).join(" ");
    const blockProps = useBlockProps52.save({
      className: blockClasses,
      id: anchor || null
    });
    const generateStars = (rating) => {
      const stars = [];
      for (let i = 1; i <= 5; i++) {
        stars.push(
          /* @__PURE__ */ wp.element.createElement(
            "span",
            {
              key: i,
              className: `digiblocks-rating-star ${i <= rating ? "filled" : ""}`,
              style: { color: i <= rating ? ratingColor : "#e0e0e0" }
            },
            /* @__PURE__ */ wp.element.createElement("svg", { width: "16", height: "16", viewBox: "0 0 16 16", fill: "currentColor" }, /* @__PURE__ */ wp.element.createElement("path", { d: "M3.612 15.443c-.386.198-.824-.149-.746-.592l.83-4.73L.173 6.765c-.329-.314-.158-.888.283-.95l4.898-.696L7.538.792c.197-.39.73-.39.927 0l2.184 4.327l4.898.696c.441.062.612.636.282.95l-3.522 3.356l.83 4.73c.078.443-.36.79-.746.592L8 13.187l-4.389 2.256z" }))
          )
        );
      }
      return stars;
    };
    const renderTestimonials = () => {
      if (!testimonials || testimonials.length === 0) {
        return null;
      }
      return testimonials.map((testimonial) => /* @__PURE__ */ wp.element.createElement(
        "div",
        {
          key: testimonial.id,
          className: "digiblocks-testimonial-item"
        },
        /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-testimonial-content" }, showQuoteIcon && /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-testimonial-quote-icon" }, /* @__PURE__ */ wp.element.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 100 100", fill: "currentColor" }, /* @__PURE__ */ wp.element.createElement("path", { d: "m54.75 61.7309799v-2.3699951c0-21.9786606 16.2715454-39.8894348 37.5211639-42.4388428 2.7931672-.3351097 5.2288361 1.917471 5.2288361 4.7306748v.0000095c0 2.4273148-1.8343735 4.4202805-4.2426605 4.7236137-7.4862671.9429264-14.1913986 4.3405972-19.203804 9.2676563-1.7802734 1.7499619-.5009689 4.7270927 1.9953613 4.7170334.0236969-.0000954.0474014-.000145.0710983-.000145 12.2492294 0 21.9682159 10.0996895 21.3522568 22.4834023-.538559 10.8274422-9.4114075 19.7002907-20.2388535 20.2388496-12.3837051.6159593-22.4833984-9.1030272-22.4833984-21.3522567z" }), /* @__PURE__ */ wp.element.createElement("path", { d: "m2.5000021 61.2574081.000001-1.8964233c0-21.9786606 16.2715454-39.8894348 37.5211601-42.4388428 2.7931755-.3351097 5.2288368 1.917471 5.2288368 4.7306748v.0003147c0 2.4272079-1.8342209 4.4199734-4.2423592 4.7236252-7.481739.9434032-14.1888084 4.3410473-19.1987572 9.2678051-1.779623 1.7500687-.500473 4.7271957 1.9954643 4.7165833.025219-.0001068.0504398-.0001602.0756588-.0001602 11.8699932 0 21.3699932 9.5 21.3699932 21.3699951 0 12.0883865-9.8361855 21.7125397-21.996748 21.3711853-11.6399678-.3267442-20.7532557-10.200203-20.7532498-21.8447572z" }))), showRating && /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-testimonial-rating" }, generateStars(testimonial.rating)), /* @__PURE__ */ wp.element.createElement(
          RichText27.Content,
          {
            tagName: "p",
            className: "digiblocks-testimonial-text",
            value: testimonial.content
          }
        ), /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-testimonial-author" }, testimonial.imageUrl && /* @__PURE__ */ wp.element.createElement(
          "img",
          {
            src: testimonial.imageUrl,
            alt: testimonial.name,
            className: "digiblocks-testimonial-image"
          }
        ), /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-testimonial-info" }, /* @__PURE__ */ wp.element.createElement(
          RichText27.Content,
          {
            tagName: "h3",
            className: "digiblocks-testimonial-name",
            value: testimonial.name
          }
        ), /* @__PURE__ */ wp.element.createElement(
          RichText27.Content,
          {
            tagName: "p",
            className: "digiblocks-testimonial-position",
            value: testimonial.position + (testimonial.company ? `, ${testimonial.company}` : "")
          }
        ))))
      ));
    };
    return /* @__PURE__ */ wp.element.createElement("div", { ...blockProps }, /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-testimonials-grid" }, renderTestimonials()));
  };
  var save_default27 = TestimonialsSave;

  // blocks/woo-products/edit.js
  var { __: __33 } = window.wp.i18n;
  var {
    useBlockProps: useBlockProps53,
    InspectorControls: InspectorControls28,
    PanelColorSettings: PanelColorSettings26
  } = window.wp.blockEditor;
  var {
    ToggleControl: ToggleControl28,
    SelectControl: SelectControl28,
    RangeControl: RangeControl27,
    Placeholder: Placeholder6,
    Spinner: Spinner8,
    TabPanel: TabPanel17,
    Button: Button26,
    __experimentalToggleGroupControl: ToggleGroupControl26,
    __experimentalToggleGroupControlOption: ToggleGroupControlOption26
  } = window.wp.components;
  var { useState: useState28, useEffect: useEffect28, useMemo: useMemo3, useRef: useRef24 } = window.wp.element;
  var { apiFetch } = window.wp;
  var { useBlockId: useBlockId28, getDimensionCSS: getDimensionCSS24, animations: animations25, animationPreview: animationPreview25 } = digi.utils;
  var { tabIcons: tabIcons28 } = digi.icons;
  var { ResponsiveControl: ResponsiveControl28, DimensionControl: DimensionControl25, TypographyControl: TypographyControl21, BoxShadowControl: BoxShadowControl23, CustomTabPanel: CustomTabPanel28, TabPanelBody: TabPanelBody28 } = digi.components;
  var WooProductsEdit = ({ attributes, setAttributes, clientId }) => {
    const {
      id,
      anchor,
      visibility,
      customClasses,
      productsToShow,
      columns,
      displayFeaturedImage,
      displayTitle,
      displayPrice,
      displayRating,
      displaySaleBadge,
      displayCategories,
      displayShortDescription,
      displayAddToCart,
      shortDescriptionLength,
      order,
      orderBy,
      categories,
      onSale,
      featured,
      enablePagination,
      paginationAlign,
      paginationBackgroundColor,
      paginationTextColor,
      paginationActiveBackgroundColor,
      paginationActiveTextColor,
      titleColor,
      titleHoverColor,
      priceColor,
      saleColor,
      regularPriceColor,
      ratingColor,
      catBackgroundColor,
      catColor,
      catHoverBackgroundColor,
      catHoverColor,
      saleBadgeBackgroundColor,
      saleBadgeColor,
      descriptionColor,
      buttonBackgroundColor,
      buttonTextColor,
      buttonBackgroundHoverColor,
      buttonTextHoverColor,
      imageMargin,
      contentMargin,
      padding,
      margin,
      itemSpacing,
      titleTypography,
      headingTypography,
      textTypography,
      contentTypography,
      buttonTypography,
      buttonPadding,
      buttonBorderRadius,
      imageSize,
      imageBorderRadius,
      cardStyle,
      cardBackgroundColor,
      cardPadding,
      cardBorderRadius,
      cardBorderStyle,
      cardBorderWidth,
      cardBorderColor,
      cardShadow,
      cardShadowHover,
      animation
    } = attributes;
    useBlockId28(id, clientId, setAttributes);
    const [products, setProducts] = useState28([]);
    const [isLoading, setIsLoading] = useState28(true);
    const [productCategories, setProductCategories] = useState28([]);
    const [isLoadingCategories, setIsLoadingCategories] = useState28(true);
    const [localActiveDevice, setLocalActiveDevice] = useState28(window.digi.responsiveState.activeDevice);
    const [activeTab, setActiveTab] = useState28(() => {
      if (window.digi.uiState) {
        const savedTab = window.digi.uiState.getActiveTab(clientId);
        if (savedTab)
          return savedTab;
      }
      return "options";
    });
    useEffect28(() => {
      const unsubscribe = window.digi.responsiveState.subscribe((device) => {
        setLocalActiveDevice(device);
      });
      return unsubscribe;
    }, []);
    const queryParams = useMemo3(() => {
      const params = {
        per_page: productsToShow,
        order,
        orderby: orderBy
      };
      if (categories && categories.length > 0 && !categories.includes(0)) {
        params.category = categories.join(",");
      }
      if (onSale) {
        params.on_sale = true;
      }
      if (featured) {
        params.featured = true;
      }
      return params;
    }, [productsToShow, order, orderBy, categories, onSale, featured]);
    useEffect28(() => {
      setIsLoading(true);
      const queryString = Object.entries(queryParams).filter(([_, value]) => value !== null && value !== void 0 && value !== "").map(([key, value]) => `${key}=${value}`).join("&");
      apiFetch({
        path: `/wc/v3/products?${queryString}`,
        method: "GET"
      }).then((response) => {
        setProducts(response);
        setIsLoading(false);
      }).catch((error) => {
        console.error("Error fetching products:", error);
        setIsLoading(false);
        setProducts([]);
      });
    }, [JSON.stringify(queryParams)]);
    useEffect28(() => {
      setIsLoadingCategories(true);
      apiFetch({
        path: "/wc/v3/products/categories?per_page=100",
        method: "GET"
      }).then((response) => {
        const formattedCategories = [
          { label: __33("All Categories", "digiblocks"), value: "0" },
          ...response.map((category) => ({
            label: category.name,
            value: category.id.toString()
          }))
        ];
        setProductCategories(formattedCategories);
        setIsLoadingCategories(false);
      }).catch((error) => {
        console.error("Error fetching product categories:", error);
        setIsLoadingCategories(false);
      });
    }, []);
    const previewTimeoutRef = useRef24(null);
    useEffect28(() => {
      if (animation && animation !== "none") {
        const timeoutId = setTimeout(() => {
          animationPreview25(id, animation, animations25, previewTimeoutRef);
        }, 100);
        return () => clearTimeout(timeoutId);
      }
    }, [animation]);
    const handlePreviewClick = () => {
      animationPreview25(id, animation, animations25, previewTimeoutRef);
    };
    const animationOptions = [
      { label: __33("None", "digiblocks"), value: "none" },
      ...Object.keys(animations25).map((animation2) => ({
        label: animation2.replace(/-/g, " ").replace(/\b\w/g, (l) => l.toUpperCase()),
        value: animation2
      }))
    ];
    const tabList = [
      {
        name: "options",
        title: __33("Options", "digiblocks"),
        icon: tabIcons28.optionsIcon
      },
      {
        name: "style",
        title: __33("Style", "digiblocks"),
        icon: tabIcons28.styleIcon
      },
      {
        name: "advanced",
        title: __33("Advanced", "digiblocks"),
        icon: tabIcons28.advancedIcon
      }
    ];
    const stateTabList = [
      {
        name: "normal",
        title: __33("Normal", "digiblocks"),
        className: "digiblocks-tab-1 normal"
      },
      {
        name: "hover",
        title: __33("Hover", "digiblocks"),
        className: "digiblocks-tab-2 hover"
      }
    ];
    const imageSizes = [
      { label: __33("Thumbnail", "digiblocks"), value: "woocommerce_thumbnail" },
      { label: __33("Medium", "digiblocks"), value: "woocommerce_single" },
      { label: __33("Large", "digiblocks"), value: "large" },
      { label: __33("Full", "digiblocks"), value: "full" }
    ];
    const orderOptions = [
      { label: __33("Ascending", "digiblocks"), value: "asc" },
      { label: __33("Descending", "digiblocks"), value: "desc" }
    ];
    const orderByOptions = [
      { label: __33("Date", "digiblocks"), value: "date" },
      { label: __33("Title", "digiblocks"), value: "title" },
      { label: __33("Price", "digiblocks"), value: "price" },
      { label: __33("Popularity", "digiblocks"), value: "popularity" },
      { label: __33("Rating", "digiblocks"), value: "rating" },
      { label: __33("Random", "digiblocks"), value: "rand" }
    ];
    const borderStyleOptions = [
      { label: __33("None", "digiblocks"), value: "none" },
      { label: __33("Solid", "digiblocks"), value: "solid" },
      { label: __33("Dashed", "digiblocks"), value: "dashed" },
      { label: __33("Dotted", "digiblocks"), value: "dotted" },
      { label: __33("Double", "digiblocks"), value: "double" }
    ];
    const generateCSS = () => {
      const activeDevice = localActiveDevice;
      let animationCSS = "";
      if (animation && animation !== "none" && animations25[animation]) {
        animationCSS = animations25[animation].keyframes;
      }
      return `
            /* WooCommerce Products Block - ${id} */
            .${id} {
				${getDimensionCSS24(padding, "padding", activeDevice)}
				${getDimensionCSS24(margin, "margin", activeDevice)}
                width: 100%;
            }
            
            /* Grid layout */
            .${id} .digiblocks-products-container {
                display: grid;
                grid-template-columns: repeat(${columns[activeDevice]}, 1fr);
                gap: ${itemSpacing[activeDevice]}px;
            }
            
            /* Product item */
            .${id} .digiblocks-product-item {
                display: flex;
                flex-direction: column;
                gap: ${imageMargin[activeDevice]}px;
                position: relative;
                ${cardStyle ? `
					background-color: ${cardBackgroundColor};
					${getDimensionCSS24(cardPadding, "padding", activeDevice)}
					${getDimensionCSS24(cardBorderRadius, "border-radius", activeDevice)}
                ` : ""}
                
                ${cardStyle && cardBorderStyle !== "none" ? `
					border-style: ${cardBorderStyle};
					border-color: ${cardBorderColor};
					${getDimensionCSS24(cardBorderWidth, "border-width", activeDevice)}
                ` : ""}
                
                ${cardStyle && cardShadow?.enable ? `box-shadow: ${cardShadow.horizontal}px ${cardShadow.vertical}px ${cardShadow.blur}px ${cardShadow.spread}px ${cardShadow.color};` : ""}
                transition: all 0.3s ease;
            }
            
            .${id} .digiblocks-product-item:hover {
                ${cardStyle && cardShadowHover?.enable ? `box-shadow: ${cardShadowHover.horizontal}px ${cardShadowHover.vertical}px ${cardShadowHover.blur}px ${cardShadowHover.spread}px ${cardShadowHover.color};` : ""}
                transform: translateY(-5px);
            }
            
            /* Sale badge */
            .${id} .digiblocks-product-sale-badge {
                position: absolute;
                top: 10px;
                left: 10px;
                z-index: 1;
                background-color: ${saleBadgeBackgroundColor};
                color: ${saleBadgeColor};
                padding: 4px 10px;
                border-radius: 3px;
                font-size: 12px;
                font-weight: 700;
                text-transform: uppercase;
            }
            
            /* Featured image */
            .${id} .digiblocks-product-image {
                width: 100%;
                overflow: hidden;
				${getDimensionCSS24(imageBorderRadius, "border-radius", activeDevice)}
                position: relative;
            }
            
            .${id} .digiblocks-product-image img {
                width: 100%;
                height: auto;
                display: block;
                transition: transform 0.3s ease;
            }
            
            .${id} .digiblocks-product-image:hover img {
                transform: scale(1.05);
            }

            /* Content */
            .${id} .digiblocks-product-content {
                display: flex;
                flex-direction: column;
                gap: ${contentMargin[activeDevice]}px;
            }
            
            /* Product title */
            .${id} .digiblocks-product-title {
                margin: 0;
                color: ${titleColor};
                ${titleTypography.fontFamily ? `font-family: ${titleTypography.fontFamily};` : ""}
                ${titleTypography.fontSize?.[activeDevice] ? `font-size: ${titleTypography.fontSize[activeDevice]}${titleTypography.fontSizeUnit || "px"};` : ""}
                ${titleTypography.fontWeight ? `font-weight: ${titleTypography.fontWeight};` : ""}
                ${titleTypography.fontStyle ? `font-style: ${titleTypography.fontStyle};` : ""}
                ${titleTypography.textTransform ? `text-transform: ${titleTypography.textTransform};` : ""}
                ${titleTypography.textDecoration ? `text-decoration: ${titleTypography.textDecoration};` : ""}
                ${titleTypography.lineHeight?.[activeDevice] ? `line-height: ${titleTypography.lineHeight[activeDevice]}${titleTypography.lineHeightUnit || "em"};` : ""}
                ${titleTypography.letterSpacing?.[activeDevice] ? `letter-spacing: ${titleTypography.letterSpacing[activeDevice]}${titleTypography.letterSpacingUnit || "px"};` : ""}
            }
            
            .${id} .digiblocks-product-title a {
                color: ${titleColor};
                text-decoration: none;
                transition: color 0.3s ease;
            }
            
            .${id} .digiblocks-product-title a:hover {
                color: ${titleHoverColor || titleColor};
            }
            
            /* Rating */
			.${id} .digiblocks-product-rating {
				display: flex;
				align-items: center;
				gap: 1px;
			}

            .${id} .digiblocks-product-rating .star {
				color: ${ratingColor};
				font-size: 16px;
			}
			
			.${id} .digiblocks-product-rating .star.empty {
				color: #d3d3d3;
			}
			
			.${id} .digiblocks-product-rating .star.half-filled {
				position: relative;
				color: ${ratingColor};
			}
			
			.${id} .digiblocks-product-rating .count {
				font-size: 12px;
				color: ${descriptionColor};
				font-style: italic;
			}
            
            /* Price */
            .${id} .digiblocks-product-price {
                display: flex;
                gap: 8px;
                align-items: center;
				color: ${priceColor};
                ${headingTypography.fontFamily ? `font-family: ${headingTypography.fontFamily};` : ""}
                ${headingTypography.fontSize?.[activeDevice] ? `font-size: ${headingTypography.fontSize[activeDevice]}${headingTypography.fontSizeUnit || "px"};` : ""}
                ${headingTypography.fontWeight ? `font-weight: ${headingTypography.fontWeight};` : ""}
                ${headingTypography.fontStyle ? `font-style: ${headingTypography.fontStyle};` : ""}
                ${headingTypography.textTransform ? `text-transform: ${headingTypography.textTransform};` : ""}
                ${headingTypography.lineHeight?.[activeDevice] ? `line-height: ${headingTypography.lineHeight[activeDevice]}${headingTypography.lineHeightUnit || "em"};` : ""}
                ${headingTypography.letterSpacing?.[activeDevice] ? `letter-spacing: ${headingTypography.letterSpacing[activeDevice]}${headingTypography.letterSpacingUnit || "px"};` : ""}
            }
            
            .${id} .digiblocks-product-price del {
                color: ${regularPriceColor};
                text-decoration: line-through;
            }
            
            .${id} .digiblocks-product-price ins {
                text-decoration: none;
            }
            
            /* Categories */
            .${id} .digiblocks-product-categories {
                display: flex;
                flex-wrap: wrap;
                gap: .5rem;
                ${textTypography.fontFamily ? `font-family: ${textTypography.fontFamily};` : ""}
                ${textTypography.fontSize?.[activeDevice] ? `font-size: ${textTypography.fontSize[activeDevice]}${textTypography.fontSizeUnit || "px"};` : ""}
                ${textTypography.fontWeight ? `font-weight: ${textTypography.fontWeight};` : ""}
                ${textTypography.fontStyle ? `font-style: ${textTypography.fontStyle};` : ""}
                ${textTypography.textTransform ? `text-transform: ${textTypography.textTransform};` : ""}
                ${textTypography.textDecoration ? `text-decoration: ${textTypography.textDecoration};` : ""}
                ${textTypography.lineHeight?.[activeDevice] ? `line-height: ${textTypography.lineHeight[activeDevice]}${textTypography.lineHeightUnit || "em"};` : ""}
                ${textTypography.letterSpacing?.[activeDevice] ? `letter-spacing: ${textTypography.letterSpacing[activeDevice]}${textTypography.letterSpacingUnit || "px"};` : ""}
            }
            
            .${id} .digiblocks-product-categories a {
                display: inline-flex;
                border-radius: 3px;
                padding: 3px 5px;
                background-color: ${catBackgroundColor};
                color: ${catColor};
                text-decoration: none;
                transition: all 0.3s ease;
            }
            
            .${id} .digiblocks-product-categories a:hover {
                background-color: ${catHoverBackgroundColor};
                color: ${catHoverColor};
            }
            
            /* Product excerpt */
            .${id} .digiblocks-product-excerpt {
                color: ${descriptionColor};
                ${contentTypography.fontFamily ? `font-family: ${contentTypography.fontFamily};` : ""}
                ${contentTypography.fontSize?.[activeDevice] ? `font-size: ${contentTypography.fontSize[activeDevice]}${contentTypography.fontSizeUnit || "px"};` : ""}
                ${contentTypography.fontWeight ? `font-weight: ${contentTypography.fontWeight};` : ""}
                ${contentTypography.fontStyle ? `font-style: ${contentTypography.fontStyle};` : ""}
                ${contentTypography.textTransform ? `text-transform: ${contentTypography.textTransform};` : ""}
                ${contentTypography.textDecoration ? `text-decoration: ${contentTypography.textDecoration};` : ""}
                ${contentTypography.lineHeight?.[activeDevice] ? `line-height: ${contentTypography.lineHeight[activeDevice]}${contentTypography.lineHeightUnit || "em"};` : ""}
                ${contentTypography.letterSpacing?.[activeDevice] ? `letter-spacing: ${contentTypography.letterSpacing[activeDevice]}${contentTypography.letterSpacingUnit || "px"};` : ""}
            }
            
            /* Add to cart button */
            .${id} .digiblocks-product-add-to-cart {
				display: flex;
				flex-direction: column;
				gap: .5rem;
			}
			
			.${id} .digiblocks-product-add-to-cart .button {
				display: flex;
				align-items: center;
				justify-content: center;
				gap: .5rem;
				background-color: ${buttonBackgroundColor};
                color: ${buttonTextColor};
                ${buttonTypography.fontFamily ? `font-family: ${buttonTypography.fontFamily};` : ""}
                ${buttonTypography.fontSize?.[activeDevice] ? `font-size: ${buttonTypography.fontSize[activeDevice]}${buttonTypography.fontSizeUnit || "px"};` : ""}
                ${buttonTypography.fontWeight ? `font-weight: ${buttonTypography.fontWeight};` : ""}
                ${buttonTypography.fontStyle ? `font-style: ${buttonTypography.fontStyle};` : ""}
                ${buttonTypography.textTransform ? `text-transform: ${buttonTypography.textTransform};` : ""}
                ${buttonTypography.textDecoration ? `text-decoration: ${buttonTypography.textDecoration};` : ""}
                ${buttonTypography.lineHeight?.[activeDevice] ? `line-height: ${buttonTypography.lineHeight[activeDevice]}${buttonTypography.lineHeightUnit || "em"};` : ""}
                ${buttonTypography.letterSpacing?.[activeDevice] ? `letter-spacing: ${buttonTypography.letterSpacing[activeDevice]}${buttonTypography.letterSpacingUnit || "px"};` : ""}
				${getDimensionCSS24(buttonPadding, "padding", activeDevice)}
				${getDimensionCSS24(buttonBorderRadius, "border-radius", activeDevice)}
                border-radius: ${buttonBorderRadius[activeDevice].top}${buttonBorderRadius[activeDevice].unit} ${buttonBorderRadius[activeDevice].right}${buttonBorderRadius[activeDevice].unit} ${buttonBorderRadius[activeDevice].bottom}${buttonBorderRadius[activeDevice].unit} ${buttonBorderRadius[activeDevice].left}${buttonBorderRadius[activeDevice].unit};
                transition: all 0.3s ease;
                border: none;
                cursor: pointer;
			}
			
			.${id} .digiblocks-product-add-to-cart .button:hover {
				background-color: ${buttonBackgroundHoverColor || buttonBackgroundColor};
                color: ${buttonTextHoverColor || buttonTextColor};
			}

            /* Pagination */
            .${id} .digiblocks-pagination {
                margin-top: 30px;
                display: flex;
                flex-wrap: wrap;
                gap: 5px;
                justify-content: ${paginationAlign};
            }

            .${id} .digiblocks-pagination .page-numbers {
                display: inline-flex;
                align-items: center;
                justify-content: center;
                min-width: 36px;
                height: 36px;
                padding: 0 10px;
                background-color: ${paginationBackgroundColor};
                color: ${paginationTextColor};
                border-radius: 4px;
                text-decoration: none;
                transition: all 0.3s ease;
            }

            .${id} .digiblocks-pagination .page-numbers.current {
                background-color: ${paginationActiveBackgroundColor};
                color: ${paginationActiveTextColor};
            }

            .${id} .digiblocks-pagination .page-numbers:hover:not(.current) {
                background-color: ${paginationActiveBackgroundColor}40;
            }

            .${id} .digiblocks-pagination .page-numbers svg {
                width: 1em;
                height: 1em;
                fill: currentColor;
            }
            
            /* Animation keyframes */
            ${animationCSS}
            
            /* Tablet styles */
            @media (max-width: 991px) {
                .${id} {
					${getDimensionCSS24(padding, "padding", "tablet")}
					${getDimensionCSS24(margin, "margin", "tablet")}
                }
                
                .${id} .digiblocks-products-container {
                    grid-template-columns: repeat(${columns["tablet"]}, 1fr);
                    gap: ${itemSpacing["tablet"]}px;
                }
            }
            
            /* Mobile styles */
            @media (max-width: 767px) {
                .${id} {
					${getDimensionCSS24(padding, "padding", "mobile")}
					${getDimensionCSS24(margin, "margin", "mobile")}
                }
                
                .${id} .digiblocks-products-container {
                    grid-template-columns: repeat(${columns["mobile"]}, 1fr);
                    gap: ${itemSpacing["mobile"]}px;
                }
            }

			/* Visibility Controls */
			${visibility.desktop ? `
				@media (min-width: 992px) {
					.${id} {
						opacity: 0.5 !important;
					}
				}
			` : ""}

			${visibility.tablet ? `
				@media (min-width: 768px) and (max-width: 991px) {
					.${id} {
						opacity: 0.5 !important;
					}
				}
			` : ""}

			${visibility.mobile ? `
				@media (max-width: 767px) {
					.${id} {
						opacity: 0.5 !important;
					}
				}
			` : ""}
        `;
    };
    const trimDescription = (description, wordCount) => {
      if (!description)
        return "";
      const temp = document.createElement("div");
      temp.innerHTML = description;
      const decodedDescription = temp.textContent || temp.innerText || "";
      const words = decodedDescription.split(" ");
      if (words.length <= wordCount)
        return decodedDescription;
      return words.slice(0, wordCount).join(" ") + "...";
    };
    const renderStarRating = (rating) => {
      rating = parseFloat(rating) || 0;
      const stars = [];
      const fullStars = Math.floor(rating);
      const halfStar = rating % 1 >= 0.5;
      for (let i = 0; i < fullStars; i++) {
        stars.push(/* @__PURE__ */ wp.element.createElement("span", { key: `full-${i}`, className: "star filled" }, "\u2605"));
      }
      if (halfStar) {
        stars.push(/* @__PURE__ */ wp.element.createElement("span", { key: "half", className: "star half-filled" }, "\u2605"));
      }
      const emptyStars = 5 - fullStars - (halfStar ? 1 : 0);
      for (let i = 0; i < emptyStars; i++) {
        stars.push(/* @__PURE__ */ wp.element.createElement("span", { key: `empty-${i}`, className: "star empty" }, "\u2606"));
      }
      if (rating === 0) {
        return /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, stars, /* @__PURE__ */ wp.element.createElement("span", { className: "count" }, "(0)"));
      }
      return stars;
    };
    const renderTabContent = () => {
      switch (activeTab) {
        case "options":
          return /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(
            TabPanelBody28,
            {
              tab: "options",
              name: "layout",
              title: __33("Layout", "digiblocks"),
              initialOpen: true
            },
            /* @__PURE__ */ wp.element.createElement(
              RangeControl27,
              {
                label: __33("Products to Show", "digiblocks"),
                value: productsToShow,
                onChange: (value) => setAttributes({ productsToShow: value }),
                min: 1,
                max: 20,
                __next40pxDefaultSize: true,
                __nextHasNoMarginBottom: true
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              ResponsiveControl28,
              {
                label: __33("Columns", "digiblocks")
              },
              /* @__PURE__ */ wp.element.createElement(
                RangeControl27,
                {
                  value: columns[localActiveDevice],
                  onChange: (value) => setAttributes({
                    columns: {
                      ...columns,
                      [localActiveDevice]: value
                    }
                  }),
                  min: 1,
                  max: localActiveDevice === "desktop" ? 6 : localActiveDevice === "tablet" ? 4 : 2,
                  __next40pxDefaultSize: true,
                  __nextHasNoMarginBottom: true
                }
              )
            ),
            /* @__PURE__ */ wp.element.createElement(
              ResponsiveControl28,
              {
                label: __33("Item Spacing", "digiblocks")
              },
              /* @__PURE__ */ wp.element.createElement(
                RangeControl27,
                {
                  value: itemSpacing[localActiveDevice],
                  onChange: (value) => setAttributes({
                    itemSpacing: {
                      ...itemSpacing,
                      [localActiveDevice]: value
                    }
                  }),
                  min: 0,
                  max: 80,
                  __next40pxDefaultSize: true,
                  __nextHasNoMarginBottom: true
                }
              )
            ),
            /* @__PURE__ */ wp.element.createElement(
              ToggleControl28,
              {
                label: __33("Card Style", "digiblocks"),
                checked: cardStyle,
                onChange: (value) => setAttributes({ cardStyle: value }),
                help: __33("Enable to show products as cards with backgrounds and borders", "digiblocks"),
                __nextHasNoMarginBottom: true
              }
            )
          ), /* @__PURE__ */ wp.element.createElement(
            TabPanelBody28,
            {
              tab: "options",
              name: "content",
              title: __33("Content", "digiblocks"),
              initialOpen: false
            },
            /* @__PURE__ */ wp.element.createElement(
              ToggleControl28,
              {
                label: __33("Display Featured Image", "digiblocks"),
                checked: displayFeaturedImage,
                onChange: (value) => setAttributes({ displayFeaturedImage: value }),
                __nextHasNoMarginBottom: true
              }
            ),
            displayFeaturedImage && /* @__PURE__ */ wp.element.createElement(
              SelectControl28,
              {
                label: __33("Image Size", "digiblocks"),
                value: imageSize,
                options: imageSizes,
                onChange: (value) => setAttributes({ imageSize: value }),
                __next40pxDefaultSize: true,
                __nextHasNoMarginBottom: true
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              ToggleControl28,
              {
                label: __33("Display Sale Badge", "digiblocks"),
                checked: displaySaleBadge,
                onChange: (value) => setAttributes({ displaySaleBadge: value }),
                __nextHasNoMarginBottom: true
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              ToggleControl28,
              {
                label: __33("Display Title", "digiblocks"),
                checked: displayTitle,
                onChange: (value) => setAttributes({ displayTitle: value }),
                __nextHasNoMarginBottom: true
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              ToggleControl28,
              {
                label: __33("Display Price", "digiblocks"),
                checked: displayPrice,
                onChange: (value) => setAttributes({ displayPrice: value }),
                __nextHasNoMarginBottom: true
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              ToggleControl28,
              {
                label: __33("Display Rating", "digiblocks"),
                checked: displayRating,
                onChange: (value) => setAttributes({ displayRating: value }),
                __nextHasNoMarginBottom: true
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              ToggleControl28,
              {
                label: __33("Display Categories", "digiblocks"),
                checked: displayCategories,
                onChange: (value) => setAttributes({ displayCategories: value }),
                __nextHasNoMarginBottom: true
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              ToggleControl28,
              {
                label: __33("Display Short Description", "digiblocks"),
                checked: displayShortDescription,
                onChange: (value) => setAttributes({ displayShortDescription: value }),
                __nextHasNoMarginBottom: true
              }
            ),
            displayShortDescription && /* @__PURE__ */ wp.element.createElement(
              RangeControl27,
              {
                label: __33("Description Length (words)", "digiblocks"),
                value: shortDescriptionLength,
                onChange: (value) => setAttributes({ shortDescriptionLength: value }),
                min: 5,
                max: 100,
                __next40pxDefaultSize: true,
                __nextHasNoMarginBottom: true
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              ToggleControl28,
              {
                label: __33("Display Add to Cart Button", "digiblocks"),
                checked: displayAddToCart,
                onChange: (value) => setAttributes({ displayAddToCart: value }),
                __nextHasNoMarginBottom: true
              }
            )
          ), /* @__PURE__ */ wp.element.createElement(
            TabPanelBody28,
            {
              tab: "options",
              name: "pagination",
              title: __33("Pagination", "digiblocks"),
              initialOpen: false
            },
            /* @__PURE__ */ wp.element.createElement(
              ToggleControl28,
              {
                label: __33("Enable Pagination", "digiblocks"),
                checked: enablePagination,
                onChange: (value) => setAttributes({ enablePagination: value }),
                __nextHasNoMarginBottom: true
              }
            ),
            enablePagination && /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(
              ToggleGroupControl26,
              {
                label: __33("Pagination Alignment", "digiblocks"),
                value: paginationAlign,
                onChange: (value) => setAttributes({ paginationAlign: value }),
                isBlock: true,
                __next40pxDefaultSize: true,
                __nextHasNoMarginBottom: true
              },
              /* @__PURE__ */ wp.element.createElement(
                ToggleGroupControlOption26,
                {
                  value: "flex-start",
                  label: __33("Left", "digiblocks")
                }
              ),
              /* @__PURE__ */ wp.element.createElement(
                ToggleGroupControlOption26,
                {
                  value: "center",
                  label: __33("Center", "digiblocks")
                }
              ),
              /* @__PURE__ */ wp.element.createElement(
                ToggleGroupControlOption26,
                {
                  value: "flex-end",
                  label: __33("Right", "digiblocks")
                }
              )
            ))
          ), /* @__PURE__ */ wp.element.createElement(
            TabPanelBody28,
            {
              tab: "options",
              name: "query",
              title: __33("Query", "digiblocks"),
              initialOpen: false
            },
            /* @__PURE__ */ wp.element.createElement(
              SelectControl28,
              {
                label: __33("Order By", "digiblocks"),
                value: orderBy,
                options: orderByOptions,
                onChange: (value) => setAttributes({ orderBy: value }),
                __next40pxDefaultSize: true,
                __nextHasNoMarginBottom: true
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              SelectControl28,
              {
                label: __33("Order", "digiblocks"),
                value: order,
                options: orderOptions,
                onChange: (value) => setAttributes({ order: value }),
                __next40pxDefaultSize: true,
                __nextHasNoMarginBottom: true
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              SelectControl28,
              {
                label: __33("Category", "digiblocks"),
                value: categories.length === 0 ? "0" : categories[0].toString(),
                options: isLoadingCategories ? [{ label: __33("Loading...", "digiblocks"), value: "0" }] : productCategories,
                onChange: (value) => {
                  const selectedValue = parseInt(value, 10);
                  if (selectedValue === 0) {
                    setAttributes({ categories: [] });
                  } else {
                    setAttributes({ categories: [selectedValue] });
                  }
                },
                __next40pxDefaultSize: true,
                __nextHasNoMarginBottom: true
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              ToggleControl28,
              {
                label: __33("Show Only On Sale Products", "digiblocks"),
                checked: onSale,
                onChange: (value) => setAttributes({ onSale: value }),
                __nextHasNoMarginBottom: true
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              ToggleControl28,
              {
                label: __33("Show Only Featured Products", "digiblocks"),
                checked: featured,
                onChange: (value) => setAttributes({ featured: value }),
                __nextHasNoMarginBottom: true
              }
            )
          ));
        case "style":
          return /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(
            TabPanelBody28,
            {
              tab: "style",
              name: "colors",
              title: __33("Colors", "digiblocks"),
              initialOpen: true
            },
            /* @__PURE__ */ wp.element.createElement(
              TabPanel17,
              {
                className: "digiblocks-control-tabs",
                activeClass: "active-tab",
                tabs: stateTabList
              },
              (tab) => {
                if (tab.name === "normal") {
                  return /* @__PURE__ */ wp.element.createElement(
                    PanelColorSettings26,
                    {
                      title: __33("Colors", "digiblocks"),
                      initialOpen: true,
                      enableAlpha: true,
                      colorSettings: [
                        {
                          value: titleColor,
                          onChange: (value) => setAttributes({ titleColor: value }),
                          label: __33("Title Color", "digiblocks")
                        },
                        {
                          value: priceColor,
                          onChange: (value) => setAttributes({ priceColor: value }),
                          label: __33("Price Color", "digiblocks")
                        },
                        {
                          value: regularPriceColor,
                          onChange: (value) => setAttributes({ regularPriceColor: value }),
                          label: __33("Regular Price Color", "digiblocks")
                        },
                        {
                          value: ratingColor,
                          onChange: (value) => setAttributes({ ratingColor: value }),
                          label: __33("Rating Color", "digiblocks")
                        },
                        {
                          value: catBackgroundColor,
                          onChange: (value) => setAttributes({ catBackgroundColor: value }),
                          label: __33("Categories Background Color", "digiblocks")
                        },
                        {
                          value: catColor,
                          onChange: (value) => setAttributes({ catColor: value }),
                          label: __33("Categories Color", "digiblocks")
                        },
                        {
                          value: saleBadgeBackgroundColor,
                          onChange: (value) => setAttributes({ saleBadgeBackgroundColor: value }),
                          label: __33("Sale Badge Background", "digiblocks")
                        },
                        {
                          value: saleBadgeColor,
                          onChange: (value) => setAttributes({ saleBadgeColor: value }),
                          label: __33("Sale Badge Text", "digiblocks")
                        },
                        {
                          value: descriptionColor,
                          onChange: (value) => setAttributes({ descriptionColor: value }),
                          label: __33("Description Color", "digiblocks")
                        },
                        {
                          value: buttonBackgroundColor,
                          onChange: (value) => setAttributes({ buttonBackgroundColor: value }),
                          label: __33("Button Background", "digiblocks")
                        },
                        {
                          value: buttonTextColor,
                          onChange: (value) => setAttributes({ buttonTextColor: value }),
                          label: __33("Button Text", "digiblocks")
                        }
                      ]
                    }
                  );
                } else {
                  return /* @__PURE__ */ wp.element.createElement(
                    PanelColorSettings26,
                    {
                      title: __33("Hover Colors", "digiblocks"),
                      initialOpen: true,
                      enableAlpha: true,
                      colorSettings: [
                        {
                          value: titleHoverColor,
                          onChange: (value) => setAttributes({ titleHoverColor: value }),
                          label: __33("Title Hover Color", "digiblocks")
                        },
                        {
                          value: catHoverBackgroundColor,
                          onChange: (value) => setAttributes({ catHoverBackgroundColor: value }),
                          label: __33("Categories Hover Background Color", "digiblocks")
                        },
                        {
                          value: catHoverColor,
                          onChange: (value) => setAttributes({ catHoverColor: value }),
                          label: __33("Categories Hover Color", "digiblocks")
                        },
                        {
                          value: buttonBackgroundHoverColor,
                          onChange: (value) => setAttributes({ buttonBackgroundHoverColor: value }),
                          label: __33("Button Background Hover", "digiblocks")
                        },
                        {
                          value: buttonTextHoverColor,
                          onChange: (value) => setAttributes({ buttonTextHoverColor: value }),
                          label: __33("Button Text Hover", "digiblocks")
                        }
                      ]
                    }
                  );
                }
              }
            ),
            enablePagination && /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement("h3", null, __33("Pagination Colors", "digiblocks")), /* @__PURE__ */ wp.element.createElement(
              PanelColorSettings26,
              {
                title: "",
                enableAlpha: true,
                colorSettings: [
                  {
                    value: paginationBackgroundColor,
                    onChange: (value) => setAttributes({ paginationBackgroundColor: value }),
                    label: __33("Pagination Background", "digiblocks")
                  },
                  {
                    value: paginationTextColor,
                    onChange: (value) => setAttributes({ paginationTextColor: value }),
                    label: __33("Pagination Color", "digiblocks")
                  },
                  {
                    value: paginationActiveBackgroundColor,
                    onChange: (value) => setAttributes({ paginationActiveBackgroundColor: value }),
                    label: __33("Pagination Active Background", "digiblocks")
                  },
                  {
                    value: paginationActiveTextColor,
                    onChange: (value) => setAttributes({ paginationActiveTextColor: value }),
                    label: __33("Pagination Active Color", "digiblocks")
                  }
                ]
              }
            )),
            cardStyle && /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement("h3", null, __33("Card Colors", "digiblocks")), /* @__PURE__ */ wp.element.createElement(
              PanelColorSettings26,
              {
                title: "",
                enableAlpha: true,
                colorSettings: [
                  {
                    value: cardBackgroundColor,
                    onChange: (value) => setAttributes({ cardBackgroundColor: value }),
                    label: __33("Card Background", "digiblocks")
                  },
                  {
                    value: cardBorderColor,
                    onChange: (value) => setAttributes({ cardBorderColor: value }),
                    label: __33("Card Border", "digiblocks")
                  }
                ]
              }
            ))
          ), /* @__PURE__ */ wp.element.createElement(
            TabPanelBody28,
            {
              tab: "style",
              name: "typography",
              title: __33("Typography", "digiblocks"),
              initialOpen: false
            },
            /* @__PURE__ */ wp.element.createElement(
              TypographyControl21,
              {
                label: __33("Title Typography", "digiblocks"),
                value: titleTypography,
                onChange: (value) => setAttributes({ titleTypography: value }),
                defaults: {
                  fontSize: { desktop: 20, tablet: 18, mobile: 16 },
                  fontWeight: "600",
                  lineHeight: { desktop: 1.4, tablet: 1.3, mobile: 1.2 }
                }
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              TypographyControl21,
              {
                label: __33("Price Typography", "digiblocks"),
                value: headingTypography,
                onChange: (value) => setAttributes({ headingTypography: value }),
                defaults: {
                  fontSize: { desktop: 18, tablet: 16, mobile: 15 },
                  fontWeight: "700",
                  lineHeight: { desktop: 1.4, tablet: 1.3, mobile: 1.2 }
                }
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              TypographyControl21,
              {
                label: __33("Category Typography", "digiblocks"),
                value: textTypography,
                onChange: (value) => setAttributes({ textTypography: value }),
                defaults: {
                  fontSize: { desktop: 14, tablet: 13, mobile: 12 },
                  lineHeight: { desktop: 1.4, tablet: 1.3, mobile: 1.2 }
                }
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              TypographyControl21,
              {
                label: __33("Short Description Typography", "digiblocks"),
                value: contentTypography,
                onChange: (value) => setAttributes({ contentTypography: value }),
                defaults: {
                  fontSize: { desktop: 16, tablet: 15, mobile: 14 },
                  lineHeight: { desktop: 1.5, tablet: 1.4, mobile: 1.3 }
                }
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              TypographyControl21,
              {
                label: __33("Button Typography", "digiblocks"),
                value: buttonTypography,
                onChange: (value) => setAttributes({ buttonTypography: value }),
                defaults: {
                  fontSize: { desktop: 16, tablet: 15, mobile: 14 },
                  fontWeight: "500",
                  lineHeight: { desktop: 1.5, tablet: 1.4, mobile: 1.3 }
                }
              }
            )
          ), /* @__PURE__ */ wp.element.createElement(
            TabPanelBody28,
            {
              tab: "style",
              name: "spacing",
              title: __33("Spacing", "digiblocks"),
              initialOpen: false
            },
            /* @__PURE__ */ wp.element.createElement(
              ResponsiveControl28,
              {
                label: __33("Padding", "digiblocks")
              },
              /* @__PURE__ */ wp.element.createElement(
                DimensionControl25,
                {
                  values: padding[localActiveDevice],
                  onChange: (value) => setAttributes({
                    padding: {
                      ...padding,
                      [localActiveDevice]: value
                    }
                  })
                }
              )
            ),
            /* @__PURE__ */ wp.element.createElement(
              ResponsiveControl28,
              {
                label: __33("Margin", "digiblocks")
              },
              /* @__PURE__ */ wp.element.createElement(
                DimensionControl25,
                {
                  values: margin[localActiveDevice],
                  onChange: (value) => setAttributes({
                    margin: {
                      ...margin,
                      [localActiveDevice]: value
                    }
                  })
                }
              )
            ),
            /* @__PURE__ */ wp.element.createElement(
              ResponsiveControl28,
              {
                label: __33("Image Margin", "digiblocks")
              },
              /* @__PURE__ */ wp.element.createElement(
                RangeControl27,
                {
                  value: imageMargin[localActiveDevice],
                  onChange: (value) => setAttributes({
                    imageMargin: {
                      ...imageMargin,
                      [localActiveDevice]: value
                    }
                  }),
                  min: 1,
                  max: 100,
                  __next40pxDefaultSize: true,
                  __nextHasNoMarginBottom: true
                }
              )
            ),
            /* @__PURE__ */ wp.element.createElement(
              ResponsiveControl28,
              {
                label: __33("Content Margin", "digiblocks")
              },
              /* @__PURE__ */ wp.element.createElement(
                RangeControl27,
                {
                  value: contentMargin[localActiveDevice],
                  onChange: (value) => setAttributes({
                    contentMargin: {
                      ...contentMargin,
                      [localActiveDevice]: value
                    }
                  }),
                  min: 1,
                  max: 100,
                  __next40pxDefaultSize: true,
                  __nextHasNoMarginBottom: true
                }
              )
            ),
            /* @__PURE__ */ wp.element.createElement(
              ResponsiveControl28,
              {
                label: __33("Button Padding", "digiblocks")
              },
              /* @__PURE__ */ wp.element.createElement(
                DimensionControl25,
                {
                  values: buttonPadding[localActiveDevice],
                  onChange: (value) => setAttributes({
                    buttonPadding: {
                      ...buttonPadding,
                      [localActiveDevice]: value
                    }
                  })
                }
              )
            )
          ), /* @__PURE__ */ wp.element.createElement(
            TabPanelBody28,
            {
              tab: "style",
              name: "borders",
              title: __33("Borders & Radius", "digiblocks"),
              initialOpen: false
            },
            /* @__PURE__ */ wp.element.createElement(
              ResponsiveControl28,
              {
                label: __33("Image Border Radius", "digiblocks")
              },
              /* @__PURE__ */ wp.element.createElement(
                DimensionControl25,
                {
                  values: imageBorderRadius[localActiveDevice],
                  onChange: (value) => setAttributes({
                    imageBorderRadius: {
                      ...imageBorderRadius,
                      [localActiveDevice]: value
                    }
                  }),
                  units: [
                    { label: "px", value: "px" },
                    { label: "%", value: "%" }
                  ]
                }
              )
            ),
            /* @__PURE__ */ wp.element.createElement(
              ResponsiveControl28,
              {
                label: __33("Button Border Radius", "digiblocks")
              },
              /* @__PURE__ */ wp.element.createElement(
                DimensionControl25,
                {
                  values: buttonBorderRadius[localActiveDevice],
                  onChange: (value) => setAttributes({
                    buttonBorderRadius: {
                      ...buttonBorderRadius,
                      [localActiveDevice]: value
                    }
                  }),
                  units: [
                    { label: "px", value: "px" },
                    { label: "%", value: "%" }
                  ]
                }
              )
            ),
            cardStyle && /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(
              SelectControl28,
              {
                label: __33("Card Border Style", "digiblocks"),
                value: cardBorderStyle,
                options: borderStyleOptions,
                onChange: (value) => setAttributes({ cardBorderStyle: value }),
                __next40pxDefaultSize: true,
                __nextHasNoMarginBottom: true
              }
            ), cardBorderStyle !== "none" && /* @__PURE__ */ wp.element.createElement(
              ResponsiveControl28,
              {
                label: __33("Card Border Width", "digiblocks")
              },
              /* @__PURE__ */ wp.element.createElement(
                DimensionControl25,
                {
                  values: cardBorderWidth[localActiveDevice],
                  onChange: (value) => setAttributes({
                    cardBorderWidth: {
                      ...cardBorderWidth,
                      [localActiveDevice]: value
                    }
                  })
                }
              )
            ), /* @__PURE__ */ wp.element.createElement(
              ResponsiveControl28,
              {
                label: __33("Card Border Radius", "digiblocks")
              },
              /* @__PURE__ */ wp.element.createElement(
                DimensionControl25,
                {
                  values: cardBorderRadius[localActiveDevice],
                  onChange: (value) => setAttributes({
                    cardBorderRadius: {
                      ...cardBorderRadius,
                      [localActiveDevice]: value
                    }
                  }),
                  units: [
                    { label: "px", value: "px" },
                    { label: "%", value: "%" }
                  ]
                }
              )
            ), /* @__PURE__ */ wp.element.createElement(
              BoxShadowControl23,
              {
                label: __33("Card Shadow", "digiblocks"),
                normalValue: cardShadow,
                hoverValue: cardShadowHover,
                onNormalChange: (value) => setAttributes({ cardShadow: value }),
                onHoverChange: (value) => setAttributes({ cardShadowHover: value })
              }
            ))
          ));
        case "advanced":
          return /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(
            TabPanelBody28,
            {
              tab: "advanced",
              name: "animation",
              title: __33("Animation", "digiblocks"),
              initialOpen: true
            },
            /* @__PURE__ */ wp.element.createElement(
              SelectControl28,
              {
                label: __33("Animation Effect", "digiblocks"),
                value: animation,
                options: animationOptions,
                onChange: (value) => setAttributes({ animation: value }),
                __next40pxDefaultSize: true,
                __nextHasNoMarginBottom: true
              }
            ),
            animation && animation !== "none" && /* @__PURE__ */ wp.element.createElement("div", { style: { marginTop: "10px" } }, /* @__PURE__ */ wp.element.createElement(
              Button26,
              {
                variant: "secondary",
                isSecondary: true,
                onClick: handlePreviewClick,
                style: { width: "100%" }
              },
              __33("Preview Animation", "digiblocks")
            ))
          ), /* @__PURE__ */ wp.element.createElement(
            TabPanelBody28,
            {
              tab: "advanced",
              name: "visibility",
              title: __33("Visibility", "digiblocks"),
              initialOpen: false
            },
            /* @__PURE__ */ wp.element.createElement("div", { className: "components-base-control__help", style: {
              padding: "12px",
              backgroundColor: "#f0f6fc",
              border: "1px solid #c3ddfd",
              borderRadius: "4px",
              marginBottom: "16px"
            } }, /* @__PURE__ */ wp.element.createElement("strong", null, __33("Editor Note:", "digiblocks")), /* @__PURE__ */ wp.element.createElement("br", null), __33("Hidden elements appear with reduced opacity in the editor for easy editing. Visibility changes only take effect on the frontend.", "digiblocks")),
            /* @__PURE__ */ wp.element.createElement(
              ToggleControl28,
              {
                label: __33("Hide on Desktop", "digiblocks"),
                checked: visibility.desktop,
                onChange: (value) => setAttributes({
                  visibility: {
                    ...visibility,
                    desktop: value
                  }
                }),
                __nextHasNoMarginBottom: true
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              ToggleControl28,
              {
                label: __33("Hide on Tablet", "digiblocks"),
                checked: visibility.tablet,
                onChange: (value) => setAttributes({
                  visibility: {
                    ...visibility,
                    tablet: value
                  }
                }),
                __nextHasNoMarginBottom: true
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              ToggleControl28,
              {
                label: __33("Hide on Mobile", "digiblocks"),
                checked: visibility.mobile,
                onChange: (value) => setAttributes({
                  visibility: {
                    ...visibility,
                    mobile: value
                  }
                }),
                __nextHasNoMarginBottom: true
              }
            )
          ), /* @__PURE__ */ wp.element.createElement(
            TabPanelBody28,
            {
              tab: "advanced",
              name: "additional",
              title: __33("Additional", "digiblocks"),
              initialOpen: false
            },
            /* @__PURE__ */ wp.element.createElement("div", { className: "components-base-control html-anchor-control" }, /* @__PURE__ */ wp.element.createElement("div", { className: "components-base-control__field" }, /* @__PURE__ */ wp.element.createElement("label", { className: "components-base-control__label", htmlFor: "html-anchor" }, __33("HTML anchor", "digiblocks")), /* @__PURE__ */ wp.element.createElement(
              "input",
              {
                className: "components-text-control__input",
                type: "text",
                id: "html-anchor",
                value: anchor || "",
                onChange: (e) => setAttributes({ anchor: e.target.value }),
                "aria-describedby": "html-anchor-help",
                autoCapitalize: "none",
                autoComplete: "off"
              }
            )), /* @__PURE__ */ wp.element.createElement("p", { id: "html-anchor-help", className: "components-base-control__help" }, __33(`Enter a word or two \u2014 without spaces \u2014 to make a unique web address just for this block, called an "anchor". Then, you'll be able to link directly to this section of your page.`, "digiblocks"), " ", /* @__PURE__ */ wp.element.createElement(
              "a",
              {
                className: "components-external-link",
                href: "https://wordpress.org/documentation/article/page-jumps/",
                target: "_blank",
                rel: "external noreferrer noopener"
              },
              /* @__PURE__ */ wp.element.createElement("span", { className: "components-external-link__contents" }, __33("Learn more about anchors", "digiblocks")),
              /* @__PURE__ */ wp.element.createElement("span", { className: "components-external-link__icon", "aria-label": "(opens in a new tab)" }, "\u2197")
            ))),
            /* @__PURE__ */ wp.element.createElement("div", { className: "components-base-control" }, /* @__PURE__ */ wp.element.createElement("div", { className: "components-base-control__field" }, /* @__PURE__ */ wp.element.createElement("label", { className: "components-base-control__label", htmlFor: "additional-css-classes" }, __33("Additional CSS class(es)", "digiblocks")), /* @__PURE__ */ wp.element.createElement(
              "input",
              {
                className: "components-text-control__input",
                type: "text",
                id: "additional-css-classes",
                value: customClasses || "",
                onChange: (e) => setAttributes({ customClasses: e.target.value }),
                "aria-describedby": "additional-css-classes-help",
                autoComplete: "off"
              }
            )), /* @__PURE__ */ wp.element.createElement("p", { id: "additional-css-classes-help", className: "components-base-control__help" }, __33("Separate multiple classes with spaces.", "digiblocks")))
          ));
        default:
          return null;
      }
    };
    const blockClasses = `digiblocks-woo-products ${id} ${customClasses || ""}`;
    const blockProps = useBlockProps53({
      className: blockClasses,
      id: anchor || null
    });
    return /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(InspectorControls28, null, /* @__PURE__ */ wp.element.createElement(
      CustomTabPanel28,
      {
        tabs: tabList,
        activeTab,
        onSelect: setActiveTab
      },
      renderTabContent()
    )), /* @__PURE__ */ wp.element.createElement("style", { dangerouslySetInnerHTML: { __html: generateCSS() } }), /* @__PURE__ */ wp.element.createElement("div", { ...blockProps }, isLoading ? /* @__PURE__ */ wp.element.createElement(
      Placeholder6,
      {
        icon: "cart",
        label: __33("Woo Products", "digiblocks")
      },
      /* @__PURE__ */ wp.element.createElement(Spinner8, null)
    ) : products.length === 0 ? /* @__PURE__ */ wp.element.createElement("p", { className: "digiblocks-products-no-results" }, __33("No products found.", "digiblocks")) : /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-products-container" }, products.map((product) => {
      const productTitle = product.name || "";
      const productPrice = product.price || "0.00";
      const regularPrice = product.regular_price || productPrice;
      const salePrice = product.sale_price || "";
      const isOnSale = Boolean(product.on_sale || product.sale_price && product.regular_price && parseFloat(product.sale_price) < parseFloat(product.regular_price));
      const featuredImageUrl = product.images && product.images.length > 0 ? product.images[0].src : "";
      const shortDescription = product.short_description || "";
      const rating = product.average_rating || 0;
      const ratingCount = product.rating_count || 0;
      const productCategories2 = product.categories || [];
      return /* @__PURE__ */ wp.element.createElement("div", { key: product.id, className: "digiblocks-product-item" }, displaySaleBadge && isOnSale && /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-product-sale-badge" }, __33("Sale!", "digiblocks")), displayFeaturedImage && featuredImageUrl && /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-product-image" }, /* @__PURE__ */ wp.element.createElement("a", { href: "#", onClick: (e) => e.preventDefault() }, /* @__PURE__ */ wp.element.createElement(
        "img",
        {
          src: featuredImageUrl,
          alt: productTitle
        }
      ))), /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-product-content" }, displayCategories && productCategories2.length > 0 && /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-product-categories" }, productCategories2.map((category) => /* @__PURE__ */ wp.element.createElement(
        "a",
        {
          key: category.id,
          href: "#",
          onClick: (e) => e.preventDefault(),
          className: "digiblocks-category-link"
        },
        category.name
      ))), displayTitle && /* @__PURE__ */ wp.element.createElement("h3", { className: "digiblocks-product-title" }, /* @__PURE__ */ wp.element.createElement("a", { href: "#", onClick: (e) => e.preventDefault(), dangerouslySetInnerHTML: { __html: productTitle } })), displayPrice && /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, isOnSale ? /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-product-price", dangerouslySetInnerHTML: {
        __html: product.price_html
      } })) : /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-product-price", dangerouslySetInnerHTML: {
        __html: product.price_html
      } })), displayRating && /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-product-rating" }, renderStarRating(rating), /* @__PURE__ */ wp.element.createElement("span", { className: "count" }, "(", ratingCount, ")")), displayShortDescription && shortDescription && /* @__PURE__ */ wp.element.createElement(
        "div",
        {
          className: "digiblocks-product-excerpt",
          dangerouslySetInnerHTML: {
            __html: trimDescription(shortDescription, shortDescriptionLength)
          }
        }
      ), displayAddToCart && /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-product-add-to-cart" }, /* @__PURE__ */ wp.element.createElement("a", { href: "#", className: "button", onClick: (e) => e.preventDefault() }, __33("Add to cart", "digiblocks")))));
    })), enablePagination && /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-pagination" }, /* @__PURE__ */ wp.element.createElement("a", { className: "page-numbers", href: "#", onClick: (e) => e.preventDefault() }, /* @__PURE__ */ wp.element.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 320 512", width: "1em", height: "1em" }, /* @__PURE__ */ wp.element.createElement("path", { d: "M47 239c-9.4 9.4-9.4 24.6 0 33.9L207 433c9.4 9.4 24.6 9.4 33.9 0s9.4-24.6 0-33.9L97.9 256 241 113c9.4-9.4 9.4-24.6 0-33.9s-24.6-9.4-33.9 0L47 239z" }))), /* @__PURE__ */ wp.element.createElement("a", { className: "page-numbers", href: "#", onClick: (e) => e.preventDefault() }, "1"), /* @__PURE__ */ wp.element.createElement("span", { className: "page-numbers current" }, "2"), /* @__PURE__ */ wp.element.createElement("a", { className: "page-numbers", href: "#", onClick: (e) => e.preventDefault() }, "3"), /* @__PURE__ */ wp.element.createElement("span", { className: "page-numbers dots" }, "\u2026"), /* @__PURE__ */ wp.element.createElement("a", { className: "page-numbers", href: "#", onClick: (e) => e.preventDefault() }, "8"), /* @__PURE__ */ wp.element.createElement("a", { className: "page-numbers", href: "#", onClick: (e) => e.preventDefault() }, /* @__PURE__ */ wp.element.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 320 512", width: "1em", height: "1em" }, /* @__PURE__ */ wp.element.createElement("path", { d: "M273 239c9.4 9.4 9.4 24.6 0 33.9L113 433c-9.4 9.4-24.6 9.4-33.9 0s-9.4-24.6 0-33.9l143-143L79 113c-9.4-9.4-9.4-24.6 0-33.9s24.6-9.4 33.9 0L273 239z" })))))));
  };
  var edit_default28 = WooProductsEdit;

  // blocks/woo-products/save.js
  var WooProductsSave = () => {
    return null;
  };
  var save_default28 = WooProductsSave;

  // blocks/logo/edit.js
  var { __: __34 } = window.wp.i18n;
  var {
    useBlockProps: useBlockProps54,
    RichText: RichText28,
    InspectorControls: InspectorControls29,
    PanelColorSettings: PanelColorSettings27,
    LinkControl: LinkControl8,
    MediaUpload: MediaUpload9,
    MediaUploadCheck: MediaUploadCheck9
  } = window.wp.blockEditor;
  var {
    TabPanel: TabPanel18,
    SelectControl: SelectControl29,
    Button: Button27,
    ToggleControl: ToggleControl29,
    __experimentalToggleGroupControl: ToggleGroupControl27,
    __experimentalToggleGroupControlOption: ToggleGroupControlOption27
  } = window.wp.components;
  var { useState: useState29, useEffect: useEffect29, useRef: useRef25 } = window.wp.element;
  var { useBlockId: useBlockId29, getDimensionCSS: getDimensionCSS25, animations: animations26, animationPreview: animationPreview26 } = digi.utils;
  var { tabIcons: tabIcons29 } = digi.icons;
  var { ResponsiveControl: ResponsiveControl29, ResponsiveRangeControl: ResponsiveRangeControl4, ResponsiveButtonGroup: ResponsiveButtonGroup7, DimensionControl: DimensionControl26, TypographyControl: TypographyControl22, BoxShadowControl: BoxShadowControl24, CustomTabPanel: CustomTabPanel29, TabPanelBody: TabPanelBody29 } = digi.components;
  var LogoEdit = ({ attributes, setAttributes, clientId }) => {
    const {
      id,
      anchor,
      visibility,
      customClasses,
      logoType,
      imageId,
      imageUrl,
      imageAlt,
      text,
      textIcon,
      iconPosition,
      iconSize,
      textTypography,
      logoWidth,
      logoHeight,
      logoAlignment,
      textColor,
      textHoverColor,
      backgroundColor,
      backgroundHoverColor,
      linkEnabled,
      linkUrl,
      linkOpenInNewTab,
      linkRel,
      borderStyle,
      borderWidth,
      borderRadius,
      borderColor,
      borderHoverColor,
      boxShadow,
      boxShadowHover,
      padding,
      margin,
      animation,
      hoverEffect
    } = attributes;
    useBlockId29(id, clientId, setAttributes);
    const [localActiveDevice, setLocalActiveDevice] = useState29(window.digi.responsiveState.activeDevice);
    const [activeTab, setActiveTab] = useState29("options");
    const [componentsLoaded, setComponentsLoaded] = useState29(false);
    useEffect29(() => {
      const checkComponents = () => {
        if (window.digi && window.digi.components && window.digi.components.FontAwesomeControl) {
          setComponentsLoaded(true);
          return true;
        }
        return false;
      };
      if (!checkComponents()) {
        const timeout = setTimeout(() => {
          if (checkComponents()) {
            clearTimeout(timeout);
          }
        }, 500);
        return () => clearTimeout(timeout);
      }
    }, []);
    const [iconModalOpen, setIconModalOpen] = useState29(false);
    useEffect29(() => {
      const unsubscribe = window.digi.responsiveState.subscribe((device) => {
        setLocalActiveDevice(device);
      });
      return unsubscribe;
    }, []);
    useEffect29(() => {
      if (linkEnabled && !linkUrl) {
        setAttributes({ linkUrl: window.location.origin });
      }
    }, [setAttributes, linkEnabled, linkUrl]);
    const previewTimeoutRef = useRef25(null);
    useEffect29(() => {
      if (animation && animation !== "none") {
        const timeoutId = setTimeout(() => {
          animationPreview26(id, animation, animations26, previewTimeoutRef);
        }, 100);
        return () => clearTimeout(timeoutId);
      }
    }, [animation]);
    const handlePreviewClick = () => {
      animationPreview26(id, animation, animations26, previewTimeoutRef);
    };
    const borderStyleOptions = [
      { label: __34("None", "digiblocks"), value: "none" },
      { label: __34("Solid", "digiblocks"), value: "solid" },
      { label: __34("Dotted", "digiblocks"), value: "dotted" },
      { label: __34("Dashed", "digiblocks"), value: "dashed" },
      { label: __34("Double", "digiblocks"), value: "double" },
      { label: __34("Groove", "digiblocks"), value: "groove" },
      { label: __34("Inset", "digiblocks"), value: "inset" },
      { label: __34("Outset", "digiblocks"), value: "outset" },
      { label: __34("Ridge", "digiblocks"), value: "ridge" }
    ];
    const hoverEffectOptions = [
      { label: __34("None", "digiblocks"), value: "none" },
      { label: __34("Lift", "digiblocks"), value: "lift" },
      { label: __34("Scale", "digiblocks"), value: "scale" },
      { label: __34("Glow", "digiblocks"), value: "glow" }
    ];
    const animationOptions = [
      { label: __34("None", "digiblocks"), value: "none" },
      ...Object.keys(animations26).map((animation2) => ({
        label: animation2.replace(/-/g, " ").replace(/\b\w/g, (l) => l.toUpperCase()),
        value: animation2
      }))
    ];
    const tabList = [
      {
        name: "options",
        title: __34("Options", "digiblocks"),
        icon: tabIcons29.optionsIcon
      },
      {
        name: "style",
        title: __34("Style", "digiblocks"),
        icon: tabIcons29.styleIcon
      },
      {
        name: "advanced",
        title: __34("Advanced", "digiblocks"),
        icon: tabIcons29.advancedIcon
      }
    ];
    const stateTabList = [
      {
        name: "normal",
        title: __34("Normal", "digiblocks"),
        className: "digiblocks-tab-1 normal"
      },
      {
        name: "hover",
        title: __34("Hover", "digiblocks"),
        className: "digiblocks-tab-2 hover"
      }
    ];
    const FontAwesomeControl6 = componentsLoaded ? window.digi.components.FontAwesomeControl : null;
    const generateCSS = () => {
      const activeDevice = localActiveDevice;
      const getIconSize = () => {
        const device = iconSize[activeDevice];
        if (!device || device.value === void 0)
          return "30px";
        return `${device.value}${device.unit || "px"}`;
      };
      const getLogoWidth = () => {
        const device = logoWidth[activeDevice];
        if (!device || device.value === void 0)
          return "200";
        return `${device.value}${device.unit || "px"}`;
      };
      const getLogoHeight = () => {
        const device = logoHeight[activeDevice];
        if (!device || device.value === void 0 || device.value === 0)
          return "";
        return `${device.value}${device.unit || "px"}`;
      };
      const currentIconSize = getIconSize();
      const currentLogoWidth = getLogoWidth();
      const currentLogoHeight = getLogoHeight();
      let borderCSS = "";
      if (borderStyle && borderStyle !== "none") {
        borderCSS = `
                border-style: ${borderStyle};
                border-color: ${borderColor || "#e0e0e0"};
				${getDimensionCSS25(borderWidth, "border-width", activeDevice)}
				${getDimensionCSS25(borderRadius, "border-radius", activeDevice)}
            `;
      }
      let boxShadowCSS = "box-shadow: none;";
      if (boxShadow && boxShadow.enable) {
        const inset = boxShadow.position === "inset" ? "inset " : "";
        boxShadowCSS = `box-shadow: ${inset}${boxShadow.horizontal}px ${boxShadow.vertical}px ${boxShadow.blur}px ${boxShadow.spread}px ${boxShadow.color};`;
      }
      let textTypographyCSS = "";
      if (textTypography) {
        if (textTypography.fontFamily) {
          textTypographyCSS += `font-family: ${textTypography.fontFamily};`;
        }
        if (textTypography.fontSize && textTypography.fontSize[activeDevice]) {
          textTypographyCSS += `font-size: ${textTypography.fontSize[activeDevice]}${textTypography.fontSizeUnit || "px"};`;
        }
        if (textTypography.fontWeight) {
          textTypographyCSS += `font-weight: ${textTypography.fontWeight};`;
        }
        if (textTypography.fontStyle) {
          textTypographyCSS += `font-style: ${textTypography.fontStyle};`;
        }
        if (textTypography.textTransform) {
          textTypographyCSS += `text-transform: ${textTypography.textTransform};`;
        }
        if (textTypography.textDecoration) {
          textTypographyCSS += `text-decoration: ${textTypography.textDecoration};`;
        }
        if (textTypography.lineHeight && textTypography.lineHeight[activeDevice]) {
          textTypographyCSS += `line-height: ${textTypography.lineHeight[activeDevice]}${textTypography.lineHeightUnit || "em"};`;
        }
        if (textTypography.letterSpacing && textTypography.letterSpacing[activeDevice]) {
          textTypographyCSS += `letter-spacing: ${textTypography.letterSpacing[activeDevice]}${textTypography.letterSpacingUnit || "px"};`;
        }
      }
      let hoverCSS = "";
      if (boxShadowHover && boxShadowHover.enable) {
        const insetHover = boxShadowHover.position === "inset" ? "inset " : "";
        hoverCSS += `box-shadow: ${insetHover}${boxShadowHover.horizontal}px ${boxShadowHover.vertical}px ${boxShadowHover.blur}px ${boxShadowHover.spread}px ${boxShadowHover.color};`;
      }
      if (hoverEffect === "lift") {
        hoverCSS += "transform: translateY(-10px);";
      } else if (hoverEffect === "scale") {
        hoverCSS += "transform: scale(1.05);";
      } else if (hoverEffect === "glow") {
        hoverCSS += "filter: brightness(1.1);";
      }
      let iconPositionCSS = "";
      if (logoType === "text" && textIcon && textIcon.svg) {
        switch (iconPosition) {
          case "above":
            iconPositionCSS = "flex-direction: column;";
            break;
          default:
            iconPositionCSS = "flex-direction: row;";
        }
      }
      return `
            /* Logo Block - ${id} */
            .${id} {
				display: flex;
				justify-content: ${logoAlignment[activeDevice]};
            }
            
            .${id} .digiblocks-logo-container {
                display: inline-flex;
                align-items: center;
                ${backgroundColor ? `background-color: ${backgroundColor};` : ""}
                ${borderCSS}
                ${boxShadowCSS}
				${getDimensionCSS25(padding, "padding", activeDevice)}
				${getDimensionCSS25(margin, "margin", activeDevice)}
                transition: all 0.3s ease;
            }
            
            .${id} .digiblocks-logo-container:hover {
                ${backgroundHoverColor ? `background-color: ${backgroundHoverColor};` : ""}
                ${borderHoverColor ? `border-color: ${borderHoverColor};` : ""}
                ${hoverCSS}
            }
            
            .${id} .digiblocks-logo-image {
				min-width: 150px;
                width: ${currentLogoWidth};
				max-width: 100%;
                ${currentLogoHeight !== "auto" ? `height: ${currentLogoHeight};` : ""}
                object-fit: contain;
                transition: all 0.3s ease;
            }
            
            .${id} .digiblocks-logo-text-wrapper {
                display: inline-flex;
                align-items: center;
                gap: 8px;
                ${iconPositionCSS}
            }
            
            .${id} .digiblocks-logo-text {
                display: inline-block;
                ${textTypographyCSS}
                color: ${textColor || "#333333"};
                transition: color 0.3s ease;
            }
            
            .${id} .digiblocks-logo-icon {
                display: inline-flex;
                align-items: center;
                justify-content: center;
            }
            
            .${id} .digiblocks-logo-icon span {
				display: flex;
            }
            
            .${id} .digiblocks-logo-icon svg {
				display: flex;
                width: ${currentIconSize};
                height: 100%;
                fill: ${textColor || "#333333"};
                transition: fill 0.3s ease;
            }
            
            .${id} .digiblocks-logo-container:hover .digiblocks-logo-text {
                ${textHoverColor ? `color: ${textHoverColor};` : ""}
            }
            
            .${id} .digiblocks-logo-container:hover .digiblocks-logo-icon svg {
                ${textHoverColor ? `fill: ${textHoverColor};` : ""}
            }
            
            .${id} a {
				display: inline-flex;
                text-decoration: none;
                color: inherit;
            }
            
            .${id} .digiblocks-logo-placeholder {
                cursor: pointer;
            }

			/* Visibility Controls */
			${visibility.desktop ? `
				@media (min-width: 992px) {
					.${id} {
						opacity: 0.5 !important;
					}
				}
			` : ""}

			${visibility.tablet ? `
				@media (min-width: 768px) and (max-width: 991px) {
					.${id} {
						opacity: 0.5 !important;
					}
				}
			` : ""}

			${visibility.mobile ? `
				@media (max-width: 767px) {
					.${id} {
						opacity: 0.5 !important;
					}
				}
			` : ""}
        `;
    };
    const renderTabContent = () => {
      switch (activeTab) {
        case "options":
          return /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(
            TabPanelBody29,
            {
              tab: "options",
              name: "logo-type",
              title: __34("Logo Type", "digiblocks"),
              initialOpen: true
            },
            /* @__PURE__ */ wp.element.createElement(
              ToggleGroupControl27,
              {
                label: __34("Logo Type", "digiblocks"),
                value: logoType,
                onChange: (value) => setAttributes({ logoType: value }),
                isBlock: true,
                __next40pxDefaultSize: true,
                __nextHasNoMarginBottom: true
              },
              /* @__PURE__ */ wp.element.createElement(
                ToggleGroupControlOption27,
                {
                  value: "image",
                  label: __34("Image", "digiblocks")
                }
              ),
              /* @__PURE__ */ wp.element.createElement(
                ToggleGroupControlOption27,
                {
                  value: "text",
                  label: __34("Text", "digiblocks")
                }
              )
            ),
            logoType === "image" ? /* @__PURE__ */ wp.element.createElement(MediaUploadCheck9, null, /* @__PURE__ */ wp.element.createElement(
              MediaUpload9,
              {
                onSelect: (media) => {
                  setAttributes({
                    imageId: media.id,
                    imageUrl: media.url,
                    imageAlt: media.alt || media.title || ""
                  });
                },
                value: imageId,
                allowedTypes: ["image"],
                render: ({ open }) => /* @__PURE__ */ wp.element.createElement("div", null, !imageUrl ? /* @__PURE__ */ wp.element.createElement(
                  Button27,
                  {
                    onClick: open,
                    variant: "secondary",
                    style: { width: "100%", marginBottom: "12px" }
                  },
                  __34("Select Logo Image", "digiblocks")
                ) : /* @__PURE__ */ wp.element.createElement("div", { style: { marginBottom: "12px" } }, /* @__PURE__ */ wp.element.createElement(
                  "img",
                  {
                    src: imageUrl,
                    alt: imageAlt,
                    style: {
                      maxWidth: "100%",
                      height: "auto",
                      border: "1px solid #ddd",
                      borderRadius: "4px",
                      padding: "4px"
                    }
                  }
                ), /* @__PURE__ */ wp.element.createElement("div", { style: { display: "flex", gap: "8px", marginTop: "8px" } }, /* @__PURE__ */ wp.element.createElement(
                  Button27,
                  {
                    onClick: open,
                    variant: "secondary",
                    style: { flex: 1 }
                  },
                  __34("Replace", "digiblocks")
                ), /* @__PURE__ */ wp.element.createElement(
                  Button27,
                  {
                    onClick: () => setAttributes({ imageId: 0, imageUrl: "", imageAlt: "" }),
                    variant: "secondary",
                    isDestructive: true,
                    style: { flex: 1 }
                  },
                  __34("Remove", "digiblocks")
                ))))
              }
            )) : /* @__PURE__ */ wp.element.createElement("div", null, /* @__PURE__ */ wp.element.createElement("div", { style: { marginTop: "16px" } }, !componentsLoaded ? /* @__PURE__ */ wp.element.createElement("div", { style: { textAlign: "center", padding: "20px 0" } }, /* @__PURE__ */ wp.element.createElement("div", { className: "components-spinner" }), /* @__PURE__ */ wp.element.createElement("p", null, __34("Loading icon selector...", "digiblocks"))) : /* @__PURE__ */ wp.element.createElement(
              FontAwesomeControl6,
              {
                value: textIcon,
                onChange: (value) => {
                  setAttributes({ textIcon: value });
                  setIconModalOpen(false);
                }
              }
            ), /* @__PURE__ */ wp.element.createElement(
              ToggleGroupControl27,
              {
                label: __34("Icon Position", "digiblocks"),
                value: iconPosition,
                onChange: (value) => setAttributes({ iconPosition: value }),
                isBlock: true,
                __next40pxDefaultSize: true,
                __nextHasNoMarginBottom: true,
                style: { marginTop: "16px" }
              },
              /* @__PURE__ */ wp.element.createElement(
                ToggleGroupControlOption27,
                {
                  value: "before",
                  label: __34("Before", "digiblocks")
                }
              ),
              /* @__PURE__ */ wp.element.createElement(
                ToggleGroupControlOption27,
                {
                  value: "after",
                  label: __34("After", "digiblocks")
                }
              ),
              /* @__PURE__ */ wp.element.createElement(
                ToggleGroupControlOption27,
                {
                  value: "above",
                  label: __34("Above", "digiblocks")
                }
              )
            ))),
            /* @__PURE__ */ wp.element.createElement(
              ResponsiveButtonGroup7,
              {
                label: __34("Alignment", "digiblocks"),
                value: logoAlignment,
                onChange: (value) => setAttributes({ logoAlignment: value }),
                options: [
                  { label: __34("Left", "digiblocks"), value: "flex-start" },
                  { label: __34("Center", "digiblocks"), value: "center" },
                  { label: __34("Right", "digiblocks"), value: "flex-end" }
                ]
              }
            )
          ), /* @__PURE__ */ wp.element.createElement(
            TabPanelBody29,
            {
              tab: "options",
              name: "dimensions",
              title: __34("Dimensions", "digiblocks"),
              initialOpen: false
            },
            logoType === "image" ? /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(
              ResponsiveRangeControl4,
              {
                label: __34("Logo Width", "digiblocks"),
                value: logoWidth,
                onChange: (value) => setAttributes({ logoWidth: value }),
                units: [
                  { label: "px", value: "px" },
                  { label: "%", value: "%" },
                  { label: "em", value: "em" },
                  { label: "rem", value: "rem" },
                  { label: "vw", value: "vw" }
                ],
                defaultUnit: "px",
                min: 0,
                max: 1e3,
                step: 1,
                defaultValues: {
                  desktop: 200,
                  tablet: 180,
                  mobile: 150
                }
              }
            ), /* @__PURE__ */ wp.element.createElement(
              ResponsiveRangeControl4,
              {
                label: __34("Logo Height", "digiblocks"),
                value: logoHeight,
                onChange: (value) => setAttributes({ logoHeight: value }),
                units: [
                  { label: "px", value: "px" },
                  { label: "%", value: "%" },
                  { label: "em", value: "em" },
                  { label: "rem", value: "rem" },
                  { label: "vh", value: "vh" }
                ],
                defaultUnit: "px",
                min: 0,
                max: 500,
                step: 1,
                defaultValues: {
                  desktop: 0,
                  tablet: 0,
                  mobile: 0
                }
              }
            )) : /* @__PURE__ */ wp.element.createElement(
              ResponsiveRangeControl4,
              {
                label: __34("Icon Size", "digiblocks"),
                value: iconSize,
                onChange: (value) => setAttributes({ iconSize: value }),
                units: [
                  { label: "px", value: "px" },
                  { label: "em", value: "em" },
                  { label: "rem", value: "rem" }
                ],
                defaultUnit: "px",
                min: 0,
                max: 1e3,
                step: 1,
                defaultValues: {
                  desktop: 30,
                  tablet: 28,
                  mobile: 26
                }
              }
            )
          ), /* @__PURE__ */ wp.element.createElement(
            TabPanelBody29,
            {
              tab: "options",
              name: "link",
              title: __34("Link Settings", "digiblocks"),
              initialOpen: false
            },
            /* @__PURE__ */ wp.element.createElement(
              ToggleControl29,
              {
                label: __34("Enable Link", "digiblocks"),
                checked: linkEnabled,
                onChange: (value) => {
                  setAttributes({ linkEnabled: value });
                  if (value && !linkUrl) {
                    setAttributes({ linkUrl: window.location.origin });
                  }
                },
                __nextHasNoMarginBottom: true
              }
            ),
            linkEnabled && /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement("p", { style: {
              fontSize: "12px",
              color: "#666",
              marginBottom: "12px",
              fontStyle: "italic"
            } }, __34("By default, the logo links to the site URL. You can change it by adding a custom URL below.", "digiblocks")), /* @__PURE__ */ wp.element.createElement(
              LinkControl8,
              {
                value: {
                  url: linkUrl,
                  opensInNewTab: linkOpenInNewTab,
                  rel: linkRel
                },
                settings: [
                  {
                    id: "opensInNewTab",
                    title: __34("Open in new tab", "digiblocks")
                  },
                  {
                    id: "rel",
                    title: __34("Add noopener noreferrer", "digiblocks")
                  }
                ],
                onChange: (newLink) => {
                  setAttributes({
                    linkUrl: newLink.url,
                    linkOpenInNewTab: newLink.opensInNewTab,
                    linkRel: newLink.rel
                  });
                },
                onRemove: () => {
                  setAttributes({
                    linkUrl: "",
                    linkOpenInNewTab: false,
                    linkRel: ""
                  });
                },
                suggestionsQuery: {
                  type: "post",
                  subtype: "any"
                },
                forceIsEditingLink: false
              }
            ))
          ));
        case "style":
          return /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(
            TabPanelBody29,
            {
              tab: "style",
              name: "colors",
              title: __34("Colors", "digiblocks"),
              initialOpen: true
            },
            logoType === "text" && /* @__PURE__ */ wp.element.createElement(
              TabPanel18,
              {
                className: "digiblocks-control-tabs first",
                activeClass: "active-tab",
                tabs: stateTabList
              },
              (tab) => /* @__PURE__ */ wp.element.createElement(
                PanelColorSettings27,
                {
                  title: __34(
                    tab.name === "normal" ? "Text Colors" : "Text Hover Colors",
                    "digiblocks"
                  ),
                  initialOpen: true,
                  enableAlpha: true,
                  colorSettings: [
                    {
                      value: tab.name === "normal" ? textColor : textHoverColor,
                      onChange: (value) => setAttributes(
                        tab.name === "normal" ? { textColor: value } : { textHoverColor: value }
                      ),
                      label: __34("Text Color", "digiblocks")
                    }
                  ]
                }
              )
            ),
            /* @__PURE__ */ wp.element.createElement(
              TabPanel18,
              {
                className: "digiblocks-control-tabs",
                activeClass: "active-tab",
                tabs: stateTabList
              },
              (tab) => /* @__PURE__ */ wp.element.createElement(
                PanelColorSettings27,
                {
                  title: __34(
                    tab.name === "normal" ? "Background Colors" : "Background Hover Colors",
                    "digiblocks"
                  ),
                  initialOpen: true,
                  enableAlpha: true,
                  colorSettings: [
                    {
                      value: tab.name === "normal" ? backgroundColor : backgroundHoverColor,
                      onChange: (value) => setAttributes(
                        tab.name === "normal" ? { backgroundColor: value } : { backgroundHoverColor: value }
                      ),
                      label: __34("Background Color", "digiblocks")
                    }
                  ]
                }
              )
            )
          ), logoType === "text" && /* @__PURE__ */ wp.element.createElement(
            TabPanelBody29,
            {
              tab: "style",
              name: "typography",
              title: __34("Typography", "digiblocks"),
              initialOpen: false
            },
            /* @__PURE__ */ wp.element.createElement(
              TypographyControl22,
              {
                label: __34("Text Typography", "digiblocks"),
                value: textTypography,
                onChange: (value) => setAttributes({ textTypography: value }),
                defaults: {
                  fontSize: { desktop: 28, tablet: 26, mobile: 24 },
                  fontSizeUnit: "px",
                  lineHeight: { desktop: 1.2, tablet: 1.2, mobile: 1.2 },
                  lineHeightUnit: "em"
                }
              }
            )
          ), /* @__PURE__ */ wp.element.createElement(
            TabPanelBody29,
            {
              tab: "style",
              name: "border",
              title: __34("Border", "digiblocks"),
              initialOpen: false
            },
            /* @__PURE__ */ wp.element.createElement(
              SelectControl29,
              {
                label: __34("Border Style", "digiblocks"),
                value: borderStyle || "none",
                options: borderStyleOptions,
                onChange: (value) => {
                  setAttributes({ borderStyle: value });
                },
                __next40pxDefaultSize: true,
                __nextHasNoMarginBottom: true
              }
            ),
            borderStyle && borderStyle !== "none" && /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(
              TabPanel18,
              {
                className: "digiblocks-control-tabs",
                activeClass: "active-tab",
                tabs: stateTabList
              },
              (tab) => /* @__PURE__ */ wp.element.createElement(
                PanelColorSettings27,
                {
                  title: __34(
                    tab.name === "normal" ? "Border Colors" : "Border Hover Colors",
                    "digiblocks"
                  ),
                  initialOpen: true,
                  enableAlpha: true,
                  colorSettings: [
                    {
                      value: tab.name === "normal" ? borderColor : borderHoverColor,
                      onChange: (value) => setAttributes(
                        tab.name === "normal" ? { borderColor: value } : { borderHoverColor: value }
                      ),
                      label: __34("Border Color", "digiblocks")
                    }
                  ]
                }
              )
            ), /* @__PURE__ */ wp.element.createElement(
              ResponsiveControl29,
              {
                label: __34("Border Width", "digiblocks")
              },
              /* @__PURE__ */ wp.element.createElement(
                DimensionControl26,
                {
                  values: borderWidth[localActiveDevice],
                  onChange: (value) => setAttributes({
                    borderWidth: {
                      ...borderWidth,
                      [localActiveDevice]: value
                    }
                  })
                }
              )
            ), /* @__PURE__ */ wp.element.createElement(
              ResponsiveControl29,
              {
                label: __34("Border Radius", "digiblocks")
              },
              /* @__PURE__ */ wp.element.createElement(
                DimensionControl26,
                {
                  values: borderRadius[localActiveDevice],
                  onChange: (value) => setAttributes({
                    borderRadius: {
                      ...borderRadius,
                      [localActiveDevice]: value
                    }
                  }),
                  units: [
                    { label: "px", value: "px" },
                    { label: "%", value: "%" }
                  ]
                }
              )
            ))
          ), /* @__PURE__ */ wp.element.createElement(
            TabPanelBody29,
            {
              tab: "style",
              name: "shadow",
              title: __34("Box Shadow", "digiblocks"),
              initialOpen: false
            },
            /* @__PURE__ */ wp.element.createElement(
              BoxShadowControl24,
              {
                normalValue: boxShadow,
                hoverValue: boxShadowHover,
                onNormalChange: (value) => setAttributes({ boxShadow: value }),
                onHoverChange: (value) => setAttributes({ boxShadowHover: value })
              }
            )
          ), /* @__PURE__ */ wp.element.createElement(
            TabPanelBody29,
            {
              tab: "style",
              name: "spacing",
              title: __34("Spacing", "digiblocks"),
              initialOpen: false
            },
            /* @__PURE__ */ wp.element.createElement(
              ResponsiveControl29,
              {
                label: __34("Padding", "digiblocks")
              },
              /* @__PURE__ */ wp.element.createElement(
                DimensionControl26,
                {
                  values: padding[localActiveDevice],
                  onChange: (value) => setAttributes({
                    padding: {
                      ...padding,
                      [localActiveDevice]: value
                    }
                  })
                }
              )
            ),
            /* @__PURE__ */ wp.element.createElement(
              ResponsiveControl29,
              {
                label: __34("Margin", "digiblocks")
              },
              /* @__PURE__ */ wp.element.createElement(
                DimensionControl26,
                {
                  values: margin[localActiveDevice],
                  onChange: (value) => setAttributes({
                    margin: {
                      ...margin,
                      [localActiveDevice]: value
                    }
                  })
                }
              )
            )
          ), /* @__PURE__ */ wp.element.createElement(
            TabPanelBody29,
            {
              tab: "style",
              name: "hover-effect",
              title: __34("Hover Effect", "digiblocks"),
              initialOpen: false
            },
            /* @__PURE__ */ wp.element.createElement(
              SelectControl29,
              {
                label: __34("Hover Effect", "digiblocks"),
                value: hoverEffect,
                options: hoverEffectOptions,
                onChange: (value) => setAttributes({ hoverEffect: value }),
                __next40pxDefaultSize: true,
                __nextHasNoMarginBottom: true
              }
            )
          ));
        case "advanced":
          return /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(
            TabPanelBody29,
            {
              tab: "advanced",
              name: "animation",
              title: __34("Animation", "digiblocks"),
              initialOpen: true
            },
            /* @__PURE__ */ wp.element.createElement(
              SelectControl29,
              {
                label: __34("Animation Effect", "digiblocks"),
                value: animation,
                options: animationOptions,
                onChange: (value) => setAttributes({ animation: value }),
                __next40pxDefaultSize: true,
                __nextHasNoMarginBottom: true
              }
            ),
            animation && animation !== "none" && /* @__PURE__ */ wp.element.createElement("div", { style: { marginTop: "10px" } }, /* @__PURE__ */ wp.element.createElement(
              Button27,
              {
                variant: "secondary",
                isSecondary: true,
                onClick: handlePreviewClick,
                style: { width: "100%" }
              },
              __34("Preview Animation", "digiblocks")
            ))
          ), /* @__PURE__ */ wp.element.createElement(
            TabPanelBody29,
            {
              tab: "advanced",
              name: "visibility",
              title: __34("Visibility", "digiblocks"),
              initialOpen: false
            },
            /* @__PURE__ */ wp.element.createElement("div", { className: "components-base-control__help", style: {
              padding: "12px",
              backgroundColor: "#f0f6fc",
              border: "1px solid #c3ddfd",
              borderRadius: "4px",
              marginBottom: "16px"
            } }, /* @__PURE__ */ wp.element.createElement("strong", null, __34("Editor Note:", "digiblocks")), /* @__PURE__ */ wp.element.createElement("br", null), __34("Hidden elements appear with reduced opacity in the editor for easy editing. Visibility changes only take effect on the frontend.", "digiblocks")),
            /* @__PURE__ */ wp.element.createElement(
              ToggleControl29,
              {
                label: __34("Hide on Desktop", "digiblocks"),
                checked: visibility.desktop,
                onChange: (value) => setAttributes({
                  visibility: {
                    ...visibility,
                    desktop: value
                  }
                }),
                __nextHasNoMarginBottom: true
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              ToggleControl29,
              {
                label: __34("Hide on Tablet", "digiblocks"),
                checked: visibility.tablet,
                onChange: (value) => setAttributes({
                  visibility: {
                    ...visibility,
                    tablet: value
                  }
                }),
                __nextHasNoMarginBottom: true
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              ToggleControl29,
              {
                label: __34("Hide on Mobile", "digiblocks"),
                checked: visibility.mobile,
                onChange: (value) => setAttributes({
                  visibility: {
                    ...visibility,
                    mobile: value
                  }
                }),
                __nextHasNoMarginBottom: true
              }
            )
          ), /* @__PURE__ */ wp.element.createElement(
            TabPanelBody29,
            {
              tab: "advanced",
              name: "additional",
              title: __34("Additional", "digiblocks"),
              initialOpen: false
            },
            /* @__PURE__ */ wp.element.createElement("div", { className: "components-base-control html-anchor-control" }, /* @__PURE__ */ wp.element.createElement("div", { className: "components-base-control__field" }, /* @__PURE__ */ wp.element.createElement("label", { className: "components-base-control__label", htmlFor: "html-anchor" }, __34("HTML anchor", "digiblocks")), /* @__PURE__ */ wp.element.createElement(
              "input",
              {
                className: "components-text-control__input",
                type: "text",
                id: "html-anchor",
                value: anchor || "",
                onChange: (e) => setAttributes({ anchor: e.target.value }),
                "aria-describedby": "html-anchor-help",
                autoCapitalize: "none",
                autoComplete: "off"
              }
            )), /* @__PURE__ */ wp.element.createElement("p", { id: "html-anchor-help", className: "components-base-control__help" }, __34(`Enter a word or two \u2014 without spaces \u2014 to make a unique web address just for this block, called an "anchor". Then, you'll be able to link directly to this section of your page.`, "digiblocks"))),
            /* @__PURE__ */ wp.element.createElement("div", { className: "components-base-control" }, /* @__PURE__ */ wp.element.createElement("div", { className: "components-base-control__field" }, /* @__PURE__ */ wp.element.createElement("label", { className: "components-base-control__label", htmlFor: "additional-css-classes" }, __34("Additional CSS class(es)", "digiblocks")), /* @__PURE__ */ wp.element.createElement(
              "input",
              {
                className: "components-text-control__input",
                type: "text",
                id: "additional-css-classes",
                value: customClasses || "",
                onChange: (e) => setAttributes({ customClasses: e.target.value }),
                "aria-describedby": "additional-css-classes-help",
                autoComplete: "off"
              }
            )), /* @__PURE__ */ wp.element.createElement("p", { id: "additional-css-classes-help", className: "components-base-control__help" }, __34("Separate multiple classes with spaces.", "digiblocks")))
          ));
        default:
          return null;
      }
    };
    const blockProps = useBlockProps54({
      className: `digiblocks-logo ${id} ${customClasses || ""}`,
      id: anchor || null
    });
    const renderLogo = () => {
      const logoContent = logoType === "image" ? imageUrl ? /* @__PURE__ */ wp.element.createElement(
        "img",
        {
          src: imageUrl,
          alt: imageAlt,
          className: "digiblocks-logo-image"
        }
      ) : /* @__PURE__ */ wp.element.createElement(MediaUploadCheck9, null, /* @__PURE__ */ wp.element.createElement(
        MediaUpload9,
        {
          onSelect: (media) => {
            setAttributes({
              imageId: media.id,
              imageUrl: media.url,
              imageAlt: media.alt || media.title || ""
            });
          },
          value: imageId,
          allowedTypes: ["image"],
          render: ({ open }) => /* @__PURE__ */ wp.element.createElement(
            "div",
            {
              className: "digiblocks-logo-placeholder",
              style: {
                padding: "20px",
                border: "2px dashed #ccc",
                textAlign: "center",
                color: "#999",
                cursor: "pointer"
              },
              onClick: open
            },
            __34("Select logo image", "digiblocks")
          )
        }
      )) : /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-logo-text-wrapper" }, textIcon && textIcon.svg && iconPosition === "above" && /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-logo-icon" }, /* @__PURE__ */ wp.element.createElement("span", { dangerouslySetInnerHTML: { __html: textIcon.svg } })), textIcon && textIcon.svg && iconPosition === "before" && /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-logo-icon" }, /* @__PURE__ */ wp.element.createElement("span", { dangerouslySetInnerHTML: { __html: textIcon.svg } })), /* @__PURE__ */ wp.element.createElement(
        RichText28,
        {
          className: "digiblocks-logo-text",
          tagName: "span",
          value: text,
          onChange: (value) => setAttributes({ text: value }),
          placeholder: __34("Enter your logo text...", "digiblocks"),
          allowedFormats: []
        }
      ), textIcon && textIcon.svg && iconPosition === "after" && /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-logo-icon" }, /* @__PURE__ */ wp.element.createElement("span", { dangerouslySetInnerHTML: { __html: textIcon.svg } })));
      const containerContent = /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-logo-container" }, logoContent);
      return linkEnabled ? /* @__PURE__ */ wp.element.createElement("a", { href: "#", onClick: (e) => e.preventDefault(), className: "digiblocks-logo-link" }, containerContent) : containerContent;
    };
    return /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(InspectorControls29, null, /* @__PURE__ */ wp.element.createElement(
      CustomTabPanel29,
      {
        tabs: tabList,
        activeTab,
        onSelect: setActiveTab
      },
      renderTabContent()
    )), /* @__PURE__ */ wp.element.createElement("style", { dangerouslySetInnerHTML: { __html: generateCSS() } }), /* @__PURE__ */ wp.element.createElement("div", { ...blockProps }, renderLogo()));
  };
  var edit_default29 = LogoEdit;

  // blocks/logo/save.js
  var { useBlockProps: useBlockProps55, RichText: RichText29 } = window.wp.blockEditor;
  var LogoSave = ({ attributes }) => {
    const {
      id,
      anchor,
      customClasses,
      logoType,
      imageUrl,
      imageAlt,
      text,
      textIcon,
      iconPosition,
      animation,
      hoverEffect,
      linkEnabled,
      linkUrl,
      linkOpenInNewTab,
      linkRel
    } = attributes;
    const blockClasses = [
      "digiblocks-logo",
      id,
      animation !== "none" ? `animate-${animation}` : "",
      hoverEffect !== "none" ? `has-hover-${hoverEffect}` : "",
      customClasses || ""
    ].filter(Boolean).join(" ");
    const commonProps = {
      className: blockClasses,
      id: anchor || null
    };
    const logoContent = logoType === "image" ? imageUrl ? /* @__PURE__ */ wp.element.createElement(
      "img",
      {
        src: imageUrl,
        alt: imageAlt,
        className: "digiblocks-logo-image"
      }
    ) : null : text || textIcon ? /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-logo-text-wrapper" }, textIcon && textIcon.svg && iconPosition === "above" && /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-logo-icon" }, /* @__PURE__ */ wp.element.createElement("span", { dangerouslySetInnerHTML: { __html: textIcon.svg } })), textIcon && textIcon.svg && iconPosition === "before" && /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-logo-icon" }, /* @__PURE__ */ wp.element.createElement("span", { dangerouslySetInnerHTML: { __html: textIcon.svg } })), text && /* @__PURE__ */ wp.element.createElement(
      RichText29.Content,
      {
        className: "digiblocks-logo-text",
        tagName: "span",
        value: text
      }
    ), textIcon && textIcon.svg && iconPosition === "after" && /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-logo-icon" }, /* @__PURE__ */ wp.element.createElement("span", { dangerouslySetInnerHTML: { __html: textIcon.svg } }))) : null;
    const containerContent = logoContent ? /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-logo-container" }, logoContent) : null;
    const finalLinkUrl = linkEnabled ? linkUrl || window.location.origin : null;
    if (linkEnabled && finalLinkUrl && containerContent) {
      return /* @__PURE__ */ wp.element.createElement("div", { ...commonProps }, /* @__PURE__ */ wp.element.createElement(
        "a",
        {
          href: finalLinkUrl,
          target: linkOpenInNewTab ? "_blank" : "_self",
          rel: linkOpenInNewTab ? "noopener noreferrer" : linkRel || void 0,
          className: "digiblocks-logo-link"
        },
        containerContent
      ));
    }
    return /* @__PURE__ */ wp.element.createElement("div", { ...commonProps }, containerContent);
  };
  var save_default29 = LogoSave;

  // blocks/navigation/edit.js
  var { __: __35 } = window.wp.i18n;
  var {
    useBlockProps: useBlockProps56,
    InspectorControls: InspectorControls30,
    PanelColorSettings: PanelColorSettings28,
    RichText: RichText30,
    LinkControl: LinkControl9
  } = window.wp.blockEditor;
  var {
    SelectControl: SelectControl30,
    RangeControl: RangeControl28,
    TabPanel: TabPanel19,
    ToggleControl: ToggleControl30,
    Button: Button28,
    Modal: Modal2,
    Tooltip: Tooltip9,
    __experimentalToggleGroupControl: ToggleGroupControl28,
    __experimentalToggleGroupControlOption: ToggleGroupControlOption28
  } = window.wp.components;
  var { useState: useState30, useEffect: useEffect30, useRef: useRef26 } = window.wp.element;
  var { useSelect: useSelect6 } = window.wp.data;
  var { useBlockId: useBlockId30, getDimensionCSS: getDimensionCSS26, animations: animations27, animationPreview: animationPreview27 } = digi.utils;
  var { tabIcons: tabIcons30 } = digi.icons;
  var { ResponsiveControl: ResponsiveControl30, ResponsiveButtonGroup: ResponsiveButtonGroup8, DimensionControl: DimensionControl27, TypographyControl: TypographyControl23, CustomTabPanel: CustomTabPanel30, TabPanelBody: TabPanelBody30, FontAwesomeControl: FontAwesomeControl4 } = digi.components;
  var NavigationEdit = ({ attributes, setAttributes, clientId }) => {
    const {
      id,
      anchor,
      visibility,
      customClasses,
      menuType,
      selectedMenu,
      customItems,
      flexWrap,
      orientation,
      align,
      columns,
      linkEffect,
      submenuEffect,
      mobileBreakpoint,
      showMobileToggle,
      mobileAlign,
      toggleIcon,
      customToggleIcon,
      toggleIconColor,
      toggleIconHoverColor,
      mobileToggleSize,
      mobileIconSize,
      textTypography,
      linkColor,
      linkHoverColor,
      linkBackgroundColor,
      linkHoverBackgroundColor,
      submenuBackgroundColor,
      submenuBorderColor,
      submenuMobileBackgroundColor,
      submenuMobileLinkColor,
      submenuMobileLinkHoverColor,
      submenuMobileLinkHoverBackgroundColor,
      itemSpacing,
      padding,
      borderRadius,
      animation,
      mobileFullWidth
    } = attributes;
    useBlockId30(id, clientId, setAttributes);
    const [localActiveDevice, setLocalActiveDevice] = useState30(window.digi.responsiveState.activeDevice);
    const [activeTab, setActiveTab] = useState30(() => {
      if (window.digi.uiState) {
        const savedTab = window.digi.uiState.getActiveTab(clientId);
        if (savedTab)
          return savedTab;
      }
      return "options";
    });
    const [iconModalOpen, setIconModalOpen] = useState30(false);
    const [isEditingLink, setIsEditingLink] = useState30(false);
    const [currentEditingItem, setCurrentEditingItem] = useState30(null);
    const [menuItems, setMenuItems] = useState30([]);
    const [isLoadingMenu, setIsLoadingMenu] = useState30(false);
    const [componentsLoaded, setComponentsLoaded] = useState30(false);
    useEffect30(() => {
      const checkComponents = () => {
        if (window.digi && window.digi.components && window.digi.components.FontAwesomeControl) {
          setComponentsLoaded(true);
          return true;
        }
        return false;
      };
      if (!checkComponents()) {
        const timeout = setTimeout(() => {
          if (checkComponents()) {
            clearTimeout(timeout);
          }
        }, 500);
        return () => clearTimeout(timeout);
      }
    }, []);
    useEffect30(() => {
      const unsubscribe = window.digi.responsiveState.subscribe((device) => {
        setLocalActiveDevice(device);
      });
      return unsubscribe;
    }, []);
    const menus = useSelect6((select) => {
      const menuEntities = select("core").getMenus();
      return menuEntities || [];
    }, []);
    useEffect30(() => {
      if (menuType === "wordpress" && selectedMenu && selectedMenu.id) {
        setIsLoadingMenu(true);
        window.wp.ajax.post("digiblocks_get_menu_items", {
          menu_id: selectedMenu.id,
          navigation_nonce: digiBlocksData.navigation_nonce
        }).then((response) => {
          if (response && Array.isArray(response)) {
            setMenuItems(response);
          } else if (response && response.success && Array.isArray(response.data)) {
            setMenuItems(response.data);
          } else {
            console.error("Invalid response format:", response);
            setMenuItems([]);
          }
          setIsLoadingMenu(false);
        }).catch((error) => {
          console.error("AJAX error:", error);
          setMenuItems([]);
          setIsLoadingMenu(false);
        });
      }
    }, [menuType, selectedMenu]);
    const addCustomItem = () => {
      const newItem = {
        id: `nav-item-${Date.now()}`,
        text: __35("Menu Item", "digiblocks"),
        url: "",
        opensInNewTab: false,
        rel: "",
        icon: null,
        iconPosition: "before",
        submenu: []
      };
      setAttributes({
        customItems: [...customItems, newItem]
      });
    };
    const updateCustomItem = (index, field, value) => {
      const newItems = [...customItems];
      newItems[index] = { ...newItems[index], [field]: value };
      setAttributes({ customItems: newItems });
    };
    const removeCustomItem = (index) => {
      const newItems = customItems.filter((_, i) => i !== index);
      setAttributes({ customItems: newItems });
    };
    const moveCustomItem = (index, direction) => {
      const newItems = [...customItems];
      if (direction === "up" && index > 0) {
        [newItems[index], newItems[index - 1]] = [newItems[index - 1], newItems[index]];
      } else if (direction === "down" && index < newItems.length - 1) {
        [newItems[index], newItems[index + 1]] = [newItems[index + 1], newItems[index]];
      }
      setAttributes({ customItems: newItems });
    };
    const duplicateItem = (index) => {
      const newItems = [...customItems];
      const duplicatedItem = { ...customItems[index], id: `nav-item-${Date.now()}` };
      newItems.splice(index + 1, 0, duplicatedItem);
      setAttributes({ customItems: newItems });
    };
    const previewTimeoutRef = useRef26(null);
    useEffect30(() => {
      if (animation && animation !== "none") {
        const timeoutId = setTimeout(() => {
          animationPreview27(id, animation, animations27, previewTimeoutRef);
        }, 100);
        return () => clearTimeout(timeoutId);
      }
    }, [animation]);
    const handlePreviewClick = () => {
      animationPreview27(id, animation, animations27, previewTimeoutRef);
    };
    const animationOptions = [
      { label: __35("None", "digiblocks"), value: "none" },
      ...Object.keys(animations27).map((animation2) => ({
        label: animation2.replace(/-/g, " ").replace(/\b\w/g, (l) => l.toUpperCase()),
        value: animation2
      }))
    ];
    const toggleIconOptions = [
      { label: __35("Hamburger", "digiblocks"), value: "hamburger" },
      { label: __35("Custom Icon", "digiblocks"), value: "custom" }
    ];
    const linkEffectOptions = [
      { label: __35("None", "digiblocks"), value: "none" },
      { label: __35("Underline", "digiblocks"), value: "underline" },
      { label: __35("Overline", "digiblocks"), value: "overline" },
      { label: __35("Border Bottom", "digiblocks"), value: "border-bottom" },
      { label: __35("Border Top", "digiblocks"), value: "border-top" },
      { label: __35("Background Slide", "digiblocks"), value: "bg-slide" },
      { label: __35("Scale", "digiblocks"), value: "scale" }
    ];
    const submenuEffectOptions = [
      { label: __35("Fade", "digiblocks"), value: "fade" },
      { label: __35("Slide Up", "digiblocks"), value: "slide-up" },
      { label: __35("Slide Down", "digiblocks"), value: "slide-down" },
      { label: __35("Scale", "digiblocks"), value: "scale" }
    ];
    const tabList = [
      {
        name: "options",
        title: __35("Options", "digiblocks"),
        icon: tabIcons30.optionsIcon
      },
      {
        name: "style",
        title: __35("Style", "digiblocks"),
        icon: tabIcons30.styleIcon
      },
      {
        name: "advanced",
        title: __35("Advanced", "digiblocks"),
        icon: tabIcons30.advancedIcon
      }
    ];
    const stateTabList = [
      {
        name: "normal",
        title: __35("Normal", "digiblocks"),
        className: "digiblocks-tab-1 normal"
      },
      {
        name: "hover",
        title: __35("Hover", "digiblocks"),
        className: "digiblocks-tab-2 hover"
      }
    ];
    const FontAwesomeControl6 = componentsLoaded ? window.digi.components.FontAwesomeControl : null;
    const generateCSS = () => {
      const activeDevice = window.digi.responsiveState.activeDevice;
      let textTypographyCSS = "";
      if (textTypography) {
        if (textTypography.fontFamily) {
          textTypographyCSS += `font-family: ${textTypography.fontFamily};`;
        }
        if (textTypography.fontSize && textTypography.fontSize[activeDevice]) {
          textTypographyCSS += `font-size: ${textTypography.fontSize[activeDevice]}${textTypography.fontSizeUnit || "px"};`;
        }
        if (textTypography.fontWeight) {
          textTypographyCSS += `font-weight: ${textTypography.fontWeight};`;
        }
        if (textTypography.fontStyle) {
          textTypographyCSS += `font-style: ${textTypography.fontStyle};`;
        }
        if (textTypography.textTransform) {
          textTypographyCSS += `text-transform: ${textTypography.textTransform};`;
        }
        if (textTypography.textDecoration) {
          textTypographyCSS += `text-decoration: ${textTypography.textDecoration};`;
        }
        if (textTypography.lineHeight && textTypography.lineHeight[activeDevice]) {
          textTypographyCSS += `line-height: ${textTypography.lineHeight[activeDevice]}${textTypography.lineHeightUnit || "em"};`;
        }
        if (textTypography.letterSpacing && textTypography.letterSpacing[activeDevice]) {
          textTypographyCSS += `letter-spacing: ${textTypography.letterSpacing[activeDevice]}${textTypography.letterSpacingUnit || "px"};`;
        }
      }
      let columnsCSS = "";
      if (orientation[activeDevice] !== "vertical" && columns[activeDevice] > 1) {
        columnsCSS = `
                display: grid;
                grid-template-columns: repeat(${columns[activeDevice]}, 1fr);
                flex-direction: unset;
            `;
      }
      let linkEffectCSS = "";
      if (linkEffect !== "none") {
        switch (linkEffect) {
          case "underline":
            linkEffectCSS = `
                        .${id} .digiblocks-navigation-link {
                            position: relative;
                        }
                        .${id} .digiblocks-navigation-link::after {
                            content: '';
                            position: absolute;
                            bottom: 0;
                            left: 0;
                            width: 0;
                            height: 2px;
                            background-color: ${linkHoverColor};
                            transition: width 0.3s ease;
                        }
                        .${id} .digiblocks-navigation-link:hover::after,
                        .${id} .current-menu-item .digiblocks-navigation-link::after {
                            width: 100%;
                        }
                    `;
            break;
          case "overline":
            linkEffectCSS = `
                        .${id} .digiblocks-navigation-link {
                            position: relative;
                        }
                        .${id} .digiblocks-navigation-link::before {
                            content: '';
                            position: absolute;
                            top: 0;
                            left: 0;
                            width: 0;
                            height: 2px;
                            background-color: ${linkHoverColor};
                            transition: width 0.3s ease;
                            opacity: 0;
                        }
                        .${id} .digiblocks-navigation-link:hover::before,
                        .${id} .current-menu-item .digiblocks-navigation-link::before {
                            width: 100%;
                            opacity: 1;
                        }
                    `;
            break;
          case "border-bottom":
            linkEffectCSS = `
                        .${id} .digiblocks-navigation-link {
                            border-bottom: 2px solid transparent;
                            transition: all 0.3s ease;
                        }
                        .${id} .digiblocks-navigation-link:hover,
                        .${id} .current-menu-item .digiblocks-navigation-link {
                            border-bottom-color: ${linkHoverColor};
                        }
                    `;
            break;
          case "border-top":
            linkEffectCSS = `
                        .${id} .digiblocks-navigation-link {
                            border-top: 2px solid transparent;
                            transition: all 0.3s ease;
                        }
                        .${id} .digiblocks-navigation-link:hover,
                        .${id} .current-menu-item .digiblocks-navigation-link {
                            border-top-color: ${linkHoverColor};
                        }
                    `;
            break;
          case "bg-slide":
            linkEffectCSS = `
                        .${id} .digiblocks-navigation-link {
                            position: relative;
                            overflow: hidden;
                        }
                        .${id} .digiblocks-navigation-link::before {
                            content: '';
                            position: absolute;
                            top: 0;
                            left: -100%;
                            width: 100%;
                            height: 100%;
                            background-color: ${linkHoverBackgroundColor};
                            transition: left 0.3s ease;
                            z-index: -1;
                        }
                        .${id} .digiblocks-navigation-link:hover::before,
                        .${id} .current-menu-item .digiblocks-navigation-link::before {
                            left: 0;
                        }
                    `;
            break;
          case "scale":
            linkEffectCSS = `
                        .${id} .digiblocks-navigation-link:hover,
                        .${id} .current-menu-item .digiblocks-navigation-link {
                            transform: scale(1.05);
                        }
                    `;
            break;
        }
      }
      let submenuEffectCSS = "";
      switch (submenuEffect) {
        case "fade":
          submenuEffectCSS = `
                    .${id} .digiblocks-navigation-submenu {
                        opacity: 0;
                        visibility: hidden;
                        transition: opacity 0.3s ease, visibility 0.3s ease;
                    }
                    .${id} .digiblocks-navigation-menu-item:hover > .digiblocks-navigation-submenu {
                        opacity: 1;
                        visibility: visible;
                        display: block !important;
                    }
                `;
          break;
        case "slide-up":
          submenuEffectCSS = `
                    .${id} .digiblocks-navigation-submenu {
                        opacity: 0;
                        visibility: hidden;
                        transform: translateY(10px);
                        transition: opacity 0.3s ease, visibility 0.3s ease, transform 0.3s ease;
                    }
                    .${id} .digiblocks-navigation-menu-item:hover > .digiblocks-navigation-submenu {
                        opacity: 1;
                        visibility: visible;
                        transform: translateY(0);
                        display: block !important;
                    }
                `;
          break;
        case "slide-down":
          submenuEffectCSS = `
                    .${id} .digiblocks-navigation-submenu {
                        opacity: 0;
                        visibility: hidden;
                        transform: translateY(-10px);
                        transition: opacity 0.3s ease, visibility 0.3s ease, transform 0.3s ease;
                    }
                    .${id} .digiblocks-navigation-menu-item:hover > .digiblocks-navigation-submenu {
                        opacity: 1;
                        visibility: visible;
                        transform: translateY(0);
                        display: block !important;
                    }
                `;
          break;
        case "scale":
          submenuEffectCSS = `
                    .${id} .digiblocks-navigation-submenu {
                        opacity: 0;
                        visibility: hidden;
                        transform: scale(0.95);
                        transition: opacity 0.3s ease, visibility 0.3s ease, transform 0.3s ease;
                    }
                    .${id} .digiblocks-navigation-menu-item:hover > .digiblocks-navigation-submenu {
                        opacity: 1;
                        visibility: visible;
                        transform: scale(1);
                        display: block !important;
                    }
                `;
          break;
      }
      return `
            /* Navigation Block - ${id} */
            .${id} {
                display: flex;
                flex-direction: column;
                gap: 10px;
                ${mobileFullWidth && activeDevice === "mobile" ? "width: 100%;" : ""}
                transition: all 0.3s ease;
            }
            
            .${id} .digiblocks-navigation-menu {
                display: flex;
                ${columnsCSS}
                ${flexWrap[activeDevice] === "nowrap" ? "flex-wrap: nowrap;" : "flex-wrap: wrap;"}
                ${orientation[activeDevice] === "horizontal" ? "flex-direction: row;" : "flex-direction: column;"}
                justify-content: ${align[activeDevice]};
                gap: ${itemSpacing[activeDevice]}px;
                list-style: none;
                margin: 0;
                padding: 0;
            }
            
            .${id} .digiblocks-navigation-link {
                display: flex;
                align-items: center;
                justify-content: space-between;
                gap: 8px;
                text-decoration: none;
                ${getDimensionCSS26(padding, "padding", activeDevice)}
                color: ${linkColor};
                background-color: ${linkBackgroundColor};
                ${getDimensionCSS26(borderRadius, "border-radius", activeDevice)}
                transition: all 0.3s ease;
                ${textTypographyCSS}
            }
            
            .${id} .digiblocks-navigation-link:hover {
                color: ${linkHoverColor};
                background-color: ${linkHoverBackgroundColor};
            }
            
            .${id} .digiblocks-navigation-icon {
                display: flex;
                align-items: center;
                justify-content: center;
            }
            
            .${id} .digiblocks-navigation-icon svg {
                width: 1em;
                height: 1em;
                fill: currentColor;
            }

			.${id} .digiblocks-navigation-submenu .digiblocks-navigation-link::before {
				display: none;
			}
            
            /* Base submenu styles */
            .${id} .digiblocks-navigation-submenu {
                position: absolute;
                background-color: ${submenuBackgroundColor};
                border: 1px solid ${submenuBorderColor};
                border-radius: 4px;
                padding: 0;
                min-width: 200px;
                box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
                z-index: 100;
                list-style: none;
                margin: 0;
            }
            
            /* Top level submenu positioning */
            .${id} > .digiblocks-navigation-menu > .digiblocks-navigation-menu-item > .digiblocks-navigation-submenu {
                top: 100%;
                left: 0;
            }
            
            /* Nested submenu positioning */
            .${id} .digiblocks-navigation-submenu .digiblocks-navigation-submenu {
                top: 0;
                left: 100%;
                margin-top: -1px;
            }
            
            /* RTL support for nested submenus */
            .rtl .${id} .digiblocks-navigation-submenu .digiblocks-navigation-submenu {
                left: auto;
                right: 100%;
            }
            
            /* RTL support for top level submenus */
            .rtl .${id} > .digiblocks-navigation-menu > .digiblocks-navigation-menu-item > .digiblocks-navigation-submenu {
                left: auto;
                right: 0;
            }
            
            /* Special case for vertical orientation */
            ${orientation[activeDevice] === "vertical" ? `
            .${id} > .digiblocks-navigation-menu > .digiblocks-navigation-menu-item > .digiblocks-navigation-submenu {
                top: 0;
                left: 100%;
            }
            .rtl .${id} > .digiblocks-navigation-menu > .digiblocks-navigation-menu-item > .digiblocks-navigation-submenu {
                left: auto;
                right: 100%;
            }
            ` : ""}
            
            /* Submenu icon styling */
            .${id} .digiblocks-navigation-submenu-icon {
                display: inline-flex;
                align-items: center;
                justify-content: center;
            }
            
            .${id} .digiblocks-navigation-submenu-icon svg {
                width: 12px;
                height: 12px;
                fill: currentColor;
            }
            
            /* Mobile toggle with bars */
            .${id} .digiblocks-mobile-toggle {
                display: none;
                height: ${mobileToggleSize[activeDevice]}px;
                width: ${mobileToggleSize[activeDevice]}px;
                cursor: pointer;
                justify-content: center;
                align-items: center;
                padding: 0;
                background: none;
                border: none;
                transition: all 0.3s ease;
            }
            
            .${id} .digiblocks-mobile-bars {
                display: flex;
                position: relative;
                z-index: 10;
                height: ${Math.round(mobileIconSize[activeDevice] * 0.6)}px;
                width: ${mobileIconSize[activeDevice]}px;
                cursor: pointer;
                align-items: center;
                justify-content: center;
            }
            
            .${id} .digiblocks-mobile-bars span {
                position: absolute;
                display: flex;
                height: ${Math.round(mobileIconSize[activeDevice] * 0.08)}px;
                width: 100%;
                border-radius: 0.75rem;
                background-color: ${toggleIconColor};
                transition: all 0.3s ease-in-out;
            }
            
            .${id} .digiblocks-mobile-bars span:first-child {
                top: 0;
                left: 0;
            }
            
            .${id} .digiblocks-mobile-bars span:nth-child(2) {
                top: 50%;
                left: 0;
                transform: translate(0, -50%);
            }
            
            .${id} .digiblocks-mobile-bars span:nth-child(3) {
                bottom: 0;
                left: 0;
            }
            
            /* Mobile menu open animation */
            .${id} .digiblocks-mobile-toggle.is-open .digiblocks-mobile-bars span:first-child {
                top: 50%;
                transform: translateY(-50%) rotate(45deg);
            }
            
            .${id} .digiblocks-mobile-toggle.is-open .digiblocks-mobile-bars span:nth-child(2) {
                opacity: 0;
            }
            
            .${id} .digiblocks-mobile-toggle.is-open .digiblocks-mobile-bars span:nth-child(3) {
                bottom: 50%;
                transform: translateY(50%) rotate(-45deg);
            }
            
            .${id} .digiblocks-mobile-toggle:hover .digiblocks-mobile-bars span {
                background-color: ${toggleIconHoverColor};
            }

			.${id} .digiblocks-navigation-submenu .digiblocks-navigation-link {
				white-space: nowrap;
				line-height: 1.6;
			}

            /* Submenu toggle button styles */
            .${id} .digiblocks-navigation-link-sub {
                display: flex;
                align-items: stretch;
                justify-content: space-between;
            }
            
            .${id} .digiblocks-navigation-link-sub .digiblocks-navigation-link {
                flex: 1;
            }

            .${id} .digiblocks-submenu-toggle {
                display: none;
                cursor: pointer;
                padding: 0 .907em;
                font-weight: 400;
                background: none;
                border: none;
                color: inherit;
            }
            
            .${id} .digiblocks-submenu-toggle svg {
                width: 1em;
                height: 100%;
                fill: currentColor;
                display: block;
            }
            
            .${id} .digiblocks-submenu-toggle .icon-minus {
                display: none;
            }
            
            .${id} .digiblocks-submenu-toggle.is-open .icon-plus {
                display: none;
            }
            
            .${id} .digiblocks-submenu-toggle.is-open .icon-minus {
                display: block;
            }
            
            /* Editor specific styles */
            .${id} .digiblocks-navigation-item-controls {
                display: flex;
                gap: 5px;
                position: absolute;
                right: 0;
                top: 0;
                background-color: #fff;
                padding: 2px;
                border-radius: 3px;
                box-shadow: 0 1px 3px rgba(0,0,0,0.12);
                z-index: 10;
                opacity: 0;
                transition: opacity 0.3s ease;
            }
            
            .${id} .digiblocks-navigation-menu-item {
                position: relative;
            }
            
            .${id} .digiblocks-navigation-menu-item:hover > .digiblocks-navigation-item-controls {
                opacity: 1;
            }
            
            /* Navigation Menu Placeholder */
            .${id} .digiblocks-navigation-placeholder {
                color: #757575;
                background-color: #f0f0f0;
                border: 1px dashed #ccc;
                padding: 20px;
                text-align: center;
                border-radius: 4px;
                margin: 10px 0;
                min-height: 40px;
                display: flex;
                align-items: center;
                justify-content: center;
                transition: all 0.3s ease;
            }
            
            .${id} .digiblocks-navigation-placeholder:hover {
                border-color: #999;
                background-color: #f5f5f5;
            }
            
            .${id} .digiblocks-menu-placeholder {
                background-color: rgba(0, 0, 0, 0.05);
                padding: 8px 16px;
                border-radius: 4px;
                margin-bottom: 8px;
            }
            
            /* Loading spinner */
            .${id} .digiblocks-loading-spinner {
                display: inline-block;
                width: 20px;
                height: 20px;
                margin-right: 10px;
                border: 3px solid rgba(0, 0, 0, 0.1);
                border-radius: 50%;
                border-top-color: #646970;
                animation: digiblocks-spinner 1s linear infinite;
            }
            
            @keyframes digiblocks-spinner {
                to {
                    transform: rotate(360deg);
                }
            }

            /* Link Effects */
            ${linkEffectCSS}
            
            /* Submenu Effects */
            ${submenuEffectCSS}

            /* Mobile Styles */
            @media (max-width: ${mobileBreakpoint}px) {
                .${id} {
                    ${mobileFullWidth ? "width: 100%;" : ""}
                }
                
                .${id} .digiblocks-mobile-toggle {
                    display: ${showMobileToggle ? "flex" : "none"};
                    align-items: center;
                    justify-content: center;
					align-self: ${mobileAlign};
                }
                
                .${id} .digiblocks-navigation-menu {
                    display: ${showMobileToggle ? "none" : "flex"};
                    flex-wrap: wrap;
                    ${showMobileToggle ? `
                        position: absolute;
                        top: 100%;
                        left: 0;
                        right: 0;
                        background-color: ${submenuBackgroundColor};
                        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
                        border-radius: 4px;
                        border: 1px solid ${submenuBorderColor};
                        gap: 0;
                        z-index: 1000;
                        opacity: 0;
                        visibility: hidden;
                        transform: translateY(-10px);
                        transition: opacity 0.3s ease, visibility 0.3s ease, transform 0.3s ease;
                    ` : ""}
                }
                
                .${id} .digiblocks-navigation-menu.is-open {
                    display: flex;
                    opacity: 1;
                    visibility: visible;
                    transform: translateY(0);
                }
                
                /* Override hover behavior in mobile */
                .${id} .digiblocks-navigation-menu-item:hover > .digiblocks-navigation-submenu {
                    display: none;
                }
                
                .${id} .digiblocks-submenu-toggle {
                    display: inline-flex;
                }
            }

			/* Visibility Controls */
			${visibility.desktop ? `
				@media (min-width: 992px) {
					.${id} {
						opacity: 0.5 !important;
					}
				}
			` : ""}

			${visibility.tablet ? `
				@media (min-width: 768px) and (max-width: 991px) {
					.${id} {
						opacity: 0.5 !important;
					}
				}
			` : ""}

			${visibility.mobile ? `
				@media (max-width: 767px) {
					.${id} {
						opacity: 0.5 !important;
					}
				}
			` : ""}
        `;
    };
    const renderWordPressMenuItem = (item) => {
      const childItems = menuItems.filter(
        (childItem) => childItem.menu_item_parent === item.ID.toString() || childItem.menu_item_parent === item.ID
      );
      const hasChildren = childItems.length > 0;
      const getSubmenuIcon = (hasChildren2, isTopLevel2) => {
        if (!hasChildren2)
          return null;
        if (isTopLevel2) {
          return /* @__PURE__ */ wp.element.createElement("span", { className: "digiblocks-navigation-submenu-icon" }, /* @__PURE__ */ wp.element.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 448 512", width: "1em", height: "1em" }, /* @__PURE__ */ wp.element.createElement("path", { d: "M241 369c-9.4 9.4-24.6 9.4-33.9 0L47 209c-9.4-9.4-9.4-24.6 0-33.9s24.6-9.4 33.9 0l143 143L367 175c9.4-9.4 24.6-9.4 33.9 0s9.4 24.6 0 33.9L241 369z" })));
        } else {
          const isRtl = document.documentElement.dir === "rtl";
          if (isRtl) {
            return /* @__PURE__ */ wp.element.createElement("span", { className: "digiblocks-navigation-submenu-icon submenu-icon-rtl" }, /* @__PURE__ */ wp.element.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 320 512", width: "1em", height: "1em" }, /* @__PURE__ */ wp.element.createElement("path", { d: "M47 239c-9.4 9.4-9.4 24.6 0 33.9L207 433c9.4 9.4 24.6 9.4 33.9 0s9.4-24.6 0-33.9L97.9 256 241 113c9.4-9.4 9.4-24.6 0-33.9s-24.6-9.4-33.9 0L47 239z" })));
          } else {
            return /* @__PURE__ */ wp.element.createElement("span", { className: "digiblocks-navigation-submenu-icon submenu-icon-ltr" }, /* @__PURE__ */ wp.element.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 320 512", width: "1em", height: "1em" }, /* @__PURE__ */ wp.element.createElement("path", { d: "M273 239c9.4 9.4 9.4 24.6 0 33.9L113 433c-9.4 9.4-24.6 9.4-33.9 0s-9.4-24.6 0-33.9l143-143L79 113c-9.4-9.4-9.4-24.6 0-33.9s24.6-9.4 33.9 0L273 239z" })));
          }
        }
      };
      const getItemDepth = (item2) => {
        let depth = 0;
        let currentItem = item2;
        while (currentItem.menu_item_parent && currentItem.menu_item_parent !== "0" && currentItem.menu_item_parent !== 0) {
          depth++;
          currentItem = menuItems.find(
            (menuItem) => menuItem.ID === currentItem.menu_item_parent || menuItem.ID.toString() === currentItem.menu_item_parent
          );
          if (!currentItem)
            break;
        }
        return depth;
      };
      const isTopLevel = item.menu_item_parent === "0" || item.menu_item_parent === 0 || !item.menu_item_parent;
      const additionalClasses = hasChildren ? " has-submenu menu-item-has-children" : "";
      const icon = getSubmenuIcon(hasChildren, isTopLevel);
      return /* @__PURE__ */ wp.element.createElement("li", { key: item.ID, className: `digiblocks-navigation-menu-item${additionalClasses}` }, hasChildren ? /* @__PURE__ */ wp.element.createElement("span", { className: "digiblocks-navigation-link-sub" }, /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-navigation-link wordpress-menu-item" }, /* @__PURE__ */ wp.element.createElement("span", null, item.title), icon), /* @__PURE__ */ wp.element.createElement("button", { className: "digiblocks-submenu-toggle" }, /* @__PURE__ */ wp.element.createElement("svg", { className: "icon-plus", xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 448 512", width: "1em", height: "1em" }, /* @__PURE__ */ wp.element.createElement("path", { d: "M248 72c0-13.3-10.7-24-24-24s-24 10.7-24 24l0 160L40 232c-13.3 0-24 10.7-24 24s10.7 24 24 24l160 0 0 160c0 13.3 10.7 24 24 24s24-10.7 24-24l0-160 160 0c13.3 0 24-10.7 24-24s-10.7-24-24-24l-160 0 0-160z" })), /* @__PURE__ */ wp.element.createElement("svg", { className: "icon-minus", xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 448 512", width: "1em", height: "1em" }, /* @__PURE__ */ wp.element.createElement("path", { d: "M432 256c0 13.3-10.7 24-24 24L40 280c-13.3 0-24-10.7-24-24s10.7-24 24-24l368 0c13.3 0 24 10.7 24 24z" })))) : /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-navigation-link wordpress-menu-item" }, /* @__PURE__ */ wp.element.createElement("span", null, item.title), icon), hasChildren && /* @__PURE__ */ wp.element.createElement("ul", { className: `digiblocks-navigation-submenu depth-${getItemDepth(item) + 1}` }, childItems.map((childItem) => renderWordPressMenuItem(childItem))));
    };
    const handleLinkEdit = (index) => {
      setCurrentEditingItem(index);
      setIsEditingLink(true);
    };
    const renderCustomItem = (item, index) => {
      const hasChildren = item.submenu && item.submenu.length > 0;
      const iconElement = item.icon && item.icon.svg ? /* @__PURE__ */ wp.element.createElement(
        "span",
        {
          className: "digiblocks-navigation-icon",
          dangerouslySetInnerHTML: { __html: item.icon.svg }
        }
      ) : null;
      return /* @__PURE__ */ wp.element.createElement("li", { key: item.id, className: `digiblocks-navigation-menu-item ${hasChildren ? "has-submenu menu-item-has-children" : ""}` }, hasChildren ? /* @__PURE__ */ wp.element.createElement("span", { className: "digiblocks-navigation-link-sub" }, /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-navigation-link" }, (item.iconPosition === "before" || !item.iconPosition) && iconElement, /* @__PURE__ */ wp.element.createElement(
        RichText30,
        {
          value: item.text,
          onChange: (value) => updateCustomItem(index, "text", value),
          placeholder: __35("Menu Item", "digiblocks"),
          allowedFormats: [],
          tagName: "span"
        }
      ), item.iconPosition === "after" && iconElement), /* @__PURE__ */ wp.element.createElement("button", { className: "digiblocks-submenu-toggle" }, /* @__PURE__ */ wp.element.createElement("svg", { className: "icon-plus", xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 448 512", width: "1em", height: "1em" }, /* @__PURE__ */ wp.element.createElement("path", { d: "M248 72c0-13.3-10.7-24-24-24s-24 10.7-24 24l0 160L40 232c-13.3 0-24 10.7-24 24s10.7 24 24 24l160 0 0 160c0 13.3 10.7 24 24 24s24-10.7 24-24l0-160 160 0c13.3 0 24-10.7 24-24s-10.7-24-24-24l-160 0 0-160z" })), /* @__PURE__ */ wp.element.createElement("svg", { className: "icon-minus", xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 448 512", width: "1em", height: "1em" }, /* @__PURE__ */ wp.element.createElement("path", { d: "M432 256c0 13.3-10.7 24-24 24L40 280c-13.3 0-24-10.7-24-24s10.7-24 24-24l368 0c13.3 0 24 10.7 24 24z" })))) : /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-navigation-link" }, (item.iconPosition === "before" || !item.iconPosition) && iconElement, /* @__PURE__ */ wp.element.createElement(
        RichText30,
        {
          value: item.text,
          onChange: (value) => updateCustomItem(index, "text", value),
          placeholder: __35("Menu Item", "digiblocks"),
          allowedFormats: [],
          tagName: "span"
        }
      ), item.iconPosition === "after" && iconElement), /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-navigation-item-controls" }, /* @__PURE__ */ wp.element.createElement(Tooltip9, { text: __35("Edit Icon", "digiblocks") }, /* @__PURE__ */ wp.element.createElement(
        Button28,
        {
          icon: "admin-customizer",
          onClick: () => {
            setCurrentEditingItem(index);
            setIconModalOpen(true);
          },
          isSmall: true
        }
      )), /* @__PURE__ */ wp.element.createElement(Tooltip9, { text: __35("Link", "digiblocks") }, /* @__PURE__ */ wp.element.createElement(
        Button28,
        {
          icon: "admin-links",
          onClick: () => handleLinkEdit(index),
          isSmall: true,
          variant: item.url && item.url !== "#" ? "primary" : "secondary"
        }
      )), /* @__PURE__ */ wp.element.createElement(Tooltip9, { text: __35("Move Up", "digiblocks") }, /* @__PURE__ */ wp.element.createElement(
        Button28,
        {
          icon: "arrow-up-alt2",
          onClick: () => moveCustomItem(index, "up"),
          disabled: index === 0,
          isSmall: true
        }
      )), /* @__PURE__ */ wp.element.createElement(Tooltip9, { text: __35("Move Down", "digiblocks") }, /* @__PURE__ */ wp.element.createElement(
        Button28,
        {
          icon: "arrow-down-alt2",
          onClick: () => moveCustomItem(index, "down"),
          disabled: index === customItems.length - 1,
          isSmall: true
        }
      )), /* @__PURE__ */ wp.element.createElement(Tooltip9, { text: __35("Duplicate", "digiblocks") }, /* @__PURE__ */ wp.element.createElement(
        Button28,
        {
          icon: "admin-page",
          onClick: () => duplicateItem(index),
          isSmall: true
        }
      )), /* @__PURE__ */ wp.element.createElement(Tooltip9, { text: __35("Remove", "digiblocks") }, /* @__PURE__ */ wp.element.createElement(
        Button28,
        {
          icon: "trash",
          onClick: () => removeCustomItem(index),
          isSmall: true
        }
      ))), hasChildren && item.submenu && /* @__PURE__ */ wp.element.createElement("ul", { className: "digiblocks-navigation-submenu" }, item.submenu.map((subItem, subIndex) => /* @__PURE__ */ wp.element.createElement("li", { key: subItem.id, className: "digiblocks-navigation-menu-item" }, /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-navigation-link" }, /* @__PURE__ */ wp.element.createElement("span", null, subItem.text))))));
    };
    const renderMenuPreview = () => {
      if (menuType === "wordpress" && selectedMenu) {
        return /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-navigation-menu-preview" }, /* @__PURE__ */ wp.element.createElement("ul", { className: "digiblocks-navigation-menu" }, isLoadingMenu ? /* @__PURE__ */ wp.element.createElement("li", { className: "digiblocks-menu-placeholder" }, /* @__PURE__ */ wp.element.createElement("span", { className: "digiblocks-loading-spinner" }), __35("Loading menu items...", "digiblocks")) : menuItems.length > 0 ? (
          // Only render top-level items here
          menuItems.filter((item) => item.menu_item_parent === "0" || item.menu_item_parent === 0 || !item.menu_item_parent).map((item) => renderWordPressMenuItem(item))
        ) : /* @__PURE__ */ wp.element.createElement("li", { className: "digiblocks-menu-placeholder" }, __35("Menu:", "digiblocks"), " ", selectedMenu.name)));
      } else if (menuType === "custom" && customItems.length > 0) {
        return /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-navigation-menu-preview" }, /* @__PURE__ */ wp.element.createElement("ul", { className: "digiblocks-navigation-menu" }, customItems.map((item, index) => renderCustomItem(item, index))));
      } else {
        return /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-navigation-placeholder" }, menuType === "wordpress" ? __35("Please select a menu to display", "digiblocks") : __35("Add menu items to get started", "digiblocks"));
      }
    };
    const renderTabContent = () => {
      switch (activeTab) {
        case "options":
          return /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(
            TabPanelBody30,
            {
              tab: "options",
              name: "menu-selection",
              title: __35("Menu Selection", "digiblocks"),
              initialOpen: true
            },
            /* @__PURE__ */ wp.element.createElement(
              ToggleGroupControl28,
              {
                label: __35("Menu Type", "digiblocks"),
                value: menuType,
                onChange: (value) => setAttributes({ menuType: value }),
                isBlock: true,
                __next40pxDefaultSize: true,
                __nextHasNoMarginBottom: true
              },
              /* @__PURE__ */ wp.element.createElement(
                ToggleGroupControlOption28,
                {
                  value: "wordpress",
                  label: __35("Menu", "digiblocks")
                }
              ),
              /* @__PURE__ */ wp.element.createElement(
                ToggleGroupControlOption28,
                {
                  value: "custom",
                  label: __35("Custom Menu", "digiblocks")
                }
              )
            ),
            menuType === "wordpress" && /* @__PURE__ */ wp.element.createElement(
              SelectControl30,
              {
                label: __35("Select Menu", "digiblocks"),
                value: selectedMenu ? selectedMenu.id : "",
                options: [
                  { label: __35("\u2014 Select a Menu \u2014", "digiblocks"), value: "" },
                  ...menus.map((menu) => ({
                    label: menu.name,
                    value: menu.id
                  }))
                ],
                onChange: (value) => {
                  const menu = menus.find((m) => m.id === Number(value));
                  setAttributes({ selectedMenu: menu || null });
                },
                __next40pxDefaultSize: true,
                __nextHasNoMarginBottom: true
              }
            )
          ), /* @__PURE__ */ wp.element.createElement(
            TabPanelBody30,
            {
              tab: "options",
              name: "layout",
              title: __35("Layout Options", "digiblocks"),
              initialOpen: false
            },
            /* @__PURE__ */ wp.element.createElement(
              ResponsiveButtonGroup8,
              {
                label: __35("Flex Wrap", "digiblocks"),
                value: flexWrap,
                onChange: (value) => setAttributes({ flexWrap: value }),
                options: [
                  { label: __35("Nowrap", "digiblocks"), value: "nowrap" },
                  { label: __35("Wrap", "digiblocks"), value: "wrap" }
                ]
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              ResponsiveButtonGroup8,
              {
                label: __35("Orientation", "digiblocks"),
                value: orientation,
                onChange: (value) => setAttributes({ orientation: value }),
                options: [
                  { label: __35("Horizontal", "digiblocks"), value: "horizontal" },
                  { label: __35("Vertical", "digiblocks"), value: "vertical" }
                ]
              }
            ),
            orientation[localActiveDevice] !== "vertical" && /* @__PURE__ */ wp.element.createElement(
              ResponsiveControl30,
              {
                label: __35("Columns", "digiblocks")
              },
              /* @__PURE__ */ wp.element.createElement(
                RangeControl28,
                {
                  value: columns[localActiveDevice],
                  onChange: (value) => setAttributes({
                    columns: {
                      ...columns,
                      [localActiveDevice]: value
                    }
                  }),
                  min: 1,
                  max: 6,
                  step: 1,
                  __next40pxDefaultSize: true,
                  __nextHasNoMarginBottom: true
                }
              )
            ),
            /* @__PURE__ */ wp.element.createElement(
              ResponsiveButtonGroup8,
              {
                label: __35("Alignment", "digiblocks"),
                value: align,
                onChange: (value) => setAttributes({ align: value }),
                options: [
                  { label: __35("Left", "digiblocks"), value: "flex-start" },
                  { label: __35("Center", "digiblocks"), value: "center" },
                  { label: __35("Right", "digiblocks"), value: "flex-end" },
                  { label: __35("Spread", "digiblocks"), value: "space-between" }
                ]
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              ResponsiveControl30,
              {
                label: __35("Item Spacing", "digiblocks")
              },
              /* @__PURE__ */ wp.element.createElement(
                RangeControl28,
                {
                  value: itemSpacing[localActiveDevice],
                  onChange: (value) => setAttributes({
                    itemSpacing: {
                      ...itemSpacing,
                      [localActiveDevice]: value
                    }
                  }),
                  min: 0,
                  max: 50,
                  step: 1,
                  __next40pxDefaultSize: true,
                  __nextHasNoMarginBottom: true
                }
              )
            )
          ), /* @__PURE__ */ wp.element.createElement(
            TabPanelBody30,
            {
              tab: "options",
              name: "mobile",
              title: __35("Mobile Settings", "digiblocks"),
              initialOpen: false
            },
            /* @__PURE__ */ wp.element.createElement(
              ToggleControl30,
              {
                label: __35("Show Mobile Toggle", "digiblocks"),
                checked: showMobileToggle,
                onChange: (value) => setAttributes({ showMobileToggle: value }),
                __nextHasNoMarginBottom: true
              }
            ),
            showMobileToggle && /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(
              ToggleGroupControl28,
              {
                label: __35("Alignment", "digiblocks"),
                value: mobileAlign,
                onChange: (value) => setAttributes({ mobileAlign: value }),
                isBlock: true,
                __next40pxDefaultSize: true,
                __nextHasNoMarginBottom: true
              },
              /* @__PURE__ */ wp.element.createElement(
                ToggleGroupControlOption28,
                {
                  value: "flex-start",
                  label: __35("Left", "digiblocks")
                }
              ),
              /* @__PURE__ */ wp.element.createElement(
                ToggleGroupControlOption28,
                {
                  value: "center",
                  label: __35("Center", "digiblocks")
                }
              ),
              /* @__PURE__ */ wp.element.createElement(
                ToggleGroupControlOption28,
                {
                  value: "flex-end",
                  label: __35("Right", "digiblocks")
                }
              )
            ), /* @__PURE__ */ wp.element.createElement(
              SelectControl30,
              {
                label: __35("Toggle Icon", "digiblocks"),
                value: toggleIcon,
                options: toggleIconOptions,
                onChange: (value) => setAttributes({ toggleIcon: value }),
                __next40pxDefaultSize: true,
                __nextHasNoMarginBottom: true
              }
            ), toggleIcon === "custom" && /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, !componentsLoaded ? /* @__PURE__ */ wp.element.createElement("div", { style: { textAlign: "center", padding: "20px 0" } }, /* @__PURE__ */ wp.element.createElement("div", { className: "components-spinner" }), /* @__PURE__ */ wp.element.createElement("p", null, __35("Loading icon selector...", "digiblocks"))) : /* @__PURE__ */ wp.element.createElement(
              FontAwesomeControl6,
              {
                label: __35("Custom Toggle Icon", "digiblocks"),
                value: customToggleIcon,
                onChange: (value) => setAttributes({ customToggleIcon: value })
              }
            )), /* @__PURE__ */ wp.element.createElement(
              ResponsiveControl30,
              {
                label: __35("Toggle Button Size", "digiblocks")
              },
              /* @__PURE__ */ wp.element.createElement(
                RangeControl28,
                {
                  value: mobileToggleSize[localActiveDevice],
                  onChange: (value) => setAttributes({
                    mobileToggleSize: {
                      ...mobileToggleSize,
                      [localActiveDevice]: value
                    }
                  }),
                  min: 32,
                  max: 80,
                  step: 2,
                  __next40pxDefaultSize: true,
                  __nextHasNoMarginBottom: true
                }
              )
            ), /* @__PURE__ */ wp.element.createElement(
              ResponsiveControl30,
              {
                label: __35("Icon Size", "digiblocks")
              },
              /* @__PURE__ */ wp.element.createElement(
                RangeControl28,
                {
                  value: mobileIconSize[localActiveDevice],
                  onChange: (value) => setAttributes({
                    mobileIconSize: {
                      ...mobileIconSize,
                      [localActiveDevice]: value
                    }
                  }),
                  min: 16,
                  max: 40,
                  step: 2,
                  __next40pxDefaultSize: true,
                  __nextHasNoMarginBottom: true
                }
              )
            )),
            /* @__PURE__ */ wp.element.createElement(
              RangeControl28,
              {
                label: __35("Mobile Breakpoint", "digiblocks"),
                value: mobileBreakpoint,
                onChange: (value) => setAttributes({ mobileBreakpoint: value }),
                min: 320,
                max: 1200,
                step: 10,
                __next40pxDefaultSize: true,
                __nextHasNoMarginBottom: true
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              ToggleControl30,
              {
                label: __35("Mobile Full Width", "digiblocks"),
                checked: mobileFullWidth,
                onChange: (value) => setAttributes({ mobileFullWidth: value }),
                __nextHasNoMarginBottom: true
              }
            )
          ));
        case "style":
          return /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(
            TabPanelBody30,
            {
              tab: "style",
              name: "typography",
              title: __35("Typography", "digiblocks"),
              initialOpen: true
            },
            /* @__PURE__ */ wp.element.createElement(
              TypographyControl23,
              {
                label: __35("Link Typography", "digiblocks"),
                value: textTypography,
                onChange: (value) => setAttributes({ textTypography: value }),
                defaults: {
                  fontSize: { desktop: 16, tablet: 15, mobile: 14 },
                  fontSizeUnit: "px",
                  lineHeight: { desktop: 1.5, tablet: 1.4, mobile: 3 },
                  lineHeightUnit: "em"
                }
              }
            )
          ), /* @__PURE__ */ wp.element.createElement(
            TabPanelBody30,
            {
              tab: "style",
              name: "effects",
              title: __35("Effects", "digiblocks"),
              initialOpen: false
            },
            /* @__PURE__ */ wp.element.createElement(
              SelectControl30,
              {
                label: __35("Link Effect", "digiblocks"),
                value: linkEffect,
                options: linkEffectOptions,
                onChange: (value) => setAttributes({ linkEffect: value }),
                __next40pxDefaultSize: true,
                __nextHasNoMarginBottom: true
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              SelectControl30,
              {
                label: __35("Submenu Effect", "digiblocks"),
                value: submenuEffect,
                options: submenuEffectOptions,
                onChange: (value) => setAttributes({ submenuEffect: value }),
                __next40pxDefaultSize: true,
                __nextHasNoMarginBottom: true
              }
            )
          ), /* @__PURE__ */ wp.element.createElement(
            TabPanelBody30,
            {
              tab: "style",
              name: "colors",
              title: __35("Colors", "digiblocks"),
              initialOpen: false
            },
            /* @__PURE__ */ wp.element.createElement(
              TabPanel19,
              {
                className: "digiblocks-control-tabs",
                activeClass: "active-tab",
                tabs: stateTabList
              },
              (tab) => /* @__PURE__ */ wp.element.createElement(
                PanelColorSettings28,
                {
                  title: tab.name === "normal" ? __35("Normal Colors", "digiblocks") : __35("Hover Colors", "digiblocks"),
                  initialOpen: true,
                  enableAlpha: true,
                  colorSettings: [
                    {
                      value: tab.name === "normal" ? linkColor : linkHoverColor,
                      onChange: (value) => setAttributes(
                        tab.name === "normal" ? { linkColor: value } : { linkHoverColor: value }
                      ),
                      label: __35("Link Color", "digiblocks")
                    },
                    {
                      value: tab.name === "normal" ? linkBackgroundColor : linkHoverBackgroundColor,
                      onChange: (value) => setAttributes(
                        tab.name === "normal" ? { linkBackgroundColor: value } : { linkHoverBackgroundColor: value }
                      ),
                      label: __35("Background Color", "digiblocks")
                    }
                  ]
                }
              )
            ),
            /* @__PURE__ */ wp.element.createElement(
              TabPanel19,
              {
                className: "digiblocks-control-tabs",
                activeClass: "active-tab",
                tabs: stateTabList
              },
              (tab) => /* @__PURE__ */ wp.element.createElement(
                PanelColorSettings28,
                {
                  title: __35("Toggle Icon Colors", "digiblocks"),
                  initialOpen: false,
                  enableAlpha: true,
                  colorSettings: [
                    {
                      value: tab.name === "normal" ? toggleIconColor : toggleIconHoverColor,
                      onChange: (value) => setAttributes(
                        tab.name === "normal" ? { toggleIconColor: value } : { toggleIconHoverColor: value }
                      ),
                      label: __35("Toggle Icon Color", "digiblocks")
                    }
                  ]
                }
              )
            ),
            /* @__PURE__ */ wp.element.createElement(
              PanelColorSettings28,
              {
                title: __35("Submenu Colors", "digiblocks"),
                initialOpen: false,
                enableAlpha: true,
                colorSettings: [
                  {
                    value: submenuBackgroundColor,
                    onChange: (value) => setAttributes({ submenuBackgroundColor: value }),
                    label: __35("Submenu Background", "digiblocks")
                  },
                  {
                    value: submenuBorderColor,
                    onChange: (value) => setAttributes({ submenuBorderColor: value }),
                    label: __35("Submenu Border", "digiblocks")
                  }
                ]
              }
            ),
            showMobileToggle && /* @__PURE__ */ wp.element.createElement(
              TabPanel19,
              {
                className: "digiblocks-control-tabs",
                activeClass: "active-tab",
                tabs: stateTabList
              },
              (tab) => /* @__PURE__ */ wp.element.createElement(
                PanelColorSettings28,
                {
                  title: tab.name === "normal" ? __35("Mobile Submenu Colors", "digiblocks") : __35("Mobile Submenu Hover Colors", "digiblocks"),
                  initialOpen: true,
                  enableAlpha: true,
                  colorSettings: [
                    {
                      value: tab.name === "normal" ? submenuMobileLinkColor : submenuMobileLinkHoverColor,
                      onChange: (value) => setAttributes(
                        tab.name === "normal" ? { submenuMobileLinkColor: value } : { submenuMobileLinkHoverColor: value }
                      ),
                      label: __35("Link Color", "digiblocks")
                    },
                    {
                      value: tab.name === "normal" ? submenuMobileBackgroundColor : submenuMobileLinkHoverBackgroundColor,
                      onChange: (value) => setAttributes(
                        tab.name === "normal" ? { submenuMobileBackgroundColor: value } : { submenuMobileLinkHoverBackgroundColor: value }
                      ),
                      label: __35("Background Color", "digiblocks")
                    }
                  ]
                }
              )
            )
          ), /* @__PURE__ */ wp.element.createElement(
            TabPanelBody30,
            {
              tab: "style",
              name: "spacing",
              title: __35("Spacing", "digiblocks"),
              initialOpen: false
            },
            /* @__PURE__ */ wp.element.createElement(
              ResponsiveControl30,
              {
                label: __35("Padding", "digiblocks")
              },
              /* @__PURE__ */ wp.element.createElement(
                DimensionControl27,
                {
                  values: padding[localActiveDevice],
                  onChange: (value) => setAttributes({
                    padding: {
                      ...padding,
                      [localActiveDevice]: value
                    }
                  })
                }
              )
            ),
            /* @__PURE__ */ wp.element.createElement(
              ResponsiveControl30,
              {
                label: __35("Border Radius", "digiblocks")
              },
              /* @__PURE__ */ wp.element.createElement(
                DimensionControl27,
                {
                  values: borderRadius[localActiveDevice],
                  onChange: (value) => setAttributes({
                    borderRadius: {
                      ...borderRadius,
                      [localActiveDevice]: value
                    }
                  }),
                  units: [
                    { label: "px", value: "px" },
                    { label: "%", value: "%" }
                  ]
                }
              )
            )
          ));
        case "advanced":
          return /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(
            TabPanelBody30,
            {
              tab: "advanced",
              name: "animation",
              title: __35("Animation", "digiblocks"),
              initialOpen: true
            },
            /* @__PURE__ */ wp.element.createElement(
              SelectControl30,
              {
                label: __35("Animation Effect", "digiblocks"),
                value: animation,
                options: animationOptions,
                onChange: (value) => setAttributes({ animation: value }),
                __next40pxDefaultSize: true,
                __nextHasNoMarginBottom: true
              }
            ),
            animation && animation !== "none" && /* @__PURE__ */ wp.element.createElement("div", { style: { marginTop: "10px" } }, /* @__PURE__ */ wp.element.createElement(
              Button28,
              {
                variant: "secondary",
                isSecondary: true,
                onClick: handlePreviewClick,
                style: { width: "100%" }
              },
              __35("Preview Animation", "digiblocks")
            ))
          ), /* @__PURE__ */ wp.element.createElement(
            TabPanelBody30,
            {
              tab: "advanced",
              name: "visibility",
              title: __35("Visibility", "digiblocks"),
              initialOpen: false
            },
            /* @__PURE__ */ wp.element.createElement("div", { className: "components-base-control__help", style: {
              padding: "12px",
              backgroundColor: "#f0f6fc",
              border: "1px solid #c3ddfd",
              borderRadius: "4px",
              marginBottom: "16px"
            } }, /* @__PURE__ */ wp.element.createElement("strong", null, __35("Editor Note:", "digiblocks")), /* @__PURE__ */ wp.element.createElement("br", null), __35("Hidden elements appear with reduced opacity in the editor for easy editing. Visibility changes only take effect on the frontend.", "digiblocks")),
            /* @__PURE__ */ wp.element.createElement(
              ToggleControl30,
              {
                label: __35("Hide on Desktop", "digiblocks"),
                checked: visibility.desktop,
                onChange: (value) => setAttributes({
                  visibility: {
                    ...visibility,
                    desktop: value
                  }
                }),
                __nextHasNoMarginBottom: true
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              ToggleControl30,
              {
                label: __35("Hide on Tablet", "digiblocks"),
                checked: visibility.tablet,
                onChange: (value) => setAttributes({
                  visibility: {
                    ...visibility,
                    tablet: value
                  }
                }),
                __nextHasNoMarginBottom: true
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              ToggleControl30,
              {
                label: __35("Hide on Mobile", "digiblocks"),
                checked: visibility.mobile,
                onChange: (value) => setAttributes({
                  visibility: {
                    ...visibility,
                    mobile: value
                  }
                }),
                __nextHasNoMarginBottom: true
              }
            )
          ), /* @__PURE__ */ wp.element.createElement(
            TabPanelBody30,
            {
              tab: "advanced",
              name: "additional",
              title: __35("Additional", "digiblocks"),
              initialOpen: false
            },
            /* @__PURE__ */ wp.element.createElement("div", { className: "components-base-control html-anchor-control" }, /* @__PURE__ */ wp.element.createElement("div", { className: "components-base-control__field" }, /* @__PURE__ */ wp.element.createElement("label", { className: "components-base-control__label", htmlFor: "html-anchor" }, __35("HTML anchor", "digiblocks")), /* @__PURE__ */ wp.element.createElement(
              "input",
              {
                className: "components-text-control__input",
                type: "text",
                id: "html-anchor",
                value: anchor || "",
                onChange: (e) => setAttributes({ anchor: e.target.value }),
                "aria-describedby": "html-anchor-help",
                autoCapitalize: "none",
                autoComplete: "off"
              }
            )), /* @__PURE__ */ wp.element.createElement("p", { id: "html-anchor-help", className: "components-base-control__help" }, __35(`Enter a word or two \u2014 without spaces \u2014 to make a unique web address just for this block, called an "anchor". Then, you'll be able to link directly to this section of your page.`, "digiblocks"))),
            /* @__PURE__ */ wp.element.createElement("div", { className: "components-base-control" }, /* @__PURE__ */ wp.element.createElement("div", { className: "components-base-control__field" }, /* @__PURE__ */ wp.element.createElement("label", { className: "components-base-control__label", htmlFor: "additional-css-classes" }, __35("Additional CSS class(es)", "digiblocks")), /* @__PURE__ */ wp.element.createElement(
              "input",
              {
                className: "components-text-control__input",
                type: "text",
                id: "additional-css-classes",
                value: customClasses || "",
                onChange: (e) => setAttributes({ customClasses: e.target.value }),
                "aria-describedby": "additional-css-classes-help",
                autoComplete: "off"
              }
            )), /* @__PURE__ */ wp.element.createElement("p", { id: "additional-css-classes-help", className: "components-base-control__help" }, __35("Separate multiple classes with spaces.", "digiblocks")))
          ));
        default:
          return null;
      }
    };
    const blockProps = useBlockProps56({
      className: `digiblocks-navigation ${id} ${customClasses || ""}`,
      id: anchor || null
    });
    return /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(InspectorControls30, null, /* @__PURE__ */ wp.element.createElement(
      CustomTabPanel30,
      {
        tabs: tabList,
        activeTab,
        onSelect: setActiveTab
      },
      renderTabContent()
    )), /* @__PURE__ */ wp.element.createElement("style", { dangerouslySetInnerHTML: { __html: generateCSS() } }), /* @__PURE__ */ wp.element.createElement("div", { ...blockProps }, showMobileToggle && /* @__PURE__ */ wp.element.createElement("button", { className: "digiblocks-mobile-toggle" }, /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-mobile-bars" }, /* @__PURE__ */ wp.element.createElement("span", null), /* @__PURE__ */ wp.element.createElement("span", null), /* @__PURE__ */ wp.element.createElement("span", null))), renderMenuPreview(), menuType === "custom" && /* @__PURE__ */ wp.element.createElement(
      Button28,
      {
        variant: "primary",
        icon: "plus",
        onClick: addCustomItem,
        style: {
          width: "100%",
          justifyContent: "center"
        }
      },
      __35("Add Navigation Item", "digiblocks")
    )), iconModalOpen && currentEditingItem !== null && /* @__PURE__ */ wp.element.createElement(
      Modal2,
      {
        title: __35("Choose Icon", "digiblocks"),
        onRequestClose: () => setIconModalOpen(false),
        className: "digiblocks-icon-modal"
      },
      !componentsLoaded ? /* @__PURE__ */ wp.element.createElement("div", { style: { textAlign: "center", padding: "20px 0" } }, /* @__PURE__ */ wp.element.createElement("div", { className: "components-spinner" }), /* @__PURE__ */ wp.element.createElement("p", null, __35("Loading icon selector...", "digiblocks"))) : /* @__PURE__ */ wp.element.createElement(
        FontAwesomeControl6,
        {
          value: customItems[currentEditingItem].icon,
          onChange: (newIcon) => {
            updateCustomItem(currentEditingItem, "icon", newIcon);
            setIconModalOpen(false);
          }
        }
      ),
      /* @__PURE__ */ wp.element.createElement("div", { style: { marginTop: "20px" } }, /* @__PURE__ */ wp.element.createElement(
        ToggleGroupControl28,
        {
          label: __35("Icon Position", "digiblocks"),
          value: customItems[currentEditingItem].iconPosition || "before",
          onChange: (value) => {
            updateCustomItem(currentEditingItem, "iconPosition", value);
          },
          isBlock: true,
          __next40pxDefaultSize: true,
          __nextHasNoMarginBottom: true
        },
        /* @__PURE__ */ wp.element.createElement(
          ToggleGroupControlOption28,
          {
            value: "before",
            label: __35("Before", "digiblocks")
          }
        ),
        /* @__PURE__ */ wp.element.createElement(
          ToggleGroupControlOption28,
          {
            value: "after",
            label: __35("After", "digiblocks")
          }
        )
      ))
    ), isEditingLink && currentEditingItem !== null && /* @__PURE__ */ wp.element.createElement(
      Modal2,
      {
        title: __35("Link Settings", "digiblocks"),
        onRequestClose: () => setIsEditingLink(false),
        className: "digiblocks-link-modal"
      },
      /* @__PURE__ */ wp.element.createElement(
        LinkControl9,
        {
          value: {
            url: customItems[currentEditingItem]?.url || "",
            opensInNewTab: !!customItems[currentEditingItem]?.opensInNewTab,
            rel: customItems[currentEditingItem]?.rel || ""
          },
          settings: [
            {
              id: "opensInNewTab",
              title: __35("Open in new tab", "digiblocks")
            },
            {
              id: "rel",
              title: __35("Add nofollow", "digiblocks")
            }
          ],
          onChange: (newLink) => {
            const newItems = [...customItems];
            newItems[currentEditingItem] = {
              ...newItems[currentEditingItem],
              url: newLink.url || "#",
              opensInNewTab: !!newLink.opensInNewTab,
              rel: newLink.rel || ""
            };
            setAttributes({ customItems: newItems });
          },
          onRemove: () => {
            const newItems = [...customItems];
            newItems[currentEditingItem] = {
              ...newItems[currentEditingItem],
              url: "#",
              opensInNewTab: false,
              rel: ""
            };
            setAttributes({ customItems: newItems });
          },
          forceIsEditingLink: true
        }
      )
    ));
  };
  var edit_default30 = NavigationEdit;

  // blocks/navigation/save.js
  var NavigationSave = () => {
    return null;
  };
  var save_default30 = NavigationSave;

  // blocks/login-link/edit.js
  var { __: __36 } = window.wp.i18n;
  var {
    useBlockProps: useBlockProps57,
    RichText: RichText31,
    InspectorControls: InspectorControls31,
    PanelColorSettings: PanelColorSettings29,
    LinkControl: LinkControl10
  } = window.wp.blockEditor;
  var {
    ToggleControl: ToggleControl31,
    TextControl: TextControl16,
    RangeControl: RangeControl29,
    __experimentalToggleGroupControl: ToggleGroupControl29,
    __experimentalToggleGroupControlOption: ToggleGroupControlOption29
  } = window.wp.components;
  var { useState: useState31, useEffect: useEffect31 } = window.wp.element;
  var { useBlockId: useBlockId31 } = digi.utils;
  var { tabIcons: tabIcons31 } = digi.icons;
  var { ResponsiveControl: ResponsiveControl31, ResponsiveButtonGroup: ResponsiveButtonGroup9, TypographyControl: TypographyControl24, CustomTabPanel: CustomTabPanel31, TabPanelBody: TabPanelBody31, FontAwesomeControl: FontAwesomeControl5 } = digi.components;
  var LoginLinkEdit = ({ attributes, setAttributes, clientId }) => {
    const {
      id,
      anchor,
      visibility,
      customClasses,
      loginText,
      loginIconValue,
      loginIconPosition,
      loginUrl,
      loginOpenInNewTab,
      loginRel,
      loggedInText,
      loggedInIconValue,
      loggedInIconPosition,
      loggedInUrl,
      loggedInOpenInNewTab,
      loggedInRel,
      align,
      textColor,
      textHoverColor,
      typography,
      iconSize
    } = attributes;
    useBlockId31(id, clientId, setAttributes);
    const [localActiveDevice, setLocalActiveDevice] = useState31(window.digi.responsiveState.activeDevice);
    const [activeTab, setActiveTab] = useState31(() => {
      if (window.digi.uiState) {
        const savedTab = window.digi.uiState.getActiveTab(clientId);
        if (savedTab)
          return savedTab;
      }
      return "options";
    });
    useEffect31(() => {
      const unsubscribe = window.digi.responsiveState.subscribe((device) => {
        setLocalActiveDevice(device);
      });
      return unsubscribe;
    }, []);
    useEffect31(() => {
      if (!iconSize) {
        setAttributes({
          iconSize: {
            desktop: 16,
            tablet: 15,
            mobile: 14
          }
        });
      }
    }, [iconSize, setAttributes]);
    const tabList = [
      {
        name: "options",
        title: __36("Options", "digiblocks"),
        icon: tabIcons31.optionsIcon
      },
      {
        name: "style",
        title: __36("Style", "digiblocks"),
        icon: tabIcons31.styleIcon
      },
      {
        name: "advanced",
        title: __36("Advanced", "digiblocks"),
        icon: tabIcons31.advancedIcon
      }
    ];
    const generateCSS = () => {
      const currentIconSize = iconSize && iconSize[localActiveDevice] ? iconSize[localActiveDevice] : 16;
      return `
            /* Login Link Block - ${id} */
            .${id} {
                text-decoration: none;
                transition: all 0.3s ease;
                color: ${textColor || "inherit"};
            }
            
            .${id}:hover {
                color: ${textHoverColor || "currentColor"};
            }
            
            /* Icon styles */
            .${id} .digiblocks-login-link-icon {
                display: flex;
                align-items: center;
                justify-content: center;
            }
            
            .${id} .digiblocks-login-link-icon svg {
                width: ${currentIconSize}px;
                height: ${currentIconSize}px;
                fill: currentColor;
            }
            
            /* For the editor preview */
            .${id} .digiblocks-login-link-preview {
				display: flex;
				flex-direction: column;
				gap: 10px;
			}

			.${id} .digiblocks-login-link-logged-out,
			.${id} .digiblocks-login-link-logged-in {
				display: flex;
				flex-direction: column;
				gap: 5px;
			}
            
            .${id} .digiblocks-login-link-content {
                display: inline-flex;
                align-items: center;
				justify-content: ${align[localActiveDevice]};
                gap: 8px;
            }
            
            /* Typography */
            .${id} a, 
            .${id} .digiblocks-login-link-content {
                ${typography && typography.fontFamily ? `font-family: ${typography.fontFamily};` : ""}
                ${typography && typography.fontSize && typography.fontSize[localActiveDevice] ? `font-size: ${typography.fontSize[localActiveDevice]}${typography.fontSizeUnit || "px"};` : ""}
                ${typography && typography.fontWeight ? `font-weight: ${typography.fontWeight};` : ""}
                ${typography && typography.fontStyle ? `font-style: ${typography.fontStyle};` : ""}
                ${typography && typography.textTransform ? `text-transform: ${typography.textTransform};` : ""}
                ${typography && typography.textDecoration ? `text-decoration: ${typography.textDecoration};` : ""}
                ${typography && typography.lineHeight && typography.lineHeight[localActiveDevice] ? `line-height: ${typography.lineHeight[localActiveDevice]}${typography.lineHeightUnit || "em"};` : ""}
                ${typography && typography.letterSpacing && typography.letterSpacing[localActiveDevice] ? `letter-spacing: ${typography.letterSpacing[localActiveDevice]}${typography.letterSpacingUnit || "px"};` : ""}
            }

			/* Visibility Controls */
			${visibility.desktop ? `
				@media (min-width: 992px) {
					.${id} {
						opacity: 0.5 !important;
					}
				}
			` : ""}

			${visibility.tablet ? `
				@media (min-width: 768px) and (max-width: 991px) {
					.${id} {
						opacity: 0.5 !important;
					}
				}
			` : ""}

			${visibility.mobile ? `
				@media (max-width: 767px) {
					.${id} {
						opacity: 0.5 !important;
					}
				}
			` : ""}
        `;
    };
    const renderLinkContent = (isLoggedIn = false) => {
      const text = isLoggedIn ? loggedInText : loginText;
      const iconValue = isLoggedIn ? loggedInIconValue : loginIconValue;
      const iconPosition = isLoggedIn ? loggedInIconPosition : loginIconPosition;
      const iconElement = iconValue && iconValue.svg ? /* @__PURE__ */ wp.element.createElement(
        "span",
        {
          key: "icon",
          className: "digiblocks-login-link-icon",
          dangerouslySetInnerHTML: { __html: iconValue.svg }
        }
      ) : null;
      const textElement = /* @__PURE__ */ wp.element.createElement(
        RichText31,
        {
          key: "text",
          tagName: "span",
          className: "digiblocks-login-link-text",
          value: text,
          onChange: (value) => isLoggedIn ? setAttributes({ loggedInText: value }) : setAttributes({ loginText: value }),
          placeholder: isLoggedIn ? __36("Logged in text\u2026", "digiblocks") : __36("Login text\u2026", "digiblocks"),
          allowedFormats: [],
          withoutInteractiveFormatting: true
        }
      );
      if (iconPosition === "left") {
        return [iconElement, textElement].filter(Boolean);
      } else {
        return [textElement, iconElement].filter(Boolean);
      }
    };
    const renderTabContent = () => {
      switch (activeTab) {
        case "options":
          return /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(
            TabPanelBody31,
            {
              tab: "options",
              name: "login-section",
              title: __36("Login Settings", "digiblocks"),
              initialOpen: true
            },
            /* @__PURE__ */ wp.element.createElement(
              TextControl16,
              {
                label: __36("Login Text", "digiblocks"),
                value: loginText,
                onChange: (value) => setAttributes({ loginText: value }),
                __next40pxDefaultSize: true,
                __nextHasNoMarginBottom: true
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              FontAwesomeControl5,
              {
                label: __36("Login Icon", "digiblocks"),
                value: loginIconValue,
                onChange: (value) => setAttributes({ loginIconValue: value })
              }
            ),
            loginIconValue && /* @__PURE__ */ wp.element.createElement(
              ToggleGroupControl29,
              {
                label: __36("Icon Position", "digiblocks"),
                value: loginIconPosition,
                onChange: (value) => setAttributes({ loginIconPosition: value }),
                isBlock: true,
                __next40pxDefaultSize: true,
                __nextHasNoMarginBottom: true
              },
              /* @__PURE__ */ wp.element.createElement(
                ToggleGroupControlOption29,
                {
                  value: "left",
                  label: __36("Left", "digiblocks")
                }
              ),
              /* @__PURE__ */ wp.element.createElement(
                ToggleGroupControlOption29,
                {
                  value: "right",
                  label: __36("Right", "digiblocks")
                }
              )
            ),
            /* @__PURE__ */ wp.element.createElement("div", { style: { marginTop: "20px" } }, /* @__PURE__ */ wp.element.createElement("p", { style: { marginBottom: "8px" } }, __36("Login URL", "digiblocks")), /* @__PURE__ */ wp.element.createElement(
              LinkControl10,
              {
                value: loginUrl ? {
                  url: loginUrl,
                  opensInNewTab: loginOpenInNewTab,
                  rel: loginRel
                } : void 0,
                onChange: (linkObject) => {
                  setAttributes({
                    loginUrl: linkObject.url,
                    loginOpenInNewTab: linkObject.opensInNewTab,
                    loginRel: linkObject.rel || ""
                  });
                },
                settings: [
                  {
                    id: "opensInNewTab",
                    title: __36("Open in new tab")
                  },
                  {
                    id: "rel",
                    title: __36("Add noopener noreferrer")
                  }
                ],
                onRemove: () => {
                  setAttributes({
                    loginUrl: "",
                    loginOpenInNewTab: false,
                    loginRel: ""
                  });
                }
              }
            ), /* @__PURE__ */ wp.element.createElement("p", { className: "components-base-control__help" }, __36("Leave empty to use default WordPress login page", "digiblocks")))
          ), /* @__PURE__ */ wp.element.createElement(
            TabPanelBody31,
            {
              tab: "options",
              name: "logged-in-section",
              title: __36("Logged In Settings", "digiblocks"),
              initialOpen: false
            },
            /* @__PURE__ */ wp.element.createElement(
              TextControl16,
              {
                label: __36("Logged In Text", "digiblocks"),
                value: loggedInText,
                onChange: (value) => setAttributes({ loggedInText: value }),
                __next40pxDefaultSize: true,
                __nextHasNoMarginBottom: true
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              FontAwesomeControl5,
              {
                label: __36("Logged In Icon", "digiblocks"),
                value: loggedInIconValue,
                onChange: (value) => setAttributes({ loggedInIconValue: value })
              }
            ),
            loggedInIconValue && /* @__PURE__ */ wp.element.createElement(
              ToggleGroupControl29,
              {
                label: __36("Icon Position", "digiblocks"),
                value: loggedInIconPosition,
                onChange: (value) => setAttributes({ loggedInIconPosition: value }),
                isBlock: true,
                __next40pxDefaultSize: true,
                __nextHasNoMarginBottom: true
              },
              /* @__PURE__ */ wp.element.createElement(
                ToggleGroupControlOption29,
                {
                  value: "left",
                  label: __36("Left", "digiblocks")
                }
              ),
              /* @__PURE__ */ wp.element.createElement(
                ToggleGroupControlOption29,
                {
                  value: "right",
                  label: __36("Right", "digiblocks")
                }
              )
            ),
            /* @__PURE__ */ wp.element.createElement("div", { style: { marginTop: "20px" } }, /* @__PURE__ */ wp.element.createElement("p", { style: { marginBottom: "8px" } }, __36("Logged In URL", "digiblocks")), /* @__PURE__ */ wp.element.createElement(
              LinkControl10,
              {
                value: loggedInUrl ? {
                  url: loggedInUrl,
                  opensInNewTab: loggedInOpenInNewTab,
                  rel: loggedInRel
                } : void 0,
                onChange: (linkObject) => {
                  setAttributes({
                    loggedInUrl: linkObject.url,
                    loggedInOpenInNewTab: linkObject.opensInNewTab,
                    loggedInRel: linkObject.rel || ""
                  });
                },
                settings: [
                  {
                    id: "opensInNewTab",
                    title: __36("Open in new tab")
                  },
                  {
                    id: "rel",
                    title: __36("Add noopener noreferrer")
                  }
                ],
                onRemove: () => {
                  setAttributes({
                    loggedInUrl: "",
                    loggedInOpenInNewTab: false,
                    loggedInRel: ""
                  });
                }
              }
            ), /* @__PURE__ */ wp.element.createElement("p", { className: "components-base-control__help" }, __36("URL for logged in users", "digiblocks")))
          ), /* @__PURE__ */ wp.element.createElement(
            TabPanelBody31,
            {
              tab: "options",
              name: "position-section",
              title: __36("Position", "digiblocks"),
              initialOpen: false
            },
            /* @__PURE__ */ wp.element.createElement(
              ResponsiveButtonGroup9,
              {
                label: __36("Alignment", "digiblocks"),
                value: align,
                onChange: (value) => setAttributes({ align: value }),
                options: [
                  { label: __36("Left", "digiblocks"), value: "flex-start" },
                  { label: __36("Center", "digiblocks"), value: "center" },
                  { label: __36("Right", "digiblocks"), value: "flex-end" }
                ]
              }
            )
          ));
        case "style":
          return /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(
            TabPanelBody31,
            {
              tab: "style",
              name: "typography",
              title: __36("Typography", "digiblocks"),
              initialOpen: true
            },
            /* @__PURE__ */ wp.element.createElement(
              TypographyControl24,
              {
                label: __36("Link Typography", "digiblocks"),
                value: typography,
                onChange: (value) => setAttributes({ typography: value }),
                defaults: {
                  fontSize: { desktop: 16, tablet: 15, mobile: 14 },
                  fontSizeUnit: "px",
                  lineHeight: { desktop: 1.5, tablet: 1.4, mobile: 1.3 },
                  lineHeightUnit: "em"
                }
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              ResponsiveControl31,
              {
                label: __36("Icon Size", "digiblocks")
              },
              /* @__PURE__ */ wp.element.createElement(
                RangeControl29,
                {
                  value: iconSize && iconSize[localActiveDevice] ? iconSize[localActiveDevice] : 16,
                  onChange: (value) => setAttributes({
                    iconSize: {
                      ...iconSize,
                      [localActiveDevice]: value
                    }
                  }),
                  min: 8,
                  max: 48,
                  step: 1,
                  __nextHasNoMarginBottom: true,
                  __next40pxDefaultSize: true
                }
              )
            )
          ), /* @__PURE__ */ wp.element.createElement(
            TabPanelBody31,
            {
              tab: "style",
              name: "colors",
              title: __36("Colors", "digiblocks"),
              initialOpen: false
            },
            /* @__PURE__ */ wp.element.createElement(
              PanelColorSettings29,
              {
                title: __36("Link Colors", "digiblocks"),
                initialOpen: true,
                enableAlpha: true,
                colorSettings: [
                  {
                    value: textColor,
                    onChange: (value) => setAttributes({ textColor: value }),
                    label: __36("Text Color", "digiblocks")
                  },
                  {
                    value: textHoverColor,
                    onChange: (value) => setAttributes({ textHoverColor: value }),
                    label: __36("Text Hover Color", "digiblocks")
                  }
                ]
              }
            )
          ));
        case "advanced":
          return /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(
            TabPanelBody31,
            {
              tab: "advanced",
              name: "visibility",
              title: __36("Visibility", "digiblocks"),
              initialOpen: false
            },
            /* @__PURE__ */ wp.element.createElement("div", { className: "components-base-control__help", style: {
              padding: "12px",
              backgroundColor: "#f0f6fc",
              border: "1px solid #c3ddfd",
              borderRadius: "4px",
              marginBottom: "16px"
            } }, /* @__PURE__ */ wp.element.createElement("strong", null, __36("Editor Note:", "digiblocks")), /* @__PURE__ */ wp.element.createElement("br", null), __36("Hidden elements appear with reduced opacity in the editor for easy editing. Visibility changes only take effect on the frontend.", "digiblocks")),
            /* @__PURE__ */ wp.element.createElement(
              ToggleControl31,
              {
                label: __36("Hide on Desktop", "digiblocks"),
                checked: visibility.desktop,
                onChange: (value) => setAttributes({
                  visibility: {
                    ...visibility,
                    desktop: value
                  }
                }),
                __nextHasNoMarginBottom: true
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              ToggleControl31,
              {
                label: __36("Hide on Tablet", "digiblocks"),
                checked: visibility.tablet,
                onChange: (value) => setAttributes({
                  visibility: {
                    ...visibility,
                    tablet: value
                  }
                }),
                __nextHasNoMarginBottom: true
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              ToggleControl31,
              {
                label: __36("Hide on Mobile", "digiblocks"),
                checked: visibility.mobile,
                onChange: (value) => setAttributes({
                  visibility: {
                    ...visibility,
                    mobile: value
                  }
                }),
                __nextHasNoMarginBottom: true
              }
            )
          ), /* @__PURE__ */ wp.element.createElement(
            TabPanelBody31,
            {
              tab: "advanced",
              name: "additional",
              title: __36("Additional", "digiblocks"),
              initialOpen: true
            },
            /* @__PURE__ */ wp.element.createElement("div", { className: "components-base-control html-anchor-control" }, /* @__PURE__ */ wp.element.createElement("div", { className: "components-base-control__field" }, /* @__PURE__ */ wp.element.createElement("label", { className: "components-base-control__label", htmlFor: "html-anchor" }, __36("HTML anchor", "digiblocks")), /* @__PURE__ */ wp.element.createElement(
              "input",
              {
                className: "components-text-control__input",
                type: "text",
                id: "html-anchor",
                value: anchor || "",
                onChange: (e) => setAttributes({ anchor: e.target.value }),
                "aria-describedby": "html-anchor-help",
                autoCapitalize: "none",
                autoComplete: "off"
              }
            )), /* @__PURE__ */ wp.element.createElement("p", { id: "html-anchor-help", className: "components-base-control__help" }, __36(`Enter a word or two \u2014 without spaces \u2014 to make a unique web address just for this block, called an "anchor". Then, you'll be able to link directly to this section of your page.`, "digiblocks"), " ", /* @__PURE__ */ wp.element.createElement(
              "a",
              {
                className: "components-external-link",
                href: "https://wordpress.org/documentation/article/page-jumps/",
                target: "_blank",
                rel: "external noreferrer noopener"
              },
              /* @__PURE__ */ wp.element.createElement("span", { className: "components-external-link__contents" }, __36("Learn more about anchors", "digiblocks")),
              /* @__PURE__ */ wp.element.createElement("span", { className: "components-external-link__icon", "aria-label": "(opens in a new tab)" }, "\u2197")
            ))),
            /* @__PURE__ */ wp.element.createElement("div", { className: "components-base-control" }, /* @__PURE__ */ wp.element.createElement("div", { className: "components-base-control__field" }, /* @__PURE__ */ wp.element.createElement("label", { className: "components-base-control__label", htmlFor: "additional-css-classes" }, __36("Additional CSS class(es)", "digiblocks")), /* @__PURE__ */ wp.element.createElement(
              "input",
              {
                className: "components-text-control__input",
                type: "text",
                id: "additional-css-classes",
                value: customClasses || "",
                onChange: (e) => setAttributes({ customClasses: e.target.value }),
                "aria-describedby": "additional-css-classes-help",
                autoComplete: "off"
              }
            )), /* @__PURE__ */ wp.element.createElement("p", { id: "additional-css-classes-help", className: "components-base-control__help" }, __36("Separate multiple classes with spaces.", "digiblocks")))
          ));
        default:
          return null;
      }
    };
    const blockProps = useBlockProps57({
      className: `digiblocks-login-link ${id} ${customClasses || ""}`,
      id: anchor || null
    });
    return /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(InspectorControls31, null, /* @__PURE__ */ wp.element.createElement(
      CustomTabPanel31,
      {
        tabs: tabList,
        activeTab,
        onSelect: setActiveTab
      },
      renderTabContent()
    )), /* @__PURE__ */ wp.element.createElement("style", { dangerouslySetInnerHTML: { __html: generateCSS() } }), /* @__PURE__ */ wp.element.createElement("div", { ...blockProps }, /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-login-link-preview" }, /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-login-link-logged-out" }, /* @__PURE__ */ wp.element.createElement("strong", null, __36("Logged Out Preview:", "digiblocks")), /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-login-link-content" }, renderLinkContent(false))), /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-login-link-logged-in" }, /* @__PURE__ */ wp.element.createElement("strong", null, __36("Logged In Preview:", "digiblocks")), /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-login-link-content" }, renderLinkContent(true))))));
  };
  var edit_default31 = LoginLinkEdit;

  // blocks/login-link/save.js
  var { useBlockProps: useBlockProps58 } = window.wp.blockEditor;
  var LoginLinkSave = () => {
    return null;
  };
  var save_default31 = LoginLinkSave;

  // blocks/page-title/edit.js
  var { __: __37 } = window.wp.i18n;
  var {
    useBlockProps: useBlockProps59,
    InspectorControls: InspectorControls32,
    PanelColorSettings: PanelColorSettings30
  } = window.wp.blockEditor;
  var {
    ToggleControl: ToggleControl32,
    SelectControl: SelectControl31,
    Button: Button29,
    Notice: Notice2,
    __experimentalToggleGroupControl: ToggleGroupControl30,
    __experimentalToggleGroupControlOption: ToggleGroupControlOption30
  } = window.wp.components;
  var { useState: useState32, useEffect: useEffect32, useRef: useRef27 } = window.wp.element;
  var { useBlockId: useBlockId32, getDimensionCSS: getDimensionCSS27, animations: animations28, animationPreview: animationPreview28 } = digi.utils;
  var { tabIcons: tabIcons32 } = digi.icons;
  var { ResponsiveButtonGroup: ResponsiveButtonGroup10, ResponsiveControl: ResponsiveControl32, DimensionControl: DimensionControl28, TypographyControl: TypographyControl25, CustomTabPanel: CustomTabPanel32, TabPanelBody: TabPanelBody32 } = digi.components;
  var PageTitleEdit = ({ attributes, setAttributes, clientId }) => {
    const {
      id,
      anchor,
      visibility,
      customClasses,
      headingTag,
      align,
      color,
      hoverColor,
      typography,
      padding,
      margin,
      animation
    } = attributes;
    useBlockId32(id, clientId, setAttributes);
    const [localActiveDevice, setLocalActiveDevice] = useState32(window.digi.responsiveState.activeDevice);
    const [activeTab, setActiveTab] = useState32(() => {
      if (window.digi.uiState) {
        const savedTab = window.digi.uiState.getActiveTab(clientId);
        if (savedTab)
          return savedTab;
      }
      return "options";
    });
    useEffect32(() => {
      const unsubscribe = window.digi.responsiveState.subscribe((device) => {
        setLocalActiveDevice(device);
      });
      return unsubscribe;
    }, []);
    const previewTimeoutRef = useRef27(null);
    useEffect32(() => {
      if (animation && animation !== "none") {
        const timeoutId = setTimeout(() => {
          animationPreview28(id, animation, animations28, previewTimeoutRef);
        }, 100);
        return () => clearTimeout(timeoutId);
      }
    }, [animation]);
    const handlePreviewClick = () => {
      animationPreview28(id, animation, animations28, previewTimeoutRef);
    };
    const headingTagOptions = [
      { label: __37("H1", "digiblocks"), value: "h1" },
      { label: __37("H2", "digiblocks"), value: "h2" },
      { label: __37("H3", "digiblocks"), value: "h3" },
      { label: __37("H4", "digiblocks"), value: "h4" },
      { label: __37("H5", "digiblocks"), value: "h5" },
      { label: __37("H6", "digiblocks"), value: "h6" },
      { label: __37("p", "digiblocks"), value: "p" },
      { label: __37("div", "digiblocks"), value: "div" },
      { label: __37("span", "digiblocks"), value: "span" }
    ];
    const animationOptions = [
      { label: __37("None", "digiblocks"), value: "none" },
      ...Object.keys(animations28).map((animation2) => ({
        label: animation2.replace(/-/g, " ").replace(/\b\w/g, (l) => l.toUpperCase()),
        value: animation2
      }))
    ];
    const tabList = [
      {
        name: "options",
        title: __37("Options", "digiblocks"),
        icon: tabIcons32.optionsIcon
      },
      {
        name: "style",
        title: __37("Style", "digiblocks"),
        icon: tabIcons32.styleIcon
      },
      {
        name: "advanced",
        title: __37("Advanced", "digiblocks"),
        icon: tabIcons32.advancedIcon
      }
    ];
    const generateCSS = () => {
      const activeDevice = localActiveDevice;
      let animationCSS = "";
      if (animation && animation !== "none" && animations28[animation]) {
        animationCSS = animations28[animation].keyframes;
      }
      return `
            /* Page Title Block - ${id} */
            .${id} {
                color: ${color};
                text-align: ${align[activeDevice]};
                ${getDimensionCSS27(padding, "padding", activeDevice)}
                margin: 0;
                ${getDimensionCSS27(margin, "margin", activeDevice)}
                transition: color 0.3s ease;
                /* Typography */
                ${typography.fontFamily ? `font-family: ${typography.fontFamily};` : ""}
                ${typography.fontSize?.[activeDevice] ? `font-size: ${typography.fontSize[activeDevice]}${typography.fontSizeUnit || "px"};` : ""}
                ${typography.fontWeight ? `font-weight: ${typography.fontWeight};` : ""}
                ${typography.fontStyle ? `font-style: ${typography.fontStyle};` : ""}
                ${typography.textTransform ? `text-transform: ${typography.textTransform};` : ""}
                ${typography.textDecoration ? `text-decoration: ${typography.textDecoration};` : ""}
                ${typography.lineHeight?.[activeDevice] ? `line-height: ${typography.lineHeight[activeDevice]}${typography.lineHeightUnit || "em"};` : ""}
                ${typography.letterSpacing?.[activeDevice] ? `letter-spacing: ${typography.letterSpacing[activeDevice]}${typography.letterSpacingUnit || "px"};` : ""}
            }
            
            ${hoverColor ? `.${id}:hover { color: ${hoverColor}; }` : ""}
            
            /* Animation keyframes */
            ${animationCSS}

			/* Visibility Controls */
			${visibility.desktop ? `
				@media (min-width: 992px) {
					.${id} {
						opacity: 0.5 !important;
					}
				}
			` : ""}

			${visibility.tablet ? `
				@media (min-width: 768px) and (max-width: 991px) {
					.${id} {
						opacity: 0.5 !important;
					}
				}
			` : ""}

			${visibility.mobile ? `
				@media (max-width: 767px) {
					.${id} {
						opacity: 0.5 !important;
					}
				}
			` : ""}
        `;
    };
    const renderTabContent = () => {
      switch (activeTab) {
        case "options":
          return /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(
            TabPanelBody32,
            {
              tab: "options",
              name: "general",
              title: __37("General", "digiblocks"),
              initialOpen: true
            },
            /* @__PURE__ */ wp.element.createElement(
              Notice2,
              {
                status: "warning",
                isDismissible: false,
                className: "digiblocks-notice components-base-control"
              },
              __37("This is a placeholder. The actual page or post title will be displayed on the frontend.", "digiblocks")
            ),
            /* @__PURE__ */ wp.element.createElement(
              SelectControl31,
              {
                label: __37("Heading Tag", "digiblocks"),
                value: headingTag,
                options: headingTagOptions,
                onChange: (value) => setAttributes({ headingTag: value }),
                __next40pxDefaultSize: true,
                __nextHasNoMarginBottom: true
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              ResponsiveButtonGroup10,
              {
                label: __37("Alignment", "digiblocks"),
                value: align,
                onChange: (value) => setAttributes({ align: value }),
                options: [
                  { label: __37("Left", "digiblocks"), value: "left" },
                  { label: __37("Center", "digiblocks"), value: "center" },
                  { label: __37("Right", "digiblocks"), value: "right" }
                ]
              }
            )
          ));
        case "style":
          return /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(
            TabPanelBody32,
            {
              tab: "style",
              name: "colors",
              title: __37("Colors", "digiblocks"),
              initialOpen: true
            },
            /* @__PURE__ */ wp.element.createElement(
              PanelColorSettings30,
              {
                title: __37("Text Colors", "digiblocks"),
                initialOpen: true,
                enableAlpha: true,
                colorSettings: [
                  {
                    value: color,
                    onChange: (value) => setAttributes({ color: value }),
                    label: __37("Color", "digiblocks")
                  },
                  {
                    value: hoverColor,
                    onChange: (value) => setAttributes({ hoverColor: value }),
                    label: __37("Hover Color", "digiblocks")
                  }
                ]
              }
            )
          ), /* @__PURE__ */ wp.element.createElement(
            TabPanelBody32,
            {
              tab: "style",
              name: "typo",
              title: __37("Typography", "digiblocks"),
              initialOpen: false
            },
            /* @__PURE__ */ wp.element.createElement(
              TypographyControl25,
              {
                label: __37("Typography", "digiblocks"),
                value: typography,
                onChange: (value) => setAttributes({ typography: value }),
                defaults: {
                  fontSize: { desktop: 32, tablet: 28, mobile: 24 },
                  fontSizeUnit: "px",
                  fontWeight: "700",
                  lineHeight: { desktop: 1.2, tablet: 1.2, mobile: 1.2 },
                  lineHeightUnit: "em"
                }
              }
            )
          ), /* @__PURE__ */ wp.element.createElement(
            TabPanelBody32,
            {
              tab: "style",
              name: "spacing",
              title: __37("Spacing", "digiblocks"),
              initialOpen: false
            },
            /* @__PURE__ */ wp.element.createElement(
              ResponsiveControl32,
              {
                label: __37("Padding", "digiblocks")
              },
              /* @__PURE__ */ wp.element.createElement(
                DimensionControl28,
                {
                  values: padding[localActiveDevice],
                  onChange: (value) => setAttributes({
                    padding: {
                      ...padding,
                      [localActiveDevice]: value
                    }
                  })
                }
              )
            ),
            /* @__PURE__ */ wp.element.createElement(
              ResponsiveControl32,
              {
                label: __37("Margin", "digiblocks")
              },
              /* @__PURE__ */ wp.element.createElement(
                DimensionControl28,
                {
                  values: margin[localActiveDevice],
                  onChange: (value) => setAttributes({
                    margin: {
                      ...margin,
                      [localActiveDevice]: value
                    }
                  })
                }
              )
            )
          ));
        case "advanced":
          return /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(
            TabPanelBody32,
            {
              tab: "advanced",
              name: "animation",
              title: __37("Animation", "digiblocks"),
              initialOpen: true
            },
            /* @__PURE__ */ wp.element.createElement(
              SelectControl31,
              {
                label: __37("Animation Effect", "digiblocks"),
                value: animation,
                options: animationOptions,
                onChange: (value) => setAttributes({ animation: value }),
                __next40pxDefaultSize: true,
                __nextHasNoMarginBottom: true
              }
            ),
            animation && animation !== "none" && /* @__PURE__ */ wp.element.createElement("div", { style: { marginTop: "10px" } }, /* @__PURE__ */ wp.element.createElement(
              Button29,
              {
                variant: "secondary",
                isSecondary: true,
                onClick: handlePreviewClick,
                style: { width: "100%" }
              },
              __37("Preview Animation", "digiblocks")
            ))
          ), /* @__PURE__ */ wp.element.createElement(
            TabPanelBody32,
            {
              tab: "advanced",
              name: "visibility",
              title: __37("Visibility", "digiblocks"),
              initialOpen: false
            },
            /* @__PURE__ */ wp.element.createElement("div", { className: "components-base-control__help", style: {
              padding: "12px",
              backgroundColor: "#f0f6fc",
              border: "1px solid #c3ddfd",
              borderRadius: "4px",
              marginBottom: "16px"
            } }, /* @__PURE__ */ wp.element.createElement("strong", null, __37("Editor Note:", "digiblocks")), /* @__PURE__ */ wp.element.createElement("br", null), __37("Hidden elements appear with reduced opacity in the editor for easy editing. Visibility changes only take effect on the frontend.", "digiblocks")),
            /* @__PURE__ */ wp.element.createElement(
              ToggleControl32,
              {
                label: __37("Hide on Desktop", "digiblocks"),
                checked: visibility.desktop,
                onChange: (value) => setAttributes({
                  visibility: {
                    ...visibility,
                    desktop: value
                  }
                }),
                __nextHasNoMarginBottom: true
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              ToggleControl32,
              {
                label: __37("Hide on Tablet", "digiblocks"),
                checked: visibility.tablet,
                onChange: (value) => setAttributes({
                  visibility: {
                    ...visibility,
                    tablet: value
                  }
                }),
                __nextHasNoMarginBottom: true
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              ToggleControl32,
              {
                label: __37("Hide on Mobile", "digiblocks"),
                checked: visibility.mobile,
                onChange: (value) => setAttributes({
                  visibility: {
                    ...visibility,
                    mobile: value
                  }
                }),
                __nextHasNoMarginBottom: true
              }
            )
          ), /* @__PURE__ */ wp.element.createElement(
            TabPanelBody32,
            {
              tab: "advanced",
              name: "additional",
              title: __37("Additional", "digiblocks"),
              initialOpen: false
            },
            /* @__PURE__ */ wp.element.createElement("div", { className: "components-base-control html-anchor-control" }, /* @__PURE__ */ wp.element.createElement("div", { className: "components-base-control__field" }, /* @__PURE__ */ wp.element.createElement("label", { className: "components-base-control__label", htmlFor: "html-anchor" }, __37("HTML anchor", "digiblocks")), /* @__PURE__ */ wp.element.createElement(
              "input",
              {
                className: "components-text-control__input",
                type: "text",
                id: "html-anchor",
                value: anchor || "",
                onChange: (e) => setAttributes({ anchor: e.target.value }),
                "aria-describedby": "html-anchor-help",
                autoCapitalize: "none",
                autoComplete: "off"
              }
            )), /* @__PURE__ */ wp.element.createElement("p", { id: "html-anchor-help", className: "components-base-control__help" }, __37(`Enter a word or two \u2014 without spaces \u2014 to make a unique web address just for this block, called an "anchor". Then, you'll be able to link directly to this section of your page.`, "digiblocks"), " ", /* @__PURE__ */ wp.element.createElement(
              "a",
              {
                className: "components-external-link",
                href: "https://wordpress.org/documentation/article/page-jumps/",
                target: "_blank",
                rel: "external noreferrer noopener"
              },
              /* @__PURE__ */ wp.element.createElement("span", { className: "components-external-link__contents" }, __37("Learn more about anchors", "digiblocks")),
              /* @__PURE__ */ wp.element.createElement("span", { className: "components-external-link__icon", "aria-label": "(opens in a new tab)" }, "\u2197")
            ))),
            /* @__PURE__ */ wp.element.createElement("div", { className: "components-base-control" }, /* @__PURE__ */ wp.element.createElement("div", { className: "components-base-control__field" }, /* @__PURE__ */ wp.element.createElement("label", { className: "components-base-control__label", htmlFor: "additional-css-classes" }, __37("Additional CSS class(es)", "digiblocks")), /* @__PURE__ */ wp.element.createElement(
              "input",
              {
                className: "components-text-control__input",
                type: "text",
                id: "additional-css-classes",
                value: customClasses || "",
                onChange: (e) => setAttributes({ customClasses: e.target.value }),
                "aria-describedby": "additional-css-classes-help",
                autoComplete: "off"
              }
            )), /* @__PURE__ */ wp.element.createElement("p", { id: "additional-css-classes-help", className: "components-base-control__help" }, __37("Separate multiple classes with spaces.", "digiblocks")))
          ));
        default:
          return null;
      }
    };
    const blockClasses = `digiblocks-page-title ${id} ${animation !== "none" ? `animate-${animation}` : ""} ${customClasses || ""}`;
    const blockProps = useBlockProps59({
      className: blockClasses,
      id: anchor || null
    });
    const TagName = headingTag;
    return /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(InspectorControls32, null, /* @__PURE__ */ wp.element.createElement(
      CustomTabPanel32,
      {
        tabs: tabList,
        activeTab,
        onSelect: setActiveTab
      },
      renderTabContent()
    )), /* @__PURE__ */ wp.element.createElement("style", { dangerouslySetInnerHTML: { __html: generateCSS() } }), /* @__PURE__ */ wp.element.createElement(TagName, { ...blockProps }, __37("Page Title", "digiblocks")));
  };
  var edit_default32 = PageTitleEdit;

  // blocks/page-title/save.js
  var PageTitleSave = () => {
    return null;
  };
  var save_default32 = PageTitleSave;

  // blocks/breadcrumbs/edit.js
  var { __: __38 } = window.wp.i18n;
  var {
    useBlockProps: useBlockProps60,
    InspectorControls: InspectorControls33,
    PanelColorSettings: PanelColorSettings31
  } = window.wp.blockEditor;
  var {
    TextControl: TextControl17,
    ToggleControl: ToggleControl33,
    RangeControl: RangeControl30,
    Notice: Notice3,
    Button: Button30,
    __experimentalToggleGroupControl: ToggleGroupControl31,
    __experimentalToggleGroupControlOption: ToggleGroupControlOption31
  } = window.wp.components;
  var { useState: useState33, useEffect: useEffect33, useRef: useRef28 } = window.wp.element;
  var { useBlockId: useBlockId33, getDimensionCSS: getDimensionCSS28, animations: animations29, animationPreview: animationPreview29 } = digi.utils;
  var { tabIcons: tabIcons33 } = digi.icons;
  var { ResponsiveButtonGroup: ResponsiveButtonGroup11, ResponsiveControl: ResponsiveControl33, DimensionControl: DimensionControl29, TypographyControl: TypographyControl26, CustomTabPanel: CustomTabPanel33, TabPanelBody: TabPanelBody33 } = digi.components;
  var BreadcrumbsEdit = ({ attributes, setAttributes, clientId }) => {
    const {
      id,
      anchor,
      visibility,
      customClasses,
      align,
      textColor,
      linkColor,
      linkHoverColor,
      separatorColor,
      typography,
      margin,
      animation,
      showHome,
      homeText,
      showCurrent,
      useYoast,
      useRankMath,
      separatorSize,
      separatorSpacing,
      useMicrodata
    } = attributes;
    useBlockId33(id, clientId, setAttributes);
    const [localActiveDevice, setLocalActiveDevice] = useState33(window.digi.responsiveState.activeDevice);
    const [activeTab, setActiveTab] = useState33(() => {
      if (window.digi.uiState) {
        const savedTab = window.digi.uiState.getActiveTab(clientId);
        if (savedTab)
          return savedTab;
      }
      return "options";
    });
    useEffect33(() => {
      const unsubscribe = window.digi.responsiveState.subscribe((device) => {
        setLocalActiveDevice(device);
      });
      return unsubscribe;
    }, []);
    const previewTimeoutRef = useRef28(null);
    useEffect33(() => {
      if (animation && animation !== "none") {
        const timeoutId = setTimeout(() => {
          animationPreview29(id, animation, animations29, previewTimeoutRef);
        }, 100);
        return () => clearTimeout(timeoutId);
      }
    }, [animation]);
    const handlePreviewClick = () => {
      animationPreview29(id, animation, animations29, previewTimeoutRef);
    };
    const animationOptions = [
      { label: __38("None", "digiblocks"), value: "none" },
      ...Object.keys(animations29).map((animation2) => ({
        label: animation2.replace(/-/g, " ").replace(/\b\w/g, (l) => l.toUpperCase()),
        value: animation2
      }))
    ];
    const tabList = [
      {
        name: "options",
        title: __38("Options", "digiblocks"),
        icon: tabIcons33.optionsIcon
      },
      {
        name: "style",
        title: __38("Style", "digiblocks"),
        icon: tabIcons33.styleIcon
      },
      {
        name: "advanced",
        title: __38("Advanced", "digiblocks"),
        icon: tabIcons33.advancedIcon
      }
    ];
    const generateCSS = () => {
      const activeDevice = localActiveDevice;
      let animationCSS = "";
      if (animation && animation !== "none" && animations29[animation]) {
        animationCSS = animations29[animation].keyframes;
      }
      return `
            /* Breadcrumbs Block - ${id} */
            .${id} {
                text-align: ${align[activeDevice]};
                ${getDimensionCSS28(margin, "margin", activeDevice)}
                transition: all 0.3s ease;
            }
            
            .${id} .digiblocks-breadcrumb-list {
                display: inline-flex;
                flex-wrap: wrap;
                align-items: center;
                list-style: none;
                margin: 0;
                padding: 0;
            }
            
            .${id} .digiblocks-breadcrumb-item {
                display: flex;
                align-items: center;
                color: ${textColor};
                /* Typography */
                ${typography.fontFamily ? `font-family: ${typography.fontFamily};` : ""}
                ${typography.fontSize?.[activeDevice] ? `font-size: ${typography.fontSize[activeDevice]}${typography.fontSizeUnit || "px"};` : ""}
                ${typography.fontWeight ? `font-weight: ${typography.fontWeight};` : ""}
                ${typography.fontStyle ? `font-style: ${typography.fontStyle};` : ""}
                ${typography.textTransform ? `text-transform: ${typography.textTransform};` : ""}
                ${typography.textDecoration ? `text-decoration: ${typography.textDecoration};` : ""}
                ${typography.lineHeight?.[activeDevice] ? `line-height: ${typography.lineHeight[activeDevice]}${typography.lineHeightUnit || "em"};` : ""}
                ${typography.letterSpacing?.[activeDevice] ? `letter-spacing: ${typography.letterSpacing[activeDevice]}${typography.letterSpacingUnit || "px"};` : ""}
            }
            
            .${id} .digiblocks-breadcrumb-link {
                color: ${linkColor};
                text-decoration: none;
                transition: color 0.3s ease;
            }
            
            .${id} .digiblocks-breadcrumb-link:hover {
                color: ${linkHoverColor};
            }
            
            .${id} .digiblocks-breadcrumb-separator {
                display: flex;
                align-items: center;
                margin: 0 ${separatorSpacing[activeDevice]}px;
                color: ${separatorColor};
            }
            
            .${id} .digiblocks-breadcrumb-separator svg {
                width: ${separatorSize[activeDevice]}px;
                height: ${separatorSize[activeDevice]}px;
                fill: currentColor;
            }
            
            /* Animation keyframes */
            ${animationCSS}

			/* Visibility Controls */
			${visibility.desktop ? `
				@media (min-width: 992px) {
					.${id} {
						opacity: 0.5 !important;
					}
				}
			` : ""}

			${visibility.tablet ? `
				@media (min-width: 768px) and (max-width: 991px) {
					.${id} {
						opacity: 0.5 !important;
					}
				}
			` : ""}

			${visibility.mobile ? `
				@media (max-width: 767px) {
					.${id} {
						opacity: 0.5 !important;
					}
				}
			` : ""}
        `;
    };
    const renderTabContent = () => {
      switch (activeTab) {
        case "options":
          return /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(
            TabPanelBody33,
            {
              tab: "options",
              name: "general",
              title: __38("General", "digiblocks"),
              initialOpen: true
            },
            /* @__PURE__ */ wp.element.createElement(
              Notice3,
              {
                status: "warning",
                isDismissible: false,
                className: "digiblocks-notice components-base-control"
              },
              __38("This is a placeholder. The actual breadcrumb trail will be displayed on the frontend.", "digiblocks")
            ),
            /* @__PURE__ */ wp.element.createElement(
              ResponsiveButtonGroup11,
              {
                label: __38("Alignment", "digiblocks"),
                value: align,
                onChange: (value) => setAttributes({ align: value }),
                options: [
                  { label: __38("Left", "digiblocks"), value: "left" },
                  { label: __38("Center", "digiblocks"), value: "center" },
                  { label: __38("Right", "digiblocks"), value: "right" }
                ]
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              ToggleControl33,
              {
                label: __38("Show Home Link", "digiblocks"),
                checked: showHome,
                onChange: (value) => setAttributes({ showHome: value }),
                __nextHasNoMarginBottom: true
              }
            ),
            showHome && /* @__PURE__ */ wp.element.createElement(
              TextControl17,
              {
                label: __38("Home Text", "digiblocks"),
                value: homeText,
                onChange: (value) => setAttributes({ homeText: value }),
                __next40pxDefaultSize: true,
                __nextHasNoMarginBottom: true,
                placeholder: __38("Home", "digiblocks")
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              ToggleControl33,
              {
                label: __38("Show Current Page", "digiblocks"),
                checked: showCurrent,
                onChange: (value) => setAttributes({ showCurrent: value }),
                __nextHasNoMarginBottom: true
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              ToggleControl33,
              {
                label: __38("Add Schema Markup (Microdata)", "digiblocks"),
                checked: useMicrodata,
                onChange: (value) => setAttributes({ useMicrodata: value }),
                help: __38("Adds structured data to help search engines understand your content.", "digiblocks"),
                __nextHasNoMarginBottom: true
              }
            )
          ), /* @__PURE__ */ wp.element.createElement(
            TabPanelBody33,
            {
              tab: "options",
              name: "separator",
              title: __38("Separator", "digiblocks"),
              initialOpen: false
            },
            /* @__PURE__ */ wp.element.createElement(
              ResponsiveControl33,
              {
                label: __38("Separator Size", "digiblocks")
              },
              /* @__PURE__ */ wp.element.createElement(
                RangeControl30,
                {
                  value: separatorSize[localActiveDevice],
                  onChange: (value) => setAttributes({
                    separatorSize: {
                      ...separatorSize,
                      [localActiveDevice]: value
                    }
                  }),
                  min: 6,
                  max: 36,
                  __next40pxDefaultSize: true,
                  __nextHasNoMarginBottom: true
                }
              )
            ),
            /* @__PURE__ */ wp.element.createElement(
              ResponsiveControl33,
              {
                label: __38("Separator Spacing", "digiblocks")
              },
              /* @__PURE__ */ wp.element.createElement(
                RangeControl30,
                {
                  value: separatorSpacing[localActiveDevice],
                  onChange: (value) => setAttributes({
                    separatorSpacing: {
                      ...separatorSpacing,
                      [localActiveDevice]: value
                    }
                  }),
                  min: 0,
                  max: 30,
                  __next40pxDefaultSize: true,
                  __nextHasNoMarginBottom: true
                }
              )
            )
          ), /* @__PURE__ */ wp.element.createElement(
            TabPanelBody33,
            {
              tab: "options",
              name: "integrations",
              title: __38("Integrations", "digiblocks"),
              initialOpen: false
            },
            /* @__PURE__ */ wp.element.createElement(
              ToggleControl33,
              {
                label: __38("Use Yoast SEO Breadcrumbs", "digiblocks"),
                checked: useYoast,
                onChange: (value) => setAttributes({ useYoast: value }),
                help: __38("If Yoast SEO is activated, use its breadcrumb format.", "digiblocks"),
                __nextHasNoMarginBottom: true
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              ToggleControl33,
              {
                label: __38("Use Rank Math Breadcrumbs", "digiblocks"),
                checked: useRankMath,
                onChange: (value) => setAttributes({ useRankMath: value }),
                help: __38("If Rank Math is activated, use its breadcrumb format.", "digiblocks"),
                __nextHasNoMarginBottom: true
              }
            )
          ));
        case "style":
          return /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(
            TabPanelBody33,
            {
              tab: "style",
              name: "colors",
              title: __38("Colors", "digiblocks"),
              initialOpen: true
            },
            /* @__PURE__ */ wp.element.createElement(
              PanelColorSettings31,
              {
                title: __38("Text & Link Colors", "digiblocks"),
                initialOpen: true,
                enableAlpha: true,
                colorSettings: [
                  {
                    value: textColor,
                    onChange: (value) => setAttributes({ textColor: value }),
                    label: __38("Text Color", "digiblocks")
                  },
                  {
                    value: linkColor,
                    onChange: (value) => setAttributes({ linkColor: value }),
                    label: __38("Link Color", "digiblocks")
                  },
                  {
                    value: linkHoverColor,
                    onChange: (value) => setAttributes({ linkHoverColor: value }),
                    label: __38("Link Hover Color", "digiblocks")
                  },
                  {
                    value: separatorColor,
                    onChange: (value) => setAttributes({ separatorColor: value }),
                    label: __38("Separator Color", "digiblocks")
                  }
                ]
              }
            )
          ), /* @__PURE__ */ wp.element.createElement(
            TabPanelBody33,
            {
              tab: "style",
              name: "typo",
              title: __38("Typography", "digiblocks"),
              initialOpen: false
            },
            /* @__PURE__ */ wp.element.createElement(
              TypographyControl26,
              {
                label: __38("Typography", "digiblocks"),
                value: typography,
                onChange: (value) => setAttributes({ typography: value }),
                defaults: {
                  fontSize: { desktop: 14, tablet: 13, mobile: 12 },
                  fontSizeUnit: "px",
                  lineHeight: { desktop: 1.5, tablet: 1.5, mobile: 1.5 },
                  lineHeightUnit: "em"
                }
              }
            )
          ), /* @__PURE__ */ wp.element.createElement(
            TabPanelBody33,
            {
              tab: "style",
              name: "spacing",
              title: __38("Spacing", "digiblocks"),
              initialOpen: false
            },
            /* @__PURE__ */ wp.element.createElement(
              ResponsiveControl33,
              {
                label: __38("Margin", "digiblocks")
              },
              /* @__PURE__ */ wp.element.createElement(
                DimensionControl29,
                {
                  values: margin[localActiveDevice],
                  onChange: (value) => setAttributes({
                    margin: {
                      ...margin,
                      [localActiveDevice]: value
                    }
                  })
                }
              )
            )
          ));
        case "advanced":
          return /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(
            TabPanelBody33,
            {
              tab: "advanced",
              name: "animation",
              title: __38("Animation", "digiblocks"),
              initialOpen: true
            },
            /* @__PURE__ */ wp.element.createElement(
              SelectControl,
              {
                label: __38("Animation Effect", "digiblocks"),
                value: animation,
                options: animationOptions,
                onChange: (value) => setAttributes({ animation: value }),
                __next40pxDefaultSize: true,
                __nextHasNoMarginBottom: true
              }
            ),
            animation && animation !== "none" && /* @__PURE__ */ wp.element.createElement("div", { style: { marginTop: "10px" } }, /* @__PURE__ */ wp.element.createElement(
              Button30,
              {
                variant: "secondary",
                isSecondary: true,
                onClick: handlePreviewClick,
                style: { width: "100%" }
              },
              __38("Preview Animation", "digiblocks")
            ))
          ), /* @__PURE__ */ wp.element.createElement(
            TabPanelBody33,
            {
              tab: "advanced",
              name: "visibility",
              title: __38("Visibility", "digiblocks"),
              initialOpen: false
            },
            /* @__PURE__ */ wp.element.createElement("div", { className: "components-base-control__help", style: {
              padding: "12px",
              backgroundColor: "#f0f6fc",
              border: "1px solid #c3ddfd",
              borderRadius: "4px",
              marginBottom: "16px"
            } }, /* @__PURE__ */ wp.element.createElement("strong", null, __38("Editor Note:", "digiblocks")), /* @__PURE__ */ wp.element.createElement("br", null), __38("Hidden elements appear with reduced opacity in the editor for easy editing. Visibility changes only take effect on the frontend.", "digiblocks")),
            /* @__PURE__ */ wp.element.createElement(
              ToggleControl33,
              {
                label: __38("Hide on Desktop", "digiblocks"),
                checked: visibility.desktop,
                onChange: (value) => setAttributes({
                  visibility: {
                    ...visibility,
                    desktop: value
                  }
                }),
                __nextHasNoMarginBottom: true
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              ToggleControl33,
              {
                label: __38("Hide on Tablet", "digiblocks"),
                checked: visibility.tablet,
                onChange: (value) => setAttributes({
                  visibility: {
                    ...visibility,
                    tablet: value
                  }
                }),
                __nextHasNoMarginBottom: true
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              ToggleControl33,
              {
                label: __38("Hide on Mobile", "digiblocks"),
                checked: visibility.mobile,
                onChange: (value) => setAttributes({
                  visibility: {
                    ...visibility,
                    mobile: value
                  }
                }),
                __nextHasNoMarginBottom: true
              }
            )
          ), /* @__PURE__ */ wp.element.createElement(
            TabPanelBody33,
            {
              tab: "advanced",
              name: "additional",
              title: __38("Additional", "digiblocks"),
              initialOpen: false
            },
            /* @__PURE__ */ wp.element.createElement("div", { className: "components-base-control html-anchor-control" }, /* @__PURE__ */ wp.element.createElement("div", { className: "components-base-control__field" }, /* @__PURE__ */ wp.element.createElement("label", { className: "components-base-control__label", htmlFor: "html-anchor" }, __38("HTML anchor", "digiblocks")), /* @__PURE__ */ wp.element.createElement(
              "input",
              {
                className: "components-text-control__input",
                type: "text",
                id: "html-anchor",
                value: anchor || "",
                onChange: (e) => setAttributes({ anchor: e.target.value }),
                "aria-describedby": "html-anchor-help",
                autoCapitalize: "none",
                autoComplete: "off"
              }
            )), /* @__PURE__ */ wp.element.createElement("p", { id: "html-anchor-help", className: "components-base-control__help" }, __38(`Enter a word or two \u2014 without spaces \u2014 to make a unique web address just for this block, called an "anchor". Then, you'll be able to link directly to this section of your page.`, "digiblocks"), " ", /* @__PURE__ */ wp.element.createElement(
              "a",
              {
                className: "components-external-link",
                href: "https://wordpress.org/documentation/article/page-jumps/",
                target: "_blank",
                rel: "external noreferrer noopener"
              },
              /* @__PURE__ */ wp.element.createElement("span", { className: "components-external-link__contents" }, __38("Learn more about anchors", "digiblocks")),
              /* @__PURE__ */ wp.element.createElement("span", { className: "components-external-link__icon", "aria-label": "(opens in a new tab)" }, "\u2197")
            ))),
            /* @__PURE__ */ wp.element.createElement("div", { className: "components-base-control" }, /* @__PURE__ */ wp.element.createElement("div", { className: "components-base-control__field" }, /* @__PURE__ */ wp.element.createElement("label", { className: "components-base-control__label", htmlFor: "additional-css-classes" }, __38("Additional CSS class(es)", "digiblocks")), /* @__PURE__ */ wp.element.createElement(
              "input",
              {
                className: "components-text-control__input",
                type: "text",
                id: "additional-css-classes",
                value: customClasses || "",
                onChange: (e) => setAttributes({ customClasses: e.target.value }),
                "aria-describedby": "additional-css-classes-help",
                autoComplete: "off"
              }
            )), /* @__PURE__ */ wp.element.createElement("p", { id: "additional-css-classes-help", className: "components-base-control__help" }, __38("Separate multiple classes with spaces.", "digiblocks")))
          ));
        default:
          return null;
      }
    };
    const blockClasses = `digiblocks-breadcrumbs ${id} ${animation !== "none" ? `animate-${animation}` : ""} ${customClasses || ""}`;
    const blockProps = useBlockProps60({
      className: blockClasses,
      id: anchor || null
    });
    const renderPlaceholderBreadcrumbs = () => {
      const items = [
        { label: homeText || __38("Home", "digiblocks"), url: "#" },
        { label: __38("Category", "digiblocks"), url: "#" },
        { label: __38("Current Page", "digiblocks"), url: "", current: true }
      ];
      return /* @__PURE__ */ wp.element.createElement("nav", { "aria-label": __38("Breadcrumb", "digiblocks") }, /* @__PURE__ */ wp.element.createElement("ol", { className: "digiblocks-breadcrumb-list" }, items.map((item, index) => {
        if (index === items.length - 1 && !showCurrent) {
          return null;
        }
        if (index === 0 && !showHome) {
          return null;
        }
        const showSeparator = index < items.length - 1;
        const separator = showSeparator ? /* @__PURE__ */ wp.element.createElement("span", { className: "digiblocks-breadcrumb-separator", "aria-hidden": "true" }, /* @__PURE__ */ wp.element.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 320 512", width: "1em", height: "1em" }, /* @__PURE__ */ wp.element.createElement("path", { d: "M273 239c9.4 9.4 9.4 24.6 0 33.9L113 433c-9.4 9.4-24.6 9.4-33.9 0s-9.4-24.6 0-33.9l143-143L79 113c-9.4-9.4-9.4-24.6 0-33.9s24.6-9.4 33.9 0L273 239z" }))) : null;
        return /* @__PURE__ */ wp.element.createElement("li", { key: index, className: "digiblocks-breadcrumb-item" }, item.current ? /* @__PURE__ */ wp.element.createElement("span", { className: "digiblocks-breadcrumb-current" }, item.label) : /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement("a", { href: item.url, className: "digiblocks-breadcrumb-link" }, item.label), separator));
      })));
    };
    return /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(InspectorControls33, null, /* @__PURE__ */ wp.element.createElement(
      CustomTabPanel33,
      {
        tabs: tabList,
        activeTab,
        onSelect: setActiveTab
      },
      renderTabContent()
    )), /* @__PURE__ */ wp.element.createElement("style", { dangerouslySetInnerHTML: { __html: generateCSS() } }), /* @__PURE__ */ wp.element.createElement("div", { ...blockProps }, renderPlaceholderBreadcrumbs()));
  };
  var edit_default33 = BreadcrumbsEdit;

  // blocks/breadcrumbs/save.js
  var BreadcrumbsSave = () => {
    return null;
  };
  var save_default33 = BreadcrumbsSave;

  // blocks/featured-image/edit.js
  var { __: __39 } = window.wp.i18n;
  var {
    useBlockProps: useBlockProps61,
    InspectorControls: InspectorControls34,
    PanelColorSettings: PanelColorSettings32
  } = window.wp.blockEditor;
  var {
    SelectControl: SelectControl32,
    ToggleControl: ToggleControl34,
    RangeControl: RangeControl31,
    Button: Button31,
    Notice: Notice4,
    __experimentalToggleGroupControl: ToggleGroupControl32,
    __experimentalToggleGroupControlOption: ToggleGroupControlOption32
  } = window.wp.components;
  var { useState: useState34, useEffect: useEffect34, useRef: useRef29 } = window.wp.element;
  var { useBlockId: useBlockId34, getDimensionCSS: getDimensionCSS29, animations: animations30, animationPreview: animationPreview30 } = digi.utils;
  var { tabIcons: tabIcons34 } = digi.icons;
  var { ResponsiveButtonGroup: ResponsiveButtonGroup12, ResponsiveControl: ResponsiveControl34, DimensionControl: DimensionControl30, BoxShadowControl: BoxShadowControl25, CustomTabPanel: CustomTabPanel34, TabPanelBody: TabPanelBody34 } = digi.components;
  var FeaturedImageEdit = ({ attributes, setAttributes, clientId }) => {
    const {
      id,
      anchor,
      visibility,
      customClasses,
      imageSize,
      imageCrop,
      aspectRatio,
      customHeight,
      enableCaption,
      linkToPost,
      width,
      align,
      borderStyle,
      borderWidth,
      borderRadius,
      borderColor,
      boxShadow,
      boxShadowHover,
      padding,
      margin,
      animation
    } = attributes;
    useBlockId34(id, clientId, setAttributes);
    const [localActiveDevice, setLocalActiveDevice] = useState34(window.digi.responsiveState.activeDevice);
    const [activeTab, setActiveTab] = useState34(() => {
      if (window.digi.uiState) {
        const savedTab = window.digi.uiState.getActiveTab(clientId);
        if (savedTab)
          return savedTab;
      }
      return "options";
    });
    useEffect34(() => {
      const unsubscribe = window.digi.responsiveState.subscribe((device) => {
        setLocalActiveDevice(device);
      });
      return unsubscribe;
    }, []);
    const previewTimeoutRef = useRef29(null);
    useEffect34(() => {
      if (animation && animation !== "none") {
        const timeoutId = setTimeout(() => {
          animationPreview30(id, animation, animations30, previewTimeoutRef);
        }, 100);
        return () => clearTimeout(timeoutId);
      }
    }, [animation]);
    const handlePreviewClick = () => {
      animationPreview30(id, animation, animations30, previewTimeoutRef);
    };
    const imageSizeOptions = [
      { label: __39("Thumbnail", "digiblocks"), value: "thumbnail" },
      { label: __39("Medium", "digiblocks"), value: "medium" },
      { label: __39("Large", "digiblocks"), value: "large" },
      { label: __39("Full", "digiblocks"), value: "full" },
      { label: __39("Custom", "digiblocks"), value: "custom" }
    ];
    const aspectRatioOptions = [
      { label: __39("Default", "digiblocks"), value: "default" },
      { label: __39("1:1", "digiblocks"), value: "1:1" },
      { label: __39("4:3", "digiblocks"), value: "4:3" },
      { label: __39("16:9", "digiblocks"), value: "16:9" },
      { label: __39("3:2", "digiblocks"), value: "3:2" },
      { label: __39("Custom", "digiblocks"), value: "custom" }
    ];
    const borderStyleOptions = [
      { label: __39("None", "digiblocks"), value: "none" },
      { label: __39("Solid", "digiblocks"), value: "solid" },
      { label: __39("Dashed", "digiblocks"), value: "dashed" },
      { label: __39("Dotted", "digiblocks"), value: "dotted" },
      { label: __39("Double", "digiblocks"), value: "double" }
    ];
    const animationOptions = [
      { label: __39("None", "digiblocks"), value: "none" },
      ...Object.keys(animations30).map((animation2) => ({
        label: animation2.replace(/-/g, " ").replace(/\b\w/g, (l) => l.toUpperCase()),
        value: animation2
      }))
    ];
    const tabList = [
      {
        name: "options",
        title: __39("Options", "digiblocks"),
        icon: tabIcons34.optionsIcon
      },
      {
        name: "style",
        title: __39("Style", "digiblocks"),
        icon: tabIcons34.styleIcon
      },
      {
        name: "advanced",
        title: __39("Advanced", "digiblocks"),
        icon: tabIcons34.advancedIcon
      }
    ];
    const generateCSS = () => {
      const activeDevice = localActiveDevice;
      let widthCSS = "";
      if (width && width[activeDevice]) {
        widthCSS = `width: ${width[activeDevice]}%;`;
      } else {
        widthCSS = "width: 100%;";
      }
      let alignCSS = "";
      if (align && align[activeDevice]) {
        if (align[activeDevice] === "center") {
          alignCSS = "justify-content: center;";
        } else if (align[activeDevice] === "right") {
          alignCSS = "justify-content: flex-end;";
        } else if (align[activeDevice] === "left") {
          alignCSS = "justify-content: flex-start;";
        }
      }
      let aspectRatioCSS = "";
      if (imageCrop && aspectRatio !== "default") {
        if (aspectRatio === "1:1") {
          aspectRatioCSS = "aspect-ratio: 1/1;";
        } else if (aspectRatio === "4:3") {
          aspectRatioCSS = "aspect-ratio: 4/3;";
        } else if (aspectRatio === "16:9") {
          aspectRatioCSS = "aspect-ratio: 16/9;";
        } else if (aspectRatio === "3:2") {
          aspectRatioCSS = "aspect-ratio: 3/2;";
        } else if (aspectRatio === "custom" && customHeight && customHeight[activeDevice]) {
          aspectRatioCSS = `height: ${customHeight[activeDevice]}px;`;
        }
      }
      let borderCSS = "";
      if (borderStyle && borderStyle !== "none") {
        borderCSS = `
                border-style: ${borderStyle};
                border-color: ${borderColor || "#e0e0e0"};
                ${getDimensionCSS29(borderWidth, "border-width", activeDevice)}
            `;
      }
      let boxShadowCSS = "box-shadow: none;";
      if (boxShadow && boxShadow.enable) {
        const inset = boxShadow.position === "inset" ? "inset " : "";
        boxShadowCSS = `box-shadow: ${inset}${boxShadow.horizontal}px ${boxShadow.vertical}px ${boxShadow.blur}px ${boxShadow.spread}px ${boxShadow.color};`;
      }
      let hoverShadowCSS = "";
      if (boxShadowHover && boxShadowHover.enable) {
        const insetHover = boxShadowHover.position === "inset" ? "inset " : "";
        hoverShadowCSS = `box-shadow: ${insetHover}${boxShadowHover.horizontal}px ${boxShadowHover.vertical}px ${boxShadowHover.blur}px ${boxShadowHover.spread}px ${boxShadowHover.color};`;
      }
      let animationCSS = "";
      if (animation && animation !== "none" && animations30[animation]) {
        animationCSS = animations30[animation].keyframes;
      }
      return `
            /* Featured Image Block - ${id} */
			.${id} {
                display: flex;
                ${alignCSS}
                width: 100%;
                ${getDimensionCSS29(margin, "margin", activeDevice)}
            }

            .${id} figure {
                display: flex;
                flex-direction: column;
                ${widthCSS}
                ${getDimensionCSS29(padding, "padding", activeDevice)}
				margin: 0;
            }
            
            .${id} img {
                display: flex;
				width: 100%;
                max-width: 100%;
                height: auto;
                ${aspectRatioCSS}
                object-fit: ${imageCrop ? "cover" : "contain"};
                ${borderCSS}
                ${getDimensionCSS29(borderRadius, "border-radius", activeDevice)}
                ${boxShadowCSS}
                transition: all 0.3s ease;
            }
            
            .${id} img:hover {
                ${hoverShadowCSS}
            }
            
            .${id} figcaption {
                margin-top: 10px;
                text-align: center;
                font-size: 14px;
                color: #666;
            }
            
            /* Animation keyframes */
            ${animationCSS}

			/* Visibility Controls */
			${visibility.desktop ? `
				@media (min-width: 992px) {
					.${id} {
						opacity: 0.5 !important;
					}
				}
			` : ""}

			${visibility.tablet ? `
				@media (min-width: 768px) and (max-width: 991px) {
					.${id} {
						opacity: 0.5 !important;
					}
				}
			` : ""}

			${visibility.mobile ? `
				@media (max-width: 767px) {
					.${id} {
						opacity: 0.5 !important;
					}
				}
			` : ""}
        `;
    };
    const renderTabContent = () => {
      switch (activeTab) {
        case "options":
          return /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(
            TabPanelBody34,
            {
              tab: "options",
              name: "image",
              title: __39("Image Settings", "digiblocks"),
              initialOpen: true
            },
            /* @__PURE__ */ wp.element.createElement(
              Notice4,
              {
                status: "warning",
                isDismissible: false,
                className: "digiblocks-notice components-base-control"
              },
              __39("This is a placeholder. The actual featured image will be displayed on the frontend.", "digiblocks")
            ),
            /* @__PURE__ */ wp.element.createElement(
              SelectControl32,
              {
                label: __39("Image Size", "digiblocks"),
                value: imageSize,
                options: imageSizeOptions,
                onChange: (value) => setAttributes({ imageSize: value }),
                __next40pxDefaultSize: true,
                __nextHasNoMarginBottom: true
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              ToggleControl34,
              {
                label: __39("Enable Image Cropping", "digiblocks"),
                checked: imageCrop,
                onChange: (value) => setAttributes({ imageCrop: value }),
                help: __39("Crop image to maintain consistent dimensions", "digiblocks"),
                __nextHasNoMarginBottom: true
              }
            ),
            imageCrop && /* @__PURE__ */ wp.element.createElement(
              SelectControl32,
              {
                label: __39("Aspect Ratio", "digiblocks"),
                value: aspectRatio,
                options: aspectRatioOptions,
                onChange: (value) => setAttributes({ aspectRatio: value }),
                __next40pxDefaultSize: true,
                __nextHasNoMarginBottom: true
              }
            ),
            imageCrop && aspectRatio === "custom" && /* @__PURE__ */ wp.element.createElement(
              ResponsiveControl34,
              {
                label: __39("Custom Height", "digiblocks")
              },
              /* @__PURE__ */ wp.element.createElement(
                RangeControl31,
                {
                  value: customHeight ? customHeight[localActiveDevice] : 200,
                  onChange: (value) => setAttributes({
                    customHeight: {
                      ...customHeight,
                      [localActiveDevice]: value
                    }
                  }),
                  min: 50,
                  max: 800,
                  __next40pxDefaultSize: true,
                  __nextHasNoMarginBottom: true
                }
              )
            ),
            /* @__PURE__ */ wp.element.createElement(
              ToggleControl34,
              {
                label: __39("Display Caption", "digiblocks"),
                checked: enableCaption,
                onChange: (value) => setAttributes({ enableCaption: value }),
                help: __39("Display the image caption if available", "digiblocks"),
                __nextHasNoMarginBottom: true
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              ToggleControl34,
              {
                label: __39("Link to Post", "digiblocks"),
                checked: linkToPost,
                onChange: (value) => setAttributes({ linkToPost: value }),
                help: __39("Make the image link to the post", "digiblocks"),
                __nextHasNoMarginBottom: true
              }
            )
          ), /* @__PURE__ */ wp.element.createElement(
            TabPanelBody34,
            {
              tab: "options",
              name: "alignment",
              title: __39("Alignment & Width", "digiblocks"),
              initialOpen: false
            },
            /* @__PURE__ */ wp.element.createElement(
              ResponsiveButtonGroup12,
              {
                label: __39("Alignment", "digiblocks"),
                value: align,
                onChange: (value) => setAttributes({ align: value }),
                options: [
                  { label: __39("Left", "digiblocks"), value: "left" },
                  { label: __39("Center", "digiblocks"), value: "center" },
                  { label: __39("Right", "digiblocks"), value: "right" }
                ]
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              ResponsiveControl34,
              {
                label: __39("Width (%)", "digiblocks")
              },
              /* @__PURE__ */ wp.element.createElement(
                RangeControl31,
                {
                  value: width ? width[localActiveDevice] : 100,
                  onChange: (value) => setAttributes({
                    width: {
                      ...width,
                      [localActiveDevice]: value
                    }
                  }),
                  min: 10,
                  max: 100,
                  __next40pxDefaultSize: true,
                  __nextHasNoMarginBottom: true
                }
              )
            )
          ));
        case "style":
          return /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(
            TabPanelBody34,
            {
              tab: "style",
              name: "border",
              title: __39("Border & Radius", "digiblocks"),
              initialOpen: true
            },
            /* @__PURE__ */ wp.element.createElement(
              SelectControl32,
              {
                label: __39("Border Style", "digiblocks"),
                value: borderStyle,
                options: borderStyleOptions,
                onChange: (value) => setAttributes({ borderStyle: value }),
                __next40pxDefaultSize: true,
                __nextHasNoMarginBottom: true
              }
            ),
            borderStyle && borderStyle !== "none" && /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(
              PanelColorSettings32,
              {
                title: "",
                initialOpen: true,
                enableAlpha: true,
                colorSettings: [
                  {
                    value: borderColor,
                    onChange: (value) => setAttributes({ borderColor: value }),
                    label: __39("Border Color", "digiblocks")
                  }
                ]
              }
            ), /* @__PURE__ */ wp.element.createElement(
              ResponsiveControl34,
              {
                label: __39("Border Width", "digiblocks")
              },
              /* @__PURE__ */ wp.element.createElement(
                DimensionControl30,
                {
                  values: borderWidth[localActiveDevice],
                  onChange: (value) => setAttributes({
                    borderWidth: {
                      ...borderWidth,
                      [localActiveDevice]: value
                    }
                  })
                }
              )
            )),
            /* @__PURE__ */ wp.element.createElement(
              ResponsiveControl34,
              {
                label: __39("Border Radius", "digiblocks")
              },
              /* @__PURE__ */ wp.element.createElement(
                DimensionControl30,
                {
                  values: borderRadius[localActiveDevice],
                  onChange: (value) => setAttributes({
                    borderRadius: {
                      ...borderRadius,
                      [localActiveDevice]: value
                    }
                  }),
                  units: [
                    { label: "px", value: "px" },
                    { label: "%", value: "%" }
                  ]
                }
              )
            )
          ), /* @__PURE__ */ wp.element.createElement(
            TabPanelBody34,
            {
              tab: "style",
              name: "shadow",
              title: __39("Box Shadow", "digiblocks"),
              initialOpen: false
            },
            /* @__PURE__ */ wp.element.createElement(
              BoxShadowControl25,
              {
                normalValue: boxShadow,
                hoverValue: boxShadowHover,
                onNormalChange: (value) => setAttributes({
                  boxShadow: value
                }),
                onHoverChange: (value) => setAttributes({
                  boxShadowHover: value
                })
              }
            )
          ), /* @__PURE__ */ wp.element.createElement(
            TabPanelBody34,
            {
              tab: "style",
              name: "spacing",
              title: __39("Spacing", "digiblocks"),
              initialOpen: false
            },
            /* @__PURE__ */ wp.element.createElement(
              ResponsiveControl34,
              {
                label: __39("Padding", "digiblocks")
              },
              /* @__PURE__ */ wp.element.createElement(
                DimensionControl30,
                {
                  values: padding[localActiveDevice],
                  onChange: (value) => setAttributes({
                    padding: {
                      ...padding,
                      [localActiveDevice]: value
                    }
                  })
                }
              )
            ),
            /* @__PURE__ */ wp.element.createElement(
              ResponsiveControl34,
              {
                label: __39("Margin", "digiblocks")
              },
              /* @__PURE__ */ wp.element.createElement(
                DimensionControl30,
                {
                  values: margin[localActiveDevice],
                  onChange: (value) => setAttributes({
                    margin: {
                      ...margin,
                      [localActiveDevice]: value
                    }
                  })
                }
              )
            )
          ));
        case "advanced":
          return /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(
            TabPanelBody34,
            {
              tab: "advanced",
              name: "animation",
              title: __39("Animation", "digiblocks"),
              initialOpen: true
            },
            /* @__PURE__ */ wp.element.createElement(
              SelectControl32,
              {
                label: __39("Animation Effect", "digiblocks"),
                value: animation,
                options: animationOptions,
                onChange: (value) => setAttributes({ animation: value }),
                __next40pxDefaultSize: true,
                __nextHasNoMarginBottom: true
              }
            ),
            animation && animation !== "none" && /* @__PURE__ */ wp.element.createElement("div", { style: { marginTop: "10px" } }, /* @__PURE__ */ wp.element.createElement(
              Button31,
              {
                variant: "secondary",
                isSecondary: true,
                onClick: handlePreviewClick,
                style: { width: "100%" }
              },
              __39("Preview Animation", "digiblocks")
            ))
          ), /* @__PURE__ */ wp.element.createElement(
            TabPanelBody34,
            {
              tab: "advanced",
              name: "visibility",
              title: __39("Visibility", "digiblocks"),
              initialOpen: false
            },
            /* @__PURE__ */ wp.element.createElement("div", { className: "components-base-control__help", style: {
              padding: "12px",
              backgroundColor: "#f0f6fc",
              border: "1px solid #c3ddfd",
              borderRadius: "4px",
              marginBottom: "16px"
            } }, /* @__PURE__ */ wp.element.createElement("strong", null, __39("Editor Note:", "digiblocks")), /* @__PURE__ */ wp.element.createElement("br", null), __39("Hidden elements appear with reduced opacity in the editor for easy editing. Visibility changes only take effect on the frontend.", "digiblocks")),
            /* @__PURE__ */ wp.element.createElement(
              ToggleControl34,
              {
                label: __39("Hide on Desktop", "digiblocks"),
                checked: visibility.desktop,
                onChange: (value) => setAttributes({
                  visibility: {
                    ...visibility,
                    desktop: value
                  }
                }),
                __nextHasNoMarginBottom: true
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              ToggleControl34,
              {
                label: __39("Hide on Tablet", "digiblocks"),
                checked: visibility.tablet,
                onChange: (value) => setAttributes({
                  visibility: {
                    ...visibility,
                    tablet: value
                  }
                }),
                __nextHasNoMarginBottom: true
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              ToggleControl34,
              {
                label: __39("Hide on Mobile", "digiblocks"),
                checked: visibility.mobile,
                onChange: (value) => setAttributes({
                  visibility: {
                    ...visibility,
                    mobile: value
                  }
                }),
                __nextHasNoMarginBottom: true
              }
            )
          ), /* @__PURE__ */ wp.element.createElement(
            TabPanelBody34,
            {
              tab: "advanced",
              name: "additional",
              title: __39("Additional", "digiblocks"),
              initialOpen: false
            },
            /* @__PURE__ */ wp.element.createElement("div", { className: "components-base-control html-anchor-control" }, /* @__PURE__ */ wp.element.createElement("div", { className: "components-base-control__field" }, /* @__PURE__ */ wp.element.createElement("label", { className: "components-base-control__label", htmlFor: "html-anchor" }, __39("HTML anchor", "digiblocks")), /* @__PURE__ */ wp.element.createElement(
              "input",
              {
                className: "components-text-control__input",
                type: "text",
                id: "html-anchor",
                value: anchor || "",
                onChange: (e) => setAttributes({ anchor: e.target.value }),
                "aria-describedby": "html-anchor-help",
                autoCapitalize: "none",
                autoComplete: "off"
              }
            )), /* @__PURE__ */ wp.element.createElement("p", { id: "html-anchor-help", className: "components-base-control__help" }, __39(`Enter a word or two \u2014 without spaces \u2014 to make a unique web address just for this block, called an "anchor". Then, you'll be able to link directly to this section of your page.`, "digiblocks"), " ", /* @__PURE__ */ wp.element.createElement(
              "a",
              {
                className: "components-external-link",
                href: "https://wordpress.org/documentation/article/page-jumps/",
                target: "_blank",
                rel: "external noreferrer noopener"
              },
              /* @__PURE__ */ wp.element.createElement("span", { className: "components-external-link__contents" }, __39("Learn more about anchors", "digiblocks")),
              /* @__PURE__ */ wp.element.createElement("span", { className: "components-external-link__icon", "aria-label": "(opens in a new tab)" }, "\u2197")
            ))),
            /* @__PURE__ */ wp.element.createElement("div", { className: "components-base-control" }, /* @__PURE__ */ wp.element.createElement("div", { className: "components-base-control__field" }, /* @__PURE__ */ wp.element.createElement("label", { className: "components-base-control__label", htmlFor: "additional-css-classes" }, __39("Additional CSS class(es)", "digiblocks")), /* @__PURE__ */ wp.element.createElement(
              "input",
              {
                className: "components-text-control__input",
                type: "text",
                id: "additional-css-classes",
                value: customClasses || "",
                onChange: (e) => setAttributes({ customClasses: e.target.value }),
                "aria-describedby": "additional-css-classes-help",
                autoComplete: "off"
              }
            )), /* @__PURE__ */ wp.element.createElement("p", { id: "additional-css-classes-help", className: "components-base-control__help" }, __39("Separate multiple classes with spaces.", "digiblocks")))
          ));
        default:
          return null;
      }
    };
    const blockClasses = `digiblocks-featured-image ${id} ${animation !== "none" ? `animate-${animation}` : ""} ${customClasses || ""}`;
    const blockProps = useBlockProps61({
      className: blockClasses,
      id: anchor || null
    });
    return /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(InspectorControls34, null, /* @__PURE__ */ wp.element.createElement(
      CustomTabPanel34,
      {
        tabs: tabList,
        activeTab,
        onSelect: setActiveTab
      },
      renderTabContent()
    )), /* @__PURE__ */ wp.element.createElement("style", { dangerouslySetInnerHTML: { __html: generateCSS() } }), /* @__PURE__ */ wp.element.createElement("div", { ...blockProps }, /* @__PURE__ */ wp.element.createElement("figure", null, /* @__PURE__ */ wp.element.createElement(
      "img",
      {
        src: "https://picsum.photos/1600/900",
        alt: __39("Featured Image", "digiblocks")
      }
    ), enableCaption && /* @__PURE__ */ wp.element.createElement("figcaption", null, __39("Image caption will appear here", "digiblocks")))));
  };
  var edit_default34 = FeaturedImageEdit;

  // blocks/featured-image/save.js
  var FeaturedImageSave = () => {
    return null;
  };
  var save_default34 = FeaturedImageSave;

  // blocks/post-meta/edit.js
  var { __: __40 } = window.wp.i18n;
  var {
    useBlockProps: useBlockProps62,
    InspectorControls: InspectorControls35,
    PanelColorSettings: PanelColorSettings33
  } = window.wp.blockEditor;
  var {
    RangeControl: RangeControl32,
    ToggleControl: ToggleControl35,
    SelectControl: SelectControl33,
    Notice: Notice5,
    Button: Button32,
    __experimentalToggleGroupControl: ToggleGroupControl33,
    __experimentalToggleGroupControlOption: ToggleGroupControlOption33
  } = window.wp.components;
  var { useState: useState35, useEffect: useEffect35, useRef: useRef30 } = window.wp.element;
  var { useBlockId: useBlockId35, getDimensionCSS: getDimensionCSS30, animations: animations31, animationPreview: animationPreview31 } = digi.utils;
  var { tabIcons: tabIcons35 } = digi.icons;
  var { ResponsiveControl: ResponsiveControl35, DimensionControl: DimensionControl31, TypographyControl: TypographyControl27, CustomTabPanel: CustomTabPanel35, TabPanelBody: TabPanelBody35, ResponsiveButtonGroup: ResponsiveButtonGroup13 } = digi.components;
  var PostMetaEdit = ({ attributes, setAttributes, clientId }) => {
    const {
      id,
      anchor,
      visibility,
      customClasses,
      displayAuthor,
      displayDate,
      displayCategories,
      displayTags,
      iconDisplay,
      separator,
      layout,
      align,
      spacing,
      textColor,
      textHoverColor,
      iconColor,
      typography,
      padding,
      margin,
      animation
    } = attributes;
    useBlockId35(id, clientId, setAttributes);
    const [localActiveDevice, setLocalActiveDevice] = useState35(window.digi.responsiveState.activeDevice);
    const [activeTab, setActiveTab] = useState35(() => {
      if (window.digi.uiState) {
        const savedTab = window.digi.uiState.getActiveTab(clientId);
        if (savedTab)
          return savedTab;
      }
      return "options";
    });
    useEffect35(() => {
      const unsubscribe = window.digi.responsiveState.subscribe((device) => {
        setLocalActiveDevice(device);
      });
      return unsubscribe;
    }, []);
    const previewTimeoutRef = useRef30(null);
    useEffect35(() => {
      if (animation && animation !== "none") {
        const timeoutId = setTimeout(() => {
          animationPreview31(id, animation, animations31, previewTimeoutRef);
        }, 100);
        return () => clearTimeout(timeoutId);
      }
    }, [animation]);
    const handlePreviewClick = () => {
      animationPreview31(id, animation, animations31, previewTimeoutRef);
    };
    const animationOptions = [
      { label: __40("None", "digiblocks"), value: "none" },
      ...Object.keys(animations31).map((animation2) => ({
        label: animation2.replace(/-/g, " ").replace(/\b\w/g, (l) => l.toUpperCase()),
        value: animation2
      }))
    ];
    const tabList = [
      {
        name: "options",
        title: __40("Options", "digiblocks"),
        icon: tabIcons35.optionsIcon
      },
      {
        name: "style",
        title: __40("Style", "digiblocks"),
        icon: tabIcons35.styleIcon
      },
      {
        name: "advanced",
        title: __40("Advanced", "digiblocks"),
        icon: tabIcons35.advancedIcon
      }
    ];
    const generateCSS = () => {
      const activeDevice = localActiveDevice;
      let animationCSS = "";
      if (animation && animation !== "none" && animations31[animation]) {
        animationCSS = animations31[animation].keyframes;
      }
      const itemSpacing = spacing && spacing[activeDevice] ? spacing[activeDevice] : 15;
      let alignCSS = "";
      if (align && align[activeDevice]) {
        if (align[activeDevice] === "center") {
          alignCSS = "justify-content: center;";
        } else if (align[activeDevice] === "right") {
          alignCSS = "justify-content: flex-end;";
        } else if (align[activeDevice] === "left") {
          alignCSS = "justify-content: flex-start;";
        }
      }
      let separatorCSS = "";
      if (separator === "dot") {
        separatorCSS = `
				.${id} .digiblocks-meta-item:not(:last-child)::after {
					content: "\u2022";
					display: inline-block;
					margin-left: ${itemSpacing / 2}px;
					color: ${textColor || "inherit"};
				}
				body.rtl .${id} .digiblocks-meta-item:not(:last-child)::after {
					margin-right: ${itemSpacing / 2}px;
				}
            `;
      } else if (separator === "line") {
        separatorCSS = `
                .${id} .digiblocks-meta-item:not(:last-child)::after {
                    content: "|";
                    display: inline-block;
                    margin-left: ${itemSpacing / 2}px;
                    color: ${textColor || "inherit"};
                }
				body.rtl .${id} .digiblocks-meta-item:not(:last-child)::after {
					margin-right: ${itemSpacing / 2}px;
				}
            `;
      } else if (separator === "slash") {
        separatorCSS = `
                .${id} .digiblocks-meta-item:not(:last-child)::after {
                    content: "/";
                    display: inline-block;
                    margin-left: ${itemSpacing / 2}px;
                    color: ${textColor || "inherit"};
                }
				body.rtl .${id} .digiblocks-meta-item:not(:last-child)::after {
					margin-right: ${itemSpacing / 2}px;
				}
            `;
      }
      return `
            /* Post Meta Block - ${id} */
            .${id} {
                ${getDimensionCSS30(padding, "padding", activeDevice)}
                ${getDimensionCSS30(margin, "margin", activeDevice)}
                
                /* Typography */
                ${typography.fontFamily ? `font-family: ${typography.fontFamily};` : ""}
                ${typography.fontSize?.[activeDevice] ? `font-size: ${typography.fontSize[activeDevice]}${typography.fontSizeUnit || "px"};` : ""}
                ${typography.fontWeight ? `font-weight: ${typography.fontWeight};` : ""}
                ${typography.fontStyle ? `font-style: ${typography.fontStyle};` : ""}
                ${typography.textTransform ? `text-transform: ${typography.textTransform};` : ""}
                ${typography.textDecoration ? `text-decoration: ${typography.textDecoration};` : ""}
                ${typography.lineHeight?.[activeDevice] ? `line-height: ${typography.lineHeight[activeDevice]}${typography.lineHeightUnit || "em"};` : ""}
                ${typography.letterSpacing?.[activeDevice] ? `letter-spacing: ${typography.letterSpacing[activeDevice]}${typography.letterSpacingUnit || "px"};` : ""}
            }
            
            .${id} .digiblocks-meta-list {
                display: flex;
                flex-wrap: wrap;
                ${alignCSS}
                ${layout === "block" ? "flex-direction: column;" : ""}
                gap: ${itemSpacing}px;
                margin: 0;
                padding: 0;
                list-style: none;
            }
            
            .${id} .digiblocks-meta-item {
                display: flex;
                align-items: center;
                gap: 8px;
                color: ${textColor || "inherit"};
                transition: color 0.3s ease;
            }

			.${id} .digiblocks-meta-item a {
				color: ${textColor || "inherit"};
				text-decoration: none;
			}
            
            .${id} .digiblocks-meta-item a:hover {
                color: ${textHoverColor || textColor || "inherit"};
            }
            
            .${id} .digiblocks-meta-icon {
                display: inline-flex;
                color: ${iconColor || textColor || "inherit"};
            }
            
            .${id} .digiblocks-meta-icon svg {
                width: 1em;
                height: 1em;
                fill: currentColor;
            }
            
            ${separatorCSS}
            
            /* Animation keyframes */
            ${animationCSS}

			/* Visibility Controls */
			${visibility.desktop ? `
				@media (min-width: 992px) {
					.${id} {
						opacity: 0.5 !important;
					}
				}
			` : ""}

			${visibility.tablet ? `
				@media (min-width: 768px) and (max-width: 991px) {
					.${id} {
						opacity: 0.5 !important;
					}
				}
			` : ""}

			${visibility.mobile ? `
				@media (max-width: 767px) {
					.${id} {
						opacity: 0.5 !important;
					}
				}
			` : ""}
        `;
    };
    const renderTabContent = () => {
      switch (activeTab) {
        case "options":
          return /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(
            TabPanelBody35,
            {
              tab: "options",
              name: "general",
              title: __40("General", "digiblocks"),
              initialOpen: true
            },
            /* @__PURE__ */ wp.element.createElement(
              Notice5,
              {
                status: "warning",
                isDismissible: false,
                className: "digiblocks-notice components-base-control"
              },
              __40("This is a placeholder. The actual post metadata will be displayed on single posts and archives.", "digiblocks")
            ),
            /* @__PURE__ */ wp.element.createElement(
              ToggleControl35,
              {
                label: __40("Display Author", "digiblocks"),
                checked: displayAuthor,
                onChange: (value) => setAttributes({ displayAuthor: value }),
                __nextHasNoMarginBottom: true
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              ToggleControl35,
              {
                label: __40("Display Date", "digiblocks"),
                checked: displayDate,
                onChange: (value) => setAttributes({ displayDate: value }),
                __nextHasNoMarginBottom: true
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              ToggleControl35,
              {
                label: __40("Display Categories", "digiblocks"),
                checked: displayCategories,
                onChange: (value) => setAttributes({ displayCategories: value }),
                __nextHasNoMarginBottom: true
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              ToggleControl35,
              {
                label: __40("Display Tags", "digiblocks"),
                checked: displayTags,
                onChange: (value) => setAttributes({ displayTags: value }),
                __nextHasNoMarginBottom: true
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              ToggleControl35,
              {
                label: __40("Display Icons", "digiblocks"),
                checked: iconDisplay,
                onChange: (value) => setAttributes({ iconDisplay: value }),
                __nextHasNoMarginBottom: true
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              ToggleGroupControl33,
              {
                label: __40("Layout", "digiblocks"),
                value: layout,
                onChange: (value) => setAttributes({ layout: value }),
                isBlock: true,
                __next40pxDefaultSize: true,
                __nextHasNoMarginBottom: true
              },
              /* @__PURE__ */ wp.element.createElement(
                ToggleGroupControlOption33,
                {
                  value: "inline",
                  label: __40("Inline", "digiblocks")
                }
              ),
              /* @__PURE__ */ wp.element.createElement(
                ToggleGroupControlOption33,
                {
                  value: "block",
                  label: __40("Block", "digiblocks")
                }
              )
            ),
            /* @__PURE__ */ wp.element.createElement(
              ToggleGroupControl33,
              {
                label: __40("Separator", "digiblocks"),
                value: separator,
                onChange: (value) => setAttributes({ separator: value }),
                isBlock: true,
                __next40pxDefaultSize: true,
                __nextHasNoMarginBottom: true
              },
              /* @__PURE__ */ wp.element.createElement(
                ToggleGroupControlOption33,
                {
                  value: "none",
                  label: __40("None", "digiblocks")
                }
              ),
              /* @__PURE__ */ wp.element.createElement(
                ToggleGroupControlOption33,
                {
                  value: "dot",
                  label: __40("Dot", "digiblocks")
                }
              ),
              /* @__PURE__ */ wp.element.createElement(
                ToggleGroupControlOption33,
                {
                  value: "line",
                  label: __40("Line", "digiblocks")
                }
              ),
              /* @__PURE__ */ wp.element.createElement(
                ToggleGroupControlOption33,
                {
                  value: "slash",
                  label: __40("Slash", "digiblocks")
                }
              )
            ),
            /* @__PURE__ */ wp.element.createElement(
              ResponsiveButtonGroup13,
              {
                label: __40("Alignment", "digiblocks"),
                value: align,
                onChange: (value) => setAttributes({ align: value }),
                options: [
                  { label: __40("Left", "digiblocks"), value: "left" },
                  { label: __40("Center", "digiblocks"), value: "center" },
                  { label: __40("Right", "digiblocks"), value: "right" }
                ]
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              ResponsiveControl35,
              {
                label: __40("Item Spacing", "digiblocks")
              },
              /* @__PURE__ */ wp.element.createElement(
                RangeControl32,
                {
                  value: spacing[localActiveDevice],
                  onChange: (value) => {
                    const newSpacing = { ...spacing };
                    newSpacing[localActiveDevice] = value;
                    setAttributes({ spacing: newSpacing });
                  },
                  min: 0,
                  max: 50,
                  step: 1,
                  __next40pxDefaultSize: true,
                  __nextHasNoMarginBottom: true
                }
              )
            )
          ));
        case "style":
          return /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(
            TabPanelBody35,
            {
              tab: "style",
              name: "colors",
              title: __40("Colors", "digiblocks"),
              initialOpen: true
            },
            /* @__PURE__ */ wp.element.createElement(
              PanelColorSettings33,
              {
                title: __40("Colors", "digiblocks"),
                initialOpen: true,
                enableAlpha: true,
                colorSettings: [
                  {
                    value: textColor,
                    onChange: (value) => setAttributes({ textColor: value }),
                    label: __40("Text Color", "digiblocks")
                  },
                  {
                    value: textHoverColor,
                    onChange: (value) => setAttributes({ textHoverColor: value }),
                    label: __40("Text Hover Color", "digiblocks")
                  },
                  {
                    value: iconColor,
                    onChange: (value) => setAttributes({ iconColor: value }),
                    label: __40("Icon Color", "digiblocks")
                  }
                ]
              }
            )
          ), /* @__PURE__ */ wp.element.createElement(
            TabPanelBody35,
            {
              tab: "style",
              name: "typo",
              title: __40("Typography", "digiblocks"),
              initialOpen: false
            },
            /* @__PURE__ */ wp.element.createElement(
              TypographyControl27,
              {
                label: __40("Typography", "digiblocks"),
                value: typography,
                onChange: (value) => setAttributes({ typography: value }),
                defaults: {
                  fontSize: { desktop: 14, tablet: 13, mobile: 12 },
                  fontSizeUnit: "px",
                  lineHeight: { desktop: 1.5, tablet: 1.4, mobile: 1.3 },
                  lineHeightUnit: "em"
                }
              }
            )
          ), /* @__PURE__ */ wp.element.createElement(
            TabPanelBody35,
            {
              tab: "style",
              name: "spacing",
              title: __40("Spacing", "digiblocks"),
              initialOpen: false
            },
            /* @__PURE__ */ wp.element.createElement(
              ResponsiveControl35,
              {
                label: __40("Padding", "digiblocks")
              },
              /* @__PURE__ */ wp.element.createElement(
                DimensionControl31,
                {
                  values: padding[localActiveDevice],
                  onChange: (value) => setAttributes({
                    padding: {
                      ...padding,
                      [localActiveDevice]: value
                    }
                  })
                }
              )
            ),
            /* @__PURE__ */ wp.element.createElement(
              ResponsiveControl35,
              {
                label: __40("Margin", "digiblocks")
              },
              /* @__PURE__ */ wp.element.createElement(
                DimensionControl31,
                {
                  values: margin[localActiveDevice],
                  onChange: (value) => setAttributes({
                    margin: {
                      ...margin,
                      [localActiveDevice]: value
                    }
                  })
                }
              )
            )
          ));
        case "advanced":
          return /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(
            TabPanelBody35,
            {
              tab: "advanced",
              name: "animation",
              title: __40("Animation", "digiblocks"),
              initialOpen: true
            },
            /* @__PURE__ */ wp.element.createElement(
              SelectControl33,
              {
                label: __40("Animation Effect", "digiblocks"),
                value: animation,
                options: animationOptions,
                onChange: (value) => setAttributes({ animation: value }),
                __next40pxDefaultSize: true,
                __nextHasNoMarginBottom: true
              }
            ),
            animation && animation !== "none" && /* @__PURE__ */ wp.element.createElement("div", { style: { marginTop: "10px" } }, /* @__PURE__ */ wp.element.createElement(
              Button32,
              {
                variant: "secondary",
                isSecondary: true,
                onClick: handlePreviewClick,
                style: { width: "100%" }
              },
              __40("Preview Animation", "digiblocks")
            ))
          ), /* @__PURE__ */ wp.element.createElement(
            TabPanelBody35,
            {
              tab: "advanced",
              name: "visibility",
              title: __40("Visibility", "digiblocks"),
              initialOpen: false
            },
            /* @__PURE__ */ wp.element.createElement("div", { className: "components-base-control__help", style: {
              padding: "12px",
              backgroundColor: "#f0f6fc",
              border: "1px solid #c3ddfd",
              borderRadius: "4px",
              marginBottom: "16px"
            } }, /* @__PURE__ */ wp.element.createElement("strong", null, __40("Editor Note:", "digiblocks")), /* @__PURE__ */ wp.element.createElement("br", null), __40("Hidden elements appear with reduced opacity in the editor for easy editing. Visibility changes only take effect on the frontend.", "digiblocks")),
            /* @__PURE__ */ wp.element.createElement(
              ToggleControl35,
              {
                label: __40("Hide on Desktop", "digiblocks"),
                checked: visibility.desktop,
                onChange: (value) => setAttributes({
                  visibility: {
                    ...visibility,
                    desktop: value
                  }
                }),
                __nextHasNoMarginBottom: true
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              ToggleControl35,
              {
                label: __40("Hide on Tablet", "digiblocks"),
                checked: visibility.tablet,
                onChange: (value) => setAttributes({
                  visibility: {
                    ...visibility,
                    tablet: value
                  }
                }),
                __nextHasNoMarginBottom: true
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              ToggleControl35,
              {
                label: __40("Hide on Mobile", "digiblocks"),
                checked: visibility.mobile,
                onChange: (value) => setAttributes({
                  visibility: {
                    ...visibility,
                    mobile: value
                  }
                }),
                __nextHasNoMarginBottom: true
              }
            )
          ), /* @__PURE__ */ wp.element.createElement(
            TabPanelBody35,
            {
              tab: "advanced",
              name: "additional",
              title: __40("Additional", "digiblocks"),
              initialOpen: false
            },
            /* @__PURE__ */ wp.element.createElement("div", { className: "components-base-control html-anchor-control" }, /* @__PURE__ */ wp.element.createElement("div", { className: "components-base-control__field" }, /* @__PURE__ */ wp.element.createElement("label", { className: "components-base-control__label", htmlFor: "html-anchor" }, __40("HTML anchor", "digiblocks")), /* @__PURE__ */ wp.element.createElement(
              "input",
              {
                className: "components-text-control__input",
                type: "text",
                id: "html-anchor",
                value: anchor || "",
                onChange: (e) => setAttributes({ anchor: e.target.value }),
                "aria-describedby": "html-anchor-help",
                autoCapitalize: "none",
                autoComplete: "off"
              }
            )), /* @__PURE__ */ wp.element.createElement("p", { id: "html-anchor-help", className: "components-base-control__help" }, __40(`Enter a word or two \u2014 without spaces \u2014 to make a unique web address just for this block, called an "anchor". Then, you'll be able to link directly to this section of your page.`, "digiblocks"), " ", /* @__PURE__ */ wp.element.createElement(
              "a",
              {
                className: "components-external-link",
                href: "https://wordpress.org/documentation/article/page-jumps/",
                target: "_blank",
                rel: "external noreferrer noopener"
              },
              /* @__PURE__ */ wp.element.createElement("span", { className: "components-external-link__contents" }, __40("Learn more about anchors", "digiblocks")),
              /* @__PURE__ */ wp.element.createElement("span", { className: "components-external-link__icon", "aria-label": "(opens in a new tab)" }, "\u2197")
            ))),
            /* @__PURE__ */ wp.element.createElement("div", { className: "components-base-control" }, /* @__PURE__ */ wp.element.createElement("div", { className: "components-base-control__field" }, /* @__PURE__ */ wp.element.createElement("label", { className: "components-base-control__label", htmlFor: "additional-css-classes" }, __40("Additional CSS class(es)", "digiblocks")), /* @__PURE__ */ wp.element.createElement(
              "input",
              {
                className: "components-text-control__input",
                type: "text",
                id: "additional-css-classes",
                value: customClasses || "",
                onChange: (e) => setAttributes({ customClasses: e.target.value }),
                "aria-describedby": "additional-css-classes-help",
                autoComplete: "off"
              }
            )), /* @__PURE__ */ wp.element.createElement("p", { id: "additional-css-classes-help", className: "components-base-control__help" }, __40("Separate multiple classes with spaces.", "digiblocks")))
          ));
        default:
          return null;
      }
    };
    const blockClasses = `digiblocks-post-meta ${id} ${animation !== "none" ? `animate-${animation}` : ""} ${customClasses || ""}`;
    const blockProps = useBlockProps62({
      className: blockClasses,
      id: anchor || null
    });
    const authorIcon = '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512" width="1em" height="1em"><path d="M320 128a96 96 0 1 0 -192 0 96 96 0 1 0 192 0zM96 128a128 128 0 1 1 256 0A128 128 0 1 1 96 128zM32 480l384 0c-1.2-79.7-66.2-144-146.3-144l-91.4 0c-80 0-145 64.3-146.3 144zM0 482.3C0 383.8 79.8 304 178.3 304l91.4 0C368.2 304 448 383.8 448 482.3c0 16.4-13.3 29.7-29.7 29.7L29.7 512C13.3 512 0 498.7 0 482.3z"/></svg>';
    const dateIcon = '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512" width="1em" height="1em"><path d="M480 256A224 224 0 1 1 32 256a224 224 0 1 1 448 0zM0 256a256 256 0 1 0 512 0A256 256 0 1 0 0 256zM240 112l0 144c0 5.3 2.7 10.3 7.1 13.3l96 64c7.4 4.9 17.3 2.9 22.2-4.4s2.9-17.3-4.4-22.2L272 247.4 272 112c0-8.8-7.2-16-16-16s-16 7.2-16 16z"/></svg>';
    const categoriesIcon = '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512" width="1em" height="1em"><path d="M64 64C46.3 64 32 78.3 32 96l0 320c0 17.7 14.3 32 32 32l384 0c17.7 0 32-14.3 32-32l0-256c0-17.7-14.3-32-32-32l-156.1 0c-17 0-33.3-6.7-45.3-18.7L210.7 73.4c-6-6-14.1-9.4-22.6-9.4L64 64zM0 96C0 60.7 28.7 32 64 32l124.1 0c17 0 33.3 6.7 45.3 18.7l35.9 35.9c6 6 14.1 9.4 22.6 9.4L448 96c35.3 0 64 28.7 64 64l0 256c0 35.3-28.7 64-64 64L64 480c-35.3 0-64-28.7-64-64L0 96z"/></svg>';
    const tagsIcon = '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512" width="1em" height="1em"><path d="M32 229.5L32 80c0-8.8 7.2-16 16-16l149.5 0c8.5 0 16.6 3.4 22.6 9.4l176 176c12.5 12.5 12.5 32.8 0 45.3L262.6 428.1c-12.5 12.5-32.8 12.5-45.3 0l-176-176L18.7 274.7l22.6-22.6c-6-6-9.4-14.1-9.4-22.6zm-32 0c0 17 6.7 33.3 18.7 45.3l176 176c25 25 65.5 25 90.5 0L418.7 317.3c25-25 25-65.5 0-90.5l-176-176c-12-12-28.3-18.7-45.3-18.7L48 32C21.5 32 0 53.5 0 80L0 229.5zM112 168a24 24 0 1 0 0-48 24 24 0 1 0 0 48z"/></svg>';
    return /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(InspectorControls35, null, /* @__PURE__ */ wp.element.createElement(
      CustomTabPanel35,
      {
        tabs: tabList,
        activeTab,
        onSelect: setActiveTab
      },
      renderTabContent()
    )), /* @__PURE__ */ wp.element.createElement("style", { dangerouslySetInnerHTML: { __html: generateCSS() } }), /* @__PURE__ */ wp.element.createElement("div", { ...blockProps }, /* @__PURE__ */ wp.element.createElement("ul", { className: "digiblocks-meta-list" }, displayAuthor && /* @__PURE__ */ wp.element.createElement("li", { className: "digiblocks-meta-item" }, iconDisplay && /* @__PURE__ */ wp.element.createElement("span", { className: "digiblocks-meta-icon", dangerouslySetInnerHTML: { __html: authorIcon } }), /* @__PURE__ */ wp.element.createElement("span", { className: "digiblocks-meta-value" }, __40("John Doe", "digiblocks"))), displayDate && /* @__PURE__ */ wp.element.createElement("li", { className: "digiblocks-meta-item" }, iconDisplay && /* @__PURE__ */ wp.element.createElement("span", { className: "digiblocks-meta-icon", dangerouslySetInnerHTML: { __html: dateIcon } }), /* @__PURE__ */ wp.element.createElement("span", { className: "digiblocks-meta-value" }, __40("May 20, 2025", "digiblocks"))), displayCategories && /* @__PURE__ */ wp.element.createElement("li", { className: "digiblocks-meta-item" }, iconDisplay && /* @__PURE__ */ wp.element.createElement("span", { className: "digiblocks-meta-icon", dangerouslySetInnerHTML: { __html: categoriesIcon } }), /* @__PURE__ */ wp.element.createElement("span", { className: "digiblocks-meta-value" }, __40("Web Design, WordPress", "digiblocks"))), displayTags && /* @__PURE__ */ wp.element.createElement("li", { className: "digiblocks-meta-item" }, iconDisplay && /* @__PURE__ */ wp.element.createElement("span", { className: "digiblocks-meta-icon", dangerouslySetInnerHTML: { __html: tagsIcon } }), /* @__PURE__ */ wp.element.createElement("span", { className: "digiblocks-meta-value" }, __40("Design, Development, Blocks", "digiblocks"))))));
  };
  var edit_default35 = PostMetaEdit;

  // blocks/post-meta/save.js
  var PostMetaSave = () => {
    return null;
  };
  var save_default35 = PostMetaSave;

  // blocks/post-content/edit.js
  var { __: __41 } = window.wp.i18n;
  var {
    useBlockProps: useBlockProps63,
    InspectorControls: InspectorControls36,
    PanelColorSettings: PanelColorSettings34
  } = window.wp.blockEditor;
  var {
    SelectControl: SelectControl34,
    RangeControl: RangeControl33,
    ToggleControl: ToggleControl36,
    Button: Button33,
    Notice: Notice6,
    __experimentalToggleGroupControl: ToggleGroupControl34,
    __experimentalToggleGroupControlOption: ToggleGroupControlOption34
  } = window.wp.components;
  var { useState: useState36, useEffect: useEffect36, useRef: useRef31 } = window.wp.element;
  var { useBlockId: useBlockId36, getDimensionCSS: getDimensionCSS31, animations: animations32, animationPreview: animationPreview32 } = digi.utils;
  var { tabIcons: tabIcons36 } = digi.icons;
  var {
    ResponsiveControl: ResponsiveControl36,
    DimensionControl: DimensionControl32,
    TypographyControl: TypographyControl28,
    CustomTabPanel: CustomTabPanel36,
    TabPanelBody: TabPanelBody36
  } = digi.components;
  var PostContentEdit = ({ attributes, setAttributes, clientId }) => {
    const {
      id,
      anchor,
      visibility,
      customClasses,
      color,
      textAlign,
      columns,
      dropcap,
      dropCapColor,
      dropCapSize,
      dropCapSpace,
      listSpacing,
      paragraphSpacing,
      headingSpacing,
      typography,
      padding,
      margin,
      animation
    } = attributes;
    useBlockId36(id, clientId, setAttributes);
    const [localActiveDevice, setLocalActiveDevice] = useState36(window.digi.responsiveState.activeDevice);
    const [activeTab, setActiveTab] = useState36(() => {
      if (window.digi.uiState) {
        const savedTab = window.digi.uiState.getActiveTab(clientId);
        if (savedTab)
          return savedTab;
      }
      return "options";
    });
    useEffect36(() => {
      const unsubscribe = window.digi.responsiveState.subscribe((device) => {
        setLocalActiveDevice(device);
      });
      return unsubscribe;
    }, []);
    const previewTimeoutRef = useRef31(null);
    useEffect36(() => {
      if (animation && animation !== "none") {
        const timeoutId = setTimeout(() => {
          animationPreview32(id, animation, animations32, previewTimeoutRef);
        }, 100);
        return () => clearTimeout(timeoutId);
      }
    }, [animation]);
    const handlePreviewClick = () => {
      animationPreview32(id, animation, animations32, previewTimeoutRef);
    };
    const animationOptions = [
      { label: __41("None", "digiblocks"), value: "none" },
      ...Object.keys(animations32).map((animation2) => ({
        label: animation2.replace(/-/g, " ").replace(/\b\w/g, (l) => l.toUpperCase()),
        value: animation2
      }))
    ];
    const tabList = [
      {
        name: "options",
        title: __41("Options", "digiblocks"),
        icon: tabIcons36.optionsIcon
      },
      {
        name: "style",
        title: __41("Style", "digiblocks"),
        icon: tabIcons36.styleIcon
      },
      {
        name: "advanced",
        title: __41("Advanced", "digiblocks"),
        icon: tabIcons36.advancedIcon
      }
    ];
    const generateCSS = () => {
      const activeDevice = localActiveDevice;
      let animationCSS = "";
      if (animation && animation !== "none" && animations32[animation]) {
        animationCSS = animations32[animation].keyframes;
      }
      return `
            /* Post Content Block - ${id} */
            .${id} {
                color: ${color};
                text-align: ${textAlign[activeDevice]};
                ${columns[activeDevice] > 1 ? `column-count: ${columns[activeDevice]};` : ""}
                ${columns[activeDevice] > 1 ? "column-gap: 2.5em;" : ""}
                ${getDimensionCSS31(padding, "padding", activeDevice)}
                ${getDimensionCSS31(margin, "margin", activeDevice)}
                transition: color 0.3s ease;
                /* Typography */
                ${typography.fontFamily ? `font-family: ${typography.fontFamily};` : ""}
                ${typography.fontSize?.[activeDevice] ? `font-size: ${typography.fontSize[activeDevice]}${typography.fontSizeUnit || "px"};` : ""}
                ${typography.fontWeight ? `font-weight: ${typography.fontWeight};` : ""}
                ${typography.fontStyle ? `font-style: ${typography.fontStyle};` : ""}
                ${typography.textTransform ? `text-transform: ${typography.textTransform};` : ""}
                ${typography.textDecoration ? `text-decoration: ${typography.textDecoration};` : ""}
                ${typography.lineHeight?.[activeDevice] ? `line-height: ${typography.lineHeight[activeDevice]}${typography.lineHeightUnit || "em"};` : ""}
                ${typography.letterSpacing?.[activeDevice] ? `letter-spacing: ${typography.letterSpacing[activeDevice]}${typography.letterSpacingUnit || "px"};` : ""}
            }
            
            .${id} p {
                margin-bottom: ${paragraphSpacing[activeDevice]}px;
            }
            
            .${id} h1, .${id} h2, .${id} h3, .${id} h4, .${id} h5, .${id} h6 {
                margin-bottom: ${headingSpacing[activeDevice]}px;
            }
            
            .${id} ul, .${id} ol {
                margin-bottom: ${listSpacing[activeDevice]}px;
            }
            
            ${dropcap ? `
            .${id} p:first-of-type:first-letter {
                color: ${dropCapColor};
                float: left;
                font-size: ${dropCapSize[activeDevice]}em;
                line-height: 0.8;
                margin-right: ${dropCapSpace[activeDevice]}px;
                padding-top: 4px;
            }
            ` : ""}
            
            /* Animation keyframes */
            ${animationCSS}

			/* Visibility Controls */
			${visibility.desktop ? `
				@media (min-width: 992px) {
					.${id} {
						opacity: 0.5 !important;
					}
				}
			` : ""}

			${visibility.tablet ? `
				@media (min-width: 768px) and (max-width: 991px) {
					.${id} {
						opacity: 0.5 !important;
					}
				}
			` : ""}

			${visibility.mobile ? `
				@media (max-width: 767px) {
					.${id} {
						opacity: 0.5 !important;
					}
				}
			` : ""}
        `;
    };
    const sampleContent = `
        <h2>Sample Post Heading</h2>
        <p>This is a placeholder for your post content. When published, this block will display the actual content of your post or page. You can style this content using the controls in the sidebar.</p>
        <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Ut elit tellus, luctus nec ullamcorper mattis, pulvinar dapibus leo. Sed non mauris vitae erat consequat auctor eu in elit.</p>
        <h3>Another Heading</h3>
        <p>Here's some more example content that shows how your typography and spacing settings will affect the appearance of your content.</p>
        <ul>
            <li>This is a list item</li>
            <li>This is another list item</li>
            <li>And one more list item</li>
        </ul>
    `;
    const renderTabContent = () => {
      switch (activeTab) {
        case "options":
          return /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(
            TabPanelBody36,
            {
              tab: "options",
              name: "general",
              title: __41("General", "digiblocks"),
              initialOpen: true
            },
            /* @__PURE__ */ wp.element.createElement(
              Notice6,
              {
                status: "warning",
                isDismissible: false,
                className: "digiblocks-notice components-base-control"
              },
              __41("This is a placeholder. The actual post content will be displayed on the frontend.", "digiblocks")
            ),
            /* @__PURE__ */ wp.element.createElement(
              ToggleControl36,
              {
                label: __41("Enable Drop Cap", "digiblocks"),
                checked: dropcap,
                onChange: (value) => setAttributes({ dropcap: value }),
                help: __41("Enlarge the first letter of the first paragraph.", "digiblocks"),
                __nextHasNoMarginBottom: true
              }
            ),
            dropcap && /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(
              PanelColorSettings34,
              {
                title: __41("Drop Cap Color", "digiblocks"),
                initialOpen: true,
                enableAlpha: true,
                colorSettings: [
                  {
                    value: dropCapColor,
                    onChange: (value) => setAttributes({ dropCapColor: value }),
                    label: __41("Color", "digiblocks")
                  }
                ]
              }
            ), /* @__PURE__ */ wp.element.createElement(
              ResponsiveControl36,
              {
                label: __41("Drop Cap Size", "digiblocks")
              },
              /* @__PURE__ */ wp.element.createElement(
                RangeControl33,
                {
                  value: dropCapSize[localActiveDevice],
                  onChange: (value) => setAttributes({
                    dropCapSize: {
                      ...dropCapSize,
                      [localActiveDevice]: value
                    }
                  }),
                  min: 1,
                  max: 10,
                  step: 0.1,
                  __next40pxDefaultSize: true,
                  __nextHasNoMarginBottom: true
                }
              )
            ), /* @__PURE__ */ wp.element.createElement(
              ResponsiveControl36,
              {
                label: __41("Drop Cap Spacing", "digiblocks")
              },
              /* @__PURE__ */ wp.element.createElement(
                RangeControl33,
                {
                  value: dropCapSpace[localActiveDevice],
                  onChange: (value) => setAttributes({
                    dropCapSpace: {
                      ...dropCapSpace,
                      [localActiveDevice]: value
                    }
                  }),
                  min: 0,
                  max: 50,
                  __next40pxDefaultSize: true,
                  __nextHasNoMarginBottom: true
                }
              )
            )),
            /* @__PURE__ */ wp.element.createElement(
              ResponsiveControl36,
              {
                label: __41("Content Columns", "digiblocks")
              },
              /* @__PURE__ */ wp.element.createElement(
                RangeControl33,
                {
                  value: columns[localActiveDevice],
                  onChange: (value) => setAttributes({
                    columns: {
                      ...columns,
                      [localActiveDevice]: value
                    }
                  }),
                  min: 1,
                  max: localActiveDevice === "desktop" ? 3 : localActiveDevice === "tablet" ? 2 : 1,
                  __next40pxDefaultSize: true,
                  __nextHasNoMarginBottom: true
                }
              )
            ),
            /* @__PURE__ */ wp.element.createElement(
              ResponsiveControl36,
              {
                label: __41("Paragraph Spacing", "digiblocks")
              },
              /* @__PURE__ */ wp.element.createElement(
                RangeControl33,
                {
                  value: paragraphSpacing[localActiveDevice],
                  onChange: (value) => setAttributes({
                    paragraphSpacing: {
                      ...paragraphSpacing,
                      [localActiveDevice]: value
                    }
                  }),
                  min: 0,
                  max: 60,
                  __next40pxDefaultSize: true,
                  __nextHasNoMarginBottom: true
                }
              )
            ),
            /* @__PURE__ */ wp.element.createElement(
              ResponsiveControl36,
              {
                label: __41("Heading Spacing", "digiblocks")
              },
              /* @__PURE__ */ wp.element.createElement(
                RangeControl33,
                {
                  value: headingSpacing[localActiveDevice],
                  onChange: (value) => setAttributes({
                    headingSpacing: {
                      ...headingSpacing,
                      [localActiveDevice]: value
                    }
                  }),
                  min: 0,
                  max: 60,
                  __next40pxDefaultSize: true,
                  __nextHasNoMarginBottom: true
                }
              )
            ),
            /* @__PURE__ */ wp.element.createElement(
              ResponsiveControl36,
              {
                label: __41("List Spacing", "digiblocks")
              },
              /* @__PURE__ */ wp.element.createElement(
                RangeControl33,
                {
                  value: listSpacing[localActiveDevice],
                  onChange: (value) => setAttributes({
                    listSpacing: {
                      ...listSpacing,
                      [localActiveDevice]: value
                    }
                  }),
                  min: 0,
                  max: 60,
                  __next40pxDefaultSize: true,
                  __nextHasNoMarginBottom: true
                }
              )
            ),
            /* @__PURE__ */ wp.element.createElement(
              ToggleGroupControl34,
              {
                label: __41("Text Alignment", "digiblocks"),
                value: textAlign[localActiveDevice],
                onChange: (value) => setAttributes({
                  textAlign: {
                    ...textAlign,
                    [localActiveDevice]: value
                  }
                }),
                isBlock: true,
                __next40pxDefaultSize: true,
                __nextHasNoMarginBottom: true
              },
              /* @__PURE__ */ wp.element.createElement(
                ToggleGroupControlOption34,
                {
                  value: "left",
                  label: __41("Left", "digiblocks")
                }
              ),
              /* @__PURE__ */ wp.element.createElement(
                ToggleGroupControlOption34,
                {
                  value: "center",
                  label: __41("Center", "digiblocks")
                }
              ),
              /* @__PURE__ */ wp.element.createElement(
                ToggleGroupControlOption34,
                {
                  value: "right",
                  label: __41("Right", "digiblocks")
                }
              ),
              /* @__PURE__ */ wp.element.createElement(
                ToggleGroupControlOption34,
                {
                  value: "justify",
                  label: __41("Justify", "digiblocks")
                }
              )
            )
          ));
        case "style":
          return /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(
            TabPanelBody36,
            {
              tab: "style",
              name: "colors",
              title: __41("Colors", "digiblocks"),
              initialOpen: true
            },
            /* @__PURE__ */ wp.element.createElement(
              PanelColorSettings34,
              {
                title: __41("Text Color", "digiblocks"),
                initialOpen: true,
                enableAlpha: true,
                colorSettings: [
                  {
                    value: color,
                    onChange: (value) => setAttributes({ color: value }),
                    label: __41("Color", "digiblocks")
                  }
                ]
              }
            )
          ), /* @__PURE__ */ wp.element.createElement(
            TabPanelBody36,
            {
              tab: "style",
              name: "typo",
              title: __41("Typography", "digiblocks"),
              initialOpen: false
            },
            /* @__PURE__ */ wp.element.createElement(
              TypographyControl28,
              {
                label: __41("Content Typography", "digiblocks"),
                value: typography,
                onChange: (value) => setAttributes({ typography: value }),
                defaults: {
                  fontSize: { desktop: 16, tablet: 15, mobile: 14 },
                  fontSizeUnit: "px",
                  lineHeight: { desktop: 1.7, tablet: 1.6, mobile: 1.5 },
                  lineHeightUnit: "em"
                }
              }
            )
          ), /* @__PURE__ */ wp.element.createElement(
            TabPanelBody36,
            {
              tab: "style",
              name: "spacing",
              title: __41("Spacing", "digiblocks"),
              initialOpen: false
            },
            /* @__PURE__ */ wp.element.createElement(
              ResponsiveControl36,
              {
                label: __41("Padding", "digiblocks")
              },
              /* @__PURE__ */ wp.element.createElement(
                DimensionControl32,
                {
                  values: padding[localActiveDevice],
                  onChange: (value) => setAttributes({
                    padding: {
                      ...padding,
                      [localActiveDevice]: value
                    }
                  })
                }
              )
            ),
            /* @__PURE__ */ wp.element.createElement(
              ResponsiveControl36,
              {
                label: __41("Margin", "digiblocks")
              },
              /* @__PURE__ */ wp.element.createElement(
                DimensionControl32,
                {
                  values: margin[localActiveDevice],
                  onChange: (value) => setAttributes({
                    margin: {
                      ...margin,
                      [localActiveDevice]: value
                    }
                  })
                }
              )
            )
          ));
        case "advanced":
          return /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(
            TabPanelBody36,
            {
              tab: "advanced",
              name: "animation",
              title: __41("Animation", "digiblocks"),
              initialOpen: true
            },
            /* @__PURE__ */ wp.element.createElement(
              SelectControl34,
              {
                label: __41("Animation Effect", "digiblocks"),
                value: animation,
                options: animationOptions,
                onChange: (value) => setAttributes({ animation: value }),
                __next40pxDefaultSize: true,
                __nextHasNoMarginBottom: true
              }
            ),
            animation && animation !== "none" && /* @__PURE__ */ wp.element.createElement("div", { style: { marginTop: "10px" } }, /* @__PURE__ */ wp.element.createElement(
              Button33,
              {
                variant: "secondary",
                isSecondary: true,
                onClick: handlePreviewClick,
                style: { width: "100%" }
              },
              __41("Preview Animation", "digiblocks")
            ))
          ), /* @__PURE__ */ wp.element.createElement(
            TabPanelBody36,
            {
              tab: "advanced",
              name: "visibility",
              title: __41("Visibility", "digiblocks"),
              initialOpen: false
            },
            /* @__PURE__ */ wp.element.createElement("div", { className: "components-base-control__help", style: {
              padding: "12px",
              backgroundColor: "#f0f6fc",
              border: "1px solid #c3ddfd",
              borderRadius: "4px",
              marginBottom: "16px"
            } }, /* @__PURE__ */ wp.element.createElement("strong", null, __41("Editor Note:", "digiblocks")), /* @__PURE__ */ wp.element.createElement("br", null), __41("Hidden elements appear with reduced opacity in the editor for easy editing. Visibility changes only take effect on the frontend.", "digiblocks")),
            /* @__PURE__ */ wp.element.createElement(
              ToggleControl36,
              {
                label: __41("Hide on Desktop", "digiblocks"),
                checked: visibility.desktop,
                onChange: (value) => setAttributes({
                  visibility: {
                    ...visibility,
                    desktop: value
                  }
                }),
                __nextHasNoMarginBottom: true
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              ToggleControl36,
              {
                label: __41("Hide on Tablet", "digiblocks"),
                checked: visibility.tablet,
                onChange: (value) => setAttributes({
                  visibility: {
                    ...visibility,
                    tablet: value
                  }
                }),
                __nextHasNoMarginBottom: true
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              ToggleControl36,
              {
                label: __41("Hide on Mobile", "digiblocks"),
                checked: visibility.mobile,
                onChange: (value) => setAttributes({
                  visibility: {
                    ...visibility,
                    mobile: value
                  }
                }),
                __nextHasNoMarginBottom: true
              }
            )
          ), /* @__PURE__ */ wp.element.createElement(
            TabPanelBody36,
            {
              tab: "advanced",
              name: "additional",
              title: __41("Additional", "digiblocks"),
              initialOpen: false
            },
            /* @__PURE__ */ wp.element.createElement("div", { className: "components-base-control html-anchor-control" }, /* @__PURE__ */ wp.element.createElement("div", { className: "components-base-control__field" }, /* @__PURE__ */ wp.element.createElement("label", { className: "components-base-control__label", htmlFor: "html-anchor" }, __41("HTML anchor", "digiblocks")), /* @__PURE__ */ wp.element.createElement(
              "input",
              {
                className: "components-text-control__input",
                type: "text",
                id: "html-anchor",
                value: anchor || "",
                onChange: (e) => setAttributes({ anchor: e.target.value }),
                "aria-describedby": "html-anchor-help",
                autoCapitalize: "none",
                autoComplete: "off"
              }
            )), /* @__PURE__ */ wp.element.createElement("p", { id: "html-anchor-help", className: "components-base-control__help" }, __41(`Enter a word or two \u2014 without spaces \u2014 to make a unique web address just for this block, called an "anchor". Then, you'll be able to link directly to this section of your page.`, "digiblocks"), " ", /* @__PURE__ */ wp.element.createElement(
              "a",
              {
                className: "components-external-link",
                href: "https://wordpress.org/documentation/article/page-jumps/",
                target: "_blank",
                rel: "external noreferrer noopener"
              },
              /* @__PURE__ */ wp.element.createElement("span", { className: "components-external-link__contents" }, __41("Learn more about anchors", "digiblocks")),
              /* @__PURE__ */ wp.element.createElement("span", { className: "components-external-link__icon", "aria-label": "(opens in a new tab)" }, "\u2197")
            ))),
            /* @__PURE__ */ wp.element.createElement("div", { className: "components-base-control" }, /* @__PURE__ */ wp.element.createElement("div", { className: "components-base-control__field" }, /* @__PURE__ */ wp.element.createElement("label", { className: "components-base-control__label", htmlFor: "additional-css-classes" }, __41("Additional CSS class(es)", "digiblocks")), /* @__PURE__ */ wp.element.createElement(
              "input",
              {
                className: "components-text-control__input",
                type: "text",
                id: "additional-css-classes",
                value: customClasses || "",
                onChange: (e) => setAttributes({ customClasses: e.target.value }),
                "aria-describedby": "additional-css-classes-help",
                autoComplete: "off"
              }
            )), /* @__PURE__ */ wp.element.createElement("p", { id: "additional-css-classes-help", className: "components-base-control__help" }, __41("Separate multiple classes with spaces.", "digiblocks")))
          ));
        default:
          return null;
      }
    };
    const blockClasses = `digiblocks-post-content ${id} ${animation !== "none" ? `animate-${animation}` : ""} ${customClasses || ""}`;
    const blockProps = useBlockProps63({
      className: blockClasses,
      id: anchor || null
    });
    return /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(InspectorControls36, null, /* @__PURE__ */ wp.element.createElement(
      CustomTabPanel36,
      {
        tabs: tabList,
        activeTab,
        onSelect: setActiveTab
      },
      renderTabContent()
    )), /* @__PURE__ */ wp.element.createElement("style", { dangerouslySetInnerHTML: { __html: generateCSS() } }), /* @__PURE__ */ wp.element.createElement("div", { ...blockProps, dangerouslySetInnerHTML: { __html: sampleContent } }));
  };
  var edit_default36 = PostContentEdit;

  // blocks/post-content/save.js
  var PostContentSave = () => {
    return null;
  };
  var save_default36 = PostContentSave;

  // blocks/post-navigation/edit.js
  var { __: __42 } = window.wp.i18n;
  var {
    useBlockProps: useBlockProps64,
    InspectorControls: InspectorControls37,
    PanelColorSettings: PanelColorSettings35
  } = window.wp.blockEditor;
  var {
    TabPanel: TabPanel20,
    SelectControl: SelectControl35,
    ToggleControl: ToggleControl37,
    Button: Button34,
    Notice: Notice7,
    TextControl: TextControl18,
    __experimentalToggleGroupControl: ToggleGroupControl35,
    __experimentalToggleGroupControlOption: ToggleGroupControlOption35
  } = window.wp.components;
  var { useState: useState37, useEffect: useEffect37, useRef: useRef32 } = window.wp.element;
  var { useBlockId: useBlockId37, getDimensionCSS: getDimensionCSS32, animations: animations33, animationPreview: animationPreview33 } = digi.utils;
  var { tabIcons: tabIcons37 } = digi.icons;
  var { ResponsiveButtonGroup: ResponsiveButtonGroup14, ResponsiveControl: ResponsiveControl37, DimensionControl: DimensionControl33, TypographyControl: TypographyControl29, BoxShadowControl: BoxShadowControl26, CustomTabPanel: CustomTabPanel37, TabPanelBody: TabPanelBody37 } = digi.components;
  var PostNavigationEdit = ({ attributes, setAttributes, clientId }) => {
    const {
      id,
      anchor,
      visibility,
      customClasses,
      showPostTitle,
      showNavLabels,
      previousLabel,
      nextLabel,
      showFeaturedImage,
      imageSize,
      color,
      hoverColor,
      backgroundColor,
      backgroundHoverColor,
      borderStyle,
      borderWidth,
      borderRadius,
      borderColor,
      borderHoverColor,
      padding,
      margin,
      typography,
      boxShadow,
      boxShadowHover,
      animation
    } = attributes;
    useBlockId37(id, clientId, setAttributes);
    const [localActiveDevice, setLocalActiveDevice] = useState37(window.digi.responsiveState.activeDevice);
    const [activeTab, setActiveTab] = useState37(() => {
      if (window.digi.uiState) {
        const savedTab = window.digi.uiState.getActiveTab(clientId);
        if (savedTab)
          return savedTab;
      }
      return "options";
    });
    useEffect37(() => {
      const unsubscribe = window.digi.responsiveState.subscribe((device) => {
        setLocalActiveDevice(device);
      });
      return unsubscribe;
    }, []);
    const previewTimeoutRef = useRef32(null);
    useEffect37(() => {
      if (animation && animation !== "none") {
        const timeoutId = setTimeout(() => {
          animationPreview33(id, animation, animations33, previewTimeoutRef);
        }, 100);
        return () => clearTimeout(timeoutId);
      }
    }, [animation]);
    const handlePreviewClick = () => {
      animationPreview33(id, animation, animations33, previewTimeoutRef);
    };
    const imageSizeOptions = [
      { label: __42("Thumbnail", "digiblocks"), value: "thumbnail" },
      { label: __42("Medium", "digiblocks"), value: "medium" },
      { label: __42("Large", "digiblocks"), value: "large" },
      { label: __42("Full", "digiblocks"), value: "full" }
    ];
    const borderStyleOptions = [
      { label: __42("Default", "digiblocks"), value: "default" },
      { label: __42("None", "digiblocks"), value: "none" },
      { label: __42("Solid", "digiblocks"), value: "solid" },
      { label: __42("Dotted", "digiblocks"), value: "dotted" },
      { label: __42("Dashed", "digiblocks"), value: "dashed" },
      { label: __42("Double", "digiblocks"), value: "double" },
      { label: __42("Groove", "digiblocks"), value: "groove" },
      { label: __42("Inset", "digiblocks"), value: "inset" },
      { label: __42("Outset", "digiblocks"), value: "outset" },
      { label: __42("Ridge", "digiblocks"), value: "ridge" }
    ];
    const animationOptions = [
      { label: __42("None", "digiblocks"), value: "none" },
      ...Object.keys(animations33).map((animation2) => ({
        label: animation2.replace(/-/g, " ").replace(/\b\w/g, (l) => l.toUpperCase()),
        value: animation2
      }))
    ];
    const tabList = [
      {
        name: "options",
        title: __42("Options", "digiblocks"),
        icon: tabIcons37.optionsIcon
      },
      {
        name: "style",
        title: __42("Style", "digiblocks"),
        icon: tabIcons37.styleIcon
      },
      {
        name: "advanced",
        title: __42("Advanced", "digiblocks"),
        icon: tabIcons37.advancedIcon
      }
    ];
    const generateCSS = () => {
      const activeDevice = localActiveDevice;
      let animationCSS = "";
      if (animation && animation !== "none" && animations33[animation]) {
        animationCSS = animations33[animation].keyframes;
      }
      let borderCSS = "";
      if (borderStyle && borderStyle !== "default" && borderStyle !== "none") {
        borderCSS = `
                border-style: ${borderStyle};
                border-color: ${borderColor || "#e0e0e0"};
                ${getDimensionCSS32(borderWidth, "border-width", activeDevice)}
            `;
      }
      let boxShadowCSS = "box-shadow: none;";
      if (boxShadow && boxShadow.enable) {
        const inset = boxShadow.position === "inset" ? "inset " : "";
        boxShadowCSS = `box-shadow: ${inset}${boxShadow.horizontal}px ${boxShadow.vertical}px ${boxShadow.blur}px ${boxShadow.spread}px ${boxShadow.color};transition: all 0.3s ease;`;
      }
      let boxShadowHoverCSS = "";
      if (boxShadowHover && boxShadowHover.enable) {
        const insetHover = boxShadowHover.position === "inset" ? "inset " : "";
        boxShadowHoverCSS = `box-shadow: ${insetHover}${boxShadowHover.horizontal}px ${boxShadowHover.vertical}px ${boxShadowHover.blur}px ${boxShadowHover.spread}px ${boxShadowHover.color};`;
      }
      return `
            /* Post Navigation Block - ${id} */
            .${id} {
                ${getDimensionCSS32(padding, "padding", activeDevice)}
                ${getDimensionCSS32(margin, "margin", activeDevice)}
            }
            
            .${id} .digiblocks-post-navigation-links {
				display: flex;
				justify-content: space-between;
				gap: 1rem;
				width: 100%;
			}
            
            .${id} .digiblocks-post-navigation-link {
				flex: 1;
                display: inline-flex;
                align-items: center;
                color: ${color || "#333"};
                background-color: ${backgroundColor || "transparent"};
                padding: 10px 15px;
                text-decoration: none;
                transition: all 0.3s ease;
                gap: 10px;
                ${borderCSS}
                ${getDimensionCSS32(borderRadius, "border-radius", activeDevice)}
                ${typography.fontFamily ? `font-family: ${typography.fontFamily};` : ""}
                ${typography.fontSize?.[activeDevice] ? `font-size: ${typography.fontSize[activeDevice]}${typography.fontSizeUnit || "px"};` : ""}
                ${typography.fontWeight ? `font-weight: ${typography.fontWeight};` : ""}
                ${typography.fontStyle ? `font-style: ${typography.fontStyle};` : ""}
                ${typography.textTransform ? `text-transform: ${typography.textTransform};` : ""}
                ${typography.textDecoration ? `text-decoration: ${typography.textDecoration};` : ""}
                ${typography.lineHeight?.[activeDevice] ? `line-height: ${typography.lineHeight[activeDevice]}${typography.lineHeightUnit || "em"};` : ""}
                ${typography.letterSpacing?.[activeDevice] ? `letter-spacing: ${typography.letterSpacing[activeDevice]}${typography.letterSpacingUnit || "px"};` : ""}
				${boxShadowCSS}
            }
            
            .${id} .digiblocks-post-navigation-link:hover {
                color: ${hoverColor || color || "#007bff"};
                background-color: ${backgroundHoverColor || backgroundColor || "transparent"};
				${borderHoverColor ? `
					border-color: ${borderHoverColor};
					` : ""}
				${boxShadowHoverCSS}
            }

			.${id} .digiblocks-post-navigation-next {
				text-align: right;
			}

			.${id} .digiblocks-post-navigation-content {
				display: flex;
				flex-direction: column;
				gap: .5rem;
				flex: 1;
			}
            
            .${id} .digiblocks-post-navigation-label {
                font-size: 0.9em;
                opacity: 0.8;
            }
            
            .${id} .digiblocks-post-navigation-title {
                font-weight: 600;
            }
            
            .${id} .digiblocks-post-navigation-image {
                width: 60px;
                height: 60px;
                border-radius: 4px;
                object-fit: cover;
            }
            
            /* Animation keyframes */
            ${animationCSS}

			/* Visibility Controls */
			${visibility.desktop ? `
				@media (min-width: 992px) {
					.${id} {
						opacity: 0.5 !important;
					}
				}
			` : ""}

			${visibility.tablet ? `
				@media (min-width: 768px) and (max-width: 991px) {
					.${id} {
						opacity: 0.5 !important;
					}
				}
			` : ""}

			${visibility.mobile ? `
				@media (max-width: 767px) {
					.${id} {
						opacity: 0.5 !important;
					}
				}
			` : ""}
        `;
    };
    const renderTabContent = () => {
      switch (activeTab) {
        case "options":
          return /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(
            TabPanelBody37,
            {
              tab: "options",
              name: "general",
              title: __42("General", "digiblocks"),
              initialOpen: true
            },
            /* @__PURE__ */ wp.element.createElement(
              Notice7,
              {
                status: "warning",
                isDismissible: false,
                className: "digiblocks-notice components-base-control"
              },
              __42("This is a placeholder. The actual post navigation will be displayed on single posts.", "digiblocks")
            ),
            /* @__PURE__ */ wp.element.createElement(
              ToggleControl37,
              {
                label: __42("Show Post Titles", "digiblocks"),
                checked: showPostTitle,
                onChange: (value) => setAttributes({ showPostTitle: value }),
                __nextHasNoMarginBottom: true
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              ToggleControl37,
              {
                label: __42("Show Navigation Labels", "digiblocks"),
                checked: showNavLabels,
                onChange: (value) => setAttributes({ showNavLabels: value }),
                __nextHasNoMarginBottom: true
              }
            ),
            showNavLabels && /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(
              TextControl18,
              {
                label: __42("Previous Label", "digiblocks"),
                value: previousLabel,
                onChange: (value) => setAttributes({ previousLabel: value }),
                __next40pxDefaultSize: true,
                __nextHasNoMarginBottom: true
              }
            ), /* @__PURE__ */ wp.element.createElement(
              TextControl18,
              {
                label: __42("Next Label", "digiblocks"),
                value: nextLabel,
                onChange: (value) => setAttributes({ nextLabel: value }),
                __next40pxDefaultSize: true,
                __nextHasNoMarginBottom: true
              }
            )),
            /* @__PURE__ */ wp.element.createElement(
              ToggleControl37,
              {
                label: __42("Show Featured Images", "digiblocks"),
                checked: showFeaturedImage,
                onChange: (value) => setAttributes({ showFeaturedImage: value }),
                __nextHasNoMarginBottom: true
              }
            ),
            showFeaturedImage && /* @__PURE__ */ wp.element.createElement(
              SelectControl35,
              {
                label: __42("Image Size", "digiblocks"),
                value: imageSize,
                options: imageSizeOptions,
                onChange: (value) => setAttributes({ imageSize: value }),
                __next40pxDefaultSize: true,
                __nextHasNoMarginBottom: true
              }
            )
          ));
        case "style":
          return /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(
            TabPanelBody37,
            {
              tab: "style",
              name: "colors",
              title: __42("Colors", "digiblocks"),
              initialOpen: true
            },
            /* @__PURE__ */ wp.element.createElement(
              TabPanel20,
              {
                className: "digiblocks-control-tabs",
                activeClass: "active-tab",
                tabs: [
                  {
                    name: "normal",
                    title: __42("Normal", "digiblocks"),
                    className: "digiblocks-tab-1 normal"
                  },
                  {
                    name: "hover",
                    title: __42("Hover", "digiblocks"),
                    className: "digiblocks-tab-2 hover"
                  }
                ]
              },
              (tab) => {
                if (tab.name === "normal") {
                  return /* @__PURE__ */ wp.element.createElement(
                    PanelColorSettings35,
                    {
                      title: __42("Normal Colors", "digiblocks"),
                      initialOpen: true,
                      enableAlpha: true,
                      colorSettings: [
                        {
                          value: color,
                          onChange: (value) => setAttributes({ color: value }),
                          label: __42("Text Color", "digiblocks")
                        },
                        {
                          value: backgroundColor,
                          onChange: (value) => setAttributes({ backgroundColor: value }),
                          label: __42("Background Color", "digiblocks")
                        }
                      ]
                    }
                  );
                } else if (tab.name === "hover") {
                  return /* @__PURE__ */ wp.element.createElement(
                    PanelColorSettings35,
                    {
                      title: __42("Hover Colors", "digiblocks"),
                      initialOpen: true,
                      enableAlpha: true,
                      colorSettings: [
                        {
                          value: hoverColor,
                          onChange: (value) => setAttributes({ hoverColor: value }),
                          label: __42("Text Color", "digiblocks")
                        },
                        {
                          value: backgroundHoverColor,
                          onChange: (value) => setAttributes({ backgroundHoverColor: value }),
                          label: __42("Background Color", "digiblocks")
                        },
                        {
                          value: borderHoverColor,
                          onChange: (value) => setAttributes({ borderHoverColor: value }),
                          label: __42("Border Color", "digiblocks")
                        }
                      ]
                    }
                  );
                }
              }
            )
          ), /* @__PURE__ */ wp.element.createElement(
            TabPanelBody37,
            {
              tab: "style",
              name: "typo",
              title: __42("Typography", "digiblocks"),
              initialOpen: false
            },
            /* @__PURE__ */ wp.element.createElement(
              TypographyControl29,
              {
                label: __42("Typography", "digiblocks"),
                value: typography,
                onChange: (value) => setAttributes({ typography: value }),
                defaults: {
                  fontSize: { desktop: 16, tablet: 15, mobile: 14 },
                  fontSizeUnit: "px",
                  lineHeight: { desktop: 1.5, tablet: 1.4, mobile: 1.3 },
                  lineHeightUnit: "em"
                }
              }
            )
          ), /* @__PURE__ */ wp.element.createElement(
            TabPanelBody37,
            {
              tab: "style",
              name: "border",
              title: __42("Border", "digiblocks"),
              initialOpen: false
            },
            /* @__PURE__ */ wp.element.createElement(
              SelectControl35,
              {
                label: __42("Border Style", "digiblocks"),
                value: borderStyle,
                options: borderStyleOptions,
                onChange: (value) => setAttributes({ borderStyle: value }),
                __next40pxDefaultSize: true,
                __nextHasNoMarginBottom: true
              }
            ),
            borderStyle && borderStyle !== "default" && borderStyle !== "none" && /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(
              PanelColorSettings35,
              {
                title: __42("Border Color", "digiblocks"),
                enableAlpha: true,
                colorSettings: [
                  {
                    value: borderColor,
                    onChange: (value) => setAttributes({ borderColor: value }),
                    label: __42("Border Color", "digiblocks")
                  }
                ]
              }
            ), /* @__PURE__ */ wp.element.createElement(
              ResponsiveControl37,
              {
                label: __42("Border Width", "digiblocks")
              },
              /* @__PURE__ */ wp.element.createElement(
                DimensionControl33,
                {
                  values: borderWidth[localActiveDevice],
                  onChange: (value) => setAttributes({
                    borderWidth: {
                      ...borderWidth,
                      [localActiveDevice]: value
                    }
                  })
                }
              )
            )),
            /* @__PURE__ */ wp.element.createElement(
              ResponsiveControl37,
              {
                label: __42("Border Radius", "digiblocks")
              },
              /* @__PURE__ */ wp.element.createElement(
                DimensionControl33,
                {
                  values: borderRadius[localActiveDevice],
                  onChange: (value) => setAttributes({
                    borderRadius: {
                      ...borderRadius,
                      [localActiveDevice]: value
                    }
                  })
                }
              )
            ),
            /* @__PURE__ */ wp.element.createElement(
              BoxShadowControl26,
              {
                normalValue: boxShadow,
                hoverValue: boxShadowHover,
                onNormalChange: (value) => setAttributes({ boxShadow: value }),
                onHoverChange: (value) => setAttributes({ boxShadowHover: value })
              }
            )
          ), /* @__PURE__ */ wp.element.createElement(
            TabPanelBody37,
            {
              tab: "style",
              name: "spacing",
              title: __42("Spacing", "digiblocks"),
              initialOpen: false
            },
            /* @__PURE__ */ wp.element.createElement(
              ResponsiveControl37,
              {
                label: __42("Padding", "digiblocks")
              },
              /* @__PURE__ */ wp.element.createElement(
                DimensionControl33,
                {
                  values: padding[localActiveDevice],
                  onChange: (value) => setAttributes({
                    padding: {
                      ...padding,
                      [localActiveDevice]: value
                    }
                  })
                }
              )
            ),
            /* @__PURE__ */ wp.element.createElement(
              ResponsiveControl37,
              {
                label: __42("Margin", "digiblocks")
              },
              /* @__PURE__ */ wp.element.createElement(
                DimensionControl33,
                {
                  values: margin[localActiveDevice],
                  onChange: (value) => setAttributes({
                    margin: {
                      ...margin,
                      [localActiveDevice]: value
                    }
                  })
                }
              )
            )
          ));
        case "advanced":
          return /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(
            TabPanelBody37,
            {
              tab: "advanced",
              name: "animation",
              title: __42("Animation", "digiblocks"),
              initialOpen: true
            },
            /* @__PURE__ */ wp.element.createElement(
              SelectControl35,
              {
                label: __42("Animation Effect", "digiblocks"),
                value: animation,
                options: animationOptions,
                onChange: (value) => setAttributes({ animation: value }),
                __next40pxDefaultSize: true,
                __nextHasNoMarginBottom: true
              }
            ),
            animation && animation !== "none" && /* @__PURE__ */ wp.element.createElement("div", { style: { marginTop: "10px" } }, /* @__PURE__ */ wp.element.createElement(
              Button34,
              {
                variant: "secondary",
                isSecondary: true,
                onClick: handlePreviewClick,
                style: { width: "100%" }
              },
              __42("Preview Animation", "digiblocks")
            ))
          ), /* @__PURE__ */ wp.element.createElement(
            TabPanelBody37,
            {
              tab: "advanced",
              name: "visibility",
              title: __42("Visibility", "digiblocks"),
              initialOpen: false
            },
            /* @__PURE__ */ wp.element.createElement("div", { className: "components-base-control__help", style: {
              padding: "12px",
              backgroundColor: "#f0f6fc",
              border: "1px solid #c3ddfd",
              borderRadius: "4px",
              marginBottom: "16px"
            } }, /* @__PURE__ */ wp.element.createElement("strong", null, __42("Editor Note:", "digiblocks")), /* @__PURE__ */ wp.element.createElement("br", null), __42("Hidden elements appear with reduced opacity in the editor for easy editing. Visibility changes only take effect on the frontend.", "digiblocks")),
            /* @__PURE__ */ wp.element.createElement(
              ToggleControl37,
              {
                label: __42("Hide on Desktop", "digiblocks"),
                checked: visibility.desktop,
                onChange: (value) => setAttributes({
                  visibility: {
                    ...visibility,
                    desktop: value
                  }
                }),
                __nextHasNoMarginBottom: true
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              ToggleControl37,
              {
                label: __42("Hide on Tablet", "digiblocks"),
                checked: visibility.tablet,
                onChange: (value) => setAttributes({
                  visibility: {
                    ...visibility,
                    tablet: value
                  }
                }),
                __nextHasNoMarginBottom: true
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              ToggleControl37,
              {
                label: __42("Hide on Mobile", "digiblocks"),
                checked: visibility.mobile,
                onChange: (value) => setAttributes({
                  visibility: {
                    ...visibility,
                    mobile: value
                  }
                }),
                __nextHasNoMarginBottom: true
              }
            )
          ), /* @__PURE__ */ wp.element.createElement(
            TabPanelBody37,
            {
              tab: "advanced",
              name: "additional",
              title: __42("Additional", "digiblocks"),
              initialOpen: false
            },
            /* @__PURE__ */ wp.element.createElement("div", { className: "components-base-control html-anchor-control" }, /* @__PURE__ */ wp.element.createElement("div", { className: "components-base-control__field" }, /* @__PURE__ */ wp.element.createElement("label", { className: "components-base-control__label", htmlFor: "html-anchor" }, __42("HTML anchor", "digiblocks")), /* @__PURE__ */ wp.element.createElement(
              "input",
              {
                className: "components-text-control__input",
                type: "text",
                id: "html-anchor",
                value: anchor || "",
                onChange: (e) => setAttributes({ anchor: e.target.value }),
                "aria-describedby": "html-anchor-help",
                autoCapitalize: "none",
                autoComplete: "off"
              }
            )), /* @__PURE__ */ wp.element.createElement("p", { id: "html-anchor-help", className: "components-base-control__help" }, __42(`Enter a word or two \u2014 without spaces \u2014 to make a unique web address just for this block, called an "anchor". Then, you'll be able to link directly to this section of your page.`, "digiblocks"), " ", /* @__PURE__ */ wp.element.createElement(
              "a",
              {
                className: "components-external-link",
                href: "https://wordpress.org/documentation/article/page-jumps/",
                target: "_blank",
                rel: "external noreferrer noopener"
              },
              /* @__PURE__ */ wp.element.createElement("span", { className: "components-external-link__contents" }, __42("Learn more about anchors", "digiblocks")),
              /* @__PURE__ */ wp.element.createElement("span", { className: "components-external-link__icon", "aria-label": "(opens in a new tab)" }, "\u2197")
            ))),
            /* @__PURE__ */ wp.element.createElement("div", { className: "components-base-control" }, /* @__PURE__ */ wp.element.createElement("div", { className: "components-base-control__field" }, /* @__PURE__ */ wp.element.createElement("label", { className: "components-base-control__label", htmlFor: "additional-css-classes" }, __42("Additional CSS class(es)", "digiblocks")), /* @__PURE__ */ wp.element.createElement(
              "input",
              {
                className: "components-text-control__input",
                type: "text",
                id: "additional-css-classes",
                value: customClasses || "",
                onChange: (e) => setAttributes({ customClasses: e.target.value }),
                "aria-describedby": "additional-css-classes-help",
                autoComplete: "off"
              }
            )), /* @__PURE__ */ wp.element.createElement("p", { id: "additional-css-classes-help", className: "components-base-control__help" }, __42("Separate multiple classes with spaces.", "digiblocks")))
          ));
        default:
          return null;
      }
    };
    const blockClasses = `digiblocks-post-navigation ${id} ${animation !== "none" ? `animate-${animation}` : ""} ${customClasses || ""}`;
    const blockProps = useBlockProps64({
      className: blockClasses,
      id: anchor || null
    });
    return /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(InspectorControls37, null, /* @__PURE__ */ wp.element.createElement(
      CustomTabPanel37,
      {
        tabs: tabList,
        activeTab,
        onSelect: setActiveTab
      },
      renderTabContent()
    )), /* @__PURE__ */ wp.element.createElement("style", { dangerouslySetInnerHTML: { __html: generateCSS() } }), /* @__PURE__ */ wp.element.createElement("div", { ...blockProps }, /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-post-navigation-links" }, /* @__PURE__ */ wp.element.createElement("a", { href: "#", className: "digiblocks-post-navigation-link digiblocks-post-navigation-prev", onClick: (e) => e.preventDefault() }, /* @__PURE__ */ wp.element.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 24 24", width: "24", height: "24", fill: "none", stroke: "currentColor", strokeWidth: "2", strokeLinecap: "round", strokeLinejoin: "round" }, /* @__PURE__ */ wp.element.createElement("path", { d: "M19 12H5M12 19l-7-7 7-7" })), /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-post-navigation-content" }, showNavLabels && /* @__PURE__ */ wp.element.createElement("span", { className: "digiblocks-post-navigation-label" }, previousLabel), showPostTitle && /* @__PURE__ */ wp.element.createElement("span", { className: "digiblocks-post-navigation-title" }, __42("Previous Post Title", "digiblocks"))), showFeaturedImage && /* @__PURE__ */ wp.element.createElement("img", { src: "https://picsum.photos/500/500", alt: "", className: "digiblocks-post-navigation-image" })), /* @__PURE__ */ wp.element.createElement("a", { href: "#", className: "digiblocks-post-navigation-link digiblocks-post-navigation-next", onClick: (e) => e.preventDefault() }, showFeaturedImage && /* @__PURE__ */ wp.element.createElement("img", { src: "https://picsum.photos/500/500", alt: "", className: "digiblocks-post-navigation-image" }), /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-post-navigation-content" }, showNavLabels && /* @__PURE__ */ wp.element.createElement("span", { className: "digiblocks-post-navigation-label" }, nextLabel), showPostTitle && /* @__PURE__ */ wp.element.createElement("span", { className: "digiblocks-post-navigation-title" }, __42("Next Post Title", "digiblocks"))), /* @__PURE__ */ wp.element.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 24 24", width: "24", height: "24", fill: "none", stroke: "currentColor", strokeWidth: "2", strokeLinecap: "round", strokeLinejoin: "round" }, /* @__PURE__ */ wp.element.createElement("path", { d: "M5 12h14M12 5l7 7-7 7" }))))));
  };
  var edit_default37 = PostNavigationEdit;

  // blocks/post-navigation/save.js
  var PostNavigationSave = () => {
    return null;
  };
  var save_default37 = PostNavigationSave;

  // blocks/social-share/edit.js
  var { __: __43 } = window.wp.i18n;
  var {
    useBlockProps: useBlockProps65,
    InspectorControls: InspectorControls38,
    PanelColorSettings: PanelColorSettings36
  } = window.wp.blockEditor;
  var {
    SelectControl: SelectControl36,
    ToggleControl: ToggleControl38,
    RangeControl: RangeControl34,
    Button: Button35,
    TabPanel: TabPanel21,
    PanelBody: PanelBody3,
    __experimentalToggleGroupControl: ToggleGroupControl36,
    __experimentalToggleGroupControlOption: ToggleGroupControlOption36
  } = window.wp.components;
  var { useState: useState38, useEffect: useEffect38, useRef: useRef33 } = window.wp.element;
  var { useBlockId: useBlockId38, getDimensionCSS: getDimensionCSS33, animations: animations34, animationPreview: animationPreview34 } = digi.utils;
  var { tabIcons: tabIcons38 } = digi.icons;
  var { ResponsiveControl: ResponsiveControl38, DimensionControl: DimensionControl34, TypographyControl: TypographyControl30, CustomTabPanel: CustomTabPanel38, TabPanelBody: TabPanelBody38 } = digi.components;
  var SocialShareEdit = ({ attributes, setAttributes, clientId }) => {
    const {
      id,
      anchor,
      visibility,
      customClasses,
      showLabels,
      buttonStyle,
      buttonSize,
      iconSpacing,
      alignment,
      useCustomColors,
      buttonBackgroundColor,
      buttonTextColor,
      buttonHoverBackgroundColor,
      buttonHoverTextColor,
      borderStyle,
      borderWidth,
      borderRadius,
      borderColor,
      borderHoverColor,
      padding,
      margin,
      typography,
      facebook,
      twitter,
      linkedin,
      pinterest,
      reddit,
      whatsapp,
      telegram,
      email,
      print,
      animation
    } = attributes;
    useBlockId38(id, clientId, setAttributes);
    const [localActiveDevice, setLocalActiveDevice] = useState38(window.digi.responsiveState.activeDevice);
    const [activeTab, setActiveTab] = useState38(() => {
      if (window.digi.uiState) {
        const savedTab = window.digi.uiState.getActiveTab(clientId);
        if (savedTab)
          return savedTab;
      }
      return "options";
    });
    useEffect38(() => {
      const unsubscribe = window.digi.responsiveState.subscribe((device) => {
        setLocalActiveDevice(device);
      });
      return unsubscribe;
    }, []);
    const previewTimeoutRef = useRef33(null);
    useEffect38(() => {
      if (animation && animation !== "none") {
        const timeoutId = setTimeout(() => {
          animationPreview34(id, animation, animations34, previewTimeoutRef);
        }, 100);
        return () => clearTimeout(timeoutId);
      }
    }, [animation]);
    const handlePreviewClick = () => {
      animationPreview34(id, animation, animations34, previewTimeoutRef);
    };
    const animationOptions = [
      { label: __43("None", "digiblocks"), value: "none" },
      ...Object.keys(animations34).map((animation2) => ({
        label: animation2.replace(/-/g, " ").replace(/\b\w/g, (l) => l.toUpperCase()),
        value: animation2
      }))
    ];
    const borderStyleOptions = [
      { label: __43("None", "digiblocks"), value: "none" },
      { label: __43("Solid", "digiblocks"), value: "solid" },
      { label: __43("Dashed", "digiblocks"), value: "dashed" },
      { label: __43("Dotted", "digiblocks"), value: "dotted" },
      { label: __43("Double", "digiblocks"), value: "double" }
    ];
    const tabList = [
      {
        name: "options",
        title: __43("Options", "digiblocks"),
        icon: tabIcons38.optionsIcon
      },
      {
        name: "style",
        title: __43("Style", "digiblocks"),
        icon: tabIcons38.styleIcon
      },
      {
        name: "advanced",
        title: __43("Advanced", "digiblocks"),
        icon: tabIcons38.advancedIcon
      }
    ];
    const stateTabList = [
      {
        name: "normal",
        title: __43("Normal", "digiblocks"),
        className: "digiblocks-tab-1 normal"
      },
      {
        name: "hover",
        title: __43("Hover", "digiblocks"),
        className: "digiblocks-tab-2 hover"
      }
    ];
    const socialNetworks = {
      facebook: {
        label: __43("Facebook", "digiblocks"),
        icon: '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 320 512" width="1em" height="1em"><path d="M80 299.3V512H196V299.3h86.5l18-97.8H196V166.9c0-51.7 20.3-71.5 72.7-71.5c16.3 0 29.4 .4 37 1.2V7.9C291.4 4 256.4 0 236.2 0C129.3 0 80 50.5 80 159.4v42.1H14v97.8H80z"/></svg>',
        color: "#1877f2",
        shareUrl: "https://www.facebook.com/sharer/sharer.php?u=SHARE_URL"
      },
      twitter: {
        label: __43("X", "digiblocks"),
        icon: '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512" width="1em" height="1em"><path d="M389.2 48h70.6L305.6 224.2 487 464H345L233.7 318.6 106.5 464H35.8L200.7 275.5 26.8 48H172.4L272.9 180.9 389.2 48zM364.4 421.8h39.1L151.1 88h-42L364.4 421.8z"/></svg>',
        color: "#000000",
        shareUrl: "https://twitter.com/intent/tweet?url=SHARE_URL"
      },
      linkedin: {
        label: __43("LinkedIn", "digiblocks"),
        icon: '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512" width="1em" height="1em"><path d="M100.3 448H7.4V148.9h92.9zM53.8 108.1C24.1 108.1 0 83.5 0 53.8a53.8 53.8 0 0 1 107.6 0c0 29.7-24.1 54.3-53.8 54.3zM447.9 448h-92.7V302.4c0-34.7-.7-79.2-48.3-79.2-48.3 0-55.7 37.7-55.7 76.7V448h-92.8V148.9h89.1v40.8h1.3c12.4-23.5 42.7-48.3 87.9-48.3 94 0 111.3 61.9 111.3 142.3V448z"/></svg>',
        color: "#0077b5",
        shareUrl: "https://www.linkedin.com/shareArticle?mini=true&url=SHARE_URL"
      },
      pinterest: {
        label: __43("Pinterest", "digiblocks"),
        icon: '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 384 512" width="1em" height="1em"><path d="M204 6.5C101.4 6.5 0 74.9 0 185.6 0 256 39.6 296 63.6 296c9.9 0 15.6-27.6 15.6-35.4 0-9.3-23.7-29.1-23.7-67.8 0-80.4 61.2-137.4 140.4-137.4 68.1 0 118.5 38.7 118.5 109.8 0 53.1-21.3 152.7-90.3 152.7-24.9 0-46.2-18-46.2-43.8 0-37.8 26.4-74.4 26.4-113.4 0-66.2-93.9-54.2-93.9 25.8 0 16.8 2.1 35.4 9.6 50.7-13.8 59.4-42 147.9-42 209.1 0 18.9 2.7 37.5 4.5 56.4 3.4 3.8 1.7 3.4 6.9 1.5 50.4-69 48.6-82.5 71.4-172.8 12.3 23.4 44.1 36 69.3 36 106.2 0 153.9-103.5 153.9-196.8C384 71.3 298.2 6.5 204 6.5z"/></svg>',
        color: "#e60023",
        shareUrl: "https://pinterest.com/pin/create/button/?url=SHARE_URL"
      },
      reddit: {
        label: __43("Reddit", "digiblocks"),
        icon: '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512" width="1em" height="1em"><path d="M373 138.6c-25.2 0-46.3-17.5-51.9-41l0 0c-30.6 4.3-54.2 30.7-54.2 62.4l0 .2c47.4 1.8 90.6 15.1 124.9 36.3c12.6-9.7 28.4-15.5 45.5-15.5c41.3 0 74.7 33.4 74.7 74.7c0 29.8-17.4 55.5-42.7 67.5c-2.4 86.8-97 156.6-213.2 156.6S45.5 410.1 43 323.4C17.6 311.5 0 285.7 0 255.7c0-41.3 33.4-74.7 74.7-74.7c17.2 0 33 5.8 45.7 15.6c34-21.1 76.8-34.4 123.7-36.4l0-.3c0-44.3 33.7-80.9 76.8-85.5C325.8 50.2 347.2 32 373 32c29.4 0 53.3 23.9 53.3 53.3s-23.9 53.3-53.3 53.3zM157.5 255.3c-20.9 0-38.9 20.8-40.2 47.9s17.1 38.1 38 38.1s36.6-9.8 37.8-36.9s-14.7-49.1-35.7-49.1zM395 303.1c-1.2-27.1-19.2-47.9-40.2-47.9s-36.9 22-35.7 49.1c1.2 27.1 16.9 36.9 37.8 36.9s39.3-11 38-38.1zm-60.1 70.8c1.5-3.6-1-7.7-4.9-8.1c-23-2.3-47.9-3.6-73.8-3.6s-50.8 1.3-73.8 3.6c-3.9 .4-6.4 4.5-4.9 8.1c12.9 30.8 43.3 52.4 78.7 52.4s65.8-21.6 78.7-52.4z"/></svg>',
        color: "#ff4500",
        shareUrl: "https://www.reddit.com/submit?url=SHARE_URL"
      },
      whatsapp: {
        label: __43("WhatsApp", "digiblocks"),
        icon: '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512" width="1em" height="1em"><path d="M380.9 97.1C339 55.1 283.2 32 223.9 32c-122.4 0-222 99.6-222 222 0 39.1 10.2 77.3 29.6 111L0 480l117.7-30.9c32.4 17.7 68.9 27 106.1 27h.1c122.3 0 224.1-99.6 224.1-222 0-59.3-25.2-115-67.1-157zm-157 341.6c-33.2 0-65.7-8.9-94-25.7l-6.7-4-69.8 18.3L72 359.2l-4.4-7c-18.5-29.4-28.2-63.3-28.2-98.2 0-101.7 82.8-184.5 184.6-184.5 49.3 0 95.6 19.2 130.4 54.1 34.8 34.9 56.2 81.2 56.1 130.5 0 101.8-84.9 184.6-186.6 184.6zm101.2-138.2c-5.5-2.8-32.8-16.2-37.9-18-5.1-1.9-8.8-2.8-12.5 2.8-3.7 5.6-14.3 18-17.6 21.8-3.2 3.7-6.5 4.2-12 1.4-32.6-16.3-54-29.1-75.5-66-5.7-9.8 5.7-9.1 16.3-30.3 1.8-3.7 .9-6.9-.5-9.7-1.4-2.8-12.5-30.1-17.1-41.2-4.5-10.8-9.1-9.3-12.5-9.5-3.2-.2-6.9-.2-10.6-.2-3.7 0-9.7 1.4-14.8 6.9-5.1 5.6-19.4 19-19.4 46.3 0 27.3 19.9 53.7 22.6 57.4 2.8 3.7 39.1 59.7 94.8 83.8 35.2 15.2 49 16.5 66.6 13.9 10.7-1.6 32.8-13.4 37.4-26.4 4.6-13 4.6-24.1 3.2-26.4-1.3-2.5-5-3.9-10.5-6.6z"/></svg>',
        color: "#25d366",
        shareUrl: "https://api.whatsapp.com/send?text=SHARE_URL"
      },
      telegram: {
        label: __43("Telegram", "digiblocks"),
        icon: '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 496 512" width="1em" height="1em"><path d="M248 8C111 8 0 119 0 256S111 504 248 504 496 393 496 256 385 8 248 8zM363 176.7c-3.7 39.2-19.9 134.4-28.1 178.3-3.5 18.6-10.3 24.8-16.9 25.4-14.4 1.3-25.3-9.5-39.3-18.7-21.8-14.3-34.2-23.2-55.3-37.2-24.5-16.1-8.6-25 5.3-39.5 3.7-3.8 67.1-61.5 68.3-66.7 .2-.7 .3-3.1-1.2-4.4s-3.6-.8-5.1-.5q-3.3 .7-104.6 69.1-14.8 10.2-26.9 9.9c-8.9-.2-25.9-5-38.6-9.1-15.5-5-27.9-7.7-26.8-16.3q.8-6.7 18.5-13.7 108.4-47.2 144.6-62.3c68.9-28.6 83.2-33.6 92.5-33.8 2.1 0 6.6 .5 9.6 2.9a10.5 10.5 0 0 1 3.5 6.7A43.8 43.8 0 0 1 363 176.7z"/></svg>',
        color: "#0088cc",
        shareUrl: "https://t.me/share/url?url=SHARE_URL"
      },
      email: {
        label: __43("Email", "digiblocks"),
        icon: '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512" width="1em" height="1em"><path d="M48 64C21.5 64 0 85.5 0 112c0 15.1 7.1 29.3 19.2 38.4L236.8 313.6c11.4 8.5 27 8.5 38.4 0L492.8 150.4c12.1-9.1 19.2-23.3 19.2-38.4c0-26.5-21.5-48-48-48L48 64zM0 176L0 384c0 35.3 28.7 64 64 64l384 0c35.3 0 64-28.7 64-64l0-208L294.4 339.2c-22.8 17.1-54 17.1-76.8 0L0 176z"/></svg>',
        color: "#D44638",
        shareUrl: "mailto:?body=SHARE_URL"
      },
      print: {
        label: __43("Print", "digiblocks"),
        icon: '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512" width="1em" height="1em"><path d="M128 0C92.7 0 64 28.7 64 64l0 96 64 0 0-96 226.7 0L384 93.3l0 66.7 64 0 0-66.7c0-17-6.7-33.3-18.7-45.3L400 18.7C388 6.7 371.7 0 354.7 0L128 0zM384 352l0 32 0 64-256 0 0-64 0-16 0-16 256 0zm64 32l32 0c17.7 0 32-14.3 32-32l0-96c0-35.3-28.7-64-64-64L64 192c-35.3 0-64 28.7-64 64l0 96c0 17.7 14.3 32 32 32l32 0 0 64c0 35.3 28.7 64 64 64l256 0c35.3 0 64-28.7 64-64l0-64zM432 248a24 24 0 1 1 0 48 24 24 0 1 1 0-48z"/></svg>',
        color: "#000000",
        shareUrl: "javascript:window.print()"
      }
    };
    const generateCSS = () => {
      const activeDevice = localActiveDevice;
      let animationCSS = "";
      if (animation && animation !== "none" && animations34[animation]) {
        animationCSS = animations34[animation].keyframes;
      }
      let socialButtonsCSS = "";
      Object.keys(socialNetworks).forEach((network) => {
        if (attributes[network]) {
          const socialColor = socialNetworks[network].color;
          if (!useCustomColors) {
            socialButtonsCSS += `
                        .${id} .digiblocks-social-share-${network} {
                            ${buttonStyle === "filled" ? `background-color: ${socialColor};` : ""}
                            ${buttonStyle === "filled" ? "color: #ffffff;" : `color: ${socialColor};`}
                            ${buttonStyle === "outlined" ? `border-color: ${socialColor};` : ""}
                        }
                        
                        .${id} .digiblocks-social-share-${network}:hover {
                            ${buttonStyle === "filled" ? `background-color: ${socialColor}DD;` : ""}
                            ${buttonStyle === "outlined" || buttonStyle === "plain" ? `background-color: ${socialColor}22;` : ""}
                        }
                    `;
          }
        }
      });
      return `
            /* Social Share Buttons Block - ${id} */
            .${id} {
                ${getDimensionCSS33(margin, "margin", activeDevice)}
                display: flex;
                flex-wrap: wrap;
                justify-content: ${alignment[activeDevice]};
                gap: ${iconSpacing[activeDevice]}px;
            }
            
            .${id} .digiblocks-social-share-button {
                display: inline-flex;
                align-items: center;
                justify-content: center;
				gap: 8px;
                ${getDimensionCSS33(padding, "padding", activeDevice)}
                ${borderStyle !== "none" ? `border-style: ${borderStyle};` : ""}
                ${borderStyle !== "none" ? getDimensionCSS33(borderWidth, "border-width", activeDevice) : ""}
                ${borderStyle !== "none" ? `border-color: ${borderColor || "#e0e0e0"};` : ""}
                ${getDimensionCSS33(borderRadius, "border-radius", activeDevice)}
                text-decoration: none;
                transition: all 0.3s ease;
                cursor: pointer;
                line-height: 1;
                /* Button size */
                ${buttonSize[activeDevice] ? `
                    width: ${buttonSize[activeDevice]}px;
                    height: ${buttonSize[activeDevice]}px;
                ` : ""}
                ${showLabels ? "width: auto;height: auto;" : ""}
                
                /* Typography */
                ${typography.fontFamily ? `font-family: ${typography.fontFamily};` : ""}
                ${typography.fontSize?.[activeDevice] ? `font-size: ${typography.fontSize[activeDevice]}${typography.fontSizeUnit || "px"};` : ""}
                ${typography.fontWeight ? `font-weight: ${typography.fontWeight};` : ""}
                ${typography.fontStyle ? `font-style: ${typography.fontStyle};` : ""}
                ${typography.textTransform ? `text-transform: ${typography.textTransform};` : ""}
                ${typography.textDecoration ? `text-decoration: ${typography.textDecoration};` : ""}
                ${typography.lineHeight?.[activeDevice] ? `line-height: ${typography.lineHeight[activeDevice]}${typography.lineHeightUnit || "em"};` : ""}
                ${typography.letterSpacing?.[activeDevice] ? `letter-spacing: ${typography.letterSpacing[activeDevice]}${typography.letterSpacingUnit || "px"};` : ""}
            }

			${borderStyle !== "none" && borderHoverColor ? `
				.${id} .digiblocks-social-share-button:hover {
					border-color: ${borderHoverColor};
				}
				` : ""}
            
            .${id} .digiblocks-social-share-button span,
            .${id} .digiblocks-social-share-button svg {
                display: flex;
            }
            
            .${id} .digiblocks-social-share-button svg {
                width: ${Math.floor(buttonSize[activeDevice] * 0.45)}px;
                height: ${Math.floor(buttonSize[activeDevice] * 0.45)}px;
                fill: currentColor;
            }
            
            /* Custom colors if enabled */
            ${useCustomColors ? `
                .${id} .digiblocks-social-share-button {
                    background-color: ${buttonBackgroundColor || "transparent"};
                    color: ${buttonTextColor || "#333333"};
					${buttonStyle === "outlined" ? `
						border-color: ${borderColor || "#e0e0e0"};
						` : ""}
                }
                
                .${id} .digiblocks-social-share-button:hover {
                    background-color: ${buttonHoverBackgroundColor || (buttonBackgroundColor ? buttonBackgroundColor + "DD" : "rgba(0,0,0,0.05)")};
                    color: ${buttonHoverTextColor || buttonTextColor || "#333333"};
                }
            ` : `
                /* Default styling based on button style */
                ${buttonStyle === "filled" ? `
                    .${id} .digiblocks-social-share-button {
                        background-color: #555555;
                        color: #ffffff;
                    }
                ` : buttonStyle === "outlined" ? `
                    .${id} .digiblocks-social-share-button {
                        background-color: transparent;
                        border-style: ${borderStyle !== "none" ? borderStyle : "solid"};
						border-width: ${getDimensionCSS33(borderWidth, "border-width", activeDevice).trim() || "2px"};
						border-color: ${borderColor || "#e0e0e0"};
                    }
                ` : `
                    .${id} .digiblocks-social-share-button {
                        background-color: transparent;
                    }
                    
                    .${id} .digiblocks-social-share-button:hover {
                        background-color: rgba(0,0,0,0.05);
                    }
                `}
            `}
            
            /* Individual social network styling */
            ${!useCustomColors ? socialButtonsCSS : ""}
            
            /* Animation keyframes */
            ${animationCSS}

			/* Visibility Controls */
			${visibility.desktop ? `
				@media (min-width: 992px) {
					.${id} {
						opacity: 0.5 !important;
					}
				}
			` : ""}

			${visibility.tablet ? `
				@media (min-width: 768px) and (max-width: 991px) {
					.${id} {
						opacity: 0.5 !important;
					}
				}
			` : ""}

			${visibility.mobile ? `
				@media (max-width: 767px) {
					.${id} {
						opacity: 0.5 !important;
					}
				}
			` : ""}
        `;
    };
    const renderTabContent = () => {
      switch (activeTab) {
        case "options":
          return /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(
            TabPanelBody38,
            {
              tab: "options",
              name: "social-networks",
              title: __43("Social Networks", "digiblocks"),
              initialOpen: true
            },
            /* @__PURE__ */ wp.element.createElement(
              ToggleControl38,
              {
                label: __43("Facebook", "digiblocks"),
                checked: facebook,
                onChange: (value) => setAttributes({ facebook: value }),
                __nextHasNoMarginBottom: true
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              ToggleControl38,
              {
                label: __43("X (Twitter)", "digiblocks"),
                checked: twitter,
                onChange: (value) => setAttributes({ twitter: value }),
                __nextHasNoMarginBottom: true
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              ToggleControl38,
              {
                label: __43("LinkedIn", "digiblocks"),
                checked: linkedin,
                onChange: (value) => setAttributes({ linkedin: value }),
                __nextHasNoMarginBottom: true
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              ToggleControl38,
              {
                label: __43("Pinterest", "digiblocks"),
                checked: pinterest,
                onChange: (value) => setAttributes({ pinterest: value }),
                __nextHasNoMarginBottom: true
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              ToggleControl38,
              {
                label: __43("Reddit", "digiblocks"),
                checked: reddit,
                onChange: (value) => setAttributes({ reddit: value }),
                __nextHasNoMarginBottom: true
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              ToggleControl38,
              {
                label: __43("WhatsApp", "digiblocks"),
                checked: whatsapp,
                onChange: (value) => setAttributes({ whatsapp: value }),
                __nextHasNoMarginBottom: true
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              ToggleControl38,
              {
                label: __43("Telegram", "digiblocks"),
                checked: telegram,
                onChange: (value) => setAttributes({ telegram: value }),
                __nextHasNoMarginBottom: true
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              ToggleControl38,
              {
                label: __43("Email", "digiblocks"),
                checked: email,
                onChange: (value) => setAttributes({ email: value }),
                __nextHasNoMarginBottom: true
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              ToggleControl38,
              {
                label: __43("Print", "digiblocks"),
                checked: print,
                onChange: (value) => setAttributes({ print: value }),
                __nextHasNoMarginBottom: true
              }
            )
          ), /* @__PURE__ */ wp.element.createElement(
            TabPanelBody38,
            {
              tab: "options",
              name: "display",
              title: __43("Display", "digiblocks"),
              initialOpen: false
            },
            /* @__PURE__ */ wp.element.createElement(
              ToggleControl38,
              {
                label: __43("Show Labels", "digiblocks"),
                checked: showLabels,
                onChange: (value) => setAttributes({ showLabels: value }),
                __nextHasNoMarginBottom: true
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              ToggleGroupControl36,
              {
                label: __43("Button Style", "digiblocks"),
                value: buttonStyle,
                onChange: (value) => setAttributes({ buttonStyle: value }),
                isBlock: true,
                __next40pxDefaultSize: true,
                __nextHasNoMarginBottom: true
              },
              /* @__PURE__ */ wp.element.createElement(
                ToggleGroupControlOption36,
                {
                  value: "filled",
                  label: __43("Filled", "digiblocks")
                }
              ),
              /* @__PURE__ */ wp.element.createElement(
                ToggleGroupControlOption36,
                {
                  value: "outlined",
                  label: __43("Outlined", "digiblocks")
                }
              ),
              /* @__PURE__ */ wp.element.createElement(
                ToggleGroupControlOption36,
                {
                  value: "plain",
                  label: __43("Plain", "digiblocks")
                }
              )
            ),
            /* @__PURE__ */ wp.element.createElement(
              ResponsiveControl38,
              {
                label: __43("Button Size", "digiblocks")
              },
              /* @__PURE__ */ wp.element.createElement(
                RangeControl34,
                {
                  value: buttonSize[localActiveDevice],
                  onChange: (value) => setAttributes({
                    buttonSize: {
                      ...buttonSize,
                      [localActiveDevice]: value
                    }
                  }),
                  min: 20,
                  max: 80,
                  __next40pxDefaultSize: true,
                  __nextHasNoMarginBottom: true
                }
              )
            ),
            /* @__PURE__ */ wp.element.createElement(
              ResponsiveControl38,
              {
                label: __43("Buttons Spacing", "digiblocks")
              },
              /* @__PURE__ */ wp.element.createElement(
                RangeControl34,
                {
                  value: iconSpacing[localActiveDevice],
                  onChange: (value) => setAttributes({
                    iconSpacing: {
                      ...iconSpacing,
                      [localActiveDevice]: value
                    }
                  }),
                  min: 0,
                  max: 40,
                  __next40pxDefaultSize: true,
                  __nextHasNoMarginBottom: true
                }
              )
            ),
            /* @__PURE__ */ wp.element.createElement(
              ResponsiveControl38,
              {
                label: __43("Buttons Alignment", "digiblocks")
              },
              /* @__PURE__ */ wp.element.createElement(
                ToggleGroupControl36,
                {
                  value: alignment[localActiveDevice],
                  onChange: (value) => setAttributes({
                    alignment: {
                      ...alignment,
                      [localActiveDevice]: value
                    }
                  }),
                  isBlock: true,
                  __next40pxDefaultSize: true,
                  __nextHasNoMarginBottom: true
                },
                /* @__PURE__ */ wp.element.createElement(
                  ToggleGroupControlOption36,
                  {
                    value: "flex-start",
                    label: __43("Left", "digiblocks")
                  }
                ),
                /* @__PURE__ */ wp.element.createElement(
                  ToggleGroupControlOption36,
                  {
                    value: "center",
                    label: __43("Center", "digiblocks")
                  }
                ),
                /* @__PURE__ */ wp.element.createElement(
                  ToggleGroupControlOption36,
                  {
                    value: "flex-end",
                    label: __43("Right", "digiblocks")
                  }
                )
              )
            )
          ));
        case "style":
          return /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(
            TabPanelBody38,
            {
              tab: "style",
              name: "colors",
              title: __43("Colors", "digiblocks"),
              initialOpen: true
            },
            /* @__PURE__ */ wp.element.createElement(
              ToggleControl38,
              {
                label: __43("Use Custom Colors", "digiblocks"),
                checked: useCustomColors,
                onChange: (value) => setAttributes({ useCustomColors: value }),
                help: __43("By default, social share buttons use their brand colors. Enable this to use custom colors.", "digiblocks"),
                __nextHasNoMarginBottom: true
              }
            ),
            useCustomColors && /* @__PURE__ */ wp.element.createElement(
              TabPanel21,
              {
                className: "digiblocks-control-tabs",
                activeClass: "active-tab",
                tabs: stateTabList
              },
              (tab) => {
                if (tab.name === "normal") {
                  return /* @__PURE__ */ wp.element.createElement(
                    PanelColorSettings36,
                    {
                      title: __43("Colors", "digiblocks"),
                      initialOpen: true,
                      enableAlpha: true,
                      colorSettings: [
                        {
                          value: buttonBackgroundColor,
                          onChange: (value) => setAttributes({ buttonBackgroundColor: value }),
                          label: __43("Button Background", "digiblocks")
                        },
                        {
                          value: buttonTextColor,
                          onChange: (value) => setAttributes({ buttonTextColor: value }),
                          label: __43("Button Text", "digiblocks")
                        }
                      ]
                    }
                  );
                } else {
                  return /* @__PURE__ */ wp.element.createElement(
                    PanelColorSettings36,
                    {
                      title: __43("Hover Colors", "digiblocks"),
                      initialOpen: true,
                      enableAlpha: true,
                      colorSettings: [
                        {
                          value: buttonHoverBackgroundColor,
                          onChange: (value) => setAttributes({ buttonHoverBackgroundColor: value }),
                          label: __43("Button Background", "digiblocks")
                        },
                        {
                          value: buttonHoverTextColor,
                          onChange: (value) => setAttributes({ buttonHoverTextColor: value }),
                          label: __43("Button Text", "digiblocks")
                        }
                      ]
                    }
                  );
                }
              }
            )
          ), /* @__PURE__ */ wp.element.createElement(
            TabPanelBody38,
            {
              tab: "style",
              name: "typography",
              title: __43("Typography", "digiblocks"),
              initialOpen: false
            },
            /* @__PURE__ */ wp.element.createElement(
              TypographyControl30,
              {
                label: __43("Typography", "digiblocks"),
                value: typography,
                onChange: (value) => setAttributes({ typography: value }),
                defaults: {
                  fontSize: { desktop: 14, tablet: 13, mobile: 12 },
                  fontSizeUnit: "px",
                  lineHeight: { desktop: 1.4, tablet: 1.3, mobile: 1.2 },
                  lineHeightUnit: "em"
                }
              }
            )
          ), /* @__PURE__ */ wp.element.createElement(
            TabPanelBody38,
            {
              tab: "style",
              name: "border",
              title: __43("Border", "digiblocks"),
              initialOpen: false
            },
            /* @__PURE__ */ wp.element.createElement(
              SelectControl36,
              {
                label: __43("Border Style", "digiblocks"),
                value: borderStyle,
                options: borderStyleOptions,
                onChange: (value) => setAttributes({ borderStyle: value }),
                __next40pxDefaultSize: true,
                __nextHasNoMarginBottom: true
              }
            ),
            borderStyle !== "none" && /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(
              TabPanel21,
              {
                className: "digiblocks-control-tabs",
                activeClass: "active-tab",
                tabs: stateTabList
              },
              (tab) => {
                if (tab.name === "normal") {
                  return /* @__PURE__ */ wp.element.createElement(
                    PanelColorSettings36,
                    {
                      title: __43("Border Color", "digiblocks"),
                      initialOpen: true,
                      enableAlpha: true,
                      colorSettings: [
                        {
                          value: borderColor,
                          onChange: (value) => setAttributes({ borderColor: value }),
                          label: __43("Border Color", "digiblocks")
                        }
                      ]
                    }
                  );
                } else {
                  return /* @__PURE__ */ wp.element.createElement(
                    PanelColorSettings36,
                    {
                      title: __43("Border Hover Color", "digiblocks"),
                      initialOpen: true,
                      enableAlpha: true,
                      colorSettings: [
                        {
                          value: borderHoverColor,
                          onChange: (value) => setAttributes({ borderHoverColor: value }),
                          label: __43("Border Hover Color", "digiblocks")
                        }
                      ]
                    }
                  );
                }
              }
            ), /* @__PURE__ */ wp.element.createElement(
              ResponsiveControl38,
              {
                label: __43("Border Width", "digiblocks")
              },
              /* @__PURE__ */ wp.element.createElement(
                DimensionControl34,
                {
                  values: borderWidth[localActiveDevice],
                  onChange: (value) => setAttributes({
                    borderWidth: {
                      ...borderWidth,
                      [localActiveDevice]: value
                    }
                  })
                }
              )
            )),
            /* @__PURE__ */ wp.element.createElement(
              ResponsiveControl38,
              {
                label: __43("Border Radius", "digiblocks")
              },
              /* @__PURE__ */ wp.element.createElement(
                DimensionControl34,
                {
                  values: borderRadius[localActiveDevice],
                  onChange: (value) => setAttributes({
                    borderRadius: {
                      ...borderRadius,
                      [localActiveDevice]: value
                    }
                  }),
                  units: [
                    { label: "px", value: "px" },
                    { label: "%", value: "%" }
                  ]
                }
              )
            )
          ), /* @__PURE__ */ wp.element.createElement(
            TabPanelBody38,
            {
              tab: "style",
              name: "spacing",
              title: __43("Spacing", "digiblocks"),
              initialOpen: false
            },
            /* @__PURE__ */ wp.element.createElement(
              ResponsiveControl38,
              {
                label: __43("Padding", "digiblocks")
              },
              /* @__PURE__ */ wp.element.createElement(
                DimensionControl34,
                {
                  values: padding[localActiveDevice],
                  onChange: (value) => setAttributes({
                    padding: {
                      ...padding,
                      [localActiveDevice]: value
                    }
                  })
                }
              )
            ),
            /* @__PURE__ */ wp.element.createElement(
              ResponsiveControl38,
              {
                label: __43("Margin", "digiblocks")
              },
              /* @__PURE__ */ wp.element.createElement(
                DimensionControl34,
                {
                  values: margin[localActiveDevice],
                  onChange: (value) => setAttributes({
                    margin: {
                      ...margin,
                      [localActiveDevice]: value
                    }
                  })
                }
              )
            )
          ));
        case "advanced":
          return /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(
            TabPanelBody38,
            {
              tab: "advanced",
              name: "animation",
              title: __43("Animation", "digiblocks"),
              initialOpen: false
            },
            /* @__PURE__ */ wp.element.createElement(
              SelectControl36,
              {
                label: __43("Animation Effect", "digiblocks"),
                value: animation,
                options: animationOptions,
                onChange: (value) => setAttributes({ animation: value }),
                __next40pxDefaultSize: true,
                __nextHasNoMarginBottom: true
              }
            ),
            animation && animation !== "none" && /* @__PURE__ */ wp.element.createElement("div", { style: { marginTop: "10px" } }, /* @__PURE__ */ wp.element.createElement(
              Button35,
              {
                variant: "secondary",
                isSecondary: true,
                onClick: handlePreviewClick,
                style: { width: "100%" }
              },
              __43("Preview Animation", "digiblocks")
            ))
          ), /* @__PURE__ */ wp.element.createElement(
            TabPanelBody38,
            {
              tab: "advanced",
              name: "visibility",
              title: __43("Visibility", "digiblocks"),
              initialOpen: false
            },
            /* @__PURE__ */ wp.element.createElement("div", { className: "components-base-control__help", style: {
              padding: "12px",
              backgroundColor: "#f0f6fc",
              border: "1px solid #c3ddfd",
              borderRadius: "4px",
              marginBottom: "16px"
            } }, /* @__PURE__ */ wp.element.createElement("strong", null, __43("Editor Note:", "digiblocks")), /* @__PURE__ */ wp.element.createElement("br", null), __43("Hidden elements appear with reduced opacity in the editor for easy editing. Visibility changes only take effect on the frontend.", "digiblocks")),
            /* @__PURE__ */ wp.element.createElement(
              ToggleControl38,
              {
                label: __43("Hide on Desktop", "digiblocks"),
                checked: visibility.desktop,
                onChange: (value) => setAttributes({
                  visibility: {
                    ...visibility,
                    desktop: value
                  }
                }),
                __nextHasNoMarginBottom: true
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              ToggleControl38,
              {
                label: __43("Hide on Tablet", "digiblocks"),
                checked: visibility.tablet,
                onChange: (value) => setAttributes({
                  visibility: {
                    ...visibility,
                    tablet: value
                  }
                }),
                __nextHasNoMarginBottom: true
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              ToggleControl38,
              {
                label: __43("Hide on Mobile", "digiblocks"),
                checked: visibility.mobile,
                onChange: (value) => setAttributes({
                  visibility: {
                    ...visibility,
                    mobile: value
                  }
                }),
                __nextHasNoMarginBottom: true
              }
            )
          ), /* @__PURE__ */ wp.element.createElement(
            TabPanelBody38,
            {
              tab: "advanced",
              name: "additional",
              title: __43("Additional", "digiblocks"),
              initialOpen: false
            },
            /* @__PURE__ */ wp.element.createElement("div", { className: "components-base-control html-anchor-control" }, /* @__PURE__ */ wp.element.createElement("div", { className: "components-base-control__field" }, /* @__PURE__ */ wp.element.createElement("label", { className: "components-base-control__label", htmlFor: "html-anchor" }, __43("HTML anchor", "digiblocks")), /* @__PURE__ */ wp.element.createElement(
              "input",
              {
                className: "components-text-control__input",
                type: "text",
                id: "html-anchor",
                value: anchor || "",
                onChange: (e) => setAttributes({ anchor: e.target.value }),
                "aria-describedby": "html-anchor-help",
                autoCapitalize: "none",
                autoComplete: "off"
              }
            )), /* @__PURE__ */ wp.element.createElement("p", { id: "html-anchor-help", className: "components-base-control__help" }, __43(`Enter a word or two \u2014 without spaces \u2014 to make a unique web address just for this block, called an "anchor". Then, you'll be able to link directly to this section of your page.`, "digiblocks"), " ", /* @__PURE__ */ wp.element.createElement(
              "a",
              {
                className: "components-external-link",
                href: "https://wordpress.org/documentation/article/page-jumps/",
                target: "_blank",
                rel: "external noreferrer noopener"
              },
              /* @__PURE__ */ wp.element.createElement("span", { className: "components-external-link__contents" }, __43("Learn more about anchors", "digiblocks")),
              /* @__PURE__ */ wp.element.createElement("span", { className: "components-external-link__icon", "aria-label": "(opens in a new tab)" }, "\u2197")
            ))),
            /* @__PURE__ */ wp.element.createElement("div", { className: "components-base-control" }, /* @__PURE__ */ wp.element.createElement("div", { className: "components-base-control__field" }, /* @__PURE__ */ wp.element.createElement("label", { className: "components-base-control__label", htmlFor: "additional-css-classes" }, __43("Additional CSS class(es)", "digiblocks")), /* @__PURE__ */ wp.element.createElement(
              "input",
              {
                className: "components-text-control__input",
                type: "text",
                id: "additional-css-classes",
                value: customClasses || "",
                onChange: (e) => setAttributes({ customClasses: e.target.value }),
                "aria-describedby": "additional-css-classes-help",
                autoComplete: "off"
              }
            )), /* @__PURE__ */ wp.element.createElement("p", { id: "additional-css-classes-help", className: "components-base-control__help" }, __43("Separate multiple classes with spaces.", "digiblocks")))
          ));
        default:
          return null;
      }
    };
    const blockClasses = `digiblocks-social-share ${id} style-${buttonStyle} ${animation !== "none" ? `animate-${animation}` : ""} ${customClasses || ""}`;
    const blockProps = useBlockProps65({
      className: blockClasses,
      id: anchor || null
    });
    const renderSocialButtons = () => {
      return Object.keys(socialNetworks).map((network) => {
        if (attributes[network]) {
          const socialData = socialNetworks[network];
          return /* @__PURE__ */ wp.element.createElement(
            "div",
            {
              key: network,
              className: `digiblocks-social-share-button digiblocks-social-share-${network}`,
              role: "button",
              tabIndex: "0"
            },
            /* @__PURE__ */ wp.element.createElement("span", { dangerouslySetInnerHTML: { __html: socialData.icon } }),
            showLabels && /* @__PURE__ */ wp.element.createElement("span", { className: "digiblocks-social-share-label" }, socialData.label)
          );
        }
        return null;
      });
    };
    return /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(InspectorControls38, null, /* @__PURE__ */ wp.element.createElement(
      CustomTabPanel38,
      {
        tabs: tabList,
        activeTab,
        onSelect: setActiveTab
      },
      renderTabContent()
    )), /* @__PURE__ */ wp.element.createElement("style", { dangerouslySetInnerHTML: { __html: generateCSS() } }), /* @__PURE__ */ wp.element.createElement("div", { ...blockProps }, renderSocialButtons()));
  };
  var edit_default38 = SocialShareEdit;

  // blocks/social-share/save.js
  var { useBlockProps: useBlockProps66 } = window.wp.blockEditor;
  var SocialShareSave = ({ attributes }) => {
    const {
      id,
      anchor,
      customClasses,
      showLabels,
      buttonStyle,
      animation,
      facebook,
      twitter,
      linkedin,
      pinterest,
      reddit,
      whatsapp,
      telegram,
      email,
      print
    } = attributes;
    const socialNetworks = {
      facebook: {
        label: "Facebook",
        icon: '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 320 512" width="1em" height="1em"><path d="M80 299.3V512H196V299.3h86.5l18-97.8H196V166.9c0-51.7 20.3-71.5 72.7-71.5c16.3 0 29.4 .4 37 1.2V7.9C291.4 4 256.4 0 236.2 0C129.3 0 80 50.5 80 159.4v42.1H14v97.8H80z"/></svg>',
        shareUrl: "https://www.facebook.com/sharer/sharer.php?u={url}"
      },
      twitter: {
        label: "X",
        icon: '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512" width="1em" height="1em"><path d="M389.2 48h70.6L305.6 224.2 487 464H345L233.7 318.6 106.5 464H35.8L200.7 275.5 26.8 48H172.4L272.9 180.9 389.2 48zM364.4 421.8h39.1L151.1 88h-42L364.4 421.8z"/></svg>',
        shareUrl: "https://twitter.com/intent/tweet?url={url}"
      },
      linkedin: {
        label: "LinkedIn",
        icon: '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512" width="1em" height="1em"><path d="M100.3 448H7.4V148.9h92.9zM53.8 108.1C24.1 108.1 0 83.5 0 53.8a53.8 53.8 0 0 1 107.6 0c0 29.7-24.1 54.3-53.8 54.3zM447.9 448h-92.7V302.4c0-34.7-.7-79.2-48.3-79.2-48.3 0-55.7 37.7-55.7 76.7V448h-92.8V148.9h89.1v40.8h1.3c12.4-23.5 42.7-48.3 87.9-48.3 94 0 111.3 61.9 111.3 142.3V448z"/></svg>',
        shareUrl: "https://www.linkedin.com/shareArticle?mini=true&url={url}"
      },
      pinterest: {
        label: "Pinterest",
        icon: '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 384 512" width="1em" height="1em"><path d="M204 6.5C101.4 6.5 0 74.9 0 185.6 0 256 39.6 296 63.6 296c9.9 0 15.6-27.6 15.6-35.4 0-9.3-23.7-29.1-23.7-67.8 0-80.4 61.2-137.4 140.4-137.4 68.1 0 118.5 38.7 118.5 109.8 0 53.1-21.3 152.7-90.3 152.7-24.9 0-46.2-18-46.2-43.8 0-37.8 26.4-74.4 26.4-113.4 0-66.2-93.9-54.2-93.9 25.8 0 16.8 2.1 35.4 9.6 50.7-13.8 59.4-42 147.9-42 209.1 0 18.9 2.7 37.5 4.5 56.4 3.4 3.8 1.7 3.4 6.9 1.5 50.4-69 48.6-82.5 71.4-172.8 12.3 23.4 44.1 36 69.3 36 106.2 0 153.9-103.5 153.9-196.8C384 71.3 298.2 6.5 204 6.5z"/></svg>',
        shareUrl: "https://pinterest.com/pin/create/button/?url={url}"
      },
      reddit: {
        label: "Reddit",
        icon: '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512" width="1em" height="1em"><path d="M373 138.6c-25.2 0-46.3-17.5-51.9-41l0 0c-30.6 4.3-54.2 30.7-54.2 62.4l0 .2c47.4 1.8 90.6 15.1 124.9 36.3c12.6-9.7 28.4-15.5 45.5-15.5c41.3 0 74.7 33.4 74.7 74.7c0 29.8-17.4 55.5-42.7 67.5c-2.4 86.8-97 156.6-213.2 156.6S45.5 410.1 43 323.4C17.6 311.5 0 285.7 0 255.7c0-41.3 33.4-74.7 74.7-74.7c17.2 0 33 5.8 45.7 15.6c34-21.1 76.8-34.4 123.7-36.4l0-.3c0-44.3 33.7-80.9 76.8-85.5C325.8 50.2 347.2 32 373 32c29.4 0 53.3 23.9 53.3 53.3s-23.9 53.3-53.3 53.3zM157.5 255.3c-20.9 0-38.9 20.8-40.2 47.9s17.1 38.1 38 38.1s36.6-9.8 37.8-36.9s-14.7-49.1-35.7-49.1zM395 303.1c-1.2-27.1-19.2-47.9-40.2-47.9s-36.9 22-35.7 49.1c1.2 27.1 16.9 36.9 37.8 36.9s39.3-11 38-38.1zm-60.1 70.8c1.5-3.6-1-7.7-4.9-8.1c-23-2.3-47.9-3.6-73.8-3.6s-50.8 1.3-73.8 3.6c-3.9 .4-6.4 4.5-4.9 8.1c12.9 30.8 43.3 52.4 78.7 52.4s65.8-21.6 78.7-52.4z"/></svg>',
        shareUrl: "https://www.reddit.com/submit?url={url}"
      },
      whatsapp: {
        label: "WhatsApp",
        icon: '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512" width="1em" height="1em"><path d="M380.9 97.1C339 55.1 283.2 32 223.9 32c-122.4 0-222 99.6-222 222 0 39.1 10.2 77.3 29.6 111L0 480l117.7-30.9c32.4 17.7 68.9 27 106.1 27h.1c122.3 0 224.1-99.6 224.1-222 0-59.3-25.2-115-67.1-157zm-157 341.6c-33.2 0-65.7-8.9-94-25.7l-6.7-4-69.8 18.3L72 359.2l-4.4-7c-18.5-29.4-28.2-63.3-28.2-98.2 0-101.7 82.8-184.5 184.6-184.5 49.3 0 95.6 19.2 130.4 54.1 34.8 34.9 56.2 81.2 56.1 130.5 0 101.8-84.9 184.6-186.6 184.6zm101.2-138.2c-5.5-2.8-32.8-16.2-37.9-18-5.1-1.9-8.8-2.8-12.5 2.8-3.7 5.6-14.3 18-17.6 21.8-3.2 3.7-6.5 4.2-12 1.4-32.6-16.3-54-29.1-75.5-66-5.7-9.8 5.7-9.1 16.3-30.3 1.8-3.7 .9-6.9-.5-9.7-1.4-2.8-12.5-30.1-17.1-41.2-4.5-10.8-9.1-9.3-12.5-9.5-3.2-.2-6.9-.2-10.6-.2-3.7 0-9.7 1.4-14.8 6.9-5.1 5.6-19.4 19-19.4 46.3 0 27.3 19.9 53.7 22.6 57.4 2.8 3.7 39.1 59.7 94.8 83.8 35.2 15.2 49 16.5 66.6 13.9 10.7-1.6 32.8-13.4 37.4-26.4 4.6-13 4.6-24.1 3.2-26.4-1.3-2.5-5-3.9-10.5-6.6z"/></svg>',
        shareUrl: "https://api.whatsapp.com/send?text={url}"
      },
      telegram: {
        label: "Telegram",
        icon: '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 496 512" width="1em" height="1em"><path d="M248 8C111 8 0 119 0 256S111 504 248 504 496 393 496 256 385 8 248 8zM363 176.7c-3.7 39.2-19.9 134.4-28.1 178.3-3.5 18.6-10.3 24.8-16.9 25.4-14.4 1.3-25.3-9.5-39.3-18.7-21.8-14.3-34.2-23.2-55.3-37.2-24.5-16.1-8.6-25 5.3-39.5 3.7-3.8 67.1-61.5 68.3-66.7 .2-.7 .3-3.1-1.2-4.4s-3.6-.8-5.1-.5q-3.3 .7-104.6 69.1-14.8 10.2-26.9 9.9c-8.9-.2-25.9-5-38.6-9.1-15.5-5-27.9-7.7-26.8-16.3q.8-6.7 18.5-13.7 108.4-47.2 144.6-62.3c68.9-28.6 83.2-33.6 92.5-33.8 2.1 0 6.6 .5 9.6 2.9a10.5 10.5 0 0 1 3.5 6.7A43.8 43.8 0 0 1 363 176.7z"/></svg>',
        shareUrl: "https://t.me/share/url?url={url}"
      },
      email: {
        label: "Email",
        icon: '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512" width="1em" height="1em"><path d="M48 64C21.5 64 0 85.5 0 112c0 15.1 7.1 29.3 19.2 38.4L236.8 313.6c11.4 8.5 27 8.5 38.4 0L492.8 150.4c12.1-9.1 19.2-23.3 19.2-38.4c0-26.5-21.5-48-48-48L48 64zM0 176L0 384c0 35.3 28.7 64 64 64l384 0c35.3 0 64-28.7 64-64l0-208L294.4 339.2c-22.8 17.1-54 17.1-76.8 0L0 176z"/></svg>',
        shareUrl: "mailto:?body={url}"
      },
      print: {
        label: "Print",
        icon: '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512" width="1em" height="1em"><path d="M128 0C92.7 0 64 28.7 64 64l0 96 64 0 0-96 226.7 0L384 93.3l0 66.7 64 0 0-66.7c0-17-6.7-33.3-18.7-45.3L400 18.7C388 6.7 371.7 0 354.7 0L128 0zM384 352l0 32 0 64-256 0 0-64 0-16 0-16 256 0zm64 32l32 0c17.7 0 32-14.3 32-32l0-96c0-35.3-28.7-64-64-64L64 192c-35.3 0-64 28.7-64 64l0 96c0 17.7 14.3 32 32 32l32 0 0 64c0 35.3 28.7 64 64 64l256 0c35.3 0 64-28.7 64-64l0-64zM432 248a24 24 0 1 1 0 48 24 24 0 1 1 0-48z"/></svg>',
        shareUrl: "javascript:window.print()"
      }
    };
    const blockClasses = `digiblocks-social-share ${id} style-${buttonStyle} ${animation !== "none" ? `animate-${animation}` : ""} ${customClasses || ""}`;
    const blockProps = useBlockProps66.save({
      className: blockClasses,
      id: anchor || null
    });
    return /* @__PURE__ */ wp.element.createElement("div", { ...blockProps }, Object.keys(socialNetworks).map((network) => {
      if (attributes[network]) {
        const socialData = socialNetworks[network];
        return /* @__PURE__ */ wp.element.createElement(
          "a",
          {
            key: network,
            className: `digiblocks-social-share-button digiblocks-social-share-${network}`,
            href: "#",
            "data-share-url": socialData.shareUrl,
            "aria-label": `Share on ${socialData.label}`,
            rel: "noopener noreferrer"
          },
          /* @__PURE__ */ wp.element.createElement("span", { dangerouslySetInnerHTML: { __html: socialData.icon } }),
          showLabels && /* @__PURE__ */ wp.element.createElement("span", { className: "digiblocks-social-share-label" }, socialData.label)
        );
      }
      return null;
    }));
  };
  var save_default38 = SocialShareSave;

  // blocks/table-of-contents/edit.js
  var { __: __44 } = window.wp.i18n;
  var {
    useBlockProps: useBlockProps67,
    InspectorControls: InspectorControls39,
    PanelColorSettings: PanelColorSettings37,
    RichText: RichText32
  } = window.wp.blockEditor;
  var {
    SelectControl: SelectControl37,
    TextControl: TextControl19,
    ToggleControl: ToggleControl39,
    RangeControl: RangeControl35,
    Button: Button36,
    Notice: Notice8,
    TabPanel: TabPanel22,
    __experimentalToggleGroupControl: ToggleGroupControl37,
    __experimentalToggleGroupControlOption: ToggleGroupControlOption37
  } = window.wp.components;
  var { useState: useState39, useEffect: useEffect39, useRef: useRef34 } = window.wp.element;
  var { useSelect: useSelect7 } = window.wp.data;
  var { useBlockId: useBlockId39, getDimensionCSS: getDimensionCSS34, animations: animations35, animationPreview: animationPreview35 } = digi.utils;
  var { tabIcons: tabIcons39 } = digi.icons;
  var { ResponsiveButtonGroup: ResponsiveButtonGroup15, ResponsiveControl: ResponsiveControl39, ResponsiveRangeControl: ResponsiveRangeControl5, DimensionControl: DimensionControl35, TypographyControl: TypographyControl31, BoxShadowControl: BoxShadowControl27, CustomTabPanel: CustomTabPanel39, TabPanelBody: TabPanelBody39 } = digi.components;
  var TableOfContentsEdit = ({ attributes, setAttributes, clientId }) => {
    const {
      id,
      anchor,
      visibility,
      customClasses,
      title,
      showTitle,
      titleTag,
      headingSelector,
      maxDepth,
      listType,
      scrollOffset,
      enableSmoothScroll,
      enableSEOMarkup,
      minimizeBox,
      showAsCollapsible,
      initialCollapseState,
      collapseButtonText,
      align,
      width,
      maxWidth,
      backgroundColor,
      titleColor,
      textColor,
      linkColor,
      linkHoverColor,
      borderStyle,
      borderWidth,
      borderRadius,
      borderColor,
      padding,
      margin,
      boxShadow,
      boxShadowHover,
      titleTypography,
      typography,
      listSpacing,
      animation
    } = attributes;
    const [activeTab, setActiveTab] = useState39(() => {
      if (window.digi.uiState) {
        const savedTab = window.digi.uiState.getActiveTab(clientId);
        if (savedTab)
          return savedTab;
      }
      return "options";
    });
    const [localActiveDevice, setLocalActiveDevice] = useState39(window.digi.responsiveState.activeDevice);
    useBlockId39(id, clientId, setAttributes);
    useEffect39(() => {
      const unsubscribe = window.digi.responsiveState.subscribe((device) => {
        setLocalActiveDevice(device);
      });
      return unsubscribe;
    }, []);
    const previewTimeoutRef = useRef34(null);
    useEffect39(() => {
      if (animation && animation !== "none") {
        const timeoutId = setTimeout(() => {
          animationPreview35(id, animation, animations35, previewTimeoutRef);
        }, 100);
        return () => clearTimeout(timeoutId);
      }
    }, [animation]);
    const handlePreviewClick = () => {
      animationPreview35(id, animation, animations35, previewTimeoutRef);
    };
    const headings = useSelect7((select) => {
      const { getBlocks } = select("core/block-editor");
      const blocks = getBlocks();
      const findHeadingBlocks = (blocks2, currentDepth = 1) => {
        if (currentDepth > maxDepth)
          return [];
        return blocks2.reduce((foundHeadings, block) => {
          if (block.name === "core/heading") {
            const level = block.attributes.level;
            if (headingSelector === "h2" && level === 2 || headingSelector === "h2,h3" && (level === 2 || level === 3) || headingSelector === "h2,h3,h4" && (level === 2 || level === 3 || level === 4)) {
              foundHeadings.push({
                content: block.attributes.content,
                level,
                anchor: block.attributes.anchor || "",
                // Generate an ID from the content if no anchor is available
                id: block.attributes.anchor || block.attributes.content.toLowerCase().replace(/<\/?[^>]+(>|$)/g, "").replace(/[^\w\s-]/g, "").replace(/\s+/g, "-").replace(/-+/g, "-")
                // Replace multiple hyphens with single hyphen
              });
            }
          }
          if (block.innerBlocks && block.innerBlocks.length) {
            return [...foundHeadings, ...findHeadingBlocks(block.innerBlocks, currentDepth + 1)];
          }
          return foundHeadings;
        }, []);
      };
      return findHeadingBlocks(blocks);
    }, [headingSelector, maxDepth]);
    const headingTagOptions = [
      { label: __44("H2", "digiblocks"), value: "h2" },
      { label: __44("H3", "digiblocks"), value: "h3" },
      { label: __44("H4", "digiblocks"), value: "h4" },
      { label: __44("H5", "digiblocks"), value: "h5" },
      { label: __44("H6", "digiblocks"), value: "h6" },
      { label: __44("Div", "digiblocks"), value: "div" }
    ];
    const headingSelectorOptions = [
      { label: __44("H2 Only", "digiblocks"), value: "h2" },
      { label: __44("H2 and H3", "digiblocks"), value: "h2,h3" },
      { label: __44("H2, H3, and H4", "digiblocks"), value: "h2,h3,h4" }
    ];
    const listTypeOptions = [
      { label: __44("Unordered List", "digiblocks"), value: "ul" },
      { label: __44("Ordered List", "digiblocks"), value: "ol" }
    ];
    const borderStyleOptions = [
      { label: __44("None", "digiblocks"), value: "none" },
      { label: __44("Solid", "digiblocks"), value: "solid" },
      { label: __44("Dashed", "digiblocks"), value: "dashed" },
      { label: __44("Dotted", "digiblocks"), value: "dotted" },
      { label: __44("Double", "digiblocks"), value: "double" }
    ];
    const animationOptions = [
      { label: __44("None", "digiblocks"), value: "none" },
      ...Object.keys(animations35).map((animation2) => ({
        label: animation2.replace(/-/g, " ").replace(/\b\w/g, (l) => l.toUpperCase()),
        value: animation2
      }))
    ];
    const tabList = [
      {
        name: "options",
        title: __44("Options", "digiblocks"),
        icon: tabIcons39.optionsIcon
      },
      {
        name: "style",
        title: __44("Style", "digiblocks"),
        icon: tabIcons39.styleIcon
      },
      {
        name: "advanced",
        title: __44("Advanced", "digiblocks"),
        icon: tabIcons39.advancedIcon
      }
    ];
    const stateTabList = [
      {
        name: "normal",
        title: __44("Normal", "digiblocks"),
        className: "digiblocks-tab-1 normal"
      },
      {
        name: "hover",
        title: __44("Hover", "digiblocks"),
        className: "digiblocks-tab-2 hover"
      }
    ];
    const generateCSS = () => {
      const activeDevice = localActiveDevice;
      let animationCSS = "";
      if (animation && animation !== "none" && animations35[animation]) {
        animationCSS = animations35[animation].keyframes;
      }
      const widthValue = width[activeDevice]?.value ? `${width[activeDevice].value}${width[activeDevice].unit}` : "100%";
      const maxWidthValue = maxWidth[activeDevice]?.value ? `${maxWidth[activeDevice].value}${maxWidth[activeDevice].unit}` : "none";
      let boxShadowCSS = "box-shadow: none;";
      if (boxShadow && boxShadow.enable) {
        const inset = boxShadow.position === "inset" ? "inset " : "";
        boxShadowCSS = `box-shadow: ${inset}${boxShadow.horizontal}px ${boxShadow.vertical}px ${boxShadow.blur}px ${boxShadow.spread}px ${boxShadow.color};transition: all 0.3s ease;`;
      }
      let boxShadowHoverCSS = "";
      if (boxShadowHover && boxShadowHover.enable) {
        const insetHover = boxShadowHover.position === "inset" ? "inset " : "";
        boxShadowHoverCSS = `box-shadow: ${insetHover}${boxShadowHover.horizontal}px ${boxShadowHover.vertical}px ${boxShadowHover.blur}px ${boxShadowHover.spread}px ${boxShadowHover.color};`;
      }
      return `
            /* Table of Contents Block - ${id} */
            .${id} {
                width: ${widthValue};
                max-width: ${maxWidthValue};
                margin-left: ${align[activeDevice] === "center" ? "auto" : align[activeDevice] === "right" ? "auto" : "0"};
                margin-right: ${align[activeDevice] === "center" ? "auto" : align[activeDevice] === "left" ? "auto" : "0"};
                text-align: ${align[activeDevice]};
                ${getDimensionCSS34(margin, "margin", activeDevice)}
            }
            
            .${id} .digiblocks-toc-container {
                position: relative;
                background-color: ${backgroundColor};
                ${borderStyle !== "none" ? `
                    border-style: ${borderStyle};
                    border-color: ${borderColor};
                    ${getDimensionCSS34(borderWidth, "border-width", activeDevice)}
                    ${getDimensionCSS34(borderRadius, "border-radius", activeDevice)}
                ` : ""}
                ${getDimensionCSS34(padding, "padding", activeDevice)}
                ${boxShadowCSS}
            }
            
            .${id} .digiblocks-toc-container:hover {
                ${boxShadowHoverCSS}
            }
            
            /* Title styles */
            .${id} .digiblocks-toc-title {
                margin-top: 0;
                margin-bottom: ${listSpacing[activeDevice].value}${listSpacing[activeDevice].unit};
                color: ${titleColor};
                ${titleTypography.fontFamily ? `font-family: ${titleTypography.fontFamily};` : ""}
                ${titleTypography.fontSize?.[activeDevice] ? `font-size: ${titleTypography.fontSize[activeDevice]}${titleTypography.fontSizeUnit || "px"};` : ""}
                ${titleTypography.fontWeight ? `font-weight: ${titleTypography.fontWeight};` : ""}
                ${titleTypography.fontStyle ? `font-style: ${titleTypography.fontStyle};` : ""}
                ${titleTypography.textTransform ? `text-transform: ${titleTypography.textTransform};` : ""}
                ${titleTypography.textDecoration ? `text-decoration: ${titleTypography.textDecoration};` : ""}
                ${titleTypography.lineHeight?.[activeDevice] ? `line-height: ${titleTypography.lineHeight[activeDevice]}${titleTypography.lineHeightUnit || "em"};` : ""}
                ${titleTypography.letterSpacing?.[activeDevice] ? `letter-spacing: ${titleTypography.letterSpacing[activeDevice]}${titleTypography.letterSpacingUnit || "px"};` : ""}
            }
            
            /* List styles */
            .${id} .digiblocks-toc-list {
                margin: 0;
                padding-left: 22px; /* Default indent for lists */
                color: ${textColor};
                ${typography.fontFamily ? `font-family: ${typography.fontFamily};` : ""}
                ${typography.fontSize?.[activeDevice] ? `font-size: ${typography.fontSize[activeDevice]}${typography.fontSizeUnit || "px"};` : ""}
                ${typography.fontWeight ? `font-weight: ${typography.fontWeight};` : ""}
                ${typography.fontStyle ? `font-style: ${typography.fontStyle};` : ""}
                ${typography.textTransform ? `text-transform: ${typography.textTransform};` : ""}
                ${typography.textDecoration ? `text-decoration: ${typography.textDecoration};` : ""}
                ${typography.lineHeight?.[activeDevice] ? `line-height: ${typography.lineHeight[activeDevice]}${typography.lineHeightUnit || "em"};` : ""}
                ${typography.letterSpacing?.[activeDevice] ? `letter-spacing: ${typography.letterSpacing[activeDevice]}${typography.letterSpacingUnit || "px"};` : ""}
            }
            
            .${id} .digiblocks-toc-list li {
                margin-bottom: ${listSpacing[activeDevice].value}${listSpacing[activeDevice].unit};
            }
            
            .${id} .digiblocks-toc-list li:last-child {
                margin-bottom: 0;
            }
            
            .${id} .digiblocks-toc-list a {
                color: ${linkColor};
                text-decoration: none;
                transition: color 0.3s ease;
            }
            
            .${id} .digiblocks-toc-list a:hover {
                color: ${linkHoverColor};
            }
            
            /* Collapsible TOC styles */
            .${id} .digiblocks-toc-toggle-button {
                display: ${showAsCollapsible ? "inline-flex" : "none"};
                align-items: center;
                position: ${minimizeBox ? "absolute" : "relative"};
                ${minimizeBox ? "right: 15px; top: 15px;" : "margin-left: 15px;"}
                padding: 5px 10px;
                font-size: 14px;
                line-height: 1;
                border: 1px solid ${borderColor};
                border-radius: 4px;
                background-color: transparent;
                color: ${textColor};
                cursor: pointer;
                transition: all 0.3s ease;
            }
            
            .${id} .digiblocks-toc-toggle-button:hover {
                background-color: ${backgroundColor !== "#ffffff" ? "#ffffff" : "#f1f1f1"};
            }
            
            .${id} .digiblocks-toc-content {
                display: ${showAsCollapsible && initialCollapseState ? "none" : "block"};
            }
            
            /* Animation keyframes */
            ${animationCSS}

			/* Visibility Controls */
			${visibility.desktop ? `
				@media (min-width: 992px) {
					.${id} {
						opacity: 0.5 !important;
					}
				}
			` : ""}

			${visibility.tablet ? `
				@media (min-width: 768px) and (max-width: 991px) {
					.${id} {
						opacity: 0.5 !important;
					}
				}
			` : ""}

			${visibility.mobile ? `
				@media (max-width: 767px) {
					.${id} {
						opacity: 0.5 !important;
					}
				}
			` : ""}
        `;
    };
    const renderTabContent = () => {
      switch (activeTab) {
        case "options":
          return /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(
            TabPanelBody39,
            {
              tab: "options",
              name: "general",
              title: __44("General", "digiblocks"),
              initialOpen: true
            },
            /* @__PURE__ */ wp.element.createElement(
              Notice8,
              {
                status: "warning",
                isDismissible: false,
                className: "digiblocks-notice components-base-control"
              },
              __44("This block automatically generates a table of contents based on the headings in your content. The actual TOC will be populated on the frontend.", "digiblocks")
            ),
            /* @__PURE__ */ wp.element.createElement(
              ToggleControl39,
              {
                label: __44("Show Title", "digiblocks"),
                checked: showTitle,
                onChange: (value) => setAttributes({ showTitle: value }),
                __nextHasNoMarginBottom: true
              }
            ),
            showTitle && /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(
              TextControl19,
              {
                label: __44("Title", "digiblocks"),
                value: title,
                onChange: (value) => setAttributes({ title: value }),
                __next40pxDefaultSize: true,
                __nextHasNoMarginBottom: true
              }
            ), /* @__PURE__ */ wp.element.createElement(
              SelectControl37,
              {
                label: __44("Title Tag", "digiblocks"),
                value: titleTag,
                options: headingTagOptions,
                onChange: (value) => setAttributes({ titleTag: value }),
                __next40pxDefaultSize: true,
                __nextHasNoMarginBottom: true
              }
            )),
            /* @__PURE__ */ wp.element.createElement(
              ResponsiveButtonGroup15,
              {
                label: __44("Alignment", "digiblocks"),
                value: align,
                onChange: (value) => setAttributes({ align: value }),
                options: [
                  { label: __44("Left", "digiblocks"), value: "left" },
                  { label: __44("Center", "digiblocks"), value: "center" },
                  { label: __44("Right", "digiblocks"), value: "right" }
                ]
              }
            )
          ), /* @__PURE__ */ wp.element.createElement(
            TabPanelBody39,
            {
              tab: "options",
              name: "content",
              title: __44("Content", "digiblocks"),
              initialOpen: false
            },
            /* @__PURE__ */ wp.element.createElement(
              SelectControl37,
              {
                label: __44("Headings to Include", "digiblocks"),
                value: headingSelector,
                options: headingSelectorOptions,
                onChange: (value) => setAttributes({ headingSelector: value }),
                __next40pxDefaultSize: true,
                __nextHasNoMarginBottom: true
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              RangeControl35,
              {
                label: __44("Maximum Depth", "digiblocks"),
                value: maxDepth,
                onChange: (value) => setAttributes({ maxDepth: value }),
                min: 1,
                max: 6,
                __next40pxDefaultSize: true,
                __nextHasNoMarginBottom: true
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              SelectControl37,
              {
                label: __44("List Type", "digiblocks"),
                value: listType,
                options: listTypeOptions,
                onChange: (value) => setAttributes({ listType: value }),
                __next40pxDefaultSize: true,
                __nextHasNoMarginBottom: true
              }
            )
          ), /* @__PURE__ */ wp.element.createElement(
            TabPanelBody39,
            {
              tab: "options",
              name: "behavior",
              title: __44("Behavior", "digiblocks"),
              initialOpen: false
            },
            /* @__PURE__ */ wp.element.createElement(
              ToggleControl39,
              {
                label: __44("Enable Smooth Scrolling", "digiblocks"),
                checked: enableSmoothScroll,
                onChange: (value) => setAttributes({ enableSmoothScroll: value }),
                __nextHasNoMarginBottom: true
              }
            ),
            enableSmoothScroll && /* @__PURE__ */ wp.element.createElement(
              RangeControl35,
              {
                label: __44("Scroll Offset (px)", "digiblocks"),
                help: __44("Adjust for sticky header height or add extra space", "digiblocks"),
                value: scrollOffset,
                onChange: (value) => setAttributes({ scrollOffset: value }),
                min: 0,
                max: 200,
                __next40pxDefaultSize: true,
                __nextHasNoMarginBottom: true
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              ToggleControl39,
              {
                label: __44("Enable SEO Markup", "digiblocks"),
                help: __44("Adds schema.org markup for better SEO", "digiblocks"),
                checked: enableSEOMarkup,
                onChange: (value) => setAttributes({ enableSEOMarkup: value }),
                __nextHasNoMarginBottom: true
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              ToggleControl39,
              {
                label: __44("Show as Collapsible", "digiblocks"),
                checked: showAsCollapsible,
                onChange: (value) => setAttributes({ showAsCollapsible: value }),
                __nextHasNoMarginBottom: true
              }
            ),
            showAsCollapsible && /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(
              ToggleControl39,
              {
                label: __44("Initially Collapsed", "digiblocks"),
                checked: initialCollapseState,
                onChange: (value) => setAttributes({ initialCollapseState: value }),
                __nextHasNoMarginBottom: true
              }
            ), /* @__PURE__ */ wp.element.createElement(
              ToggleControl39,
              {
                label: __44("Minimize Box Design", "digiblocks"),
                help: __44("Places the toggle button in the top-right corner", "digiblocks"),
                checked: minimizeBox,
                onChange: (value) => setAttributes({ minimizeBox: value }),
                __nextHasNoMarginBottom: true
              }
            ), /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-collapse-button-text" }, /* @__PURE__ */ wp.element.createElement("p", { className: "components-base-control__label" }, __44("Toggle Button Text", "digiblocks")), /* @__PURE__ */ wp.element.createElement("div", { style: { display: "flex", gap: "10px", marginBottom: "24px" } }, /* @__PURE__ */ wp.element.createElement(
              TextControl19,
              {
                label: __44("Show", "digiblocks"),
                value: collapseButtonText.show,
                onChange: (value) => setAttributes({
                  collapseButtonText: {
                    ...collapseButtonText,
                    show: value
                  }
                }),
                __next40pxDefaultSize: true,
                __nextHasNoMarginBottom: true
              }
            ), /* @__PURE__ */ wp.element.createElement(
              TextControl19,
              {
                label: __44("Hide", "digiblocks"),
                value: collapseButtonText.hide,
                onChange: (value) => setAttributes({
                  collapseButtonText: {
                    ...collapseButtonText,
                    hide: value
                  }
                }),
                __next40pxDefaultSize: true,
                __nextHasNoMarginBottom: true
              }
            ))))
          ), /* @__PURE__ */ wp.element.createElement(
            TabPanelBody39,
            {
              tab: "options",
              name: "dimensions",
              title: __44("Dimensions", "digiblocks"),
              initialOpen: false
            },
            /* @__PURE__ */ wp.element.createElement(
              ResponsiveRangeControl5,
              {
                label: __44("Width", "digiblocks"),
                value: width,
                onChange: (value) => setAttributes({ width: value }),
                min: 10,
                max: 100,
                units: [
                  { label: "%", value: "%" },
                  { label: "px", value: "px" }
                ],
                defaultUnit: "%",
                defaultValues: {
                  desktop: { value: 100, unit: "%" },
                  tablet: { value: 100, unit: "%" },
                  mobile: { value: 100, unit: "%" }
                }
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              ResponsiveRangeControl5,
              {
                label: __44("Max Width", "digiblocks"),
                value: maxWidth,
                onChange: (value) => setAttributes({ maxWidth: value }),
                min: 0,
                max: 2e3,
                units: [
                  { label: "px", value: "px" },
                  { label: "%", value: "%" },
                  { label: "em", value: "em" },
                  { label: "rem", value: "rem" }
                ],
                defaultUnit: "px",
                step: 1
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              ResponsiveRangeControl5,
              {
                label: __44("List Item Spacing", "digiblocks"),
                value: listSpacing,
                onChange: (value) => setAttributes({ listSpacing: value }),
                min: 0,
                max: 40,
                units: [
                  { label: "px", value: "px" },
                  { label: "em", value: "em" },
                  { label: "rem", value: "rem" }
                ],
                defaultUnit: "px",
                defaultValues: {
                  desktop: { value: 15, unit: "px" },
                  tablet: { value: 12, unit: "px" },
                  mobile: { value: 10, unit: "px" }
                },
                step: 1
              }
            )
          ));
        case "style":
          return /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(
            TabPanelBody39,
            {
              tab: "style",
              name: "colors",
              title: __44("Colors", "digiblocks"),
              initialOpen: true
            },
            /* @__PURE__ */ wp.element.createElement(
              TabPanel22,
              {
                className: "digiblocks-control-tabs",
                activeClass: "active-tab",
                tabs: stateTabList
              },
              (tab) => {
                if (tab.name === "normal") {
                  return /* @__PURE__ */ wp.element.createElement(
                    PanelColorSettings37,
                    {
                      title: __44("Colors", "digiblocks"),
                      initialOpen: true,
                      enableAlpha: true,
                      colorSettings: [
                        {
                          value: backgroundColor,
                          onChange: (value) => setAttributes({ backgroundColor: value }),
                          label: __44("Background Color", "digiblocks")
                        },
                        {
                          value: titleColor,
                          onChange: (value) => setAttributes({ titleColor: value }),
                          label: __44("Title Color", "digiblocks")
                        },
                        {
                          value: textColor,
                          onChange: (value) => setAttributes({ textColor: value }),
                          label: __44("Text Color", "digiblocks")
                        },
                        {
                          value: linkColor,
                          onChange: (value) => setAttributes({ linkColor: value }),
                          label: __44("Link Color", "digiblocks")
                        },
                        {
                          value: borderColor,
                          onChange: (value) => setAttributes({ borderColor: value }),
                          label: __44("Border Color", "digiblocks")
                        }
                      ]
                    }
                  );
                } else {
                  return /* @__PURE__ */ wp.element.createElement(
                    PanelColorSettings37,
                    {
                      title: __44("Hover Colors", "digiblocks"),
                      initialOpen: true,
                      enableAlpha: true,
                      colorSettings: [
                        {
                          value: linkHoverColor,
                          onChange: (value) => setAttributes({ linkHoverColor: value }),
                          label: __44("Link Hover Color", "digiblocks")
                        }
                      ]
                    }
                  );
                }
              }
            )
          ), /* @__PURE__ */ wp.element.createElement(
            TabPanelBody39,
            {
              tab: "style",
              name: "typography",
              title: __44("Typography", "digiblocks"),
              initialOpen: false
            },
            /* @__PURE__ */ wp.element.createElement(
              TypographyControl31,
              {
                label: __44("Title Typography", "digiblocks"),
                value: titleTypography,
                onChange: (value) => setAttributes({ titleTypography: value }),
                defaults: {
                  fontSize: { desktop: 22, tablet: 20, mobile: 18 },
                  fontWeight: "600",
                  lineHeight: { desktop: 1.4, tablet: 1.3, mobile: 1.2 }
                }
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              TypographyControl31,
              {
                label: __44("Content Typography", "digiblocks"),
                value: typography,
                onChange: (value) => setAttributes({ typography: value }),
                defaults: {
                  fontSize: { desktop: 16, tablet: 15, mobile: 14 },
                  lineHeight: { desktop: 1.6, tablet: 1.5, mobile: 1.4 }
                }
              }
            )
          ), /* @__PURE__ */ wp.element.createElement(
            TabPanelBody39,
            {
              tab: "style",
              name: "borders",
              title: __44("Borders & Shadow", "digiblocks"),
              initialOpen: false
            },
            /* @__PURE__ */ wp.element.createElement(
              SelectControl37,
              {
                label: __44("Border Style", "digiblocks"),
                value: borderStyle,
                options: borderStyleOptions,
                onChange: (value) => setAttributes({ borderStyle: value }),
                __next40pxDefaultSize: true,
                __nextHasNoMarginBottom: true
              }
            ),
            borderStyle !== "none" && /* @__PURE__ */ wp.element.createElement(
              ResponsiveControl39,
              {
                label: __44("Border Width", "digiblocks")
              },
              /* @__PURE__ */ wp.element.createElement(
                DimensionControl35,
                {
                  values: borderWidth[localActiveDevice],
                  onChange: (value) => setAttributes({
                    borderWidth: {
                      ...borderWidth,
                      [localActiveDevice]: value
                    }
                  })
                }
              )
            ),
            /* @__PURE__ */ wp.element.createElement(
              ResponsiveControl39,
              {
                label: __44("Border Radius", "digiblocks")
              },
              /* @__PURE__ */ wp.element.createElement(
                DimensionControl35,
                {
                  values: borderRadius[localActiveDevice],
                  onChange: (value) => setAttributes({
                    borderRadius: {
                      ...borderRadius,
                      [localActiveDevice]: value
                    }
                  }),
                  units: [
                    { label: "px", value: "px" },
                    { label: "%", value: "%" }
                  ]
                }
              )
            ),
            /* @__PURE__ */ wp.element.createElement(
              BoxShadowControl27,
              {
                normalValue: boxShadow,
                hoverValue: boxShadowHover,
                onNormalChange: (value) => setAttributes({ boxShadow: value }),
                onHoverChange: (value) => setAttributes({ boxShadowHover: value })
              }
            )
          ), /* @__PURE__ */ wp.element.createElement(
            TabPanelBody39,
            {
              tab: "style",
              name: "spacing",
              title: __44("Spacing", "digiblocks"),
              initialOpen: false
            },
            /* @__PURE__ */ wp.element.createElement(
              ResponsiveControl39,
              {
                label: __44("Padding", "digiblocks")
              },
              /* @__PURE__ */ wp.element.createElement(
                DimensionControl35,
                {
                  values: padding[localActiveDevice],
                  onChange: (value) => setAttributes({
                    padding: {
                      ...padding,
                      [localActiveDevice]: value
                    }
                  })
                }
              )
            ),
            /* @__PURE__ */ wp.element.createElement(
              ResponsiveControl39,
              {
                label: __44("Margin", "digiblocks")
              },
              /* @__PURE__ */ wp.element.createElement(
                DimensionControl35,
                {
                  values: margin[localActiveDevice],
                  onChange: (value) => setAttributes({
                    margin: {
                      ...margin,
                      [localActiveDevice]: value
                    }
                  })
                }
              )
            )
          ));
        case "advanced":
          return /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(
            TabPanelBody39,
            {
              tab: "advanced",
              name: "animation",
              title: __44("Animation", "digiblocks"),
              initialOpen: true
            },
            /* @__PURE__ */ wp.element.createElement(
              SelectControl37,
              {
                label: __44("Animation Effect", "digiblocks"),
                value: animation,
                options: animationOptions,
                onChange: (value) => setAttributes({ animation: value }),
                __next40pxDefaultSize: true,
                __nextHasNoMarginBottom: true
              }
            ),
            animation && animation !== "none" && /* @__PURE__ */ wp.element.createElement("div", { style: { marginTop: "10px" } }, /* @__PURE__ */ wp.element.createElement(
              Button36,
              {
                variant: "secondary",
                isSecondary: true,
                onClick: handlePreviewClick,
                style: { width: "100%" }
              },
              __44("Preview Animation", "digiblocks")
            ))
          ), /* @__PURE__ */ wp.element.createElement(
            TabPanelBody39,
            {
              tab: "advanced",
              name: "visibility",
              title: __44("Visibility", "digiblocks"),
              initialOpen: false
            },
            /* @__PURE__ */ wp.element.createElement("div", { className: "components-base-control__help", style: {
              padding: "12px",
              backgroundColor: "#f0f6fc",
              border: "1px solid #c3ddfd",
              borderRadius: "4px",
              marginBottom: "16px"
            } }, /* @__PURE__ */ wp.element.createElement("strong", null, __44("Editor Note:", "digiblocks")), /* @__PURE__ */ wp.element.createElement("br", null), __44("Hidden elements appear with reduced opacity in the editor for easy editing. Visibility changes only take effect on the frontend.", "digiblocks")),
            /* @__PURE__ */ wp.element.createElement(
              ToggleControl39,
              {
                label: __44("Hide on Desktop", "digiblocks"),
                checked: visibility.desktop,
                onChange: (value) => setAttributes({
                  visibility: {
                    ...visibility,
                    desktop: value
                  }
                }),
                __nextHasNoMarginBottom: true
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              ToggleControl39,
              {
                label: __44("Hide on Tablet", "digiblocks"),
                checked: visibility.tablet,
                onChange: (value) => setAttributes({
                  visibility: {
                    ...visibility,
                    tablet: value
                  }
                }),
                __nextHasNoMarginBottom: true
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              ToggleControl39,
              {
                label: __44("Hide on Mobile", "digiblocks"),
                checked: visibility.mobile,
                onChange: (value) => setAttributes({
                  visibility: {
                    ...visibility,
                    mobile: value
                  }
                }),
                __nextHasNoMarginBottom: true
              }
            )
          ), /* @__PURE__ */ wp.element.createElement(
            TabPanelBody39,
            {
              tab: "advanced",
              name: "additional",
              title: __44("Additional", "digiblocks"),
              initialOpen: false
            },
            /* @__PURE__ */ wp.element.createElement("div", { className: "components-base-control html-anchor-control" }, /* @__PURE__ */ wp.element.createElement("div", { className: "components-base-control__field" }, /* @__PURE__ */ wp.element.createElement("label", { className: "components-base-control__label", htmlFor: "html-anchor" }, __44("HTML anchor", "digiblocks")), /* @__PURE__ */ wp.element.createElement(
              "input",
              {
                className: "components-text-control__input",
                type: "text",
                id: "html-anchor",
                value: anchor || "",
                onChange: (e) => setAttributes({ anchor: e.target.value }),
                "aria-describedby": "html-anchor-help",
                autoCapitalize: "none",
                autoComplete: "off"
              }
            )), /* @__PURE__ */ wp.element.createElement("p", { id: "html-anchor-help", className: "components-base-control__help" }, __44(`Enter a word or two \u2014 without spaces \u2014 to make a unique web address just for this block, called an "anchor". Then, you'll be able to link directly to this section of your page.`, "digiblocks"), " ", /* @__PURE__ */ wp.element.createElement(
              "a",
              {
                className: "components-external-link",
                href: "https://wordpress.org/documentation/article/page-jumps/",
                target: "_blank",
                rel: "external noreferrer noopener"
              },
              /* @__PURE__ */ wp.element.createElement("span", { className: "components-external-link__contents" }, __44("Learn more about anchors", "digiblocks")),
              /* @__PURE__ */ wp.element.createElement("span", { className: "components-external-link__icon", "aria-label": "(opens in a new tab)" }, "\u2197")
            ))),
            /* @__PURE__ */ wp.element.createElement("div", { className: "components-base-control" }, /* @__PURE__ */ wp.element.createElement("div", { className: "components-base-control__field" }, /* @__PURE__ */ wp.element.createElement("label", { className: "components-base-control__label", htmlFor: "additional-css-classes" }, __44("Additional CSS class(es)", "digiblocks")), /* @__PURE__ */ wp.element.createElement(
              "input",
              {
                className: "components-text-control__input",
                type: "text",
                id: "additional-css-classes",
                value: customClasses || "",
                onChange: (e) => setAttributes({ customClasses: e.target.value }),
                "aria-describedby": "additional-css-classes-help",
                autoComplete: "off"
              }
            )), /* @__PURE__ */ wp.element.createElement("p", { id: "additional-css-classes-help", className: "components-base-control__help" }, __44("Separate multiple classes with spaces.", "digiblocks")))
          ));
        default:
          return null;
      }
    };
    const TocItem = ({ heading, depth }) => {
      const indentStyle = {
        paddingLeft: `${(depth - 2) * 16}px`,
        marginBottom: listSpacing[localActiveDevice].value + listSpacing[localActiveDevice].unit
      };
      return /* @__PURE__ */ wp.element.createElement("li", { style: depth > 2 ? indentStyle : null }, /* @__PURE__ */ wp.element.createElement("a", { href: `#${heading.id}`, onClick: (e) => e.preventDefault() }, heading.content.replace(/<\/?[^>]+(>|$)/g, "")));
    };
    const renderTocList = () => {
      const handleLinkClick = (e) => {
        e.preventDefault();
      };
      if (!headings || headings.length === 0) {
        return /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-toc-content" }, /* @__PURE__ */ wp.element.createElement(ListTag, { className: "digiblocks-toc-list" }, /* @__PURE__ */ wp.element.createElement("li", null, /* @__PURE__ */ wp.element.createElement("a", { href: "#heading-1", onClick: handleLinkClick }, __44("Sample Heading 1", "digiblocks"))), /* @__PURE__ */ wp.element.createElement("li", null, /* @__PURE__ */ wp.element.createElement("a", { href: "#heading-2", onClick: handleLinkClick }, __44("Sample Heading 2", "digiblocks"))), headingSelector !== "h2" && /* @__PURE__ */ wp.element.createElement("li", { style: { paddingLeft: "16px" } }, /* @__PURE__ */ wp.element.createElement("a", { href: "#heading-3", onClick: handleLinkClick }, __44("Sample Sub-heading 1", "digiblocks"))), headingSelector !== "h2" && /* @__PURE__ */ wp.element.createElement("li", { style: { paddingLeft: "16px" } }, /* @__PURE__ */ wp.element.createElement("a", { href: "#heading-4", onClick: handleLinkClick }, __44("Sample Sub-heading 2", "digiblocks"))), /* @__PURE__ */ wp.element.createElement("li", null, /* @__PURE__ */ wp.element.createElement("a", { href: "#heading-5", onClick: handleLinkClick }, __44("Sample Heading 3", "digiblocks"))), headingSelector === "h2,h3,h4" && /* @__PURE__ */ wp.element.createElement("li", { style: { paddingLeft: "32px" } }, /* @__PURE__ */ wp.element.createElement("a", { href: "#heading-6", onClick: handleLinkClick }, __44("Sample Deep Heading", "digiblocks")))));
      }
      const filteredHeadings = headings.filter((heading) => {
        if (headingSelector === "h2" && heading.level !== 2)
          return false;
        if (headingSelector === "h2,h3" && heading.level > 3)
          return false;
        if (headingSelector === "h2,h3,h4" && heading.level > 4)
          return false;
        return true;
      });
      if (filteredHeadings.length === 0) {
        return /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-toc-content" }, /* @__PURE__ */ wp.element.createElement(ListTag, { className: "digiblocks-toc-list" }, /* @__PURE__ */ wp.element.createElement("li", null, /* @__PURE__ */ wp.element.createElement("a", { href: "#heading-1", onClick: handleLinkClick }, __44("Sample Heading 1", "digiblocks"))), /* @__PURE__ */ wp.element.createElement("li", null, /* @__PURE__ */ wp.element.createElement("a", { href: "#heading-2", onClick: handleLinkClick }, __44("Sample Heading 2", "digiblocks"))), headingSelector !== "h2" && /* @__PURE__ */ wp.element.createElement("li", { style: { paddingLeft: "16px" } }, /* @__PURE__ */ wp.element.createElement("a", { href: "#heading-3", onClick: handleLinkClick }, __44("Sample Sub-heading", "digiblocks"))), /* @__PURE__ */ wp.element.createElement("li", null, /* @__PURE__ */ wp.element.createElement("a", { href: "#heading-4", onClick: handleLinkClick }, __44("Sample Heading 3", "digiblocks")))));
      }
      return /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-toc-content" }, /* @__PURE__ */ wp.element.createElement(ListTag, { className: "digiblocks-toc-list" }, filteredHeadings.map((heading, index) => /* @__PURE__ */ wp.element.createElement(TocItem, { key: index, heading, depth: heading.level }))));
    };
    const blockClasses = `digiblocks-table-of-contents ${id} ${animation !== "none" ? `animate-${animation}` : ""} ${customClasses || ""}`;
    const ListTag = listType === "ol" ? "ol" : "ul";
    const TitleTag = titleTag;
    const blockProps = useBlockProps67({
      className: blockClasses,
      id: anchor || null
    });
    return /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(InspectorControls39, null, /* @__PURE__ */ wp.element.createElement(
      CustomTabPanel39,
      {
        tabs: tabList,
        activeTab,
        onSelect: setActiveTab
      },
      renderTabContent()
    )), /* @__PURE__ */ wp.element.createElement("style", { dangerouslySetInnerHTML: { __html: generateCSS() } }), /* @__PURE__ */ wp.element.createElement("div", { ...blockProps }, /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-toc-container" }, showTitle && /* @__PURE__ */ wp.element.createElement(
      RichText32,
      {
        tagName: TitleTag,
        className: "digiblocks-toc-title",
        value: title,
        onChange: (value) => setAttributes({ title: value }),
        placeholder: __44("Table of Contents", "digiblocks")
      }
    ), showAsCollapsible && /* @__PURE__ */ wp.element.createElement(
      "button",
      {
        className: "digiblocks-toc-toggle-button",
        "aria-expanded": !initialCollapseState
      },
      initialCollapseState ? collapseButtonText.show : collapseButtonText.hide
    ), renderTocList())));
  };
  var edit_default39 = TableOfContentsEdit;

  // blocks/table-of-contents/save.js
  var { useBlockProps: useBlockProps68, RichText: RichText33 } = window.wp.blockEditor;
  var TableOfContentsSave = ({ attributes }) => {
    const {
      id,
      anchor,
      customClasses,
      title,
      showTitle,
      titleTag,
      headingSelector,
      maxDepth,
      listType,
      scrollOffset,
      enableSmoothScroll,
      enableSEOMarkup,
      minimizeBox,
      showAsCollapsible,
      initialCollapseState,
      collapseButtonText,
      animation
    } = attributes;
    const blockClasses = [
      "digiblocks-table-of-contents",
      id,
      animation !== "none" ? `animate-${animation}` : "",
      customClasses || ""
    ].filter(Boolean).join(" ");
    const blockProps = useBlockProps68.save({
      className: blockClasses,
      id: anchor || null
    });
    const containerAttr = {};
    if (enableSEOMarkup) {
      containerAttr["itemScope"] = true;
      containerAttr["itemType"] = "https://schema.org/Table";
      containerAttr["itemProp"] = "mainContentOfPage";
    }
    const dataAttr = {
      "data-heading-selector": headingSelector,
      "data-max-depth": maxDepth,
      "data-scroll-offset": scrollOffset,
      "data-smooth-scroll": enableSmoothScroll ? "true" : "false",
      "data-minimize-box": minimizeBox ? "true" : "false",
      "data-initial-collapsed": initialCollapseState ? "true" : "false",
      "data-show-text": collapseButtonText.show,
      "data-hide-text": collapseButtonText.hide
    };
    const TitleTag = titleTag;
    return /* @__PURE__ */ wp.element.createElement("div", { ...blockProps }, /* @__PURE__ */ wp.element.createElement(
      "div",
      {
        className: "digiblocks-toc-container",
        ...containerAttr,
        ...dataAttr
      },
      showTitle && /* @__PURE__ */ wp.element.createElement(
        RichText33.Content,
        {
          tagName: TitleTag,
          className: "digiblocks-toc-title",
          value: title,
          itemProp: enableSEOMarkup ? "name" : void 0
        }
      ),
      showAsCollapsible && /* @__PURE__ */ wp.element.createElement(
        "button",
        {
          className: "digiblocks-toc-toggle-button",
          "aria-expanded": !initialCollapseState
        },
        initialCollapseState ? collapseButtonText.show : collapseButtonText.hide
      ),
      /* @__PURE__ */ wp.element.createElement(
        "div",
        {
          className: "digiblocks-toc-content",
          style: { display: showAsCollapsible && initialCollapseState ? "none" : "block" },
          itemProp: enableSEOMarkup ? "text" : void 0
        }
      )
    ));
  };
  var save_default39 = TableOfContentsSave;

  // blocks/author-box/edit.js
  var { __: __45 } = window.wp.i18n;
  var {
    useBlockProps: useBlockProps69,
    InspectorControls: InspectorControls40,
    PanelColorSettings: PanelColorSettings38,
    RichText: RichText34
  } = window.wp.blockEditor;
  var {
    SelectControl: SelectControl38,
    ToggleControl: ToggleControl40,
    RangeControl: RangeControl36,
    Button: Button37,
    Notice: Notice9,
    TabPanel: TabPanel23,
    __experimentalToggleGroupControl: ToggleGroupControl38,
    __experimentalToggleGroupControlOption: ToggleGroupControlOption38
  } = window.wp.components;
  var { useState: useState40, useEffect: useEffect40, useRef: useRef35 } = window.wp.element;
  var { useBlockId: useBlockId40, getDimensionCSS: getDimensionCSS35, animations: animations36, animationPreview: animationPreview36 } = digi.utils;
  var { tabIcons: tabIcons40 } = digi.icons;
  var { ResponsiveButtonGroup: ResponsiveButtonGroup16, ResponsiveControl: ResponsiveControl40, DimensionControl: DimensionControl36, TypographyControl: TypographyControl32, BoxShadowControl: BoxShadowControl28, CustomTabPanel: CustomTabPanel40, TabPanelBody: TabPanelBody40, ResponsiveRangeControl: ResponsiveRangeControl6 } = digi.components;
  var AuthorBoxEdit = ({ attributes, setAttributes, clientId }) => {
    const {
      id,
      anchor,
      visibility,
      customClasses,
      layout,
      spacing,
      avatarSize,
      nameColor,
      nameHoverColor,
      descriptionColor,
      backgroundColor,
      backgroundHoverColor,
      avatarBorderColor,
      avatarBorderHoverColor,
      avatarBorderWidth,
      avatarBorderRadius,
      socialIconColor,
      socialIconHoverColor,
      socialIconBackgroundColor,
      socialIconBackgroundHoverColor,
      socialButtonSize,
      socialIconSize,
      socialIconSpacing,
      socialIconBorderRadius,
      socialIconBorderStyle,
      socialIconBorderWidth,
      socialIconBorderColor,
      socialIconBorderHoverColor,
      padding,
      margin,
      boxShadow,
      boxShadowHover,
      borderWidth,
      borderStyle,
      borderColor,
      borderHoverColor,
      borderRadius,
      titleTypography,
      contentTypography,
      animation,
      displayAvatar,
      displayName,
      displayBio,
      displaySocial,
      socialProfiles
    } = attributes;
    useBlockId40(id, clientId, setAttributes);
    const [localActiveDevice, setLocalActiveDevice] = useState40(window.digi.responsiveState.activeDevice);
    const [activeTab, setActiveTab] = useState40(() => {
      if (window.digi.uiState) {
        const savedTab = window.digi.uiState.getActiveTab(clientId);
        if (savedTab)
          return savedTab;
      }
      return "options";
    });
    useEffect40(() => {
      const unsubscribe = window.digi.responsiveState.subscribe((device) => {
        setLocalActiveDevice(device);
      });
      return unsubscribe;
    }, []);
    const previewTimeoutRef = useRef35(null);
    useEffect40(() => {
      if (animation && animation !== "none") {
        const timeoutId = setTimeout(() => {
          animationPreview36(id, animation, animations36, previewTimeoutRef);
        }, 100);
        return () => clearTimeout(timeoutId);
      }
    }, [animation]);
    const handlePreviewClick = () => {
      animationPreview36(id, animation, animations36, previewTimeoutRef);
    };
    const borderStyleOptions = [
      { label: __45("None", "digiblocks"), value: "none" },
      { label: __45("Solid", "digiblocks"), value: "solid" },
      { label: __45("Dotted", "digiblocks"), value: "dotted" },
      { label: __45("Dashed", "digiblocks"), value: "dashed" },
      { label: __45("Double", "digiblocks"), value: "double" }
    ];
    const animationOptions = [
      { label: __45("None", "digiblocks"), value: "none" },
      ...Object.keys(animations36).map((animation2) => ({
        label: animation2.replace(/-/g, " ").replace(/\b\w/g, (l) => l.toUpperCase()),
        value: animation2
      }))
    ];
    const layoutOptions = [
      { label: __45("Horizontal", "digiblocks"), value: "horizontal" },
      { label: __45("Vertical", "digiblocks"), value: "vertical" }
    ];
    const tabList = [
      {
        name: "options",
        title: __45("Options", "digiblocks"),
        icon: tabIcons40.optionsIcon
      },
      {
        name: "style",
        title: __45("Style", "digiblocks"),
        icon: tabIcons40.styleIcon
      },
      {
        name: "advanced",
        title: __45("Advanced", "digiblocks"),
        icon: tabIcons40.advancedIcon
      }
    ];
    const stateTabList = [
      {
        name: "normal",
        title: __45("Normal", "digiblocks"),
        className: "digiblocks-tab-1 normal"
      },
      {
        name: "hover",
        title: __45("Hover", "digiblocks"),
        className: "digiblocks-tab-2 hover"
      }
    ];
    const socialPlatforms = [
      { id: "website", label: __45("Website", "digiblocks"), icon: '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512" fill="currentColor"><path d="M352 256c0 22.2-1.2 43.6-3.3 64H163.3c-2.2-20.4-3.3-41.8-3.3-64s1.2-43.6 3.3-64H348.7c2.2 20.4 3.3 41.8 3.3 64zm28.8-64H503.9c5.3 20.5 8.1 41.9 8.1 64s-2.8 43.5-8.1 64H380.8c2.1-20.6 3.2-42 3.2-64s-1.1-43.4-3.2-64zm112.6-32H376.7c-10-63.9-29.8-117.4-55.3-151.6c78.3 20.7 142 77.5 171.9 151.6zm-149.1 0H167.7c6.1-36.4 15.5-68.6 27-94.7c10.5-23.6 22.2-40.7 33.5-51.5C239.4 3.2 248.7 0 256 0s16.6 3.2 27.8 13.8c11.3 10.8 23 27.9 33.5 51.5c11.6 26 20.9 58.2 27 94.7zm-209 0H18.6C48.6 85.9 112.2 29.1 190.6 8.4C165.1 42.6 145.3 96.1 135.3 160zM8.1 192C2.8 212.5 0 233.9 0 256s2.8 43.5 8.1 64H131.2c-2.1-20.6-3.2-42-3.2-64s1.1-43.4 3.2-64zM194.7 446.6c-11.6-26-20.9-58.2-27-94.6H344.3c-6.1 36.4-15.5 68.6-27 94.6c-10.5 23.6-22.2 40.7-33.5 51.5C272.6 508.8 263.3 512 256 512s-16.6-3.2-27.8-13.8c-11.3-10.8-23-27.9-33.5-51.5zM135.3 352c10 63.9 29.8 117.4 55.3 151.6C112.2 482.9 48.6 426.1 18.6 352H135.3zm358.1 0c-30 74.1-93.6 130.9-171.9 151.6c25.5-34.2 45.2-87.7 55.3-151.6H493.4z"/></svg>' },
      { id: "facebook", label: __45("Facebook", "digiblocks"), icon: '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 320 512" fill="currentColor"><path d="M80 299.3V512H196V299.3h86.5l18-97.8H196V166.9c0-51.7 20.3-71.5 72.7-71.5c16.3 0 29.4 .4 37 1.2V7.9C291.4 4 256.4 0 236.2 0C129.3 0 80 50.5 80 159.4v42.1H14v97.8H80z"/></svg>' },
      { id: "twitter", label: __45("Twitter/X", "digiblocks"), icon: '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512" fill="currentColor"><path d="M389.2 48h70.6L305.6 224.2 487 464H345L233.7 318.6 106.5 464H35.8L200.7 275.5 26.8 48H172.4L272.9 180.9 389.2 48zM364.4 421.8h39.1L151.1 88h-42L364.4 421.8z"/></svg>' },
      { id: "instagram", label: __45("Instagram", "digiblocks"), icon: '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512" fill="currentColor"><path d="M224.1 141c-63.6 0-114.9 51.3-114.9 114.9s51.3 114.9 114.9 114.9S339 319.5 339 255.9 287.7 141 224.1 141zm0 189.6c-41.1 0-74.7-33.5-74.7-74.7s33.5-74.7 74.7-74.7 74.7 33.5 74.7 74.7-33.6 74.7-74.7 74.7zm146.4-194.3c0 14.9-12 26.8-26.8 26.8-14.9 0-26.8-12-26.8-26.8s12-26.8 26.8-26.8 26.8 12 26.8 26.8zm76.1 27.2c-1.7-35.9-9.9-67.7-36.2-93.9-26.2-26.2-58-34.4-93.9-36.2-37-2.1-147.9-2.1-184.9 0-35.8 1.7-67.6 9.9-93.9 36.1s-34.4 58-36.2 93.9c-2.1 37-2.1 147.9 0 184.9 1.7 35.9 9.9 67.7 36.2 93.9s58 34.4 93.9 36.2c37 2.1 147.9 2.1 184.9 0 35.9-1.7 67.7-9.9 93.9-36.2 26.2-26.2 34.4-58 36.2-93.9 2.1-37 2.1-147.8 0-184.8zM398.8 388c-7.8 19.6-22.9 34.7-42.6 42.6-29.5 11.7-99.5 9-132.1 9s-102.7 2.6-132.1-9c-19.6-7.8-34.7-22.9-42.6-42.6-11.7-29.5-9-99.5-9-132.1s-2.6-102.7 9-132.1c7.8-19.6 22.9-34.7 42.6-42.6 29.5-11.7 99.5-9 132.1-9s102.7-2.6 132.1 9c19.6 7.8 34.7 22.9 42.6 42.6 11.7 29.5 9 99.5 9 132.1s2.7 102.7-9 132.1z"/></svg>' },
      { id: "linkedin", label: __45("LinkedIn", "digiblocks"), icon: '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512" fill="currentColor"><path d="M100.3 448H7.4V148.9h92.9zM53.8 108.1C24.1 108.1 0 83.5 0 53.8a53.8 53.8 0 0 1 107.6 0c0 29.7-24.1 54.3-53.8 54.3zM447.9 448h-92.7V302.4c0-34.7-.7-79.2-48.3-79.2-48.3 0-55.7 37.7-55.7 76.7V448h-92.8V148.9h89.1v40.8h1.3c12.4-23.5 42.7-48.3 87.9-48.3 94 0 111.3 61.9 111.3 142.3V448z"/></svg>' },
      { id: "youtube", label: __45("YouTube", "digiblocks"), icon: '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 576 512" fill="currentColor"><path d="M549.7 124.1c-6.3-23.7-24.8-42.3-48.3-48.6C458.8 64 288 64 288 64S117.2 64 74.6 75.5c-23.5 6.3-42 24.9-48.3 48.6-11.4 42.9-11.4 132.3-11.4 132.3s0 89.4 11.4 132.3c6.3 23.7 24.8 41.5 48.3 47.8C117.2 448 288 448 288 448s170.8 0 213.4-11.5c23.5-6.3 42-24.2 48.3-47.8 11.4-42.9 11.4-132.3 11.4-132.3s0-89.4-11.4-132.3zm-317.5 213.5V175.2l142.7 81.2-142.7 81.2z"/></svg>' },
      { id: "github", label: __45("GitHub", "digiblocks"), icon: '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 496 512" fill="currentColor"><path d="M165.9 397.4c0 2-2.3 3.6-5.2 3.6-3.3.3-5.6-1.3-5.6-3.6 0-2 2.3-3.6 5.2-3.6 3-.3 5.6 1.3 5.6 3.6zm-31.1-4.5c-.7 2 1.3 4.3 4.3 4.9 2.6 1 5.6 0 6.2-2s-1.3-4.3-4.3-5.2c-2.6-.7-5.5.3-6.2 2.3zm44.2-1.7c-2.9.7-4.9 2.6-4.6 4.9.3 2 2.9 3.3 5.9 2.6 2.9-.7 4.9-2.6 4.6-4.6-.3-1.9-3-3.2-5.9-2.9zM244.8 8C106.1 8 0 113.3 0 252c0 110.9 69.8 205.8 169.5 239.2 12.8 2.3 17.3-5.6 17.3-12.1 0-6.2-.3-40.4-.3-61.4 0 0-70 15-84.7-29.8 0 0-11.4-29.1-27.8-36.6 0 0-22.9-15.7 1.6-15.4 0 0 24.9 2 38.6 25.8 21.9 38.6 58.6 27.5 72.9 20.9 2.3-16 8.8-27.1 16-33.7-55.9-6.2-112.3-14.3-112.3-110.5 0-27.5 7.6-41.3 23.6-58.9-2.6-6.5-11.1-33.3 2.6-67.9 20.9-6.5 69 27 69 27 20-5.6 41.5-8.5 62.8-8.5s42.8 2.9 62.8 8.5c0 0 48.1-33.6 69-27 13.7 34.7 5.2 61.4 2.6 67.9 16 17.7 25.8 31.5 25.8 58.9 0 96.5-58.9 104.2-114.8 110.5 9.2 7.9 17 22.9 17 46.4 0 33.7-.3 75.4-.3 83.6 0 6.5 4.6 14.4 17.3 12.1C428.2 457.8 496 362.9 496 252 496 113.3 383.5 8 244.8 8zM97.2 352.9c-1.3 1-1 3.3.7 5.2 1.6 1.6 3.9 2.3 5.2 1 1.3-1 1-3.3-.7-5.2-1.6-1.6-3.9-2.3-5.2-1zm-10.8-8.1c-.7 1.3.3 2.9 2.3 3.9 1.6 1 3.6.7 4.3-.7.7-1.3-.3-2.9-2.3-3.9-2-.6-3.6-.3-4.3.7zm32.4 35.6c-1.6 1.3-1 4.3 1.3 6.2 2.3 2.3 5.2 2.6 6.5 1 1.3-1.3.7-4.3-1.3-6.2-2.2-2.3-5.2-2.6-6.5-1zm-11.4-14.7c-1.6 1-1.6 3.6 0 5.9 1.6 2.3 4.3 3.3 5.6 2.3 1.6-1.3 1.6-3.9 0-6.2-1.4-2.3-4-3.3-5.6-2z"/></svg>' }
    ];
    const toggleSocialProfile = (profileId) => {
      const updatedProfiles = JSON.parse(JSON.stringify(socialProfiles || {}));
      if (!updatedProfiles[profileId]) {
        updatedProfiles[profileId] = { enabled: true };
      } else {
        updatedProfiles[profileId].enabled = !updatedProfiles[profileId].enabled;
      }
      setAttributes({ socialProfiles: updatedProfiles });
    };
    useEffect40(() => {
      if (!socialProfiles || Object.keys(socialProfiles).length === 0) {
        const initialProfiles = {};
        socialPlatforms.forEach((platform) => {
          initialProfiles[platform.id] = {
            enabled: false
          };
        });
        setAttributes({ socialProfiles: initialProfiles });
      }
    }, []);
    const generateCSS = () => {
      const activeDevice = localActiveDevice;
      let animationCSS = "";
      if (animation && animation !== "none" && animations36[animation]) {
        animationCSS = animations36[animation].keyframes;
      }
      let borderCSS = "";
      if (borderStyle && borderStyle !== "none") {
        borderCSS = `
                border-style: ${borderStyle};
                border-color: ${borderColor || "#e0e0e0"};
                ${getDimensionCSS35(borderWidth, "border-width", activeDevice)}
            `;
      }
      let boxShadowCSS = "box-shadow: none;";
      if (boxShadow && boxShadow.enable) {
        const inset = boxShadow.position === "inset" ? "inset " : "";
        boxShadowCSS = `box-shadow: ${inset}${boxShadow.horizontal}px ${boxShadow.vertical}px ${boxShadow.blur}px ${boxShadow.spread}px ${boxShadow.color};`;
      }
      let boxShadowHoverCSS = "";
      if (boxShadowHover && boxShadowHover.enable) {
        const inset = boxShadowHover.position === "inset" ? "inset " : "";
        boxShadowHoverCSS = `box-shadow: ${inset}${boxShadowHover.horizontal}px ${boxShadowHover.vertical}px ${boxShadowHover.blur}px ${boxShadowHover.spread}px ${boxShadowHover.color};`;
      }
      let titleTypographyCSS = "";
      if (titleTypography) {
        if (titleTypography.fontFamily) {
          titleTypographyCSS += `font-family: ${titleTypography.fontFamily};`;
        }
        if (titleTypography.fontSize && titleTypography.fontSize[activeDevice]) {
          titleTypographyCSS += `font-size: ${titleTypography.fontSize[activeDevice]}${titleTypography.fontSizeUnit || "px"};`;
        }
        if (titleTypography.fontWeight) {
          titleTypographyCSS += `font-weight: ${titleTypography.fontWeight};`;
        }
        if (titleTypography.fontStyle) {
          titleTypographyCSS += `font-style: ${titleTypography.fontStyle};`;
        }
        if (titleTypography.textTransform) {
          titleTypographyCSS += `text-transform: ${titleTypography.textTransform};`;
        }
        if (titleTypography.textDecoration) {
          titleTypographyCSS += `text-decoration: ${titleTypography.textDecoration};`;
        }
        if (titleTypography.lineHeight && titleTypography.lineHeight[activeDevice]) {
          titleTypographyCSS += `line-height: ${titleTypography.lineHeight[activeDevice]}${titleTypography.lineHeightUnit || "em"};`;
        }
        if (titleTypography.letterSpacing && titleTypography.letterSpacing[activeDevice]) {
          titleTypographyCSS += `letter-spacing: ${titleTypography.letterSpacing[activeDevice]}${titleTypography.letterSpacingUnit || "px"};`;
        }
      }
      let contentTypographyCSS = "";
      if (contentTypography) {
        if (contentTypography.fontFamily) {
          contentTypographyCSS += `font-family: ${contentTypography.fontFamily};`;
        }
        if (contentTypography.fontSize && contentTypography.fontSize[activeDevice]) {
          contentTypographyCSS += `font-size: ${contentTypography.fontSize[activeDevice]}${contentTypography.fontSizeUnit || "px"};`;
        }
        if (contentTypography.fontWeight) {
          contentTypographyCSS += `font-weight: ${contentTypography.fontWeight};`;
        }
        if (contentTypography.fontStyle) {
          contentTypographyCSS += `font-style: ${contentTypography.fontStyle};`;
        }
        if (contentTypography.textTransform) {
          contentTypographyCSS += `text-transform: ${contentTypography.textTransform};`;
        }
        if (contentTypography.textDecoration) {
          contentTypographyCSS += `text-decoration: ${contentTypography.textDecoration};`;
        }
        if (contentTypography.lineHeight && contentTypography.lineHeight[activeDevice]) {
          contentTypographyCSS += `line-height: ${contentTypography.lineHeight[activeDevice]}${contentTypography.lineHeightUnit || "em"};`;
        }
        if (contentTypography.letterSpacing && contentTypography.letterSpacing[activeDevice]) {
          contentTypographyCSS += `letter-spacing: ${contentTypography.letterSpacing[activeDevice]}${contentTypography.letterSpacingUnit || "px"};`;
        }
      }
      let socialIconBorderCSS = "";
      if (socialIconBorderStyle && socialIconBorderStyle !== "none") {
        socialIconBorderCSS = `
                border-style: ${socialIconBorderStyle};
                border-color: ${socialIconBorderColor || "transparent"};
                ${getDimensionCSS35(socialIconBorderWidth, "border-width", activeDevice)}
            `;
      }
      return `
            /* Main block styles */
            .${id} {
                display: flex;
                flex-direction: ${layout === "vertical" ? "column" : "row"};
                align-items: ${layout === "vertical" ? "center" : "flex-start"};
                ${layout === "vertical" ? "text-align: center;" : ""}
				gap: ${spacing[activeDevice]}px;
                background-color: ${backgroundColor || "transparent"};
                ${boxShadowCSS}
                ${borderCSS}
                ${getDimensionCSS35(borderRadius, "border-radius", activeDevice)}
                ${getDimensionCSS35(padding, "padding", activeDevice)}
                ${getDimensionCSS35(margin, "margin", activeDevice)}
                transition: all 0.3s ease;
            }
            
            /* Hover effects */
            .${id}:hover {
                ${backgroundHoverColor ? `background-color: ${backgroundHoverColor};` : ""}
                ${borderHoverColor ? `border-color: ${borderHoverColor};` : ""}
                ${boxShadowHoverCSS}
            }
            
            /* Author avatar */
			.${id} .digiblocks-author-avatar {
				display: flex;
			}

            .${id} .digiblocks-author-avatar img {
                width: ${avatarSize[activeDevice]}px;
                height: ${avatarSize[activeDevice]}px;
                ${getDimensionCSS35(avatarBorderRadius, "border-radius", activeDevice)};
                object-fit: cover;
                ${avatarBorderWidth && avatarBorderWidth[activeDevice] && avatarBorderWidth[activeDevice].top ? `border: ${avatarBorderWidth[activeDevice].top}${avatarBorderWidth[activeDevice].unit || "px"} solid ${avatarBorderColor || "#e0e0e0"};` : ""}
                transition: all 0.3s ease;
            }
            
            .${id}:hover .digiblocks-author-avatar img {
                ${avatarBorderHoverColor ? `border-color: ${avatarBorderHoverColor};` : ""}
            }
            
            /* Author content */
            .${id} .digiblocks-author-content {
                flex: 1;
                ${layout === "vertical" ? "width: 100%;" : ""}
            }
            
            /* Author name */
            .${id} .digiblocks-author-name {
                color: ${nameColor || "#333333"};
                margin-top: 0;
                margin-bottom: 0.3em;
                ${titleTypographyCSS}
                transition: color 0.3s ease;
            }
            
            .${id}:hover .digiblocks-author-name {
                ${nameHoverColor ? `color: ${nameHoverColor};` : ""}
            }
            
            /* Author bio */
            .${id} .digiblocks-author-description {
                color: ${descriptionColor || "#666666"};
                margin-top: 0;
                margin-bottom: 1em;
                ${contentTypographyCSS}
            }
            
            /* Social icons */
            .${id} .digiblocks-author-social {
                display: flex;
                gap: ${socialIconSpacing[activeDevice]?.value || 8}${socialIconSpacing[activeDevice]?.unit || "px"};
                ${layout === "vertical" ? "justify-content: center;" : ""}
            }
            
            .${id} .digiblocks-author-social a {
                display: flex;
                align-items: center;
                justify-content: center;
                width: ${socialButtonSize[activeDevice]?.value || 36}${socialButtonSize[activeDevice]?.unit || "px"};
                height: ${socialButtonSize[activeDevice]?.value || 36}${socialButtonSize[activeDevice]?.unit || "px"};
                ${getDimensionCSS35(socialIconBorderRadius, "border-radius", activeDevice)}
                background-color: ${socialIconBackgroundColor || "#f0f0f0"};
                color: ${socialIconColor || "#333333"};
                ${socialIconBorderCSS}
                transition: all 0.3s ease;
            }
            
            .${id} .digiblocks-author-social a span,
            .${id} .digiblocks-author-social a svg {
                display: flex;
            }
            
            .${id} .digiblocks-author-social a svg {
                width: ${socialIconSize[activeDevice]?.value || 18}${socialIconSize[activeDevice]?.unit || "px"};
                height: ${socialIconSize[activeDevice]?.value || 18}${socialIconSize[activeDevice]?.unit || "px"};
                fill: currentColor;
            }
            
            .${id} .digiblocks-author-social a:hover {
                background-color: ${socialIconBackgroundHoverColor || "#333333"};
                color: ${socialIconHoverColor || "#ffffff"};
                ${socialIconBorderHoverColor ? `border-color: ${socialIconBorderHoverColor};` : ""}
                transform: translateY(-2px);
            }
            
            /* Animation keyframes */
            ${animationCSS}

			/* Visibility Controls */
			${visibility.desktop ? `
				@media (min-width: 992px) {
					.${id} {
						opacity: 0.5 !important;
					}
				}
			` : ""}

			${visibility.tablet ? `
				@media (min-width: 768px) and (max-width: 991px) {
					.${id} {
						opacity: 0.5 !important;
					}
				}
			` : ""}

			${visibility.mobile ? `
				@media (max-width: 767px) {
					.${id} {
						opacity: 0.5 !important;
					}
				}
			` : ""}
        `;
    };
    const renderColorTabContent = (tabName) => {
      if (tabName === "normal") {
        return /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(
          PanelColorSettings38,
          {
            title: __45(
              "Color Settings",
              "digiblocks"
            ),
            initialOpen: true,
            enableAlpha: true,
            colorSettings: [
              {
                value: nameColor,
                onChange: (value) => setAttributes({
                  nameColor: value
                }),
                label: __45(
                  "Name Color",
                  "digiblocks"
                )
              },
              {
                value: descriptionColor,
                onChange: (value) => setAttributes({
                  descriptionColor: value
                }),
                label: __45(
                  "Bio Color",
                  "digiblocks"
                )
              },
              {
                value: backgroundColor,
                onChange: (value) => setAttributes({
                  backgroundColor: value
                }),
                label: __45(
                  "Background Color",
                  "digiblocks"
                )
              }
            ]
          }
        ));
      } else if (tabName === "hover") {
        return /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(
          PanelColorSettings38,
          {
            title: __45(
              "Hover Color Settings",
              "digiblocks"
            ),
            initialOpen: true,
            enableAlpha: true,
            colorSettings: [
              {
                value: nameHoverColor,
                onChange: (value) => setAttributes({
                  nameHoverColor: value
                }),
                label: __45(
                  "Name Color",
                  "digiblocks"
                )
              },
              {
                value: backgroundHoverColor,
                onChange: (value) => setAttributes({
                  backgroundHoverColor: value
                }),
                label: __45(
                  "Background Color",
                  "digiblocks"
                )
              },
              {
                value: borderHoverColor,
                onChange: (value) => setAttributes({
                  borderHoverColor: value
                }),
                label: __45(
                  "Border Color",
                  "digiblocks"
                )
              }
            ]
          }
        ));
      }
      return null;
    };
    const renderAvatarTabContent = (tabName) => {
      if (tabName === "normal") {
        return /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(
          PanelColorSettings38,
          {
            title: __45(
              "Avatar Border",
              "digiblocks"
            ),
            initialOpen: true,
            enableAlpha: true,
            colorSettings: [
              {
                value: avatarBorderColor,
                onChange: (value) => setAttributes({
                  avatarBorderColor: value
                }),
                label: __45(
                  "Border Color",
                  "digiblocks"
                )
              }
            ]
          }
        ), /* @__PURE__ */ wp.element.createElement(
          ResponsiveControl40,
          {
            label: __45("Spacing", "digiblocks")
          },
          /* @__PURE__ */ wp.element.createElement(
            RangeControl36,
            {
              value: spacing[localActiveDevice],
              onChange: (value) => setAttributes({
                spacing: {
                  ...spacing,
                  [localActiveDevice]: value
                }
              }),
              min: 10,
              max: 200,
              step: 1,
              __next40pxDefaultSize: true,
              __nextHasNoMarginBottom: true
            }
          )
        ), /* @__PURE__ */ wp.element.createElement(
          ResponsiveControl40,
          {
            label: __45("Avatar Size", "digiblocks")
          },
          /* @__PURE__ */ wp.element.createElement(
            RangeControl36,
            {
              value: avatarSize[localActiveDevice],
              onChange: (value) => setAttributes({
                avatarSize: {
                  ...avatarSize,
                  [localActiveDevice]: value
                }
              }),
              min: 40,
              max: 200,
              step: 5,
              __next40pxDefaultSize: true,
              __nextHasNoMarginBottom: true
            }
          )
        ), /* @__PURE__ */ wp.element.createElement(
          ResponsiveControl40,
          {
            label: __45("Border Width", "digiblocks")
          },
          /* @__PURE__ */ wp.element.createElement(
            DimensionControl36,
            {
              values: avatarBorderWidth && avatarBorderWidth[localActiveDevice] ? avatarBorderWidth[localActiveDevice] : {
                top: 0,
                right: 0,
                bottom: 0,
                left: 0,
                unit: "px"
              },
              onChange: (value) => setAttributes({
                avatarBorderWidth: {
                  ...avatarBorderWidth,
                  [localActiveDevice]: value
                }
              }),
              linked: true
            }
          )
        ), /* @__PURE__ */ wp.element.createElement(
          ResponsiveControl40,
          {
            label: __45("Border Radius", "digiblocks")
          },
          /* @__PURE__ */ wp.element.createElement(
            DimensionControl36,
            {
              values: avatarBorderRadius && avatarBorderRadius[localActiveDevice] ? avatarBorderRadius[localActiveDevice] : {
                top: 50,
                right: 50,
                bottom: 50,
                left: 50,
                unit: "%"
              },
              onChange: (value) => setAttributes({
                avatarBorderRadius: {
                  ...avatarBorderRadius,
                  [localActiveDevice]: value
                }
              }),
              linked: true,
              units: [
                { label: "px", value: "px" },
                { label: "%", value: "%" }
              ]
            }
          )
        ));
      } else if (tabName === "hover") {
        return /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(
          PanelColorSettings38,
          {
            title: __45(
              "Avatar Border Hover",
              "digiblocks"
            ),
            initialOpen: true,
            enableAlpha: true,
            colorSettings: [
              {
                value: avatarBorderHoverColor,
                onChange: (value) => setAttributes({
                  avatarBorderHoverColor: value
                }),
                label: __45(
                  "Border Color",
                  "digiblocks"
                )
              }
            ]
          }
        ));
      }
      return null;
    };
    const renderSocialTabContent = (tabName) => {
      if (tabName === "normal") {
        return /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(
          PanelColorSettings38,
          {
            title: __45(
              "Social Icon Colors",
              "digiblocks"
            ),
            initialOpen: true,
            enableAlpha: true,
            colorSettings: [
              {
                value: socialIconColor,
                onChange: (value) => setAttributes({
                  socialIconColor: value
                }),
                label: __45(
                  "Icon Color",
                  "digiblocks"
                )
              },
              {
                value: socialIconBackgroundColor,
                onChange: (value) => setAttributes({
                  socialIconBackgroundColor: value
                }),
                label: __45(
                  "Background Color",
                  "digiblocks"
                )
              },
              {
                value: socialIconBorderColor,
                onChange: (value) => setAttributes({
                  socialIconBorderColor: value
                }),
                label: __45(
                  "Border Color",
                  "digiblocks"
                )
              }
            ]
          }
        ), /* @__PURE__ */ wp.element.createElement(
          SelectControl38,
          {
            label: __45("Border Style", "digiblocks"),
            value: socialIconBorderStyle || "none",
            options: borderStyleOptions,
            onChange: (value) => {
              setAttributes({
                socialIconBorderStyle: value
              });
            },
            __next40pxDefaultSize: true,
            __nextHasNoMarginBottom: true
          }
        ), socialIconBorderStyle && socialIconBorderStyle !== "none" && /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(
          ResponsiveControl40,
          {
            label: __45("Border Width", "digiblocks")
          },
          /* @__PURE__ */ wp.element.createElement(
            DimensionControl36,
            {
              values: socialIconBorderWidth && socialIconBorderWidth[localActiveDevice] ? socialIconBorderWidth[localActiveDevice] : {
                top: 0,
                right: 0,
                bottom: 0,
                left: 0,
                unit: "px"
              },
              onChange: (value) => setAttributes({
                socialIconBorderWidth: {
                  ...socialIconBorderWidth,
                  [localActiveDevice]: value
                }
              }),
              linked: true
            }
          )
        )), /* @__PURE__ */ wp.element.createElement(
          ResponsiveRangeControl6,
          {
            label: __45("Button Size", "digiblocks"),
            value: socialButtonSize,
            onChange: (value) => setAttributes({ socialButtonSize: value }),
            units: [
              { label: "px", value: "px" },
              { label: "em", value: "em" },
              { label: "rem", value: "rem" }
            ],
            defaultUnit: "px",
            min: 20,
            max: 100,
            step: 1,
            defaultValues: {
              desktop: { value: 36, unit: "px" },
              tablet: { value: 32, unit: "px" },
              mobile: { value: 28, unit: "px" }
            }
          }
        ), /* @__PURE__ */ wp.element.createElement(
          ResponsiveRangeControl6,
          {
            label: __45("Icon Size", "digiblocks"),
            value: socialIconSize,
            onChange: (value) => setAttributes({ socialIconSize: value }),
            units: [
              { label: "px", value: "px" },
              { label: "em", value: "em" },
              { label: "rem", value: "rem" }
            ],
            defaultUnit: "px",
            min: 10,
            max: 60,
            step: 1,
            defaultValues: {
              desktop: { value: 18, unit: "px" },
              tablet: { value: 16, unit: "px" },
              mobile: { value: 14, unit: "px" }
            }
          }
        ), /* @__PURE__ */ wp.element.createElement(
          ResponsiveRangeControl6,
          {
            label: __45("Icon Spacing", "digiblocks"),
            value: socialIconSpacing,
            onChange: (value) => setAttributes({ socialIconSpacing: value }),
            units: [
              { label: "px", value: "px" },
              { label: "em", value: "em" },
              { label: "rem", value: "rem" }
            ],
            defaultUnit: "px",
            min: 2,
            max: 50,
            step: 1,
            defaultValues: {
              desktop: { value: 8, unit: "px" },
              tablet: { value: 8, unit: "px" },
              mobile: { value: 6, unit: "px" }
            }
          }
        ), /* @__PURE__ */ wp.element.createElement(
          ResponsiveControl40,
          {
            label: __45("Border Radius", "digiblocks")
          },
          /* @__PURE__ */ wp.element.createElement(
            DimensionControl36,
            {
              values: socialIconBorderRadius && socialIconBorderRadius[localActiveDevice] ? socialIconBorderRadius[localActiveDevice] : {
                top: 50,
                right: 50,
                bottom: 50,
                left: 50,
                unit: "%"
              },
              onChange: (value) => setAttributes({
                socialIconBorderRadius: {
                  ...socialIconBorderRadius,
                  [localActiveDevice]: value
                }
              }),
              linked: true,
              units: [
                { label: "px", value: "px" },
                { label: "%", value: "%" }
              ]
            }
          )
        ));
      } else if (tabName === "hover") {
        return /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(
          PanelColorSettings38,
          {
            title: __45(
              "Social Icon Hover Colors",
              "digiblocks"
            ),
            initialOpen: true,
            enableAlpha: true,
            colorSettings: [
              {
                value: socialIconHoverColor,
                onChange: (value) => setAttributes({
                  socialIconHoverColor: value
                }),
                label: __45(
                  "Icon Color",
                  "digiblocks"
                )
              },
              {
                value: socialIconBackgroundHoverColor,
                onChange: (value) => setAttributes({
                  socialIconBackgroundHoverColor: value
                }),
                label: __45(
                  "Background Color",
                  "digiblocks"
                )
              },
              {
                value: socialIconBorderHoverColor,
                onChange: (value) => setAttributes({
                  socialIconBorderHoverColor: value
                }),
                label: __45(
                  "Border Hover Color",
                  "digiblocks"
                )
              }
            ]
          }
        ));
      }
      return null;
    };
    const renderTabContent = () => {
      switch (activeTab) {
        case "options":
          return /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(
            TabPanelBody40,
            {
              tab: "options",
              name: "general",
              title: __45("General", "digiblocks"),
              initialOpen: true
            },
            /* @__PURE__ */ wp.element.createElement(
              Notice9,
              {
                status: "warning",
                isDismissible: false,
                className: "digiblocks-notice components-base-control"
              },
              __45("This is a placeholder. The actual author information will be displayed from the user profile on the frontend.", "digiblocks")
            ),
            /* @__PURE__ */ wp.element.createElement(
              ToggleGroupControl38,
              {
                label: __45("Layout", "digiblocks"),
                value: layout,
                onChange: (value) => setAttributes({ layout: value }),
                isBlock: true,
                __next40pxDefaultSize: true,
                __nextHasNoMarginBottom: true
              },
              layoutOptions.map((option) => /* @__PURE__ */ wp.element.createElement(
                ToggleGroupControlOption38,
                {
                  key: option.value,
                  value: option.value,
                  label: option.label
                }
              ))
            ),
            /* @__PURE__ */ wp.element.createElement(
              ToggleControl40,
              {
                label: __45("Display Avatar", "digiblocks"),
                checked: displayAvatar,
                onChange: (value) => setAttributes({ displayAvatar: value }),
                __nextHasNoMarginBottom: true
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              ToggleControl40,
              {
                label: __45("Display Name", "digiblocks"),
                checked: displayName,
                onChange: (value) => setAttributes({ displayName: value }),
                __nextHasNoMarginBottom: true
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              ToggleControl40,
              {
                label: __45("Display Bio", "digiblocks"),
                checked: displayBio,
                onChange: (value) => setAttributes({ displayBio: value }),
                help: __45("The bio text must be filled in the user profile page.", "digiblocks"),
                __nextHasNoMarginBottom: true
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              ToggleControl40,
              {
                label: __45("Display Social Icons", "digiblocks"),
                checked: displaySocial,
                onChange: (value) => setAttributes({ displaySocial: value }),
                __nextHasNoMarginBottom: true
              }
            )
          ), displaySocial && /* @__PURE__ */ wp.element.createElement(
            TabPanelBody40,
            {
              tab: "options",
              name: "social",
              title: __45("Social Media", "digiblocks"),
              initialOpen: false
            },
            /* @__PURE__ */ wp.element.createElement(
              Notice9,
              {
                status: "info",
                isDismissible: false,
                className: "digiblocks-notice components-base-control"
              },
              __45("Social links will be pulled from the user profile on the frontend.", "digiblocks")
            ),
            /* @__PURE__ */ wp.element.createElement("p", null, __45("Select which social networks to display:", "digiblocks")),
            socialPlatforms.map((platform) => {
              const isEnabled = socialProfiles && socialProfiles[platform.id] && socialProfiles[platform.id].enabled;
              return /* @__PURE__ */ wp.element.createElement("div", { key: platform.id, style: { marginBottom: "10px" } }, /* @__PURE__ */ wp.element.createElement(
                ToggleControl40,
                {
                  label: platform.label,
                  checked: isEnabled,
                  onChange: () => toggleSocialProfile(platform.id),
                  __nextHasNoMarginBottom: true
                }
              ));
            })
          ));
        case "style":
          return /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(
            TabPanelBody40,
            {
              tab: "style",
              name: "colors",
              title: __45("Colors", "digiblocks"),
              initialOpen: true
            },
            /* @__PURE__ */ wp.element.createElement(
              TabPanel23,
              {
                className: "digiblocks-control-tabs",
                activeClass: "active-tab",
                tabs: stateTabList
              },
              (tab) => renderColorTabContent(tab.name)
            )
          ), displayAvatar && /* @__PURE__ */ wp.element.createElement(
            TabPanelBody40,
            {
              tab: "style",
              name: "avatar",
              title: __45("Avatar", "digiblocks"),
              initialOpen: false
            },
            /* @__PURE__ */ wp.element.createElement(
              TabPanel23,
              {
                className: "digiblocks-control-tabs",
                activeClass: "active-tab",
                tabs: stateTabList
              },
              (tab) => renderAvatarTabContent(tab.name)
            )
          ), displaySocial && /* @__PURE__ */ wp.element.createElement(
            TabPanelBody40,
            {
              tab: "style",
              name: "social",
              title: __45("Social Icons", "digiblocks"),
              initialOpen: false
            },
            /* @__PURE__ */ wp.element.createElement(
              TabPanel23,
              {
                className: "digiblocks-control-tabs",
                activeClass: "active-tab",
                tabs: stateTabList
              },
              (tab) => renderSocialTabContent(tab.name)
            )
          ), /* @__PURE__ */ wp.element.createElement(
            TabPanelBody40,
            {
              tab: "style",
              name: "typo",
              title: __45("Typography", "digiblocks"),
              initialOpen: false
            },
            displayName && /* @__PURE__ */ wp.element.createElement(
              TypographyControl32,
              {
                label: __45(
                  "Name Typography",
                  "digiblocks"
                ),
                value: titleTypography,
                onChange: (value) => setAttributes({
                  titleTypography: value
                }),
                defaults: {
                  fontSize: { desktop: 22, tablet: 20, mobile: 18 },
                  fontSizeUnit: "px",
                  fontWeight: "600",
                  lineHeight: { desktop: 1.4, tablet: 1.3, mobile: 1.2 },
                  lineHeightUnit: "em"
                }
              }
            ),
            displayBio && /* @__PURE__ */ wp.element.createElement(
              TypographyControl32,
              {
                label: __45(
                  "Bio Typography",
                  "digiblocks"
                ),
                value: contentTypography,
                onChange: (value) => setAttributes({
                  contentTypography: value
                }),
                defaults: {
                  fontSize: { desktop: 16, tablet: 15, mobile: 14 },
                  fontSizeUnit: "px",
                  fontWeight: "normal",
                  lineHeight: { desktop: 1.5, tablet: 1.4, mobile: 1.3 },
                  lineHeightUnit: "em"
                }
              }
            )
          ), /* @__PURE__ */ wp.element.createElement(
            TabPanelBody40,
            {
              tab: "style",
              name: "border",
              title: __45("Border & Shadow", "digiblocks"),
              initialOpen: false
            },
            /* @__PURE__ */ wp.element.createElement(
              SelectControl38,
              {
                label: __45("Border Style", "digiblocks"),
                value: borderStyle || "none",
                options: borderStyleOptions,
                onChange: (value) => {
                  setAttributes({
                    borderStyle: value
                  });
                },
                __next40pxDefaultSize: true,
                __nextHasNoMarginBottom: true
              }
            ),
            borderStyle && borderStyle !== "none" && /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(
              PanelColorSettings38,
              {
                title: __45(
                  "Border Color",
                  "digiblocks"
                ),
                enableAlpha: true,
                colorSettings: [
                  {
                    value: borderColor,
                    onChange: (value) => setAttributes({
                      borderColor: value
                    }),
                    label: __45(
                      "Border Color",
                      "digiblocks"
                    )
                  }
                ]
              }
            ), /* @__PURE__ */ wp.element.createElement(
              ResponsiveControl40,
              {
                label: __45("Border Width", "digiblocks")
              },
              /* @__PURE__ */ wp.element.createElement(
                DimensionControl36,
                {
                  values: borderWidth && borderWidth[localActiveDevice] ? borderWidth[localActiveDevice] : {
                    top: 1,
                    right: 1,
                    bottom: 1,
                    left: 1,
                    unit: "px"
                  },
                  onChange: (value) => setAttributes({
                    borderWidth: {
                      ...borderWidth,
                      [localActiveDevice]: value
                    }
                  })
                }
              )
            )),
            /* @__PURE__ */ wp.element.createElement(
              ResponsiveControl40,
              {
                label: __45("Border Radius", "digiblocks")
              },
              /* @__PURE__ */ wp.element.createElement(
                DimensionControl36,
                {
                  values: borderRadius && borderRadius[localActiveDevice] ? borderRadius[localActiveDevice] : {
                    top: 0,
                    right: 0,
                    bottom: 0,
                    left: 0,
                    unit: "px"
                  },
                  onChange: (value) => setAttributes({
                    borderRadius: {
                      ...borderRadius,
                      [localActiveDevice]: value
                    }
                  }),
                  units: [
                    { label: "px", value: "px" },
                    { label: "%", value: "%" }
                  ]
                }
              )
            ),
            /* @__PURE__ */ wp.element.createElement(
              BoxShadowControl28,
              {
                normalValue: boxShadow,
                hoverValue: boxShadowHover,
                onNormalChange: (value) => setAttributes({
                  boxShadow: value
                }),
                onHoverChange: (value) => setAttributes({
                  boxShadowHover: value
                })
              }
            )
          ), /* @__PURE__ */ wp.element.createElement(
            TabPanelBody40,
            {
              tab: "style",
              name: "spacing",
              title: __45("Spacing", "digiblocks"),
              initialOpen: false
            },
            /* @__PURE__ */ wp.element.createElement(
              ResponsiveControl40,
              {
                label: __45("Padding", "digiblocks")
              },
              /* @__PURE__ */ wp.element.createElement(
                DimensionControl36,
                {
                  values: padding && padding[localActiveDevice] ? padding[localActiveDevice] : {
                    top: 30,
                    right: 30,
                    bottom: 30,
                    left: 30,
                    unit: "px"
                  },
                  onChange: (value) => setAttributes({
                    padding: {
                      ...padding,
                      [localActiveDevice]: value
                    }
                  })
                }
              )
            ),
            /* @__PURE__ */ wp.element.createElement(
              ResponsiveControl40,
              {
                label: __45("Margin", "digiblocks")
              },
              /* @__PURE__ */ wp.element.createElement(
                DimensionControl36,
                {
                  values: margin && margin[localActiveDevice] ? margin[localActiveDevice] : {
                    top: 0,
                    right: 0,
                    bottom: 30,
                    left: 0,
                    unit: "px"
                  },
                  onChange: (value) => setAttributes({
                    margin: {
                      ...margin,
                      [localActiveDevice]: value
                    }
                  })
                }
              )
            )
          ));
        case "advanced":
          return /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(
            TabPanelBody40,
            {
              tab: "advanced",
              name: "animation",
              title: __45("Animation", "digiblocks"),
              initialOpen: true
            },
            /* @__PURE__ */ wp.element.createElement(
              SelectControl38,
              {
                label: __45(
                  "Animation Effect",
                  "digiblocks"
                ),
                value: animation,
                options: animationOptions,
                onChange: (value) => setAttributes({
                  animation: value
                }),
                __next40pxDefaultSize: true,
                __nextHasNoMarginBottom: true
              }
            ),
            animation && animation !== "none" && /* @__PURE__ */ wp.element.createElement("div", { style: { marginTop: "10px" } }, /* @__PURE__ */ wp.element.createElement(
              Button37,
              {
                variant: "secondary",
                isSecondary: true,
                onClick: handlePreviewClick,
                style: { width: "100%" }
              },
              __45("Preview Animation", "digiblocks")
            ))
          ), /* @__PURE__ */ wp.element.createElement(
            TabPanelBody40,
            {
              tab: "advanced",
              name: "visibility",
              title: __45("Visibility", "digiblocks"),
              initialOpen: false
            },
            /* @__PURE__ */ wp.element.createElement("div", { className: "components-base-control__help", style: {
              padding: "12px",
              backgroundColor: "#f0f6fc",
              border: "1px solid #c3ddfd",
              borderRadius: "4px",
              marginBottom: "16px"
            } }, /* @__PURE__ */ wp.element.createElement("strong", null, __45("Editor Note:", "digiblocks")), /* @__PURE__ */ wp.element.createElement("br", null), __45("Hidden elements appear with reduced opacity in the editor for easy editing. Visibility changes only take effect on the frontend.", "digiblocks")),
            /* @__PURE__ */ wp.element.createElement(
              ToggleControl40,
              {
                label: __45("Hide on Desktop", "digiblocks"),
                checked: visibility.desktop,
                onChange: (value) => setAttributes({
                  visibility: {
                    ...visibility,
                    desktop: value
                  }
                }),
                __nextHasNoMarginBottom: true
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              ToggleControl40,
              {
                label: __45("Hide on Tablet", "digiblocks"),
                checked: visibility.tablet,
                onChange: (value) => setAttributes({
                  visibility: {
                    ...visibility,
                    tablet: value
                  }
                }),
                __nextHasNoMarginBottom: true
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              ToggleControl40,
              {
                label: __45("Hide on Mobile", "digiblocks"),
                checked: visibility.mobile,
                onChange: (value) => setAttributes({
                  visibility: {
                    ...visibility,
                    mobile: value
                  }
                }),
                __nextHasNoMarginBottom: true
              }
            )
          ), /* @__PURE__ */ wp.element.createElement(
            TabPanelBody40,
            {
              tab: "advanced",
              name: "additional",
              title: __45("Additional", "digiblocks"),
              initialOpen: false
            },
            /* @__PURE__ */ wp.element.createElement("div", { className: "components-base-control html-anchor-control" }, /* @__PURE__ */ wp.element.createElement("div", { className: "components-base-control__field" }, /* @__PURE__ */ wp.element.createElement("label", { className: "components-base-control__label", htmlFor: "html-anchor" }, __45("HTML anchor", "digiblocks")), /* @__PURE__ */ wp.element.createElement(
              "input",
              {
                className: "components-text-control__input",
                type: "text",
                id: "html-anchor",
                value: anchor || "",
                onChange: (e) => setAttributes({ anchor: e.target.value }),
                "aria-describedby": "html-anchor-help",
                autoCapitalize: "none",
                autoComplete: "off"
              }
            )), /* @__PURE__ */ wp.element.createElement("p", { id: "html-anchor-help", className: "components-base-control__help" }, __45(`Enter a word or two \u2014 without spaces \u2014 to make a unique web address just for this block, called an "anchor". Then, you'll be able to link directly to this section of your page.`, "digiblocks"), " ", /* @__PURE__ */ wp.element.createElement(
              "a",
              {
                className: "components-external-link",
                href: "https://wordpress.org/documentation/article/page-jumps/",
                target: "_blank",
                rel: "external noreferrer noopener"
              },
              /* @__PURE__ */ wp.element.createElement("span", { className: "components-external-link__contents" }, __45("Learn more about anchors", "digiblocks")),
              /* @__PURE__ */ wp.element.createElement("span", { className: "components-external-link__icon", "aria-label": "(opens in a new tab)" }, "\u2197")
            ))),
            /* @__PURE__ */ wp.element.createElement("div", { className: "components-base-control" }, /* @__PURE__ */ wp.element.createElement("div", { className: "components-base-control__field" }, /* @__PURE__ */ wp.element.createElement("label", { className: "components-base-control__label", htmlFor: "additional-css-classes" }, __45("Additional CSS class(es)", "digiblocks")), /* @__PURE__ */ wp.element.createElement(
              "input",
              {
                className: "components-text-control__input",
                type: "text",
                id: "additional-css-classes",
                value: customClasses || "",
                onChange: (e) => setAttributes({ customClasses: e.target.value }),
                "aria-describedby": "additional-css-classes-help",
                autoComplete: "off"
              }
            )), /* @__PURE__ */ wp.element.createElement("p", { id: "additional-css-classes-help", className: "components-base-control__help" }, __45("Separate multiple classes with spaces.", "digiblocks")))
          ));
        default:
          return null;
      }
    };
    const blockProps = useBlockProps69({
      className: `digiblocks-author-box ${id} layout-${layout} ${customClasses || ""} ${animation !== "none" ? `animate-${animation}` : ""}`,
      id: anchor || null
    });
    return /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(InspectorControls40, null, /* @__PURE__ */ wp.element.createElement(
      CustomTabPanel40,
      {
        tabs: tabList,
        activeTab,
        onSelect: setActiveTab
      },
      renderTabContent()
    )), /* @__PURE__ */ wp.element.createElement("style", { dangerouslySetInnerHTML: { __html: generateCSS() } }), /* @__PURE__ */ wp.element.createElement("div", { ...blockProps }, displayAvatar && /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-author-avatar" }, /* @__PURE__ */ wp.element.createElement("img", { src: "https://i.pravatar.cc/500", alt: "Author" })), /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-author-content" }, displayName && /* @__PURE__ */ wp.element.createElement("h3", { className: "digiblocks-author-name" }, __45("Author Name", "digiblocks")), displayBio && /* @__PURE__ */ wp.element.createElement("p", { className: "digiblocks-author-description" }, __45("This is a placeholder for the author biography. The actual bio will be pulled from the user profile when displayed on the frontend.", "digiblocks")), displaySocial && /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-author-social" }, socialPlatforms.map((platform) => {
      const isEnabled = socialProfiles && socialProfiles[platform.id] && socialProfiles[platform.id].enabled;
      if (isEnabled) {
        return /* @__PURE__ */ wp.element.createElement("a", { key: platform.id, href: "#", onClick: (e) => e.preventDefault() }, /* @__PURE__ */ wp.element.createElement("span", { dangerouslySetInnerHTML: { __html: platform.icon } }));
      }
      return null;
    })))));
  };
  var edit_default40 = AuthorBoxEdit;

  // blocks/author-box/save.js
  var AuthorBoxSave = () => {
    return null;
  };
  var save_default40 = AuthorBoxSave;

  // blocks/related-posts/edit.js
  var { __: __46 } = window.wp.i18n;
  var {
    useBlockProps: useBlockProps70,
    InspectorControls: InspectorControls41,
    PanelColorSettings: PanelColorSettings39,
    RichText: RichText35
  } = window.wp.blockEditor;
  var {
    TextControl: TextControl20,
    ToggleControl: ToggleControl41,
    SelectControl: SelectControl39,
    RangeControl: RangeControl37,
    TabPanel: TabPanel24,
    Notice: Notice10,
    Button: Button38,
    __experimentalToggleGroupControl: ToggleGroupControl39,
    __experimentalToggleGroupControlOption: ToggleGroupControlOption39
  } = window.wp.components;
  var { useState: useState41, useEffect: useEffect41, useRef: useRef36 } = window.wp.element;
  var { useBlockId: useBlockId41, getDimensionCSS: getDimensionCSS36, animations: animations37, animationPreview: animationPreview37 } = digi.utils;
  var { tabIcons: tabIcons41 } = digi.icons;
  var { ResponsiveButtonGroup: ResponsiveButtonGroup17, ResponsiveControl: ResponsiveControl41, DimensionControl: DimensionControl37, TypographyControl: TypographyControl33, BoxShadowControl: BoxShadowControl29, CustomTabPanel: CustomTabPanel41, TabPanelBody: TabPanelBody41, ResponsiveRangeControl: ResponsiveRangeControl7 } = digi.components;
  var RelatedPostsEdit = ({ attributes, setAttributes, clientId }) => {
    const {
      id,
      anchor,
      visibility,
      customClasses,
      postsToShow,
      columns,
      postStyle,
      displayFeaturedImage,
      displayTitle,
      displayMeta,
      displayExcerpt,
      displayReadMoreButton,
      metaSettings,
      excerptLength,
      readMoreText,
      relationType,
      noRelatedPostsText,
      headingText,
      displayHeading,
      headingColor,
      titleColor,
      titleHoverColor,
      excerptColor,
      catBackgroundColor,
      catColor,
      catHoverBackgroundColor,
      catHoverColor,
      metaColor,
      metaHoverColor,
      buttonBackgroundColor,
      buttonTextColor,
      buttonBackgroundHoverColor,
      buttonTextHoverColor,
      imageMargin,
      contentMargin,
      padding,
      margin,
      itemSpacing,
      headingTypography,
      titleTypography,
      textTypography,
      contentTypography,
      buttonTypography,
      buttonPadding,
      buttonBorderRadius,
      imageSize,
      imageBorderRadius,
      cardStyle,
      cardBackgroundColor,
      cardPadding,
      cardBorderRadius,
      cardBorderStyle,
      cardBorderWidth,
      cardBorderColor,
      cardShadow,
      cardShadowHover,
      animation
    } = attributes;
    useBlockId41(id, clientId, setAttributes);
    const [localActiveDevice, setLocalActiveDevice] = useState41(window.digi.responsiveState.activeDevice);
    const [activeTab, setActiveTab] = useState41(() => {
      if (window.digi.uiState) {
        const savedTab = window.digi.uiState.getActiveTab(clientId);
        if (savedTab)
          return savedTab;
      }
      return "options";
    });
    useEffect41(() => {
      const unsubscribe = window.digi.responsiveState.subscribe((device) => {
        setLocalActiveDevice(device);
      });
      return unsubscribe;
    }, []);
    const previewTimeoutRef = useRef36(null);
    useEffect41(() => {
      if (animation && animation !== "none") {
        const timeoutId = setTimeout(() => {
          animationPreview37(id, animation, animations37, previewTimeoutRef);
        }, 100);
        return () => clearTimeout(timeoutId);
      }
    }, [animation]);
    const handlePreviewClick = () => {
      animationPreview37(id, animation, animations37, previewTimeoutRef);
    };
    const animationOptions = [
      { label: __46("None", "digiblocks"), value: "none" },
      ...Object.keys(animations37).map((animation2) => ({
        label: animation2.replace(/-/g, " ").replace(/\b\w/g, (l) => l.toUpperCase()),
        value: animation2
      }))
    ];
    const tabList = [
      {
        name: "options",
        title: __46("Options", "digiblocks"),
        icon: tabIcons41.optionsIcon
      },
      {
        name: "style",
        title: __46("Style", "digiblocks"),
        icon: tabIcons41.styleIcon
      },
      {
        name: "advanced",
        title: __46("Advanced", "digiblocks"),
        icon: tabIcons41.advancedIcon
      }
    ];
    const stateTabList = [
      {
        name: "normal",
        title: __46("Normal", "digiblocks"),
        className: "digiblocks-tab-1 normal"
      },
      {
        name: "hover",
        title: __46("Hover", "digiblocks"),
        className: "digiblocks-tab-2 hover"
      }
    ];
    const imageSizes = [
      { label: __46("Thumbnail", "digiblocks"), value: "thumbnail" },
      { label: __46("Medium", "digiblocks"), value: "medium" },
      { label: __46("Large", "digiblocks"), value: "large" },
      { label: __46("Full", "digiblocks"), value: "full" }
    ];
    const relationTypeOptions = [
      { label: __46("Category", "digiblocks"), value: "category" },
      { label: __46("Tag", "digiblocks"), value: "tag" },
      { label: __46("Both", "digiblocks"), value: "both" }
    ];
    const borderStyleOptions = [
      { label: __46("None", "digiblocks"), value: "none" },
      { label: __46("Solid", "digiblocks"), value: "solid" },
      { label: __46("Dashed", "digiblocks"), value: "dashed" },
      { label: __46("Dotted", "digiblocks"), value: "dotted" },
      { label: __46("Double", "digiblocks"), value: "double" }
    ];
    const updateMetaSettings = (key, value) => {
      setAttributes({
        metaSettings: {
          ...metaSettings,
          [key]: value
        }
      });
    };
    const generateCSS = () => {
      const activeDevice = localActiveDevice;
      let animationCSS = "";
      if (animation && animation !== "none" && animations37[animation]) {
        animationCSS = animations37[animation].keyframes;
      }
      return `
            /* Related Posts Block - ${id} */
            .${id} {
                ${getDimensionCSS36(padding, "padding", activeDevice)}
                ${getDimensionCSS36(margin, "margin", activeDevice)}
                width: 100%;
            }

            /* Block Heading */
            .${id} .digiblocks-related-posts-heading {
                color: ${headingColor};
                margin-top: 0;
                margin-bottom: 1.5rem;
                ${headingTypography.fontFamily ? `font-family: ${headingTypography.fontFamily};` : ""}
                ${headingTypography.fontSize?.[activeDevice] ? `font-size: ${headingTypography.fontSize[activeDevice]}${headingTypography.fontSizeUnit || "px"};` : ""}
                ${headingTypography.fontWeight ? `font-weight: ${headingTypography.fontWeight};` : ""}
                ${headingTypography.fontStyle ? `font-style: ${headingTypography.fontStyle};` : ""}
                ${headingTypography.textTransform ? `text-transform: ${headingTypography.textTransform};` : ""}
                ${headingTypography.textDecoration ? `text-decoration: ${headingTypography.textDecoration};` : ""}
                ${headingTypography.lineHeight?.[activeDevice] ? `line-height: ${headingTypography.lineHeight[activeDevice]}${headingTypography.lineHeightUnit || "em"};` : ""}
                ${headingTypography.letterSpacing?.[activeDevice] ? `letter-spacing: ${headingTypography.letterSpacing[activeDevice]}${headingTypography.letterSpacingUnit || "px"};` : ""}
            }
            
            /* Grid layout */
            .${id} .digiblocks-posts-container {
                display: ${postStyle === "list" ? "flex" : "grid"};
                ${postStyle === "list" ? `flex-direction: column;` : ""}
                ${postStyle !== "list" ? `grid-template-columns: repeat(${columns[activeDevice]}, 1fr);` : ""}
                gap: ${itemSpacing[activeDevice]}px;
            }
            
            /* List layout */
            .${id}.style-list .digiblocks-post-item {
                flex-direction: row;
                flex-wrap: wrap;
                align-items: stretch;
            }
            
            .${id}.style-list .digiblocks-post-image {
                max-width: 35%;
                width: auto;
            }
            
            .${id}.style-list .digiblocks-post-image img {
                height: 100%;
                object-fit: cover;
            }
            
            .${id}.style-list .digiblocks-post-content {
                flex: 1;
            }
            
            /* Post item */
            .${id} .digiblocks-post-item {
                display: flex;
                flex-direction: column;
                gap: ${imageMargin[activeDevice]}px;
                ${cardStyle ? `
                    background-color: ${cardBackgroundColor};
                    ${getDimensionCSS36(cardPadding, "padding", activeDevice)}
                    ${getDimensionCSS36(cardBorderRadius, "border-radius", activeDevice)}
                    ` : ""}
                
                ${cardStyle && cardBorderStyle !== "none" ? `
                    border-style: ${cardBorderStyle};
                    border-color: ${cardBorderColor};
                    ${getDimensionCSS36(cardBorderWidth, "border-width", activeDevice)}
                    ` : ""}
                
                ${cardStyle && cardShadow?.enable ? `box-shadow: ${cardShadow.horizontal}px ${cardShadow.vertical}px ${cardShadow.blur}px ${cardShadow.spread}px ${cardShadow.color};` : ""}
                transition: all 0.3s ease;
            }

            .${id} .digiblocks-post-item:hover {
                ${cardStyle && cardShadowHover?.enable ? `box-shadow: ${cardShadowHover.horizontal}px ${cardShadowHover.vertical}px ${cardShadowHover.blur}px ${cardShadowHover.spread}px ${cardShadowHover.color};` : ""}
            }
            
            /* Featured image */
            .${id} .digiblocks-post-image {
                width: 100%;
                overflow: hidden;
                ${getDimensionCSS36(imageBorderRadius, "border-radius", activeDevice)}
            }
            
            .${id} .digiblocks-post-image img {
                width: 100%;
                height: auto;
                display: block;
                transition: transform 0.3s ease;
            }

            /* Content */
            .${id} .digiblocks-post-content {
                display: flex;
                flex-direction: column;
                gap: ${contentMargin[activeDevice]}px;
            }
            
            /* Post title */
            .${id} .digiblocks-post-title {
                margin: 0;
                color: ${titleColor};
                ${titleTypography.fontFamily ? `font-family: ${titleTypography.fontFamily};` : ""}
                ${titleTypography.fontSize?.[activeDevice] ? `font-size: ${titleTypography.fontSize[activeDevice]}${titleTypography.fontSizeUnit || "px"};` : ""}
                ${titleTypography.fontWeight ? `font-weight: ${titleTypography.fontWeight};` : ""}
                ${titleTypography.fontStyle ? `font-style: ${titleTypography.fontStyle};` : ""}
                ${titleTypography.textTransform ? `text-transform: ${titleTypography.textTransform};` : ""}
                ${titleTypography.textDecoration ? `text-decoration: ${titleTypography.textDecoration};` : ""}
                ${titleTypography.lineHeight?.[activeDevice] ? `line-height: ${titleTypography.lineHeight[activeDevice]}${titleTypography.lineHeightUnit || "em"};` : ""}
                ${titleTypography.letterSpacing?.[activeDevice] ? `letter-spacing: ${titleTypography.letterSpacing[activeDevice]}${titleTypography.letterSpacingUnit || "px"};` : ""}
            }
            
            .${id} .digiblocks-post-title a {
                color: ${titleColor};
                text-decoration: none;
            }
            
            /* Post excerpt */
            .${id} .digiblocks-post-excerpt {
                color: ${excerptColor};
                ${contentTypography.fontFamily ? `font-family: ${contentTypography.fontFamily};` : ""}
                ${contentTypography.fontSize?.[activeDevice] ? `font-size: ${contentTypography.fontSize[activeDevice]}${contentTypography.fontSizeUnit || "px"};` : ""}
                ${contentTypography.fontWeight ? `font-weight: ${contentTypography.fontWeight};` : ""}
                ${contentTypography.fontStyle ? `font-style: ${contentTypography.fontStyle};` : ""}
                ${contentTypography.textTransform ? `text-transform: ${contentTypography.textTransform};` : ""}
                ${contentTypography.textDecoration ? `text-decoration: ${contentTypography.textDecoration};` : ""}
                ${contentTypography.lineHeight?.[activeDevice] ? `line-height: ${contentTypography.lineHeight[activeDevice]}${contentTypography.lineHeightUnit || "em"};` : ""}
                ${contentTypography.letterSpacing?.[activeDevice] ? `letter-spacing: ${contentTypography.letterSpacing[activeDevice]}${contentTypography.letterSpacingUnit || "px"};` : ""}
            }
            
            /* Categories */
            .${id} .digiblocks-post-categories {
                display: flex;
                flex-wrap: wrap;
                gap: .5rem;
                ${textTypography.fontFamily ? `font-family: ${textTypography.fontFamily};` : ""}
                ${textTypography.fontSize?.[activeDevice] ? `font-size: ${textTypography.fontSize[activeDevice]}${textTypography.fontSizeUnit || "px"};` : ""}
                ${textTypography.fontWeight ? `font-weight: ${textTypography.fontWeight};` : ""}
                ${textTypography.fontStyle ? `font-style: ${textTypography.fontStyle};` : ""}
                ${textTypography.textTransform ? `text-transform: ${textTypography.textTransform};` : ""}
                ${textTypography.textDecoration ? `text-decoration: ${textTypography.textDecoration};` : ""}
                ${textTypography.lineHeight?.[activeDevice] ? `line-height: ${textTypography.lineHeight[activeDevice]}${textTypography.lineHeightUnit || "em"};` : ""}
                ${textTypography.letterSpacing?.[activeDevice] ? `letter-spacing: ${textTypography.letterSpacing[activeDevice]}${textTypography.letterSpacingUnit || "px"};` : ""}
            }
            
            .${id} .digiblocks-post-categories a {
                display: inline-flex;
                border-radius: 3px;
                padding: 3px 5px;
                background-color: ${catBackgroundColor};
                color: ${catColor};
                text-decoration: none;
                transition: all 0.3s ease;
            }
            
            .${id} .digiblocks-post-categories a:hover {
                background-color: ${catHoverBackgroundColor};
                color: ${catHoverColor};
            }

            /* Footer meta */
            .${id} .digiblocks-post-footer-meta {
                display: flex;
                align-items: center;
                gap: 10px;
                ${textTypography.fontFamily ? `font-family: ${textTypography.fontFamily};` : ""}
                ${textTypography.fontSize?.[activeDevice] ? `font-size: ${textTypography.fontSize[activeDevice]}${textTypography.fontSizeUnit || "px"};` : ""}
                ${textTypography.fontWeight ? `font-weight: ${textTypography.fontWeight};` : ""}
                color: ${metaColor};
            }

            .${id} .digiblocks-author-avatar,
            .${id} .digiblocks-author-avatar a {
                display: flex;
            }

            .${id} .digiblocks-author-avatar {
                flex-shrink: 0;
            }

            .${id} .digiblocks-author-avatar img {
                width: 50px;
                height: 50px;
                border-radius: 50%;
                object-fit: cover;
            }

            .${id} .digiblocks-footer-meta-items {
                display: flex;
                flex-wrap: wrap;
                gap: 6px;
                ${textTypography.fontFamily ? `font-family: ${textTypography.fontFamily};` : ""}
                ${textTypography.fontSize?.[activeDevice] ? `font-size: ${textTypography.fontSize[activeDevice]}${textTypography.fontSizeUnit || "px"};` : ""}
                ${textTypography.fontWeight ? `font-weight: ${textTypography.fontWeight};` : ""}
                ${textTypography.fontStyle ? `font-style: ${textTypography.fontStyle};` : ""}
                ${textTypography.textTransform ? `text-transform: ${textTypography.textTransform};` : ""}
                ${textTypography.textDecoration ? `text-decoration: ${textTypography.textDecoration};` : ""}
                ${textTypography.lineHeight?.[activeDevice] ? `line-height: ${textTypography.lineHeight[activeDevice]}${textTypography.lineHeightUnit || "em"};` : ""}
                ${textTypography.letterSpacing?.[activeDevice] ? `letter-spacing: ${textTypography.letterSpacing[activeDevice]}${textTypography.letterSpacingUnit || "px"};` : ""}
            }

            .${id} .digiblocks-footer-meta-items a {
                color: ${metaColor};
                text-decoration: none;
                transition: color 0.3s ease;
            }

            .${id} .digiblocks-footer-meta-items a:hover {
                color: ${metaHoverColor || titleColor};
            }

            /* Footer actions */
            .${id} .digiblocks-post-footer-actions {
                display: flex;
                justify-content: space-between;
                align-items: center;
                flex-wrap: wrap;
                gap: 1rem;
            }
            
            /* Read more button */
            .${id} .digiblocks-post-read-more {
                display: inline-flex;
                background-color: ${buttonBackgroundColor};
                color: ${buttonTextColor};
                ${buttonTypography.fontFamily ? `font-family: ${buttonTypography.fontFamily};` : ""}
                ${buttonTypography.fontSize?.[activeDevice] ? `font-size: ${buttonTypography.fontSize[activeDevice]}${buttonTypography.fontSizeUnit || "px"};` : ""}
                ${buttonTypography.fontWeight ? `font-weight: ${buttonTypography.fontWeight};` : ""}
                ${buttonTypography.fontStyle ? `font-style: ${buttonTypography.fontStyle};` : ""}
                ${buttonTypography.textTransform ? `text-transform: ${buttonTypography.textTransform};` : ""}
                ${buttonTypography.textDecoration ? `text-decoration: ${buttonTypography.textDecoration};` : ""}
                ${buttonTypography.lineHeight?.[activeDevice] ? `line-height: ${buttonTypography.lineHeight[activeDevice]}${buttonTypography.lineHeightUnit || "em"};` : ""}
                ${buttonTypography.letterSpacing?.[activeDevice] ? `letter-spacing: ${buttonTypography.letterSpacing[activeDevice]}${buttonTypography.letterSpacingUnit || "px"};` : ""}
                text-decoration: none;
                ${getDimensionCSS36(buttonPadding, "padding", activeDevice)}
                ${getDimensionCSS36(buttonBorderRadius, "border-radius", activeDevice)}
                transition: all 0.3s ease;
            }

            .${id} .digiblocks-post-read-more:hover {
                background-color: ${buttonBackgroundHoverColor || buttonBackgroundColor};
                color: ${buttonTextHoverColor || buttonTextColor};
            }

            /* Date meta */
            .${id} .digiblocks-post-comments-count {
                color: ${metaColor};
                text-decoration: none;
                transition: color 0.3s ease;
                ${textTypography.fontFamily ? `font-family: ${textTypography.fontFamily};` : ""}
                ${textTypography.fontSize?.[activeDevice] ? `font-size: ${textTypography.fontSize[activeDevice]}${textTypography.fontSizeUnit || "px"};` : ""}
                ${textTypography.fontWeight ? `font-weight: ${textTypography.fontWeight};` : ""}
                ${textTypography.fontStyle ? `font-style: ${textTypography.fontStyle};` : ""}
                ${textTypography.textTransform ? `text-transform: ${textTypography.textTransform};` : ""}
                ${textTypography.textDecoration ? `text-decoration: ${textTypography.textDecoration};` : ""}
                ${textTypography.lineHeight?.[activeDevice] ? `line-height: ${textTypography.lineHeight[activeDevice]}${textTypography.lineHeightUnit || "em"};` : ""}
                ${textTypography.letterSpacing?.[activeDevice] ? `letter-spacing: ${textTypography.letterSpacing[activeDevice]}${textTypography.letterSpacingUnit || "px"};` : ""}
                display: flex;
                align-items: center;
                gap: .5rem;
            }
            
            .${id} .digiblocks-post-comments-count:hover {
                color: ${metaHoverColor || titleColor};
            }
            
            /* Animation keyframes */
            ${animationCSS}

			/* Visibility Controls */
			${visibility.desktop ? `
				@media (min-width: 992px) {
					.${id} {
						opacity: 0.5 !important;
					}
				}
			` : ""}

			${visibility.tablet ? `
				@media (min-width: 768px) and (max-width: 991px) {
					.${id} {
						opacity: 0.5 !important;
					}
				}
			` : ""}

			${visibility.mobile ? `
				@media (max-width: 767px) {
					.${id} {
						opacity: 0.5 !important;
					}
				}
			` : ""}
        `;
    };
    const renderTabContent = () => {
      switch (activeTab) {
        case "options":
          return /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(
            TabPanelBody41,
            {
              tab: "options",
              name: "relation",
              title: __46("Relation", "digiblocks"),
              initialOpen: true
            },
            /* @__PURE__ */ wp.element.createElement(
              Notice10,
              {
                status: "warning",
                isDismissible: false,
                className: "digiblocks-notice components-base-control"
              },
              __46("This is a placeholder. The actual block will show posts related to the current post based on your selection.", "digiblocks")
            ),
            /* @__PURE__ */ wp.element.createElement(
              ToggleGroupControl39,
              {
                label: __46("Relation Type", "digiblocks"),
                value: relationType,
                onChange: (value) => setAttributes({ relationType: value }),
                isBlock: true,
                __next40pxDefaultSize: true,
                __nextHasNoMarginBottom: true
              },
              /* @__PURE__ */ wp.element.createElement(
                ToggleGroupControlOption39,
                {
                  value: "category",
                  label: __46("Category", "digiblocks")
                }
              ),
              /* @__PURE__ */ wp.element.createElement(
                ToggleGroupControlOption39,
                {
                  value: "tag",
                  label: __46("Tag", "digiblocks")
                }
              ),
              /* @__PURE__ */ wp.element.createElement(
                ToggleGroupControlOption39,
                {
                  value: "both",
                  label: __46("Both", "digiblocks")
                }
              )
            ),
            /* @__PURE__ */ wp.element.createElement(
              RangeControl37,
              {
                label: __46("Posts to Show", "digiblocks"),
                value: postsToShow,
                onChange: (value) => setAttributes({ postsToShow: value }),
                min: 1,
                max: 12,
                __next40pxDefaultSize: true,
                __nextHasNoMarginBottom: true
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              TextControl20,
              {
                label: __46("No Related Posts Text", "digiblocks"),
                value: noRelatedPostsText,
                onChange: (value) => setAttributes({ noRelatedPostsText: value }),
                __next40pxDefaultSize: true,
                __nextHasNoMarginBottom: true
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              ToggleControl41,
              {
                label: __46("Display Heading", "digiblocks"),
                checked: displayHeading,
                onChange: (value) => setAttributes({ displayHeading: value }),
                __nextHasNoMarginBottom: true
              }
            ),
            displayHeading && /* @__PURE__ */ wp.element.createElement(
              TextControl20,
              {
                label: __46("Heading Text", "digiblocks"),
                value: headingText,
                onChange: (value) => setAttributes({ headingText: value }),
                __next40pxDefaultSize: true,
                __nextHasNoMarginBottom: true
              }
            )
          ), /* @__PURE__ */ wp.element.createElement(
            TabPanelBody41,
            {
              tab: "options",
              name: "layout",
              title: __46("Layout", "digiblocks"),
              initialOpen: false
            },
            /* @__PURE__ */ wp.element.createElement(
              ToggleGroupControl39,
              {
                label: __46("Post Style", "digiblocks"),
                value: postStyle,
                onChange: (value) => setAttributes({ postStyle: value }),
                isBlock: true,
                __next40pxDefaultSize: true,
                __nextHasNoMarginBottom: true
              },
              /* @__PURE__ */ wp.element.createElement(
                ToggleGroupControlOption39,
                {
                  value: "grid",
                  label: __46("Grid", "digiblocks")
                }
              ),
              /* @__PURE__ */ wp.element.createElement(
                ToggleGroupControlOption39,
                {
                  value: "list",
                  label: __46("List", "digiblocks")
                }
              )
            ),
            postStyle === "grid" && /* @__PURE__ */ wp.element.createElement(
              ResponsiveControl41,
              {
                label: __46("Columns", "digiblocks")
              },
              /* @__PURE__ */ wp.element.createElement(
                RangeControl37,
                {
                  value: columns[localActiveDevice],
                  onChange: (value) => setAttributes({
                    columns: {
                      ...columns,
                      [localActiveDevice]: value
                    }
                  }),
                  min: 1,
                  max: localActiveDevice === "desktop" ? 6 : localActiveDevice === "tablet" ? 4 : 2,
                  __next40pxDefaultSize: true,
                  __nextHasNoMarginBottom: true
                }
              )
            ),
            /* @__PURE__ */ wp.element.createElement(
              ResponsiveControl41,
              {
                label: __46("Item Spacing", "digiblocks")
              },
              /* @__PURE__ */ wp.element.createElement(
                RangeControl37,
                {
                  value: itemSpacing[localActiveDevice],
                  onChange: (value) => setAttributes({
                    itemSpacing: {
                      ...itemSpacing,
                      [localActiveDevice]: value
                    }
                  }),
                  min: 0,
                  max: 80,
                  __next40pxDefaultSize: true,
                  __nextHasNoMarginBottom: true
                }
              )
            ),
            /* @__PURE__ */ wp.element.createElement(
              ToggleControl41,
              {
                label: __46("Card Style", "digiblocks"),
                checked: cardStyle,
                onChange: (value) => setAttributes({ cardStyle: value }),
                help: __46("Enable to show posts as cards with backgrounds and borders", "digiblocks"),
                __nextHasNoMarginBottom: true
              }
            )
          ), /* @__PURE__ */ wp.element.createElement(
            TabPanelBody41,
            {
              tab: "options",
              name: "content",
              title: __46("Content", "digiblocks"),
              initialOpen: false
            },
            /* @__PURE__ */ wp.element.createElement(
              ToggleControl41,
              {
                label: __46("Display Featured Image", "digiblocks"),
                checked: displayFeaturedImage,
                onChange: (value) => setAttributes({ displayFeaturedImage: value }),
                __nextHasNoMarginBottom: true
              }
            ),
            displayFeaturedImage && /* @__PURE__ */ wp.element.createElement(
              SelectControl39,
              {
                label: __46("Image Size", "digiblocks"),
                value: imageSize,
                options: imageSizes,
                onChange: (value) => setAttributes({ imageSize: value }),
                __next40pxDefaultSize: true,
                __nextHasNoMarginBottom: true
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              ToggleControl41,
              {
                label: __46("Display Title", "digiblocks"),
                checked: displayTitle,
                onChange: (value) => setAttributes({ displayTitle: value }),
                __nextHasNoMarginBottom: true
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              ToggleControl41,
              {
                label: __46("Display Meta", "digiblocks"),
                checked: displayMeta,
                onChange: (value) => setAttributes({ displayMeta: value }),
                __nextHasNoMarginBottom: true
              }
            ),
            displayMeta && /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-meta-options", style: { marginLeft: "24px", marginBottom: "16px" } }, /* @__PURE__ */ wp.element.createElement(
              ToggleControl41,
              {
                label: __46("Show Author", "digiblocks"),
                checked: metaSettings.displayAuthor,
                onChange: (value) => updateMetaSettings("displayAuthor", value),
                __nextHasNoMarginBottom: true
              }
            ), /* @__PURE__ */ wp.element.createElement(
              ToggleControl41,
              {
                label: __46("Show Date", "digiblocks"),
                checked: metaSettings.displayDate,
                onChange: (value) => updateMetaSettings("displayDate", value),
                __nextHasNoMarginBottom: true
              }
            ), /* @__PURE__ */ wp.element.createElement(
              ToggleControl41,
              {
                label: __46("Show Categories", "digiblocks"),
                checked: metaSettings.displayCategories,
                onChange: (value) => updateMetaSettings("displayCategories", value),
                __nextHasNoMarginBottom: true
              }
            ), /* @__PURE__ */ wp.element.createElement(
              ToggleControl41,
              {
                label: __46("Show Comments Count", "digiblocks"),
                checked: metaSettings.displayComments,
                onChange: (value) => updateMetaSettings("displayComments", value),
                __nextHasNoMarginBottom: true
              }
            )),
            /* @__PURE__ */ wp.element.createElement(
              ToggleControl41,
              {
                label: __46("Display Excerpt", "digiblocks"),
                checked: displayExcerpt,
                onChange: (value) => setAttributes({ displayExcerpt: value }),
                __nextHasNoMarginBottom: true
              }
            ),
            displayExcerpt && /* @__PURE__ */ wp.element.createElement(
              RangeControl37,
              {
                label: __46("Excerpt Length (words)", "digiblocks"),
                value: excerptLength,
                onChange: (value) => setAttributes({ excerptLength: value }),
                min: 5,
                max: 100,
                __next40pxDefaultSize: true,
                __nextHasNoMarginBottom: true
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              ToggleControl41,
              {
                label: __46("Display Read More Button", "digiblocks"),
                checked: displayReadMoreButton,
                onChange: (value) => setAttributes({ displayReadMoreButton: value }),
                __nextHasNoMarginBottom: true
              }
            ),
            displayReadMoreButton && /* @__PURE__ */ wp.element.createElement(
              TextControl20,
              {
                label: __46("Read More Text", "digiblocks"),
                value: readMoreText,
                onChange: (value) => setAttributes({ readMoreText: value }),
                __next40pxDefaultSize: true,
                __nextHasNoMarginBottom: true
              }
            )
          ));
        case "style":
          return /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(
            TabPanelBody41,
            {
              tab: "style",
              name: "colors",
              title: __46("Colors", "digiblocks"),
              initialOpen: true
            },
            displayHeading && /* @__PURE__ */ wp.element.createElement(
              PanelColorSettings39,
              {
                title: __46("Heading Color", "digiblocks"),
                initialOpen: true,
                enableAlpha: true,
                colorSettings: [
                  {
                    value: headingColor,
                    onChange: (value) => setAttributes({ headingColor: value }),
                    label: __46("Heading Color", "digiblocks")
                  }
                ]
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              TabPanel24,
              {
                className: "digiblocks-control-tabs",
                activeClass: "active-tab",
                tabs: stateTabList
              },
              (tab) => {
                if (tab.name === "normal") {
                  return /* @__PURE__ */ wp.element.createElement(
                    PanelColorSettings39,
                    {
                      title: __46("Colors", "digiblocks"),
                      initialOpen: true,
                      enableAlpha: true,
                      colorSettings: [
                        {
                          value: titleColor,
                          onChange: (value) => setAttributes({ titleColor: value }),
                          label: __46("Title Color", "digiblocks")
                        },
                        {
                          value: excerptColor,
                          onChange: (value) => setAttributes({ excerptColor: value }),
                          label: __46("Excerpt Color", "digiblocks")
                        },
                        {
                          value: catBackgroundColor,
                          onChange: (value) => setAttributes({ catBackgroundColor: value }),
                          label: __46("Categories Background Color", "digiblocks")
                        },
                        {
                          value: catColor,
                          onChange: (value) => setAttributes({ catColor: value }),
                          label: __46("Categories Color", "digiblocks")
                        },
                        {
                          value: metaColor,
                          onChange: (value) => setAttributes({ metaColor: value }),
                          label: __46("Meta Color", "digiblocks")
                        },
                        {
                          value: buttonBackgroundColor,
                          onChange: (value) => setAttributes({ buttonBackgroundColor: value }),
                          label: __46("Button Background", "digiblocks")
                        },
                        {
                          value: buttonTextColor,
                          onChange: (value) => setAttributes({ buttonTextColor: value }),
                          label: __46("Button Text", "digiblocks")
                        }
                      ]
                    }
                  );
                } else {
                  return /* @__PURE__ */ wp.element.createElement(
                    PanelColorSettings39,
                    {
                      title: __46("Hover Colors", "digiblocks"),
                      initialOpen: true,
                      enableAlpha: true,
                      colorSettings: [
                        {
                          value: titleHoverColor,
                          onChange: (value) => setAttributes({ titleHoverColor: value }),
                          label: __46("Title Hover Color", "digiblocks")
                        },
                        {
                          value: catHoverBackgroundColor,
                          onChange: (value) => setAttributes({ catHoverBackgroundColor: value }),
                          label: __46("Categories Hover Background Color", "digiblocks")
                        },
                        {
                          value: catHoverColor,
                          onChange: (value) => setAttributes({ catHoverColor: value }),
                          label: __46("Categories Hover Color", "digiblocks")
                        },
                        {
                          value: metaHoverColor,
                          onChange: (value) => setAttributes({ metaHoverColor: value }),
                          label: __46("Meta Hover Color", "digiblocks")
                        },
                        {
                          value: buttonBackgroundHoverColor,
                          onChange: (value) => setAttributes({ buttonBackgroundHoverColor: value }),
                          label: __46("Button Background Hover", "digiblocks")
                        },
                        {
                          value: buttonTextHoverColor,
                          onChange: (value) => setAttributes({ buttonTextHoverColor: value }),
                          label: __46("Button Text Hover", "digiblocks")
                        }
                      ]
                    }
                  );
                }
              }
            ),
            cardStyle && /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement("h3", null, __46("Card Colors", "digiblocks")), /* @__PURE__ */ wp.element.createElement(
              PanelColorSettings39,
              {
                title: "",
                colorSettings: [
                  {
                    value: cardBackgroundColor,
                    onChange: (value) => setAttributes({ cardBackgroundColor: value }),
                    label: __46("Card Background", "digiblocks")
                  },
                  {
                    value: cardBorderColor,
                    onChange: (value) => setAttributes({ cardBorderColor: value }),
                    label: __46("Card Border", "digiblocks")
                  }
                ]
              }
            ))
          ), /* @__PURE__ */ wp.element.createElement(
            TabPanelBody41,
            {
              tab: "style",
              name: "typography",
              title: __46("Typography", "digiblocks"),
              initialOpen: false
            },
            displayHeading && /* @__PURE__ */ wp.element.createElement(
              TypographyControl33,
              {
                label: __46("Heading Typography", "digiblocks"),
                value: headingTypography,
                onChange: (value) => setAttributes({ headingTypography: value }),
                defaults: {
                  fontSize: { desktop: 24, tablet: 22, mobile: 20 },
                  fontWeight: "600",
                  lineHeight: { desktop: 1.4, tablet: 1.3, mobile: 1.2 }
                }
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              TypographyControl33,
              {
                label: __46("Title Typography", "digiblocks"),
                value: titleTypography,
                onChange: (value) => setAttributes({ titleTypography: value }),
                defaults: {
                  fontSize: { desktop: 20, tablet: 18, mobile: 16 },
                  fontWeight: "600",
                  lineHeight: { desktop: 1.4, tablet: 1.3, mobile: 1.2 }
                }
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              TypographyControl33,
              {
                label: __46("Meta Typography", "digiblocks"),
                value: textTypography,
                onChange: (value) => setAttributes({ textTypography: value }),
                defaults: {
                  fontSize: { desktop: 14, tablet: 13, mobile: 12 },
                  lineHeight: { desktop: 1.4, tablet: 1.3, mobile: 1.2 }
                }
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              TypographyControl33,
              {
                label: __46("Excerpt Typography", "digiblocks"),
                value: contentTypography,
                onChange: (value) => setAttributes({ contentTypography: value }),
                defaults: {
                  fontSize: { desktop: 16, tablet: 15, mobile: 14 },
                  lineHeight: { desktop: 1.5, tablet: 1.4, mobile: 1.3 }
                }
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              TypographyControl33,
              {
                label: __46("Button Typography", "digiblocks"),
                value: buttonTypography,
                onChange: (value) => setAttributes({ buttonTypography: value }),
                defaults: {
                  fontSize: { desktop: 16, tablet: 15, mobile: 14 },
                  fontWeight: "500",
                  lineHeight: { desktop: 1.5, tablet: 1.4, mobile: 1.3 }
                }
              }
            )
          ), /* @__PURE__ */ wp.element.createElement(
            TabPanelBody41,
            {
              tab: "style",
              name: "spacing",
              title: __46("Spacing", "digiblocks"),
              initialOpen: false
            },
            /* @__PURE__ */ wp.element.createElement(
              ResponsiveControl41,
              {
                label: __46("Padding", "digiblocks")
              },
              /* @__PURE__ */ wp.element.createElement(
                DimensionControl37,
                {
                  values: padding[localActiveDevice],
                  onChange: (value) => setAttributes({
                    padding: {
                      ...padding,
                      [localActiveDevice]: value
                    }
                  })
                }
              )
            ),
            /* @__PURE__ */ wp.element.createElement(
              ResponsiveControl41,
              {
                label: __46("Margin", "digiblocks")
              },
              /* @__PURE__ */ wp.element.createElement(
                DimensionControl37,
                {
                  values: margin[localActiveDevice],
                  onChange: (value) => setAttributes({
                    margin: {
                      ...margin,
                      [localActiveDevice]: value
                    }
                  })
                }
              )
            ),
            /* @__PURE__ */ wp.element.createElement(
              ResponsiveControl41,
              {
                label: __46("Image Margin", "digiblocks")
              },
              /* @__PURE__ */ wp.element.createElement(
                RangeControl37,
                {
                  value: imageMargin[localActiveDevice],
                  onChange: (value) => setAttributes({
                    imageMargin: {
                      ...imageMargin,
                      [localActiveDevice]: value
                    }
                  }),
                  min: 1,
                  max: 100,
                  step: 1,
                  defaultValues: {
                    desktop: 15,
                    tablet: 15,
                    mobile: 15
                  },
                  __next40pxDefaultSize: true,
                  __nextHasNoMarginBottom: true
                }
              )
            ),
            /* @__PURE__ */ wp.element.createElement(
              ResponsiveControl41,
              {
                label: __46("Content Margin", "digiblocks")
              },
              /* @__PURE__ */ wp.element.createElement(
                RangeControl37,
                {
                  value: contentMargin[localActiveDevice],
                  onChange: (value) => setAttributes({
                    contentMargin: {
                      ...contentMargin,
                      [localActiveDevice]: value
                    }
                  }),
                  min: 1,
                  max: 100,
                  step: 1,
                  defaultValues: {
                    desktop: 18,
                    tablet: 15,
                    mobile: 15
                  },
                  __next40pxDefaultSize: true,
                  __nextHasNoMarginBottom: true
                }
              )
            ),
            /* @__PURE__ */ wp.element.createElement(
              ResponsiveControl41,
              {
                label: __46("Button Padding", "digiblocks")
              },
              /* @__PURE__ */ wp.element.createElement(
                DimensionControl37,
                {
                  values: buttonPadding[localActiveDevice],
                  onChange: (value) => setAttributes({
                    buttonPadding: {
                      ...buttonPadding,
                      [localActiveDevice]: value
                    }
                  })
                }
              )
            )
          ), /* @__PURE__ */ wp.element.createElement(
            TabPanelBody41,
            {
              tab: "style",
              name: "borders",
              title: __46("Borders & Radius", "digiblocks"),
              initialOpen: false
            },
            /* @__PURE__ */ wp.element.createElement(
              ResponsiveControl41,
              {
                label: __46("Image Border Radius", "digiblocks")
              },
              /* @__PURE__ */ wp.element.createElement(
                DimensionControl37,
                {
                  values: imageBorderRadius[localActiveDevice],
                  onChange: (value) => setAttributes({
                    imageBorderRadius: {
                      ...imageBorderRadius,
                      [localActiveDevice]: value
                    }
                  }),
                  units: [
                    { label: "px", value: "px" },
                    { label: "%", value: "%" }
                  ]
                }
              )
            ),
            /* @__PURE__ */ wp.element.createElement(
              ResponsiveControl41,
              {
                label: __46("Button Border Radius", "digiblocks")
              },
              /* @__PURE__ */ wp.element.createElement(
                DimensionControl37,
                {
                  values: buttonBorderRadius[localActiveDevice],
                  onChange: (value) => setAttributes({
                    buttonBorderRadius: {
                      ...buttonBorderRadius,
                      [localActiveDevice]: value
                    }
                  }),
                  units: [
                    { label: "px", value: "px" },
                    { label: "%", value: "%" }
                  ]
                }
              )
            ),
            cardStyle && /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(
              SelectControl39,
              {
                label: __46("Card Border Style", "digiblocks"),
                value: cardBorderStyle,
                options: borderStyleOptions,
                onChange: (value) => setAttributes({ cardBorderStyle: value }),
                __next40pxDefaultSize: true,
                __nextHasNoMarginBottom: true
              }
            ), cardBorderStyle !== "none" && /* @__PURE__ */ wp.element.createElement(
              ResponsiveControl41,
              {
                label: __46("Card Border Width", "digiblocks")
              },
              /* @__PURE__ */ wp.element.createElement(
                DimensionControl37,
                {
                  values: cardBorderWidth[localActiveDevice],
                  onChange: (value) => setAttributes({
                    cardBorderWidth: {
                      ...cardBorderWidth,
                      [localActiveDevice]: value
                    }
                  })
                }
              )
            ), /* @__PURE__ */ wp.element.createElement(
              ResponsiveControl41,
              {
                label: __46("Card Border Radius", "digiblocks")
              },
              /* @__PURE__ */ wp.element.createElement(
                DimensionControl37,
                {
                  values: cardBorderRadius[localActiveDevice],
                  onChange: (value) => setAttributes({
                    cardBorderRadius: {
                      ...cardBorderRadius,
                      [localActiveDevice]: value
                    }
                  }),
                  units: [
                    { label: "px", value: "px" },
                    { label: "%", value: "%" }
                  ]
                }
              )
            ), /* @__PURE__ */ wp.element.createElement(
              BoxShadowControl29,
              {
                label: __46("Card Shadow", "digiblocks"),
                normalValue: cardShadow,
                hoverValue: cardShadowHover,
                onNormalChange: (value) => setAttributes({ cardShadow: value }),
                onHoverChange: (value) => setAttributes({ cardShadowHover: value })
              }
            ))
          ));
        case "advanced":
          return /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(
            TabPanelBody41,
            {
              tab: "advanced",
              name: "animation",
              title: __46("Animation", "digiblocks"),
              initialOpen: true
            },
            /* @__PURE__ */ wp.element.createElement(
              SelectControl39,
              {
                label: __46("Animation Effect", "digiblocks"),
                value: animation,
                options: animationOptions,
                onChange: (value) => setAttributes({ animation: value }),
                __next40pxDefaultSize: true,
                __nextHasNoMarginBottom: true
              }
            ),
            animation && animation !== "none" && /* @__PURE__ */ wp.element.createElement("div", { style: { marginTop: "10px" } }, /* @__PURE__ */ wp.element.createElement(
              Button38,
              {
                variant: "secondary",
                isSecondary: true,
                onClick: handlePreviewClick,
                style: { width: "100%" }
              },
              __46("Preview Animation", "digiblocks")
            ))
          ), /* @__PURE__ */ wp.element.createElement(
            TabPanelBody41,
            {
              tab: "advanced",
              name: "visibility",
              title: __46("Visibility", "digiblocks"),
              initialOpen: false
            },
            /* @__PURE__ */ wp.element.createElement("div", { className: "components-base-control__help", style: {
              padding: "12px",
              backgroundColor: "#f0f6fc",
              border: "1px solid #c3ddfd",
              borderRadius: "4px",
              marginBottom: "16px"
            } }, /* @__PURE__ */ wp.element.createElement("strong", null, __46("Editor Note:", "digiblocks")), /* @__PURE__ */ wp.element.createElement("br", null), __46("Hidden elements appear with reduced opacity in the editor for easy editing. Visibility changes only take effect on the frontend.", "digiblocks")),
            /* @__PURE__ */ wp.element.createElement(
              ToggleControl41,
              {
                label: __46("Hide on Desktop", "digiblocks"),
                checked: visibility.desktop,
                onChange: (value) => setAttributes({
                  visibility: {
                    ...visibility,
                    desktop: value
                  }
                }),
                __nextHasNoMarginBottom: true
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              ToggleControl41,
              {
                label: __46("Hide on Tablet", "digiblocks"),
                checked: visibility.tablet,
                onChange: (value) => setAttributes({
                  visibility: {
                    ...visibility,
                    tablet: value
                  }
                }),
                __nextHasNoMarginBottom: true
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              ToggleControl41,
              {
                label: __46("Hide on Mobile", "digiblocks"),
                checked: visibility.mobile,
                onChange: (value) => setAttributes({
                  visibility: {
                    ...visibility,
                    mobile: value
                  }
                }),
                __nextHasNoMarginBottom: true
              }
            )
          ), /* @__PURE__ */ wp.element.createElement(
            TabPanelBody41,
            {
              tab: "advanced",
              name: "additional",
              title: __46("Additional", "digiblocks"),
              initialOpen: false
            },
            /* @__PURE__ */ wp.element.createElement("div", { className: "components-base-control html-anchor-control" }, /* @__PURE__ */ wp.element.createElement("div", { className: "components-base-control__field" }, /* @__PURE__ */ wp.element.createElement("label", { className: "components-base-control__label", htmlFor: "html-anchor" }, __46("HTML anchor", "digiblocks")), /* @__PURE__ */ wp.element.createElement(
              "input",
              {
                className: "components-text-control__input",
                type: "text",
                id: "html-anchor",
                value: anchor || "",
                onChange: (e) => setAttributes({ anchor: e.target.value }),
                "aria-describedby": "html-anchor-help",
                autoCapitalize: "none",
                autoComplete: "off"
              }
            )), /* @__PURE__ */ wp.element.createElement("p", { id: "html-anchor-help", className: "components-base-control__help" }, __46(`Enter a word or two \u2014 without spaces \u2014 to make a unique web address just for this block, called an "anchor". Then, you'll be able to link directly to this section of your page.`, "digiblocks"), " ", /* @__PURE__ */ wp.element.createElement(
              "a",
              {
                className: "components-external-link",
                href: "https://wordpress.org/documentation/article/page-jumps/",
                target: "_blank",
                rel: "external noreferrer noopener"
              },
              /* @__PURE__ */ wp.element.createElement("span", { className: "components-external-link__contents" }, __46("Learn more about anchors", "digiblocks")),
              /* @__PURE__ */ wp.element.createElement("span", { className: "components-external-link__icon", "aria-label": "(opens in a new tab)" }, "\u2197")
            ))),
            /* @__PURE__ */ wp.element.createElement("div", { className: "components-base-control" }, /* @__PURE__ */ wp.element.createElement("div", { className: "components-base-control__field" }, /* @__PURE__ */ wp.element.createElement("label", { className: "components-base-control__label", htmlFor: "additional-css-classes" }, __46("Additional CSS class(es)", "digiblocks")), /* @__PURE__ */ wp.element.createElement(
              "input",
              {
                className: "components-text-control__input",
                type: "text",
                id: "additional-css-classes",
                value: customClasses || "",
                onChange: (e) => setAttributes({ customClasses: e.target.value }),
                "aria-describedby": "additional-css-classes-help",
                autoComplete: "off"
              }
            )), /* @__PURE__ */ wp.element.createElement("p", { id: "additional-css-classes-help", className: "components-base-control__help" }, __46("Separate multiple classes with spaces.", "digiblocks")))
          ));
        default:
          return null;
      }
    };
    const blockClasses = `digiblocks-related-posts ${id} style-${postStyle} ${animation !== "none" ? `animate-${animation}` : ""} ${customClasses || ""}`;
    const blockProps = useBlockProps70({
      className: blockClasses,
      id: anchor || null
    });
    const examplePosts = [
      {
        id: 1,
        title: __46("Example Related Post 1", "digiblocks"),
        excerpt: __46("This is a preview of how related posts will appear on your site. The actual posts shown will be related to the current post.", "digiblocks"),
        categories: [__46("Category 1", "digiblocks"), __46("Category 2", "digiblocks")],
        author: {
          name: __46("John Doe", "digiblocks"),
          avatar: "https://i.pravatar.cc/300"
        },
        date: (/* @__PURE__ */ new Date()).toISOString(),
        commentCount: 5
      },
      {
        id: 2,
        title: __46("Example Related Post 2", "digiblocks"),
        excerpt: __46("Related posts are chosen based on categories, tags, or both depending on your selection in the block settings.", "digiblocks"),
        categories: [__46("Category 2", "digiblocks")],
        author: {
          name: __46("Jane Smith", "digiblocks"),
          avatar: "https://i.pravatar.cc/300"
        },
        date: (/* @__PURE__ */ new Date()).toISOString(),
        commentCount: 2
      },
      {
        id: 3,
        title: __46("Example Related Post 3", "digiblocks"),
        excerpt: __46("Configure this block's appearance and settings in the inspector panel. This is just a preview of how it will look.", "digiblocks"),
        categories: [__46("Category 1", "digiblocks"), __46("Category 3", "digiblocks")],
        author: {
          name: __46("Alex Johnson", "digiblocks"),
          avatar: "https://i.pravatar.cc/300"
        },
        date: (/* @__PURE__ */ new Date()).toISOString(),
        commentCount: 0
      }
    ];
    const trimExcerpt = (excerpt, wordCount) => {
      if (!excerpt)
        return "";
      const words = excerpt.split(" ");
      if (words.length <= wordCount)
        return excerpt;
      return words.slice(0, wordCount).join(" ") + "...";
    };
    return /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(InspectorControls41, null, /* @__PURE__ */ wp.element.createElement(
      CustomTabPanel41,
      {
        tabs: tabList,
        activeTab,
        onSelect: setActiveTab
      },
      renderTabContent()
    )), /* @__PURE__ */ wp.element.createElement("style", { dangerouslySetInnerHTML: { __html: generateCSS() } }), /* @__PURE__ */ wp.element.createElement("div", { ...blockProps }, displayHeading && /* @__PURE__ */ wp.element.createElement(
      RichText35,
      {
        tagName: "h3",
        className: "digiblocks-related-posts-heading",
        value: headingText,
        onChange: (value) => setAttributes({ headingText: value }),
        placeholder: __46("Related Posts", "digiblocks")
      }
    ), /* @__PURE__ */ wp.element.createElement("div", { className: `digiblocks-posts-container layout-${postStyle}` }, examplePosts.slice(0, postsToShow).map((post) => /* @__PURE__ */ wp.element.createElement("div", { key: post.id, className: "digiblocks-post-item" }, displayFeaturedImage && /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-post-image" }, /* @__PURE__ */ wp.element.createElement("span", null, /* @__PURE__ */ wp.element.createElement(
      "img",
      {
        src: `https://picsum.photos/1600/900`,
        alt: post.title
      }
    ))), /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-post-content" }, displayTitle && /* @__PURE__ */ wp.element.createElement("h3", { className: "digiblocks-post-title" }, /* @__PURE__ */ wp.element.createElement("a", { href: "#", onClick: (e) => e.preventDefault() }, post.title)), displayExcerpt && /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-post-excerpt" }, trimExcerpt(post.excerpt, excerptLength)), displayMeta && metaSettings.displayCategories && post.categories && /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-post-categories" }, post.categories.map((category, index) => /* @__PURE__ */ wp.element.createElement(
      "a",
      {
        key: index,
        href: "#",
        onClick: (e) => e.preventDefault(),
        className: "digiblocks-category-link"
      },
      category
    ))), displayMeta && /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-post-footer-meta" }, metaSettings.displayAuthor && post.author && /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-author-avatar" }, /* @__PURE__ */ wp.element.createElement("a", { href: "#", onClick: (e) => e.preventDefault() }, /* @__PURE__ */ wp.element.createElement(
      "img",
      {
        src: post.author.avatar,
        alt: post.author.name
      }
    ))), /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-footer-meta-items" }, metaSettings.displayAuthor && post.author && /* @__PURE__ */ wp.element.createElement("span", { className: "digiblocks-posted-by" }, /* @__PURE__ */ wp.element.createElement("span", { className: "digiblocks-meta-prefix" }, __46("by", "digiblocks")), " ", /* @__PURE__ */ wp.element.createElement("a", { href: "#", onClick: (e) => e.preventDefault() }, post.author.name)), metaSettings.displayDate && /* @__PURE__ */ wp.element.createElement("span", { className: "digiblocks-posted-on" }, /* @__PURE__ */ wp.element.createElement("span", { className: "digiblocks-meta-prefix" }, __46("on", "digiblocks")), " ", /* @__PURE__ */ wp.element.createElement("time", { dateTime: post.date }, new Date(post.date).toLocaleDateString("en-US", {
      year: "numeric",
      month: "long",
      day: "numeric"
    }))))), (displayReadMoreButton || displayMeta && metaSettings.displayComments) && /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-post-footer-actions" }, displayReadMoreButton && /* @__PURE__ */ wp.element.createElement("a", { href: "#", onClick: (e) => e.preventDefault(), className: "digiblocks-post-read-more" }, readMoreText), displayMeta && metaSettings.displayComments && /* @__PURE__ */ wp.element.createElement("a", { href: "#", className: "digiblocks-post-comments-count", onClick: (e) => e.preventDefault() }, /* @__PURE__ */ wp.element.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 512 512", width: "1em", height: "1em" }, /* @__PURE__ */ wp.element.createElement("path", { d: "M256 64C125.8 64 32 148.6 32 240c0 37.1 15.5 70.6 40 100c5.2 6.3 8.4 14.8 7.4 23.9c-3.1 27-11.4 52.5-25.7 76.3c-.5 .9-1.1 1.8-1.6 2.6c11.1-2.9 22.2-7 32.7-11.5L91.2 446l-6.4-14.7c17-7.4 33-16.7 48.4-27.4c8.5-5.9 19.4-7.5 29.2-4.2C193 410.1 224.1 416 256 416c130.2 0 224-84.6 224-176s-93.8-176-224-176zM0 240C0 125.2 114.5 32 256 32s256 93.2 256 208s-114.5 208-256 208c-36 0-70.5-6.7-103.8-17.9c-.2-.1-.5 0-.7 .1c-16.9 11.7-34.7 22.1-53.9 30.5C73.6 471.1 44.7 480 16 480c-6.5 0-12.3-3.9-14.8-9.8s-1.1-12.8 3.4-17.4c8.1-8.2 15.2-18.2 21.7-29c11.7-19.6 18.7-40.6 21.3-63.1c0 0-.1-.1-.1-.2C19.6 327.1 0 286.6 0 240z" })), post.commentCount === 0 ? __46("Leave a Comment", "digiblocks") : post.commentCount === 1 ? __46("1 Comment", "digiblocks") : sprintf(__46("%d Comments", "digiblocks"), post.commentCount)))))))));
  };
  var edit_default41 = RelatedPostsEdit;

  // blocks/related-posts/save.js
  var RelatedPostsSave = () => {
    return null;
  };
  var save_default41 = RelatedPostsSave;

  // blocks/post-comments/edit.js
  var { __: __47 } = window.wp.i18n;
  var {
    useBlockProps: useBlockProps71,
    InspectorControls: InspectorControls42,
    PanelColorSettings: PanelColorSettings40,
    RichText: RichText36
  } = window.wp.blockEditor;
  var {
    SelectControl: SelectControl40,
    ToggleControl: ToggleControl42,
    RangeControl: RangeControl38,
    Button: Button39,
    TextControl: TextControl21,
    Notice: Notice11,
    TabPanel: TabPanel25,
    __experimentalToggleGroupControl: ToggleGroupControl40,
    __experimentalToggleGroupControlOption: ToggleGroupControlOption40
  } = window.wp.components;
  var { useState: useState42, useEffect: useEffect42, useRef: useRef37 } = window.wp.element;
  var { useBlockId: useBlockId42, getDimensionCSS: getDimensionCSS37, animations: animations38, animationPreview: animationPreview38 } = digi.utils;
  var { tabIcons: tabIcons42 } = digi.icons;
  var { ResponsiveControl: ResponsiveControl42, DimensionControl: DimensionControl38, TypographyControl: TypographyControl34, BoxShadowControl: BoxShadowControl30, CustomTabPanel: CustomTabPanel42, TabPanelBody: TabPanelBody42, ResponsiveRangeControl: ResponsiveRangeControl8 } = digi.components;
  var PostCommentsEdit = ({ attributes, setAttributes, clientId }) => {
    const {
      id,
      anchor,
      visibility,
      customClasses,
      showAvatars,
      avatarSize,
      commentsPerPage,
      nestedComments,
      commentsOrder,
      displayTitle,
      titleText,
      customFormTitle,
      formTitle,
      displayLoggedIn,
      loggedInText,
      displayCookieConsent,
      cookieConsentText,
      displaySubmitButton,
      submitButtonText,
      displayCancelReply,
      cancelReplyText,
      titleColor,
      linkColor,
      linkHoverColor,
      textColor,
      metaColor,
      metaHoverColor,
      borderColor,
      backgroundColor,
      commentBackgroundColor,
      threadedCommentsBackgroundColor,
      replyButtonColor,
      replyButtonBgColor,
      replyButtonHoverColor,
      replyButtonBgHoverColor,
      formBackgroundColor,
      formInputColor,
      formInputBgColor,
      formInputBorderColor,
      formInputFocusBorderColor,
      submitButtonTextColor,
      submitButtonBgColor,
      submitButtonTextHoverColor,
      submitButtonBgHoverColor,
      padding,
      margin,
      avatarRadius,
      formBorderRadius,
      buttonBorderRadius,
      formPadding,
      buttonPadding,
      titleTypography,
      textTypography,
      contentTypography,
      buttonTypography,
      animation,
      boxShadow,
      boxShadowHover,
      commentBoxShadow,
      commentBoxShadowHover,
      threadedCommentBoxShadow,
      threadedCommentBoxShadowHover,
      formBoxShadow,
      formBoxShadowHover,
      buttonBoxShadow,
      buttonBoxShadowHover,
      borderRadius,
      borderWidth,
      borderStyle,
      commentBorderRadius,
      commentBorderWidth,
      commentBorderStyle,
      threadedCommentBorderRadius,
      threadedCommentBorderWidth,
      threadedCommentBorderStyle,
      formBorderWidth,
      formBorderStyle,
      buttonBorderWidth,
      buttonBorderStyle,
      buttonBorderColor,
      buttonBorderHoverColor
    } = attributes;
    useBlockId42(id, clientId, setAttributes);
    const [localActiveDevice, setLocalActiveDevice] = useState42(window.digi.responsiveState.activeDevice);
    const [activeTab, setActiveTab] = useState42(() => {
      if (window.digi.uiState) {
        const savedTab = window.digi.uiState.getActiveTab(clientId);
        if (savedTab)
          return savedTab;
      }
      return "options";
    });
    useEffect42(() => {
      const unsubscribe = window.digi.responsiveState.subscribe((device) => {
        setLocalActiveDevice(device);
      });
      return unsubscribe;
    }, []);
    const previewTimeoutRef = useRef37(null);
    useEffect42(() => {
      if (animation && animation !== "none") {
        const timeoutId = setTimeout(() => {
          animationPreview38(id, animation, animations38, previewTimeoutRef);
        }, 100);
        return () => clearTimeout(timeoutId);
      }
    }, [animation]);
    const handlePreviewClick = () => {
      animationPreview38(id, animation, animations38, previewTimeoutRef);
    };
    const borderStyleOptions = [
      { label: __47("None", "digiblocks"), value: "none" },
      { label: __47("Solid", "digiblocks"), value: "solid" },
      { label: __47("Dotted", "digiblocks"), value: "dotted" },
      { label: __47("Dashed", "digiblocks"), value: "dashed" },
      { label: __47("Double", "digiblocks"), value: "double" }
    ];
    const animationOptions = [
      { label: __47("None", "digiblocks"), value: "none" },
      ...Object.keys(animations38).map((animation2) => ({
        label: animation2.replace(/-/g, " ").replace(/\b\w/g, (l) => l.toUpperCase()),
        value: animation2
      }))
    ];
    const commentsOrderOptions = [
      { label: __47("Oldest first", "digiblocks"), value: "asc" },
      { label: __47("Newest first", "digiblocks"), value: "desc" }
    ];
    const tabList = [
      {
        name: "options",
        title: __47("Options", "digiblocks"),
        icon: tabIcons42.optionsIcon
      },
      {
        name: "style",
        title: __47("Style", "digiblocks"),
        icon: tabIcons42.styleIcon
      },
      {
        name: "advanced",
        title: __47("Advanced", "digiblocks"),
        icon: tabIcons42.advancedIcon
      }
    ];
    const stateTabList = [
      {
        name: "normal",
        title: __47("Normal", "digiblocks"),
        className: "digiblocks-tab-1 normal"
      },
      {
        name: "hover",
        title: __47("Hover", "digiblocks"),
        className: "digiblocks-tab-2 hover"
      }
    ];
    const generateCSS = () => {
      const activeDevice = localActiveDevice;
      let animationCSS = "";
      if (animation && animation !== "none" && animations38[animation]) {
        animationCSS = animations38[animation].keyframes;
      }
      return `
            /* Comments Block - ${id} */
            .${id} {
                ${getDimensionCSS37(padding, "padding", activeDevice)}
                ${getDimensionCSS37(margin, "margin", activeDevice)}
                width: 100%;
                ${backgroundColor ? `background-color: ${backgroundColor};` : ""}
                ${borderStyle !== "none" ? `
                    border-style: ${borderStyle};
                    border-color: ${borderColor || "#e0e0e0"};
                    ${getDimensionCSS37(borderWidth, "border-width", activeDevice)}
                ` : ""}
                ${getDimensionCSS37(borderRadius, "border-radius", activeDevice)}
                ${boxShadow && boxShadow.enable ? `box-shadow: ${boxShadow.horizontal}px ${boxShadow.vertical}px ${boxShadow.blur}px ${boxShadow.spread}px ${boxShadow.color};transition: all 0.3s ease;` : ""}
            }

			.${id}:hover {
				${boxShadowHover && boxShadowHover.enable ? `box-shadow: ${boxShadowHover.horizontal}px ${boxShadowHover.vertical}px ${boxShadowHover.blur}px ${boxShadowHover.spread}px ${boxShadowHover.color};` : ""}
			}

            /* Comments Title */
            .${id} .digiblocks-comments-title {
                color: ${titleColor || "#333333"};
                margin: 0 0 1.5rem;
                ${titleTypography.fontFamily ? `font-family: ${titleTypography.fontFamily};` : ""}
                ${titleTypography.fontSize?.[activeDevice] ? `font-size: ${titleTypography.fontSize[activeDevice]}${titleTypography.fontSizeUnit || "px"};` : ""}
                ${titleTypography.fontWeight ? `font-weight: ${titleTypography.fontWeight};` : ""}
                ${titleTypography.fontStyle ? `font-style: ${titleTypography.fontStyle};` : ""}
                ${titleTypography.textTransform ? `text-transform: ${titleTypography.textTransform};` : ""}
                ${titleTypography.textDecoration ? `text-decoration: ${titleTypography.textDecoration};` : ""}
                ${titleTypography.lineHeight?.[activeDevice] ? `line-height: ${titleTypography.lineHeight[activeDevice]}${titleTypography.lineHeightUnit || "em"};` : ""}
                ${titleTypography.letterSpacing?.[activeDevice] ? `letter-spacing: ${titleTypography.letterSpacing[activeDevice]}${titleTypography.letterSpacingUnit || "px"};` : ""}
            }
            
            /* Comments List */
            .${id} .digiblocks-comments-list {
                margin: 0;
                padding: 0;
                list-style: none;
            }
            
            /* Comment Item */
            .${id} .digiblocks-comment {
                margin-bottom: 1.5rem;
                ${commentBackgroundColor ? `background-color: ${commentBackgroundColor};` : ""}
                ${commentBorderStyle !== "none" ? `
                    border-style: ${commentBorderStyle};
                    border-color: ${borderColor || "#e0e0e0"};
                    ${getDimensionCSS37(commentBorderWidth, "border-width", activeDevice)}
                ` : ""}
                ${getDimensionCSS37(commentBorderRadius, "border-radius", activeDevice)}
                ${commentBoxShadow && commentBoxShadow.enable ? `box-shadow: ${commentBoxShadow.horizontal}px ${commentBoxShadow.vertical}px ${commentBoxShadow.blur}px ${commentBoxShadow.spread}px ${commentBoxShadow.color};transition: all 0.3s ease;` : ""}
                padding: 1.5rem;
            }

			.${id} .digiblocks-comment:hover {
				${commentBoxShadowHover && commentBoxShadowHover.enable ? `box-shadow: ${commentBoxShadowHover.horizontal}px ${commentBoxShadowHover.vertical}px ${commentBoxShadowHover.blur}px ${commentBoxShadowHover.spread}px ${commentBoxShadowHover.color};` : ""}
			}
            
            /* Nested Comments */
            .${id} .digiblocks-comment-children {
                margin-top: 1.5rem;
                margin-left: 2.5rem;
                list-style: none;
                padding: 0;
            }
            
            .${id} .digiblocks-comment-children .digiblocks-comment {
                ${threadedCommentsBackgroundColor ? `background-color: ${threadedCommentsBackgroundColor};` : ""}
                ${threadedCommentBorderStyle !== "none" ? `
                    border-style: ${threadedCommentBorderStyle};
                    border-color: ${borderColor || "#e0e0e0"};
                    ${getDimensionCSS37(threadedCommentBorderWidth, "border-width", activeDevice)}
                ` : ""}
                ${getDimensionCSS37(threadedCommentBorderRadius, "border-radius", activeDevice)}
                ${threadedCommentBoxShadow && threadedCommentBoxShadow.enable ? `box-shadow: ${threadedCommentBoxShadow.horizontal}px ${threadedCommentBoxShadow.vertical}px ${threadedCommentBoxShadow.blur}px ${threadedCommentBoxShadow.spread}px ${threadedCommentBoxShadow.color};transition: all 0.3s ease;` : ""}
            }

			.${id} .digiblocks-comment-children .digiblocks-comment:hover {
				${threadedCommentBoxShadowHover && threadedCommentBoxShadowHover.enable ? `box-shadow: ${threadedCommentBoxShadowHover.horizontal}px ${threadedCommentBoxShadowHover.vertical}px ${threadedCommentBoxShadowHover.blur}px ${threadedCommentBoxShadowHover.spread}px ${threadedCommentBoxShadowHover.color};` : ""}
			}
            
            /* Comment Header */
            .${id} .digiblocks-comment-header {
                display: flex;
                align-items: center;
                margin-bottom: 0.75rem;
                gap: 1rem;
            }
            
            /* Comment Avatar */
            .${id} .digiblocks-comment-avatar {
                flex-shrink: 0;
            }
            
            .${id} .digiblocks-comment-avatar img {
                width: ${avatarSize[activeDevice]}px;
                height: ${avatarSize[activeDevice]}px;
                ${getDimensionCSS37(avatarRadius, "border-radius", activeDevice)}
                object-fit: cover;
            }
            
            /* Comment Meta */
            .${id} .digiblocks-comment-meta {
                flex-grow: 1;
            }
            
            .${id} .digiblocks-comment-author {
                margin: 0 0 0.25rem;
				color: ${textColor || "#333333"};
                ${contentTypography.fontFamily ? `font-family: ${contentTypography.fontFamily};` : ""}
                ${contentTypography.fontSize?.[activeDevice] ? `font-size: ${contentTypography.fontSize[activeDevice]}${contentTypography.fontSizeUnit || "px"};` : ""}
                ${contentTypography.fontWeight ? `font-weight: ${contentTypography.fontWeight};` : ""}
                ${contentTypography.fontStyle ? `font-style: ${contentTypography.fontStyle};` : ""}
                font-weight: bold;
            }
            
            .${id} .digiblocks-comment-author a {
                color: ${linkColor || "#4a6cf7"};
				text-decoration: none;
            }
            
            .${id} .digiblocks-comment-author a:hover {
                color: ${linkHoverColor || "#333333"};
            }
            
            .${id} .digiblocks-comment-date {
                font-size: 0.875em;
                color: ${metaColor || "#666666"};
                ${textTypography.fontFamily ? `font-family: ${textTypography.fontFamily};` : ""}
                ${textTypography.fontSize?.[activeDevice] ? `font-size: ${textTypography.fontSize[activeDevice]}${textTypography.fontSizeUnit || "px"};` : ""}
                ${textTypography.fontWeight ? `font-weight: ${textTypography.fontWeight};` : ""}
                ${textTypography.fontStyle ? `font-style: ${textTypography.fontStyle};` : ""}
            }
            
            /* Comment Content */
            .${id} .digiblocks-comment-content {
                color: ${textColor || "#333333"};
                ${contentTypography.fontFamily ? `font-family: ${contentTypography.fontFamily};` : ""}
                ${contentTypography.fontSize?.[activeDevice] ? `font-size: ${contentTypography.fontSize[activeDevice]}${contentTypography.fontSizeUnit || "px"};` : ""}
                ${contentTypography.fontWeight ? `font-weight: ${contentTypography.fontWeight};` : ""}
                ${contentTypography.fontStyle ? `font-style: ${contentTypography.fontStyle};` : ""}
                ${contentTypography.lineHeight?.[activeDevice] ? `line-height: ${contentTypography.lineHeight[activeDevice]}${contentTypography.lineHeightUnit || "em"};` : ""}
                margin-bottom: 1rem;
            }
            
            /* Comment Reply Link */
            .${id} .digiblocks-comment-reply {
                text-align: right;
            }
            
            .${id} .digiblocks-comment-reply-link {
                display: inline-block;
                color: ${replyButtonColor || "#4a6cf7"};
                background-color: ${replyButtonBgColor || "transparent"};
                ${buttonTypography.fontFamily ? `font-family: ${buttonTypography.fontFamily};` : ""}
                ${buttonTypography.fontSize?.[activeDevice] ? `font-size: ${buttonTypography.fontSize[activeDevice]}${buttonTypography.fontSizeUnit || "px"};` : ""}
                ${buttonTypography.fontWeight ? `font-weight: ${buttonTypography.fontWeight};` : ""}
                ${buttonBorderStyle !== "none" ? `
                    border-style: ${buttonBorderStyle};
                    border-color: ${buttonBorderColor || "#4a6cf7"};
                    ${getDimensionCSS37(buttonBorderWidth, "border-width", activeDevice)}
                ` : ""}
                ${getDimensionCSS37(buttonBorderRadius, "border-radius", activeDevice)}
                ${getDimensionCSS37(buttonPadding, "padding", activeDevice)}
                ${buttonBoxShadow && buttonBoxShadow.enable ? `box-shadow: ${buttonBoxShadow.horizontal}px ${buttonBoxShadow.vertical}px ${buttonBoxShadow.blur}px ${buttonBoxShadow.spread}px ${buttonBoxShadow.color};` : ""}
                text-decoration: none;
                transition: all 0.3s ease;
            }
            
            .${id} .digiblocks-comment-reply-link:hover {
                color: ${replyButtonHoverColor || "#3a5ce5"};
                background-color: ${replyButtonBgHoverColor || "transparent"};
                ${buttonBorderHoverColor ? `border-color: ${buttonBorderHoverColor};` : ""}
                ${buttonBoxShadowHover && buttonBoxShadowHover.enable ? `box-shadow: ${buttonBoxShadowHover.horizontal}px ${buttonBoxShadowHover.vertical}px ${buttonBoxShadowHover.blur}px ${buttonBoxShadowHover.spread}px ${buttonBoxShadowHover.color};` : ""}
            }
            
            /* Comment Form */
            .${id} .digiblocks-comment-form {
                margin-top: 2rem;
                background-color: ${formBackgroundColor || "#f9f9f9"};
                ${formBorderStyle !== "none" ? `
                    border-style: ${formBorderStyle};
                    border-color: ${borderColor || "#e0e0e0"};
                    ${getDimensionCSS37(formBorderWidth, "border-width", activeDevice)}
                ` : ""}
                ${getDimensionCSS37(formBorderRadius, "border-radius", activeDevice)}
                ${getDimensionCSS37(formPadding, "padding", activeDevice)}
                ${formBoxShadow && formBoxShadow.enable ? `box-shadow: ${formBoxShadow.horizontal}px ${formBoxShadow.vertical}px ${formBoxShadow.blur}px ${formBoxShadow.spread}px ${formBoxShadow.color};transition: all 0.3s ease;` : ""}
            }

			.${id} .digiblocks-comment-form:hover {
				${formBoxShadowHover && formBoxShadowHover.enable ? `box-shadow: ${formBoxShadowHover.horizontal}px ${formBoxShadowHover.vertical}px ${formBoxShadowHover.blur}px ${formBoxShadowHover.spread}px ${formBoxShadowHover.color};` : ""}
			}
            
            .${id} .digiblocks-comment-form-title {
                margin-top: 0;
                margin-bottom: 1rem;
                color: ${titleColor || "#333333"};
                ${titleTypography.fontFamily ? `font-family: ${titleTypography.fontFamily};` : ""}
                ${titleTypography.fontSize?.[activeDevice] ? `font-size: ${titleTypography.fontSize[activeDevice]}${titleTypography.fontSizeUnit || "px"};` : ""}
                ${titleTypography.fontWeight ? `font-weight: ${titleTypography.fontWeight};` : ""}
            }
            
            .${id} .digiblocks-form-row {
                margin-bottom: 1rem;
            }
            
            .${id} .digiblocks-form-label {
                display: block;
                margin-bottom: 0.5rem;
                color: ${textColor || "#333333"};
                ${textTypography.fontFamily ? `font-family: ${textTypography.fontFamily};` : ""}
                ${textTypography.fontSize?.[activeDevice] ? `font-size: ${textTypography.fontSize[activeDevice]}${textTypography.fontSizeUnit || "px"};` : ""}
                ${textTypography.fontWeight ? `font-weight: ${textTypography.fontWeight};` : ""}
            }
            
            .${id} .digiblocks-form-checkbox .digiblocks-form-label {
                margin-bottom: 0;
            }
            
            .${id} .digiblocks-form-input,
            .${id} .digiblocks-form-textarea {
                width: 100%;
                padding: 0.75rem;
                color: ${formInputColor || "#333333"};
                background-color: ${formInputBgColor || "#ffffff"};
                border: 1px solid ${formInputBorderColor || "#d1d5db"};
                border-radius: 4px;
                font-family: inherit;
                font-size: inherit;
                transition: border-color 0.3s ease;
            }
            
            .${id} .digiblocks-form-input:focus,
            .${id} .digiblocks-form-textarea:focus {
                outline: none;
                border-color: ${formInputFocusBorderColor || "#4a6cf7"};
            }
            
            .${id} .digiblocks-form-checkbox {
                display: flex;
                align-items: center;
                gap: 0.5rem;
            }
            
            .${id} .digiblocks-form-checkbox-input {
                margin: 0;
            }
            
            .${id} .digiblocks-form-submit {
                margin-top: 1rem;
                display: inline-flex;
                align-items: center;
                justify-content: center;
                padding: 0.75rem 1.5rem;
                background-color: ${submitButtonBgColor || "#4a6cf7"};
                color: ${submitButtonTextColor || "#ffffff"};
                ${buttonTypography.fontFamily ? `font-family: ${buttonTypography.fontFamily};` : ""}
                ${buttonTypography.fontSize?.[activeDevice] ? `font-size: ${buttonTypography.fontSize[activeDevice]}${buttonTypography.fontSizeUnit || "px"};` : ""}
                ${buttonTypography.fontWeight ? `font-weight: ${buttonTypography.fontWeight};` : ""}
                border: none;
                border-radius: 4px;
                cursor: pointer;
                transition: all 0.3s ease;
            }
            
            .${id} .digiblocks-form-submit:hover {
                background-color: ${submitButtonBgHoverColor || "#3a5ce5"};
                color: ${submitButtonTextHoverColor || "#ffffff"};
            }
            
            .${id} .digiblocks-form-cancel-reply {
                margin-left: 1rem;
                color: ${metaColor || "#666666"};
                text-decoration: none;
                ${textTypography.fontFamily ? `font-family: ${textTypography.fontFamily};` : ""}
                ${textTypography.fontSize?.[activeDevice] ? `font-size: ${textTypography.fontSize[activeDevice]}${textTypography.fontSizeUnit || "px"};` : ""}
                ${textTypography.fontWeight ? `font-weight: ${textTypography.fontWeight};` : ""}
            }
            
            .${id} .digiblocks-logged-in-as {
                margin-bottom: 1rem;
                font-style: italic;
                color: ${metaColor || "#666666"};
                ${textTypography.fontFamily ? `font-family: ${textTypography.fontFamily};` : ""}
                ${textTypography.fontSize?.[activeDevice] ? `font-size: ${textTypography.fontSize[activeDevice]}${textTypography.fontSizeUnit || "px"};` : ""}
                ${textTypography.fontWeight ? `font-weight: ${textTypography.fontWeight};` : ""}
            }
            
            /* Animation keyframes */
            ${animationCSS}

			/* Visibility Controls */
			${visibility.desktop ? `
				@media (min-width: 992px) {
					.${id} {
						opacity: 0.5 !important;
					}
				}
			` : ""}

			${visibility.tablet ? `
				@media (min-width: 768px) and (max-width: 991px) {
					.${id} {
						opacity: 0.5 !important;
					}
				}
			` : ""}

			${visibility.mobile ? `
				@media (max-width: 767px) {
					.${id} {
						opacity: 0.5 !important;
					}
				}
			` : ""}
        `;
    };
    const renderColorTabContent = (tabName) => {
      if (tabName === "normal") {
        return /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(
          PanelColorSettings40,
          {
            title: __47(
              "Text Colors",
              "digiblocks"
            ),
            initialOpen: true,
            enableAlpha: true,
            colorSettings: [
              {
                value: titleColor,
                onChange: (value) => setAttributes({
                  titleColor: value
                }),
                label: __47(
                  "Title Color",
                  "digiblocks"
                )
              },
              {
                value: linkColor,
                onChange: (value) => setAttributes({
                  linkColor: value
                }),
                label: __47(
                  "Name Color",
                  "digiblocks"
                )
              },
              {
                value: textColor,
                onChange: (value) => setAttributes({
                  textColor: value
                }),
                label: __47(
                  "Comment Text Color",
                  "digiblocks"
                )
              },
              {
                value: metaColor,
                onChange: (value) => setAttributes({
                  metaColor: value
                }),
                label: __47(
                  "Meta Text Color",
                  "digiblocks"
                )
              }
            ]
          }
        ), /* @__PURE__ */ wp.element.createElement(
          PanelColorSettings40,
          {
            title: __47(
              "Background Colors",
              "digiblocks"
            ),
            initialOpen: false,
            enableAlpha: true,
            colorSettings: [
              {
                value: backgroundColor,
                onChange: (value) => setAttributes({
                  backgroundColor: value
                }),
                label: __47(
                  "Block Background",
                  "digiblocks"
                )
              },
              {
                value: commentBackgroundColor,
                onChange: (value) => setAttributes({
                  commentBackgroundColor: value
                }),
                label: __47(
                  "Comment Background",
                  "digiblocks"
                )
              },
              {
                value: threadedCommentsBackgroundColor,
                onChange: (value) => setAttributes({
                  threadedCommentsBackgroundColor: value
                }),
                label: __47(
                  "Threaded Comment Background",
                  "digiblocks"
                )
              }
            ]
          }
        ), /* @__PURE__ */ wp.element.createElement(
          PanelColorSettings40,
          {
            title: __47(
              "Border Color",
              "digiblocks"
            ),
            initialOpen: false,
            enableAlpha: true,
            colorSettings: [
              {
                value: borderColor,
                onChange: (value) => setAttributes({
                  borderColor: value
                }),
                label: __47(
                  "Border Color",
                  "digiblocks"
                )
              }
            ]
          }
        ));
      } else if (tabName === "hover") {
        return /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(
          PanelColorSettings40,
          {
            title: __47(
              "Hover Colors",
              "digiblocks"
            ),
            initialOpen: true,
            enableAlpha: true,
            colorSettings: [
              {
                value: metaHoverColor,
                onChange: (value) => setAttributes({
                  metaHoverColor: value
                }),
                label: __47(
                  "Meta Text Hover Color",
                  "digiblocks"
                )
              },
              {
                value: linkHoverColor,
                onChange: (value) => setAttributes({
                  linkHoverColor: value
                }),
                label: __47(
                  "Name Color",
                  "digiblocks"
                )
              }
            ]
          }
        ));
      }
      return null;
    };
    const renderReplyButtonTabContent = (tabName) => {
      if (tabName === "normal") {
        return /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(
          PanelColorSettings40,
          {
            title: __47(
              "Reply Button Colors",
              "digiblocks"
            ),
            initialOpen: true,
            enableAlpha: true,
            colorSettings: [
              {
                value: replyButtonColor,
                onChange: (value) => setAttributes({
                  replyButtonColor: value
                }),
                label: __47(
                  "Text Color",
                  "digiblocks"
                )
              },
              {
                value: replyButtonBgColor,
                onChange: (value) => setAttributes({
                  replyButtonBgColor: value
                }),
                label: __47(
                  "Background Color",
                  "digiblocks"
                )
              },
              {
                value: buttonBorderColor,
                onChange: (value) => setAttributes({
                  buttonBorderColor: value
                }),
                label: __47(
                  "Border Color",
                  "digiblocks"
                )
              }
            ]
          }
        ), /* @__PURE__ */ wp.element.createElement(
          SelectControl40,
          {
            label: __47("Border Style", "digiblocks"),
            value: buttonBorderStyle || "none",
            options: borderStyleOptions,
            onChange: (value) => setAttributes({ buttonBorderStyle: value }),
            __next40pxDefaultSize: true,
            __nextHasNoMarginBottom: true
          }
        ), buttonBorderStyle !== "none" && /* @__PURE__ */ wp.element.createElement(ResponsiveControl42, { label: __47("Border Width", "digiblocks") }, /* @__PURE__ */ wp.element.createElement(
          DimensionControl38,
          {
            values: buttonBorderWidth[localActiveDevice],
            onChange: (value) => setAttributes({
              buttonBorderWidth: {
                ...buttonBorderWidth,
                [localActiveDevice]: value
              }
            }),
            linked: true
          }
        )), /* @__PURE__ */ wp.element.createElement(ResponsiveControl42, { label: __47("Border Radius", "digiblocks") }, /* @__PURE__ */ wp.element.createElement(
          DimensionControl38,
          {
            values: buttonBorderRadius[localActiveDevice],
            onChange: (value) => setAttributes({
              buttonBorderRadius: {
                ...buttonBorderRadius,
                [localActiveDevice]: value
              }
            }),
            linked: true,
            units: [
              { label: "px", value: "px" },
              { label: "%", value: "%" }
            ]
          }
        )), /* @__PURE__ */ wp.element.createElement(ResponsiveControl42, { label: __47("Padding", "digiblocks") }, /* @__PURE__ */ wp.element.createElement(
          DimensionControl38,
          {
            values: buttonPadding[localActiveDevice],
            onChange: (value) => setAttributes({
              buttonPadding: {
                ...buttonPadding,
                [localActiveDevice]: value
              }
            }),
            linked: false
          }
        )), /* @__PURE__ */ wp.element.createElement(
          BoxShadowControl30,
          {
            normalValue: buttonBoxShadow,
            hoverValue: buttonBoxShadowHover,
            onNormalChange: (value) => setAttributes({
              buttonBoxShadow: value
            }),
            onHoverChange: (value) => setAttributes({
              buttonBoxShadowHover: value
            })
          }
        ));
      } else if (tabName === "hover") {
        return /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(
          PanelColorSettings40,
          {
            title: __47(
              "Reply Button Hover Colors",
              "digiblocks"
            ),
            initialOpen: true,
            enableAlpha: true,
            colorSettings: [
              {
                value: replyButtonHoverColor,
                onChange: (value) => setAttributes({
                  replyButtonHoverColor: value
                }),
                label: __47(
                  "Text Hover Color",
                  "digiblocks"
                )
              },
              {
                value: replyButtonBgHoverColor,
                onChange: (value) => setAttributes({
                  replyButtonBgHoverColor: value
                }),
                label: __47(
                  "Background Hover Color",
                  "digiblocks"
                )
              },
              {
                value: buttonBorderHoverColor,
                onChange: (value) => setAttributes({
                  buttonBorderHoverColor: value
                }),
                label: __47(
                  "Border Hover Color",
                  "digiblocks"
                )
              }
            ]
          }
        ));
      }
      return null;
    };
    const renderFormTabContent = () => {
      return /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(
        PanelColorSettings40,
        {
          title: __47(
            "Form Colors",
            "digiblocks"
          ),
          initialOpen: true,
          enableAlpha: true,
          colorSettings: [
            {
              value: formBackgroundColor,
              onChange: (value) => setAttributes({
                formBackgroundColor: value
              }),
              label: __47(
                "Form Background",
                "digiblocks"
              )
            },
            {
              value: formInputColor,
              onChange: (value) => setAttributes({
                formInputColor: value
              }),
              label: __47(
                "Input Text Color",
                "digiblocks"
              )
            },
            {
              value: formInputBgColor,
              onChange: (value) => setAttributes({
                formInputBgColor: value
              }),
              label: __47(
                "Input Background",
                "digiblocks"
              )
            },
            {
              value: formInputBorderColor,
              onChange: (value) => setAttributes({
                formInputBorderColor: value
              }),
              label: __47(
                "Input Border",
                "digiblocks"
              )
            },
            {
              value: formInputFocusBorderColor,
              onChange: (value) => setAttributes({
                formInputFocusBorderColor: value
              }),
              label: __47(
                "Input Focus Border",
                "digiblocks"
              )
            }
          ]
        }
      ), /* @__PURE__ */ wp.element.createElement(
        SelectControl40,
        {
          label: __47("Form Border Style", "digiblocks"),
          value: formBorderStyle || "none",
          options: borderStyleOptions,
          onChange: (value) => setAttributes({ formBorderStyle: value }),
          __next40pxDefaultSize: true,
          __nextHasNoMarginBottom: true
        }
      ), formBorderStyle !== "none" && /* @__PURE__ */ wp.element.createElement(ResponsiveControl42, { label: __47("Form Border Width", "digiblocks") }, /* @__PURE__ */ wp.element.createElement(
        DimensionControl38,
        {
          values: formBorderWidth[localActiveDevice],
          onChange: (value) => setAttributes({
            formBorderWidth: {
              ...formBorderWidth,
              [localActiveDevice]: value
            }
          }),
          linked: true
        }
      )), /* @__PURE__ */ wp.element.createElement(ResponsiveControl42, { label: __47("Form Border Radius", "digiblocks") }, /* @__PURE__ */ wp.element.createElement(
        DimensionControl38,
        {
          values: formBorderRadius[localActiveDevice],
          onChange: (value) => setAttributes({
            formBorderRadius: {
              ...formBorderRadius,
              [localActiveDevice]: value
            }
          }),
          linked: true,
          units: [
            { label: "px", value: "px" },
            { label: "%", value: "%" }
          ]
        }
      )), /* @__PURE__ */ wp.element.createElement(ResponsiveControl42, { label: __47("Form Padding", "digiblocks") }, /* @__PURE__ */ wp.element.createElement(
        DimensionControl38,
        {
          values: formPadding[localActiveDevice],
          onChange: (value) => setAttributes({
            formPadding: {
              ...formPadding,
              [localActiveDevice]: value
            }
          }),
          linked: false
        }
      )), /* @__PURE__ */ wp.element.createElement(
        PanelColorSettings40,
        {
          title: __47(
            "Submit Button Colors",
            "digiblocks"
          ),
          initialOpen: false,
          enableAlpha: true,
          colorSettings: [
            {
              value: submitButtonTextColor,
              onChange: (value) => setAttributes({
                submitButtonTextColor: value
              }),
              label: __47(
                "Text Color",
                "digiblocks"
              )
            },
            {
              value: submitButtonBgColor,
              onChange: (value) => setAttributes({
                submitButtonBgColor: value
              }),
              label: __47(
                "Background Color",
                "digiblocks"
              )
            },
            {
              value: submitButtonTextHoverColor,
              onChange: (value) => setAttributes({
                submitButtonTextHoverColor: value
              }),
              label: __47(
                "Text Hover Color",
                "digiblocks"
              )
            },
            {
              value: submitButtonBgHoverColor,
              onChange: (value) => setAttributes({
                submitButtonBgHoverColor: value
              }),
              label: __47(
                "Background Hover Color",
                "digiblocks"
              )
            }
          ]
        }
      ), /* @__PURE__ */ wp.element.createElement(
        BoxShadowControl30,
        {
          normalValue: formBoxShadow,
          hoverValue: formBoxShadowHover,
          onNormalChange: (value) => setAttributes({
            formBoxShadow: value
          }),
          onHoverChange: (value) => setAttributes({
            formBoxShadowHover: value
          })
        }
      ));
    };
    const renderTabContent = () => {
      switch (activeTab) {
        case "options":
          return /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(
            TabPanelBody42,
            {
              tab: "options",
              name: "general",
              title: __47("General", "digiblocks"),
              initialOpen: true
            },
            /* @__PURE__ */ wp.element.createElement(
              Notice11,
              {
                status: "warning",
                isDismissible: false,
                className: "digiblocks-notice components-base-control"
              },
              __47("This is a placeholder. The actual comments will be displayed on the frontend.", "digiblocks")
            ),
            /* @__PURE__ */ wp.element.createElement(
              ToggleGroupControl40,
              {
                label: __47("Comments Order", "digiblocks"),
                value: commentsOrder,
                onChange: (value) => setAttributes({ commentsOrder: value }),
                isBlock: true,
                __next40pxDefaultSize: true,
                __nextHasNoMarginBottom: true
              },
              commentsOrderOptions.map((option) => /* @__PURE__ */ wp.element.createElement(
                ToggleGroupControlOption40,
                {
                  key: option.value,
                  value: option.value,
                  label: option.label
                }
              ))
            ),
            /* @__PURE__ */ wp.element.createElement(
              RangeControl38,
              {
                label: __47("Comments per page", "digiblocks"),
                value: commentsPerPage,
                onChange: (value) => setAttributes({ commentsPerPage: value }),
                min: 0,
                max: 100,
                step: 1,
                __next40pxDefaultSize: true,
                __nextHasNoMarginBottom: true
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              ToggleControl42,
              {
                label: __47("Show Avatars", "digiblocks"),
                checked: showAvatars,
                onChange: (value) => setAttributes({ showAvatars: value }),
                __nextHasNoMarginBottom: true
              }
            ),
            showAvatars && /* @__PURE__ */ wp.element.createElement(ResponsiveControl42, { label: __47("Avatar Size", "digiblocks") }, /* @__PURE__ */ wp.element.createElement(
              RangeControl38,
              {
                value: avatarSize[localActiveDevice],
                onChange: (value) => setAttributes({
                  avatarSize: {
                    ...avatarSize,
                    [localActiveDevice]: value
                  }
                }),
                min: 20,
                max: 100,
                step: 1,
                __next40pxDefaultSize: true,
                __nextHasNoMarginBottom: true
              }
            )),
            /* @__PURE__ */ wp.element.createElement(
              ToggleControl42,
              {
                label: __47("Enable Nested Comments", "digiblocks"),
                checked: nestedComments,
                onChange: (value) => setAttributes({ nestedComments: value }),
                __nextHasNoMarginBottom: true
              }
            )
          ), /* @__PURE__ */ wp.element.createElement(
            TabPanelBody42,
            {
              tab: "options",
              name: "labels",
              title: __47("Labels", "digiblocks"),
              initialOpen: false
            },
            /* @__PURE__ */ wp.element.createElement(
              ToggleControl42,
              {
                label: __47("Display Title", "digiblocks"),
                checked: displayTitle,
                onChange: (value) => setAttributes({ displayTitle: value }),
                __nextHasNoMarginBottom: true
              }
            ),
            displayTitle && /* @__PURE__ */ wp.element.createElement(
              TextControl21,
              {
                label: __47("Title Text", "digiblocks"),
                value: titleText,
                onChange: (value) => setAttributes({ titleText: value }),
                __next40pxDefaultSize: true,
                __nextHasNoMarginBottom: true
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              ToggleControl42,
              {
                label: __47("Display Custom Form Title", "digiblocks"),
                checked: customFormTitle,
                onChange: (value) => setAttributes({ customFormTitle: value }),
                __nextHasNoMarginBottom: true
              }
            ),
            customFormTitle && /* @__PURE__ */ wp.element.createElement(
              TextControl21,
              {
                label: __47("Form Title", "digiblocks"),
                value: formTitle,
                onChange: (value) => setAttributes({ formTitle: value }),
                __next40pxDefaultSize: true,
                __nextHasNoMarginBottom: true
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              ToggleControl42,
              {
                label: __47("Display Logged In Message", "digiblocks"),
                checked: displayLoggedIn,
                onChange: (value) => setAttributes({ displayLoggedIn: value }),
                __nextHasNoMarginBottom: true
              }
            ),
            displayLoggedIn && /* @__PURE__ */ wp.element.createElement(
              TextControl21,
              {
                label: __47("Logged In Text", "digiblocks"),
                value: loggedInText,
                onChange: (value) => setAttributes({ loggedInText: value }),
                __next40pxDefaultSize: true,
                __nextHasNoMarginBottom: true
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              ToggleControl42,
              {
                label: __47("Display Cookie Consent", "digiblocks"),
                checked: displayCookieConsent,
                onChange: (value) => setAttributes({ displayCookieConsent: value }),
                __nextHasNoMarginBottom: true
              }
            ),
            displayCookieConsent && /* @__PURE__ */ wp.element.createElement(
              TextControl21,
              {
                label: __47("Cookie Consent Text", "digiblocks"),
                value: cookieConsentText,
                onChange: (value) => setAttributes({ cookieConsentText: value }),
                __next40pxDefaultSize: true,
                __nextHasNoMarginBottom: true
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              ToggleControl42,
              {
                label: __47("Custom Submit Button Text", "digiblocks"),
                checked: displaySubmitButton,
                onChange: (value) => setAttributes({ displaySubmitButton: value }),
                __nextHasNoMarginBottom: true
              }
            ),
            displaySubmitButton && /* @__PURE__ */ wp.element.createElement(
              TextControl21,
              {
                label: __47("Submit Button Text", "digiblocks"),
                value: submitButtonText,
                onChange: (value) => setAttributes({ submitButtonText: value }),
                __next40pxDefaultSize: true,
                __nextHasNoMarginBottom: true
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              ToggleControl42,
              {
                label: __47("Custom Cancel Reply Text", "digiblocks"),
                checked: displayCancelReply,
                onChange: (value) => setAttributes({ displayCancelReply: value }),
                __nextHasNoMarginBottom: true
              }
            ),
            displayCancelReply && /* @__PURE__ */ wp.element.createElement(
              TextControl21,
              {
                label: __47("Cancel Reply Text", "digiblocks"),
                value: cancelReplyText,
                onChange: (value) => setAttributes({ cancelReplyText: value }),
                __next40pxDefaultSize: true,
                __nextHasNoMarginBottom: true
              }
            )
          ));
        case "style":
          return /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(
            TabPanelBody42,
            {
              tab: "style",
              name: "colors",
              title: __47("Colors", "digiblocks"),
              initialOpen: true
            },
            /* @__PURE__ */ wp.element.createElement(
              TabPanel25,
              {
                className: "digiblocks-control-tabs",
                activeClass: "active-tab",
                tabs: stateTabList
              },
              (tab) => renderColorTabContent(tab.name)
            )
          ), /* @__PURE__ */ wp.element.createElement(
            TabPanelBody42,
            {
              tab: "style",
              name: "typography",
              title: __47("Typography", "digiblocks"),
              initialOpen: false
            },
            /* @__PURE__ */ wp.element.createElement(
              TypographyControl34,
              {
                label: __47(
                  "Title Typography",
                  "digiblocks"
                ),
                value: titleTypography,
                onChange: (value) => setAttributes({
                  titleTypography: value
                }),
                defaults: {
                  fontSize: { desktop: 24, tablet: 22, mobile: 20 },
                  fontWeight: "600",
                  lineHeight: { desktop: 1.4, tablet: 1.3, mobile: 1.2 }
                }
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              TypographyControl34,
              {
                label: __47(
                  "Comment Typography",
                  "digiblocks"
                ),
                value: contentTypography,
                onChange: (value) => setAttributes({
                  contentTypography: value
                }),
                defaults: {
                  fontSize: { desktop: 16, tablet: 15, mobile: 14 },
                  lineHeight: { desktop: 1.6, tablet: 1.5, mobile: 1.4 }
                }
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              TypographyControl34,
              {
                label: __47(
                  "Meta Typography",
                  "digiblocks"
                ),
                value: textTypography,
                onChange: (value) => setAttributes({
                  textTypography: value
                }),
                defaults: {
                  fontSize: { desktop: 14, tablet: 13, mobile: 12 },
                  lineHeight: { desktop: 1.4, tablet: 1.3, mobile: 1.2 }
                }
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              TypographyControl34,
              {
                label: __47(
                  "Button Typography",
                  "digiblocks"
                ),
                value: buttonTypography,
                onChange: (value) => setAttributes({
                  buttonTypography: value
                }),
                defaults: {
                  fontSize: { desktop: 14, tablet: 13, mobile: 12 },
                  fontWeight: "500",
                  lineHeight: { desktop: 1.5, tablet: 1.4, mobile: 1.3 }
                }
              }
            )
          ), /* @__PURE__ */ wp.element.createElement(
            TabPanelBody42,
            {
              tab: "style",
              name: "spacing",
              title: __47("Spacing", "digiblocks"),
              initialOpen: false
            },
            /* @__PURE__ */ wp.element.createElement(
              ResponsiveControl42,
              {
                label: __47("Padding", "digiblocks")
              },
              /* @__PURE__ */ wp.element.createElement(
                DimensionControl38,
                {
                  values: padding[localActiveDevice],
                  onChange: (value) => setAttributes({
                    padding: {
                      ...padding,
                      [localActiveDevice]: value
                    }
                  })
                }
              )
            ),
            /* @__PURE__ */ wp.element.createElement(
              ResponsiveControl42,
              {
                label: __47("Margin", "digiblocks")
              },
              /* @__PURE__ */ wp.element.createElement(
                DimensionControl38,
                {
                  values: margin[localActiveDevice],
                  onChange: (value) => setAttributes({
                    margin: {
                      ...margin,
                      [localActiveDevice]: value
                    }
                  })
                }
              )
            )
          ), /* @__PURE__ */ wp.element.createElement(
            TabPanelBody42,
            {
              tab: "style",
              name: "borders",
              title: __47("Borders & Radius", "digiblocks"),
              initialOpen: false
            },
            /* @__PURE__ */ wp.element.createElement(
              SelectControl40,
              {
                label: __47("Border Style", "digiblocks"),
                value: borderStyle || "none",
                options: borderStyleOptions,
                onChange: (value) => setAttributes({ borderStyle: value }),
                __next40pxDefaultSize: true,
                __nextHasNoMarginBottom: true
              }
            ),
            borderStyle !== "none" && /* @__PURE__ */ wp.element.createElement(ResponsiveControl42, { label: __47("Border Width", "digiblocks") }, /* @__PURE__ */ wp.element.createElement(
              DimensionControl38,
              {
                values: borderWidth[localActiveDevice],
                onChange: (value) => setAttributes({
                  borderWidth: {
                    ...borderWidth,
                    [localActiveDevice]: value
                  }
                }),
                linked: true
              }
            )),
            /* @__PURE__ */ wp.element.createElement(ResponsiveControl42, { label: __47("Border Radius", "digiblocks") }, /* @__PURE__ */ wp.element.createElement(
              DimensionControl38,
              {
                values: borderRadius[localActiveDevice],
                onChange: (value) => setAttributes({
                  borderRadius: {
                    ...borderRadius,
                    [localActiveDevice]: value
                  }
                }),
                linked: true,
                units: [
                  { label: "px", value: "px" },
                  { label: "%", value: "%" }
                ]
              }
            )),
            /* @__PURE__ */ wp.element.createElement(
              SelectControl40,
              {
                label: __47("Comment Border Style", "digiblocks"),
                value: commentBorderStyle || "none",
                options: borderStyleOptions,
                onChange: (value) => setAttributes({ commentBorderStyle: value }),
                __next40pxDefaultSize: true,
                __nextHasNoMarginBottom: true
              }
            ),
            commentBorderStyle !== "none" && /* @__PURE__ */ wp.element.createElement(ResponsiveControl42, { label: __47("Comment Border Width", "digiblocks") }, /* @__PURE__ */ wp.element.createElement(
              DimensionControl38,
              {
                values: commentBorderWidth[localActiveDevice],
                onChange: (value) => setAttributes({
                  commentBorderWidth: {
                    ...commentBorderWidth,
                    [localActiveDevice]: value
                  }
                }),
                linked: true
              }
            )),
            /* @__PURE__ */ wp.element.createElement(ResponsiveControl42, { label: __47("Comment Border Radius", "digiblocks") }, /* @__PURE__ */ wp.element.createElement(
              DimensionControl38,
              {
                values: commentBorderRadius[localActiveDevice],
                onChange: (value) => setAttributes({
                  commentBorderRadius: {
                    ...commentBorderRadius,
                    [localActiveDevice]: value
                  }
                }),
                linked: true,
                units: [
                  { label: "px", value: "px" },
                  { label: "%", value: "%" }
                ]
              }
            )),
            nestedComments && /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(
              SelectControl40,
              {
                label: __47("Nested Comment Border Style", "digiblocks"),
                value: threadedCommentBorderStyle || "none",
                options: borderStyleOptions,
                onChange: (value) => setAttributes({ threadedCommentBorderStyle: value }),
                __next40pxDefaultSize: true,
                __nextHasNoMarginBottom: true
              }
            ), threadedCommentBorderStyle !== "none" && /* @__PURE__ */ wp.element.createElement(ResponsiveControl42, { label: __47("Nested Comment Border Width", "digiblocks") }, /* @__PURE__ */ wp.element.createElement(
              DimensionControl38,
              {
                values: threadedCommentBorderWidth[localActiveDevice],
                onChange: (value) => setAttributes({
                  threadedCommentBorderWidth: {
                    ...threadedCommentBorderWidth,
                    [localActiveDevice]: value
                  }
                }),
                linked: true
              }
            )), /* @__PURE__ */ wp.element.createElement(ResponsiveControl42, { label: __47("Nested Comment Border Radius", "digiblocks") }, /* @__PURE__ */ wp.element.createElement(
              DimensionControl38,
              {
                values: threadedCommentBorderRadius[localActiveDevice],
                onChange: (value) => setAttributes({
                  threadedCommentBorderRadius: {
                    ...threadedCommentBorderRadius,
                    [localActiveDevice]: value
                  }
                }),
                linked: true,
                units: [
                  { label: "px", value: "px" },
                  { label: "%", value: "%" }
                ]
              }
            ))),
            showAvatars && /* @__PURE__ */ wp.element.createElement(ResponsiveControl42, { label: __47("Avatar Radius", "digiblocks") }, /* @__PURE__ */ wp.element.createElement(
              DimensionControl38,
              {
                values: avatarRadius[localActiveDevice],
                onChange: (value) => setAttributes({
                  avatarRadius: {
                    ...avatarRadius,
                    [localActiveDevice]: value
                  }
                }),
                linked: true,
                units: [
                  { label: "px", value: "px" },
                  { label: "%", value: "%" }
                ]
              }
            )),
            /* @__PURE__ */ wp.element.createElement("div", { style: { marginBottom: "1rem" } }, /* @__PURE__ */ wp.element.createElement(
              BoxShadowControl30,
              {
                label: __47("Block Box Shadow", "digiblocks"),
                normalValue: boxShadow,
                hoverValue: boxShadowHover,
                onNormalChange: (value) => setAttributes({
                  boxShadow: value
                }),
                onHoverChange: (value) => setAttributes({
                  boxShadowHover: value
                })
              }
            )),
            /* @__PURE__ */ wp.element.createElement("div", { style: { marginBottom: "1rem" } }, /* @__PURE__ */ wp.element.createElement(
              BoxShadowControl30,
              {
                label: __47("Comment Box Shadow", "digiblocks"),
                normalValue: commentBoxShadow,
                hoverValue: commentBoxShadowHover,
                onNormalChange: (value) => setAttributes({
                  commentBoxShadow: value
                }),
                onHoverChange: (value) => setAttributes({
                  commentBoxShadowHover: value
                })
              }
            )),
            nestedComments && /* @__PURE__ */ wp.element.createElement("div", { style: { marginBottom: "1rem" } }, /* @__PURE__ */ wp.element.createElement(
              BoxShadowControl30,
              {
                label: __47("Nested Comment Box Shadow", "digiblocks"),
                normalValue: threadedCommentBoxShadow,
                hoverValue: threadedCommentBoxShadowHover,
                onNormalChange: (value) => setAttributes({
                  threadedCommentBoxShadow: value
                }),
                onHoverChange: (value) => setAttributes({
                  threadedCommentBoxShadowHover: value
                })
              }
            ))
          ), /* @__PURE__ */ wp.element.createElement(
            TabPanelBody42,
            {
              tab: "style",
              name: "replyButton",
              title: __47("Reply Button", "digiblocks"),
              initialOpen: false
            },
            /* @__PURE__ */ wp.element.createElement(
              TabPanel25,
              {
                className: "digiblocks-control-tabs",
                activeClass: "active-tab",
                tabs: stateTabList
              },
              (tab) => renderReplyButtonTabContent(tab.name)
            )
          ), /* @__PURE__ */ wp.element.createElement(
            TabPanelBody42,
            {
              tab: "style",
              name: "form",
              title: __47("Comment Form", "digiblocks"),
              initialOpen: false
            },
            renderFormTabContent()
          ));
        case "advanced":
          return /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(
            TabPanelBody42,
            {
              tab: "advanced",
              name: "animation",
              title: __47("Animation", "digiblocks"),
              initialOpen: true
            },
            /* @__PURE__ */ wp.element.createElement(
              SelectControl40,
              {
                label: __47(
                  "Animation Effect",
                  "digiblocks"
                ),
                value: animation,
                options: animationOptions,
                onChange: (value) => setAttributes({
                  animation: value
                }),
                __next40pxDefaultSize: true,
                __nextHasNoMarginBottom: true
              }
            ),
            animation && animation !== "none" && /* @__PURE__ */ wp.element.createElement("div", { style: { marginTop: "10px" } }, /* @__PURE__ */ wp.element.createElement(
              Button39,
              {
                variant: "secondary",
                isSecondary: true,
                onClick: handlePreviewClick,
                style: { width: "100%" }
              },
              __47("Preview Animation", "digiblocks")
            ))
          ), /* @__PURE__ */ wp.element.createElement(
            TabPanelBody42,
            {
              tab: "advanced",
              name: "visibility",
              title: __47("Visibility", "digiblocks"),
              initialOpen: false
            },
            /* @__PURE__ */ wp.element.createElement("div", { className: "components-base-control__help", style: {
              padding: "12px",
              backgroundColor: "#f0f6fc",
              border: "1px solid #c3ddfd",
              borderRadius: "4px",
              marginBottom: "16px"
            } }, /* @__PURE__ */ wp.element.createElement("strong", null, __47("Editor Note:", "digiblocks")), /* @__PURE__ */ wp.element.createElement("br", null), __47("Hidden elements appear with reduced opacity in the editor for easy editing. Visibility changes only take effect on the frontend.", "digiblocks")),
            /* @__PURE__ */ wp.element.createElement(
              ToggleControl42,
              {
                label: __47("Hide on Desktop", "digiblocks"),
                checked: visibility.desktop,
                onChange: (value) => setAttributes({
                  visibility: {
                    ...visibility,
                    desktop: value
                  }
                }),
                __nextHasNoMarginBottom: true
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              ToggleControl42,
              {
                label: __47("Hide on Tablet", "digiblocks"),
                checked: visibility.tablet,
                onChange: (value) => setAttributes({
                  visibility: {
                    ...visibility,
                    tablet: value
                  }
                }),
                __nextHasNoMarginBottom: true
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              ToggleControl42,
              {
                label: __47("Hide on Mobile", "digiblocks"),
                checked: visibility.mobile,
                onChange: (value) => setAttributes({
                  visibility: {
                    ...visibility,
                    mobile: value
                  }
                }),
                __nextHasNoMarginBottom: true
              }
            )
          ), /* @__PURE__ */ wp.element.createElement(
            TabPanelBody42,
            {
              tab: "advanced",
              name: "additional",
              title: __47("Additional", "digiblocks"),
              initialOpen: false
            },
            /* @__PURE__ */ wp.element.createElement("div", { className: "components-base-control html-anchor-control" }, /* @__PURE__ */ wp.element.createElement("div", { className: "components-base-control__field" }, /* @__PURE__ */ wp.element.createElement("label", { className: "components-base-control__label", htmlFor: "html-anchor" }, __47("HTML anchor", "digiblocks")), /* @__PURE__ */ wp.element.createElement(
              "input",
              {
                className: "components-text-control__input",
                type: "text",
                id: "html-anchor",
                value: anchor || "",
                onChange: (e) => setAttributes({ anchor: e.target.value }),
                "aria-describedby": "html-anchor-help",
                autoCapitalize: "none",
                autoComplete: "off"
              }
            )), /* @__PURE__ */ wp.element.createElement("p", { id: "html-anchor-help", className: "components-base-control__help" }, __47(`Enter a word or two \u2014 without spaces \u2014 to make a unique web address just for this block, called an "anchor". Then, you'll be able to link directly to this section of your page.`, "digiblocks"), " ", /* @__PURE__ */ wp.element.createElement(
              "a",
              {
                className: "components-external-link",
                href: "https://wordpress.org/documentation/article/page-jumps/",
                target: "_blank",
                rel: "external noreferrer noopener"
              },
              /* @__PURE__ */ wp.element.createElement("span", { className: "components-external-link__contents" }, __47("Learn more about anchors", "digiblocks")),
              /* @__PURE__ */ wp.element.createElement("span", { className: "components-external-link__icon", "aria-label": "(opens in a new tab)" }, "\u2197")
            ))),
            /* @__PURE__ */ wp.element.createElement("div", { className: "components-base-control" }, /* @__PURE__ */ wp.element.createElement("div", { className: "components-base-control__field" }, /* @__PURE__ */ wp.element.createElement("label", { className: "components-base-control__label", htmlFor: "additional-css-classes" }, __47("Additional CSS class(es)", "digiblocks")), /* @__PURE__ */ wp.element.createElement(
              "input",
              {
                className: "components-text-control__input",
                type: "text",
                id: "additional-css-classes",
                value: customClasses || "",
                onChange: (e) => setAttributes({ customClasses: e.target.value }),
                "aria-describedby": "additional-css-classes-help",
                autoComplete: "off"
              }
            )), /* @__PURE__ */ wp.element.createElement("p", { id: "additional-css-classes-help", className: "components-base-control__help" }, __47("Separate multiple classes with spaces.", "digiblocks")))
          ));
        default:
          return null;
      }
    };
    const blockClasses = `digiblocks-comments ${id} ${animation !== "none" ? `animate-${animation}` : ""} ${customClasses || ""}`;
    const blockProps = useBlockProps71({
      className: blockClasses,
      id: anchor || null
    });
    const exampleComments = [
      {
        id: 1,
        author: "John Smith",
        authorUrl: "#",
        avatarUrl: "https://i.pravatar.cc/150",
        date: "3 days ago",
        content: "This is an example comment. The actual comments will be displayed from WordPress database on the frontend. This block allows you to style how the comments look.",
        children: [
          {
            id: 2,
            author: "Sarah Johnson",
            authorUrl: "#",
            avatarUrl: "https://i.pravatar.cc/150",
            date: "2 days ago",
            content: "This is a reply to the above comment. You can customize the appearance of nested comments separately from top-level comments."
          }
        ]
      },
      {
        id: 3,
        author: "Michael Brown",
        authorUrl: "#",
        avatarUrl: "https://i.pravatar.cc/150",
        date: "1 day ago",
        content: "Another example comment. You can control many aspects of the comments appearance including typography, colors, spacing, and more."
      }
    ];
    const renderComment = (comment, isChild = false) => {
      return /* @__PURE__ */ wp.element.createElement("li", { key: comment.id, className: "digiblocks-comment" }, /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-comment-header" }, showAvatars && /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-comment-avatar" }, /* @__PURE__ */ wp.element.createElement("img", { src: comment.avatarUrl, alt: comment.author })), /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-comment-meta" }, /* @__PURE__ */ wp.element.createElement("h4", { className: "digiblocks-comment-author" }, /* @__PURE__ */ wp.element.createElement("a", { href: comment.authorUrl }, comment.author)), /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-comment-date" }, comment.date))), /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-comment-content" }, /* @__PURE__ */ wp.element.createElement("p", null, comment.content)), /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-comment-reply" }, /* @__PURE__ */ wp.element.createElement("a", { href: "#", className: "digiblocks-comment-reply-link", onClick: (e) => e.preventDefault() }, __47("Reply", "digiblocks"))), nestedComments && comment.children && comment.children.length > 0 && /* @__PURE__ */ wp.element.createElement("ul", { className: "digiblocks-comment-children" }, comment.children.map((childComment) => renderComment(childComment, true))));
    };
    const renderForm = () => {
      return /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-comment-form" }, customFormTitle && /* @__PURE__ */ wp.element.createElement("h3", { className: "digiblocks-comment-form-title" }, formTitle || __47("Leave a Reply", "digiblocks")), displayLoggedIn && /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-logged-in-as" }, loggedInText || __47("Logged in as admin. Log out?", "digiblocks")), /* @__PURE__ */ wp.element.createElement("form", null, /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-form-row" }, /* @__PURE__ */ wp.element.createElement("label", { htmlFor: "comment", className: "digiblocks-form-label" }, __47("Comment", "digiblocks")), /* @__PURE__ */ wp.element.createElement("textarea", { id: "comment", className: "digiblocks-form-textarea", rows: "6" })), /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-form-row digiblocks-form-row-name" }, /* @__PURE__ */ wp.element.createElement("label", { htmlFor: "author", className: "digiblocks-form-label" }, __47("Name", "digiblocks")), /* @__PURE__ */ wp.element.createElement("input", { id: "author", className: "digiblocks-form-input", type: "text" })), /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-form-row digiblocks-form-row-email" }, /* @__PURE__ */ wp.element.createElement("label", { htmlFor: "email", className: "digiblocks-form-label" }, __47("Email", "digiblocks")), /* @__PURE__ */ wp.element.createElement("input", { id: "email", className: "digiblocks-form-input", type: "email" })), /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-form-row digiblocks-form-row-website" }, /* @__PURE__ */ wp.element.createElement("label", { htmlFor: "url", className: "digiblocks-form-label" }, __47("Website", "digiblocks")), /* @__PURE__ */ wp.element.createElement("input", { id: "url", className: "digiblocks-form-input", type: "url" })), displayCookieConsent && /* @__PURE__ */ wp.element.createElement("div", { className: "digiblocks-form-row digiblocks-form-checkbox" }, /* @__PURE__ */ wp.element.createElement(
        "input",
        {
          type: "checkbox",
          id: "wp-comment-cookies-consent",
          className: "digiblocks-form-checkbox-input"
        }
      ), /* @__PURE__ */ wp.element.createElement("label", { htmlFor: "wp-comment-cookies-consent", className: "digiblocks-form-label" }, cookieConsentText || __47("Save my name, email, and website in this browser for the next time I comment.", "digiblocks"))), /* @__PURE__ */ wp.element.createElement("button", { type: "button", className: "digiblocks-form-submit" }, submitButtonText || __47("Post Comment", "digiblocks")), displayCancelReply && /* @__PURE__ */ wp.element.createElement("a", { href: "#", className: "digiblocks-form-cancel-reply", onClick: (e) => e.preventDefault() }, cancelReplyText || __47("Cancel reply", "digiblocks"))));
    };
    return /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(InspectorControls42, null, /* @__PURE__ */ wp.element.createElement(
      CustomTabPanel42,
      {
        tabs: tabList,
        activeTab,
        onSelect: setActiveTab
      },
      renderTabContent()
    )), /* @__PURE__ */ wp.element.createElement("style", { dangerouslySetInnerHTML: { __html: generateCSS() } }), /* @__PURE__ */ wp.element.createElement("div", { ...blockProps }, displayTitle && /* @__PURE__ */ wp.element.createElement("h3", { className: "digiblocks-comments-title" }, titleText || __47("Comments", "digiblocks")), /* @__PURE__ */ wp.element.createElement("ul", { className: "digiblocks-comments-list" }, exampleComments.map((comment) => renderComment(comment))), renderForm()));
  };
  var edit_default42 = PostCommentsEdit;

  // blocks/post-comments/save.js
  var PostCommentsSave = () => {
    return null;
  };
  var save_default42 = PostCommentsSave;

  // blocks/copyright/edit.js
  var { __: __48 } = window.wp.i18n;
  var {
    useBlockProps: useBlockProps72,
    InspectorControls: InspectorControls43,
    PanelColorSettings: PanelColorSettings41,
    RichText: RichText37
  } = window.wp.blockEditor;
  var {
    TextareaControl: TextareaControl3,
    ToggleControl: ToggleControl43,
    SelectControl: SelectControl41,
    Button: Button40,
    TabPanel: TabPanel26,
    __experimentalToggleGroupControl: ToggleGroupControl41,
    __experimentalToggleGroupControlOption: ToggleGroupControlOption41
  } = window.wp.components;
  var { useState: useState43, useEffect: useEffect43, useRef: useRef38 } = window.wp.element;
  var { useBlockId: useBlockId43, getDimensionCSS: getDimensionCSS38, animations: animations39, animationPreview: animationPreview39 } = digi.utils;
  var { tabIcons: tabIcons43 } = digi.icons;
  var { ResponsiveButtonGroup: ResponsiveButtonGroup18, ResponsiveControl: ResponsiveControl43, DimensionControl: DimensionControl39, TypographyControl: TypographyControl35, CustomTabPanel: CustomTabPanel43, TabPanelBody: TabPanelBody43 } = digi.components;
  var CopyrightEdit = ({ attributes, setAttributes, clientId }) => {
    const {
      id,
      anchor,
      visibility,
      customClasses,
      copyrightText,
      textAlign,
      textColor,
      textHoverColor,
      linkColor,
      linkHoverColor,
      typography,
      padding,
      margin,
      animation
    } = attributes;
    useBlockId43(id, clientId, setAttributes);
    const [localActiveDevice, setLocalActiveDevice] = useState43(window.digi.responsiveState.activeDevice);
    const [activeTab, setActiveTab] = useState43(() => {
      if (window.digi.uiState) {
        const savedTab = window.digi.uiState.getActiveTab(clientId);
        if (savedTab)
          return savedTab;
      }
      return "options";
    });
    useEffect43(() => {
      const unsubscribe = window.digi.responsiveState.subscribe((device) => {
        setLocalActiveDevice(device);
      });
      return unsubscribe;
    }, []);
    const previewTimeoutRef = useRef38(null);
    useEffect43(() => {
      if (animation && animation !== "none") {
        const timeoutId = setTimeout(() => {
          animationPreview39(id, animation, animations39, previewTimeoutRef);
        }, 100);
        return () => clearTimeout(timeoutId);
      }
    }, [animation]);
    const handlePreviewClick = () => {
      animationPreview39(id, animation, animations39, previewTimeoutRef);
    };
    const animationOptions = [
      { label: __48("None", "digiblocks"), value: "none" },
      ...Object.keys(animations39).map((animation2) => ({
        label: animation2.replace(/-/g, " ").replace(/\b\w/g, (l) => l.toUpperCase()),
        value: animation2
      }))
    ];
    const tabList = [
      {
        name: "options",
        title: __48("Options", "digiblocks"),
        icon: tabIcons43.optionsIcon
      },
      {
        name: "style",
        title: __48("Style", "digiblocks"),
        icon: tabIcons43.styleIcon
      },
      {
        name: "advanced",
        title: __48("Advanced", "digiblocks"),
        icon: tabIcons43.advancedIcon
      }
    ];
    const stateTabList = [
      {
        name: "normal",
        title: __48("Normal", "digiblocks"),
        className: "digiblocks-tab-1 normal"
      },
      {
        name: "hover",
        title: __48("Hover", "digiblocks"),
        className: "digiblocks-tab-2 hover"
      }
    ];
    const generateCSS = () => {
      const activeDevice = localActiveDevice;
      let animationCSS = "";
      if (animation && animation !== "none" && animations39[animation]) {
        animationCSS = animations39[animation].keyframes;
      }
      let typographyCSS = "";
      if (typography) {
        if (typography.fontFamily) {
          typographyCSS += `font-family: ${typography.fontFamily};`;
        }
        if (typography.fontSize && typography.fontSize[activeDevice]) {
          typographyCSS += `font-size: ${typography.fontSize[activeDevice]}${typography.fontSizeUnit || "px"};`;
        }
        if (typography.fontWeight) {
          typographyCSS += `font-weight: ${typography.fontWeight};`;
        }
        if (typography.fontStyle) {
          typographyCSS += `font-style: ${typography.fontStyle};`;
        }
        if (typography.textTransform) {
          typographyCSS += `text-transform: ${typography.textTransform};`;
        }
        if (typography.textDecoration) {
          typographyCSS += `text-decoration: ${typography.textDecoration};`;
        }
        if (typography.lineHeight && typography.lineHeight[activeDevice]) {
          typographyCSS += `line-height: ${typography.lineHeight[activeDevice]}${typography.lineHeightUnit || "em"};`;
        }
        if (typography.letterSpacing && typography.letterSpacing[activeDevice]) {
          typographyCSS += `letter-spacing: ${typography.letterSpacing[activeDevice]}${typography.letterSpacingUnit || "px"};`;
        }
      }
      return `
            /* Copyright Block - ${id} */
            .${id} {
                text-align: ${textAlign[activeDevice] || "left"};
                color: ${textColor || "#666666"};
                ${typographyCSS}
                ${getDimensionCSS38(padding, "padding", activeDevice)}
                ${getDimensionCSS38(margin, "margin", activeDevice)}
                transition: color 0.3s ease;
            }

            .${id}:hover {
                ${textHoverColor ? `color: ${textHoverColor};` : ""}
            }

            .${id} strong {
                color: inherit;
            }

            .${id} a {
                color: ${linkColor || textColor || "#666666"};
                text-decoration: inherit;
                transition: color 0.3s ease;
            }

            .${id} a:hover {
                color: ${linkHoverColor || linkColor || textColor || "#666666"};
            }
            
            /* Animation keyframes */
            ${animationCSS}

			/* Visibility Controls */
			${visibility.desktop ? `
				@media (min-width: 992px) {
					.${id} {
						opacity: 0.5 !important;
					}
				}
			` : ""}

			${visibility.tablet ? `
				@media (min-width: 768px) and (max-width: 991px) {
					.${id} {
						opacity: 0.5 !important;
					}
				}
			` : ""}

			${visibility.mobile ? `
				@media (max-width: 767px) {
					.${id} {
						opacity: 0.5 !important;
					}
				}
			` : ""}
        `;
    };
    const processPreviewText = (text) => {
      if (!text)
        return "";
      const currentYear = (/* @__PURE__ */ new Date()).getFullYear();
      const siteName = "Your Site Name";
      const siteUrl = "https://yoursite.com";
      return text.replace(/{year}/g, currentYear).replace(/{sitename}/g, siteName).replace(/{siteurl}/g, `<a href="${siteUrl}">${siteName}</a>`);
    };
    const renderTabContent = () => {
      switch (activeTab) {
        case "options":
          return /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(
            TabPanelBody43,
            {
              tab: "options",
              name: "content",
              title: __48("Content", "digiblocks"),
              initialOpen: true
            },
            /* @__PURE__ */ wp.element.createElement(
              TextareaControl3,
              {
                label: __48("Copyright Text", "digiblocks"),
                value: copyrightText,
                onChange: (value) => setAttributes({ copyrightText: value }),
                placeholder: __48("\xA9 {year} {sitename}. All rights reserved.", "digiblocks"),
                help: __48("Use {year} for current year, {sitename} for site name, and {siteurl} for site name with link.", "digiblocks"),
                rows: 3,
                __nextHasNoMarginBottom: true
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              ResponsiveButtonGroup18,
              {
                label: __48("Text Alignment", "digiblocks"),
                value: textAlign,
                onChange: (value) => setAttributes({ textAlign: value }),
                options: [
                  { label: __48("Left", "digiblocks"), value: "left" },
                  { label: __48("Center", "digiblocks"), value: "center" },
                  { label: __48("Right", "digiblocks"), value: "right" }
                ]
              }
            )
          ));
        case "style":
          return /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(
            TabPanelBody43,
            {
              tab: "style",
              name: "colors",
              title: __48("Colors", "digiblocks"),
              initialOpen: true
            },
            /* @__PURE__ */ wp.element.createElement(
              TabPanel26,
              {
                className: "digiblocks-control-tabs",
                activeClass: "active-tab",
                tabs: stateTabList
              },
              (tab) => {
                if (tab.name === "normal") {
                  return /* @__PURE__ */ wp.element.createElement(
                    PanelColorSettings41,
                    {
                      title: __48("Colors", "digiblocks"),
                      initialOpen: true,
                      enableAlpha: true,
                      colorSettings: [
                        {
                          value: textColor,
                          onChange: (value) => setAttributes({ textColor: value }),
                          label: __48("Text Color", "digiblocks")
                        },
                        {
                          value: linkColor,
                          onChange: (value) => setAttributes({ linkColor: value }),
                          label: __48("Link Color", "digiblocks")
                        }
                      ]
                    }
                  );
                } else {
                  return /* @__PURE__ */ wp.element.createElement(
                    PanelColorSettings41,
                    {
                      title: __48("Hover Colors", "digiblocks"),
                      initialOpen: true,
                      enableAlpha: true,
                      colorSettings: [
                        {
                          value: textHoverColor,
                          onChange: (value) => setAttributes({ textHoverColor: value }),
                          label: __48("Text Hover Color", "digiblocks")
                        },
                        {
                          value: linkHoverColor,
                          onChange: (value) => setAttributes({ linkHoverColor: value }),
                          label: __48("Link Hover Color", "digiblocks")
                        }
                      ]
                    }
                  );
                }
              }
            )
          ), /* @__PURE__ */ wp.element.createElement(
            TabPanelBody43,
            {
              tab: "style",
              name: "typography",
              title: __48("Typography", "digiblocks"),
              initialOpen: false
            },
            /* @__PURE__ */ wp.element.createElement(
              TypographyControl35,
              {
                label: __48("Typography", "digiblocks"),
                value: typography,
                onChange: (value) => setAttributes({ typography: value }),
                defaults: {
                  fontSize: { desktop: 14, tablet: 13, mobile: 12 },
                  fontSizeUnit: "px",
                  fontWeight: "normal",
                  lineHeight: { desktop: 1.5, tablet: 1.4, mobile: 1.3 },
                  lineHeightUnit: "em"
                }
              }
            )
          ), /* @__PURE__ */ wp.element.createElement(
            TabPanelBody43,
            {
              tab: "style",
              name: "spacing",
              title: __48("Spacing", "digiblocks"),
              initialOpen: false
            },
            /* @__PURE__ */ wp.element.createElement(
              ResponsiveControl43,
              {
                label: __48("Padding", "digiblocks")
              },
              /* @__PURE__ */ wp.element.createElement(
                DimensionControl39,
                {
                  values: padding[localActiveDevice],
                  onChange: (value) => setAttributes({
                    padding: {
                      ...padding,
                      [localActiveDevice]: value
                    }
                  })
                }
              )
            ),
            /* @__PURE__ */ wp.element.createElement(
              ResponsiveControl43,
              {
                label: __48("Margin", "digiblocks")
              },
              /* @__PURE__ */ wp.element.createElement(
                DimensionControl39,
                {
                  values: margin[localActiveDevice],
                  onChange: (value) => setAttributes({
                    margin: {
                      ...margin,
                      [localActiveDevice]: value
                    }
                  })
                }
              )
            )
          ));
        case "advanced":
          return /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(
            TabPanelBody43,
            {
              tab: "advanced",
              name: "animation",
              title: __48("Animation", "digiblocks"),
              initialOpen: true
            },
            /* @__PURE__ */ wp.element.createElement(
              SelectControl41,
              {
                label: __48("Animation Effect", "digiblocks"),
                value: animation,
                options: animationOptions,
                onChange: (value) => setAttributes({ animation: value }),
                __next40pxDefaultSize: true,
                __nextHasNoMarginBottom: true
              }
            ),
            animation && animation !== "none" && /* @__PURE__ */ wp.element.createElement("div", { style: { marginTop: "10px" } }, /* @__PURE__ */ wp.element.createElement(
              Button40,
              {
                variant: "secondary",
                isSecondary: true,
                onClick: handlePreviewClick,
                style: { width: "100%" }
              },
              __48("Preview Animation", "digiblocks")
            ))
          ), /* @__PURE__ */ wp.element.createElement(
            TabPanelBody43,
            {
              tab: "advanced",
              name: "visibility",
              title: __48("Visibility", "digiblocks"),
              initialOpen: false
            },
            /* @__PURE__ */ wp.element.createElement("div", { className: "components-base-control__help", style: {
              padding: "12px",
              backgroundColor: "#f0f6fc",
              border: "1px solid #c3ddfd",
              borderRadius: "4px",
              marginBottom: "16px"
            } }, /* @__PURE__ */ wp.element.createElement("strong", null, __48("Editor Note:", "digiblocks")), /* @__PURE__ */ wp.element.createElement("br", null), __48("Hidden elements appear with reduced opacity in the editor for easy editing. Visibility changes only take effect on the frontend.", "digiblocks")),
            /* @__PURE__ */ wp.element.createElement(
              ToggleControl43,
              {
                label: __48("Hide on Desktop", "digiblocks"),
                checked: visibility.desktop,
                onChange: (value) => setAttributes({
                  visibility: {
                    ...visibility,
                    desktop: value
                  }
                }),
                __nextHasNoMarginBottom: true
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              ToggleControl43,
              {
                label: __48("Hide on Tablet", "digiblocks"),
                checked: visibility.tablet,
                onChange: (value) => setAttributes({
                  visibility: {
                    ...visibility,
                    tablet: value
                  }
                }),
                __nextHasNoMarginBottom: true
              }
            ),
            /* @__PURE__ */ wp.element.createElement(
              ToggleControl43,
              {
                label: __48("Hide on Mobile", "digiblocks"),
                checked: visibility.mobile,
                onChange: (value) => setAttributes({
                  visibility: {
                    ...visibility,
                    mobile: value
                  }
                }),
                __nextHasNoMarginBottom: true
              }
            )
          ), /* @__PURE__ */ wp.element.createElement(
            TabPanelBody43,
            {
              tab: "advanced",
              name: "additional",
              title: __48("Additional", "digiblocks"),
              initialOpen: false
            },
            /* @__PURE__ */ wp.element.createElement("div", { className: "components-base-control html-anchor-control" }, /* @__PURE__ */ wp.element.createElement("div", { className: "components-base-control__field" }, /* @__PURE__ */ wp.element.createElement("label", { className: "components-base-control__label", htmlFor: "html-anchor" }, __48("HTML anchor", "digiblocks")), /* @__PURE__ */ wp.element.createElement(
              "input",
              {
                className: "components-text-control__input",
                type: "text",
                id: "html-anchor",
                value: anchor || "",
                onChange: (e) => setAttributes({ anchor: e.target.value }),
                "aria-describedby": "html-anchor-help",
                autoCapitalize: "none",
                autoComplete: "off"
              }
            )), /* @__PURE__ */ wp.element.createElement("p", { id: "html-anchor-help", className: "components-base-control__help" }, __48(`Enter a word or two \u2014 without spaces \u2014 to make a unique web address just for this block, called an "anchor". Then, you'll be able to link directly to this section of your page.`, "digiblocks"), " ", /* @__PURE__ */ wp.element.createElement(
              "a",
              {
                className: "components-external-link",
                href: "https://wordpress.org/documentation/article/page-jumps/",
                target: "_blank",
                rel: "external noreferrer noopener"
              },
              /* @__PURE__ */ wp.element.createElement("span", { className: "components-external-link__contents" }, __48("Learn more about anchors", "digiblocks")),
              /* @__PURE__ */ wp.element.createElement("span", { className: "components-external-link__icon", "aria-label": "(opens in a new tab)" }, "\u2197")
            ))),
            /* @__PURE__ */ wp.element.createElement("div", { className: "components-base-control" }, /* @__PURE__ */ wp.element.createElement("div", { className: "components-base-control__field" }, /* @__PURE__ */ wp.element.createElement("label", { className: "components-base-control__label", htmlFor: "additional-css-classes" }, __48("Additional CSS class(es)", "digiblocks")), /* @__PURE__ */ wp.element.createElement(
              "input",
              {
                className: "components-text-control__input",
                type: "text",
                id: "additional-css-classes",
                value: customClasses || "",
                onChange: (e) => setAttributes({ customClasses: e.target.value }),
                "aria-describedby": "additional-css-classes-help",
                autoComplete: "off"
              }
            )), /* @__PURE__ */ wp.element.createElement("p", { id: "additional-css-classes-help", className: "components-base-control__help" }, __48("Separate multiple classes with spaces.", "digiblocks")))
          ));
        default:
          return null;
      }
    };
    const blockProps = useBlockProps72({
      className: `digiblocks-copyright ${id} ${animation !== "none" ? `animate-${animation}` : ""} ${customClasses || ""}`,
      id: anchor || null
    });
    return /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(InspectorControls43, null, /* @__PURE__ */ wp.element.createElement(
      CustomTabPanel43,
      {
        tabs: tabList,
        activeTab,
        onSelect: setActiveTab
      },
      renderTabContent()
    )), /* @__PURE__ */ wp.element.createElement("style", { dangerouslySetInnerHTML: { __html: generateCSS() } }), /* @__PURE__ */ wp.element.createElement("div", { ...blockProps }, /* @__PURE__ */ wp.element.createElement(
      "div",
      {
        className: "digiblocks-copyright-text",
        dangerouslySetInnerHTML: {
          __html: processPreviewText(copyrightText || __48("\xA9 {year} {sitename}. All rights reserved.", "digiblocks"))
        }
      }
    )));
  };
  var edit_default43 = CopyrightEdit;

  // blocks/copyright/save.js
  var CopyrightSave = () => {
    return null;
  };
  var save_default43 = CopyrightSave;

  // resources/js/blocks/index.js
  var { __: __49 } = window.wp.i18n;
  var { registerBlockType } = window.wp.blocks;
  var getBlockActiveStatus = (blockName) => {
    if (digiBlocksData.inactiveBlocks && typeof digiBlocksData.inactiveBlocks[blockName] !== "undefined" && digiBlocksData.inactiveBlocks[blockName] === true) {
      return false;
    }
    return true;
  };
  var isDigiActive = () => {
    return window.digiBlocksData && window.digiBlocksData.isDigiActive;
  };
  var isWooActive = () => {
    return typeof window.wc !== "undefined" || window.digiBlocksData && window.digiBlocksData.isWooActive;
  };
  registerBlockType("digiblocks/column", {
    apiVersion: 2,
    title: __49("Column", "digiblocks"),
    parent: ["digiblocks/container"],
    icon: {
      src: () => /* @__PURE__ */ wp.element.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 640 512", width: "24", height: "24" }, /* @__PURE__ */ wp.element.createElement("path", { d: "M448 64l0 384 128 0c17.7 0 32-14.3 32-32l0-320c0-17.7-14.3-32-32-32L448 64zm-32 0L224 64l0 384 192 0 0-384zM192 448l0-384L64 64C46.3 64 32 78.3 32 96l0 320c0 17.7 14.3 32 32 32l128 0zM0 96C0 60.7 28.7 32 64 32l512 0c35.3 0 64 28.7 64 64l0 320c0 35.3-28.7 64-64 64L64 480c-35.3 0-64-28.7-64-64L0 96z" }))
    },
    description: __49("Flexible column component to use within Container blocks", "digiblocks"),
    supports: {
      inserter: false,
      // Can only be inserted within container block
      reusable: false,
      html: false,
      className: false,
      customClassName: false,
      anchor: false
    },
    attributes: {
      id: {
        type: "string",
        default: ""
      },
      visibility: {
        type: "object",
        default: {
          desktop: false,
          tablet: false,
          mobile: false
        }
      },
      width: {
        type: "object",
        default: {
          desktop: 100,
          tablet: 100,
          mobile: 100
        }
      },
      order: {
        type: "object",
        default: {
          desktop: 0,
          tablet: 0,
          mobile: 0
        }
      },
      hoverEffect: {
        type: "string",
        default: "none"
      },
      backgroundColor: {
        type: "string",
        default: ""
      },
      backgroundImage: {
        type: "object",
        default: {
          url: "",
          id: 0,
          alt: "",
          size: ""
        }
      },
      backgroundPosition: {
        type: "string",
        default: "center center"
      },
      backgroundRepeat: {
        type: "string",
        default: "no-repeat"
      },
      backgroundSize: {
        type: "string",
        default: "cover"
      },
      backgroundOverlay: {
        type: "string",
        default: ""
      },
      backgroundOverlayOpacity: {
        type: "number",
        default: 0.7
      },
      backgroundOverlayBlendMode: {
        type: "string",
        default: "normal"
      },
      padding: {
        type: "object",
        default: {
          desktop: { top: "", right: "", bottom: "", left: "", unit: "px" },
          tablet: { top: "", right: "", bottom: "", left: "", unit: "px" },
          mobile: { top: "", right: "", bottom: "", left: "", unit: "px" }
        }
      },
      margin: {
        type: "object",
        default: {
          desktop: { top: "", right: "", bottom: "", left: "", unit: "px" },
          tablet: { top: "", right: "", bottom: "", left: "", unit: "px" },
          mobile: { top: "", right: "", bottom: "", left: "", unit: "px" }
        }
      },
      borderStyle: {
        type: "string",
        default: "none"
      },
      borderWidth: {
        type: "object",
        default: {
          desktop: { top: 1, right: 1, bottom: 1, left: 1, unit: "px" },
          tablet: { top: "", right: "", bottom: "", left: "", unit: "px" },
          mobile: { top: "", right: "", bottom: "", left: "", unit: "px" }
        }
      },
      borderColor: {
        type: "string",
        default: "#e0e0e0"
      },
      borderRadius: {
        type: "object",
        default: {
          desktop: { top: "", right: "", bottom: "", left: "", unit: "px" },
          tablet: { top: "", right: "", bottom: "", left: "", unit: "px" },
          mobile: { top: "", right: "", bottom: "", left: "", unit: "px" }
        }
      },
      boxShadow: {
        type: "object",
        default: {
          enable: false,
          color: "rgba(0, 0, 0, 0.2)",
          horizontal: 0,
          vertical: 0,
          blur: 0,
          spread: 0,
          position: "outset"
        }
      },
      boxShadowHover: {
        type: "object",
        default: {
          enable: false,
          color: "rgba(0, 0, 0, 0.2)",
          horizontal: 0,
          vertical: 0,
          blur: 0,
          spread: 0,
          position: "outset"
        }
      }
    },
    edit: edit_default,
    save: save_default
  });
  registerBlockType("digiblocks/container", {
    apiVersion: 2,
    title: digiBlocksData.blocks["container"].title,
    category: "digiblocks",
    icon: {
      src: () => {
        const { viewbox, path } = digiBlocksData.blocks["container"].icon;
        return /* @__PURE__ */ wp.element.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: `0 0 ${viewbox}`, className: "digiblocks-editor-icons" }, /* @__PURE__ */ wp.element.createElement("path", { d: path }));
      }
    },
    description: digiBlocksData.blocks["container"].description,
    keywords: [__49("container", "digiblocks"), __49("section", "digiblocks"), __49("row", "digiblocks"), __49("layout", "digiblocks"), __49("columns", "digiblocks")],
    supports: {
      inserter: getBlockActiveStatus("container") ? true : false,
      html: false,
      className: false,
      customClassName: false,
      anchor: false
    },
    attributes: {
      isNested: {
        type: "boolean",
        default: false
      },
      id: {
        type: "string",
        default: ""
      },
      visibility: {
        type: "object",
        default: {
          desktop: false,
          tablet: false,
          mobile: false
        }
      },
      flexWrap: {
        type: "object",
        default: {
          desktop: "nowrap",
          tablet: "nowrap",
          mobile: "nowrap"
        }
      },
      anchor: {
        type: "string",
        default: ""
      },
      customClasses: {
        type: "string",
        default: ""
      },
      layout: {
        type: "string",
        default: ""
      },
      contentLayout: {
        type: "string",
        default: "boxed"
      },
      contentWidth: {
        type: "object",
        default: {
          desktop: parseInt(digiBlocksData.contentWidth) || 1200,
          tablet: "",
          mobile: ""
        }
      },
      contentMaxWidth: {
        type: "object",
        default: {
          desktop: parseInt(digiBlocksData.contentMaxWidth) || 90,
          tablet: "",
          mobile: ""
        }
      },
      heightType: {
        type: "object",
        default: {
          desktop: "auto",
          tablet: "auto",
          mobile: "auto"
        }
      },
      horizontalAlign: {
        type: "object",
        default: {
          desktop: "center",
          tablet: "center",
          mobile: "center"
        }
      },
      verticalAlign: {
        type: "object",
        default: {
          desktop: "center",
          tablet: "center",
          mobile: "center"
        }
      },
      minHeight: {
        type: "object",
        default: {
          desktop: 0,
          tablet: 0,
          mobile: 0
        }
      },
      columnGap: {
        type: "object",
        default: {
          desktop: { value: 20, unit: "px" },
          tablet: { value: "", unit: "px" },
          mobile: { value: "", unit: "px" }
        }
      },
      rowGap: {
        type: "object",
        default: {
          desktop: { value: 20, unit: "px" },
          tablet: { value: "", unit: "px" },
          mobile: { value: "", unit: "px" }
        }
      },
      reverseColumnsMobile: {
        type: "boolean",
        default: false
      },
      stackOnTablet: {
        type: "boolean",
        default: false
      },
      stackOnMobile: {
        type: "boolean",
        default: true
      },
      overflowHidden: {
        type: "boolean",
        default: false
      },
      zIndex: {
        type: "number",
        default: 0
      },
      backgroundColor: {
        type: "string",
        default: ""
      },
      backgroundImage: {
        type: "object",
        default: {
          url: "",
          id: 0,
          alt: "",
          size: ""
        }
      },
      backgroundPosition: {
        type: "string",
        default: "center center"
      },
      backgroundRepeat: {
        type: "string",
        default: "no-repeat"
      },
      backgroundSize: {
        type: "string",
        default: "cover"
      },
      backgroundVideo: {
        type: "object",
        default: {
          url: "",
          id: 0,
          alt: "",
          size: ""
        }
      },
      backgroundVideoFallbackImage: {
        type: "object",
        default: {
          url: "",
          id: 0,
          alt: "",
          size: ""
        }
      },
      backgroundOverlay: {
        type: "string",
        default: ""
      },
      backgroundOverlayOpacity: {
        type: "number",
        default: 0.7
      },
      backgroundOverlayBlendMode: {
        type: "string",
        default: "normal"
      },
      padding: {
        type: "object",
        default: {
          desktop: { top: "", right: "", bottom: "", left: "", unit: "px" },
          tablet: { top: "", right: "", bottom: "", left: "", unit: "px" },
          mobile: { top: "", right: "", bottom: "", left: "", unit: "px" }
        }
      },
      margin: {
        type: "object",
        default: {
          desktop: { top: "", right: "", bottom: "", left: "", unit: "px" },
          tablet: { top: "", right: "", bottom: "", left: "", unit: "px" },
          mobile: { top: "", right: "", bottom: "", left: "", unit: "px" }
        }
      },
      borderStyle: {
        type: "string",
        default: "none"
      },
      borderWidth: {
        type: "object",
        default: {
          desktop: { top: 1, right: 1, bottom: 1, left: 1, unit: "px" },
          tablet: { top: "", right: "", bottom: "", left: "", unit: "px" },
          mobile: { top: "", right: "", bottom: "", left: "", unit: "px" }
        }
      },
      borderColor: {
        type: "string",
        default: "#e0e0e0"
      },
      borderRadius: {
        type: "object",
        default: {
          desktop: { top: "", right: "", bottom: "", left: "", unit: "px" },
          tablet: { top: "", right: "", bottom: "", left: "", unit: "px" },
          mobile: { top: "", right: "", bottom: "", left: "", unit: "px" }
        }
      },
      boxShadow: {
        type: "object",
        default: {
          enable: false,
          color: "rgba(0, 0, 0, 0.2)",
          horizontal: 0,
          vertical: 0,
          blur: 0,
          spread: 0,
          position: "outset"
        }
      },
      boxShadowHover: {
        type: "object",
        default: {
          enable: false,
          color: "rgba(0, 0, 0, 0.2)",
          horizontal: 0,
          vertical: 0,
          blur: 0,
          spread: 0,
          position: "outset"
        }
      },
      animation: {
        type: "string",
        default: "none"
      }
    },
    example: {
      attributes: {
        layout: "",
        backgroundColor: "#f8f9fa",
        padding: {
          desktop: { top: 20, right: 20, bottom: 20, left: 20, unit: "px" },
          tablet: { top: "", right: "", bottom: "", left: "", unit: "px" },
          mobile: { top: "", right: "", bottom: "", left: "", unit: "px" }
        }
      },
      // No inner blocks to ensure layout selector appears
      innerBlocks: [],
      viewportWidth: 500
    },
    edit: edit_default2,
    save: save_default2
  });
  registerBlockType("digiblocks/accordion", {
    apiVersion: 2,
    title: digiBlocksData.blocks["accordion"].title,
    category: "digiblocks",
    icon: {
      src: () => {
        const { viewbox, path } = digiBlocksData.blocks["accordion"].icon;
        return /* @__PURE__ */ wp.element.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: `0 0 ${viewbox}`, className: "digiblocks-editor-icons" }, /* @__PURE__ */ wp.element.createElement("path", { d: path }));
      }
    },
    description: digiBlocksData.blocks["accordion"].description,
    keywords: [__49("accordion", "digiblocks"), __49("toggle", "digiblocks"), __49("collapse", "digiblocks"), __49("faq", "digiblocks")],
    // Disable all default controls and settings panels
    supports: {
      inserter: getBlockActiveStatus("accordion") ? true : false,
      // Remove the block if disabled
      html: false,
      className: false,
      customClassName: false,
      anchor: false
    },
    attributes: {
      id: {
        type: "string",
        default: ""
      },
      anchor: {
        type: "string",
        default: ""
      },
      visibility: {
        type: "object",
        default: {
          desktop: false,
          tablet: false,
          mobile: false
        }
      },
      customClasses: {
        type: "string",
        default: ""
      },
      items: {
        type: "array",
        default: [
          {
            id: "item-1",
            title: __49("Accordion Item 1", "digiblocks"),
            content: __49("Add your content here. Edit or remove this text inline or in the module Content settings.", "digiblocks"),
            isOpen: true
          },
          {
            id: "item-2",
            title: __49("Accordion Item 2", "digiblocks"),
            content: __49("Add your content here. Edit or remove this text inline or in the module Content settings.", "digiblocks"),
            isOpen: false
          }
        ]
      },
      titleColor: {
        type: "string",
        default: "#333333"
      },
      titleHoverColor: {
        type: "string",
        default: ""
      },
      titleActiveColor: {
        type: "string",
        default: "#1e73be"
      },
      backgroundColor: {
        type: "string",
        default: "#ffffff"
      },
      backgroundHoverColor: {
        type: "string",
        default: ""
      },
      backgroundActiveColor: {
        type: "string",
        default: "#f7f7f7"
      },
      contentColor: {
        type: "string",
        default: "#666666"
      },
      contentHoverColor: {
        type: "string",
        default: ""
      },
      borderColor: {
        type: "string",
        default: "#e0e0e0"
      },
      borderHoverColor: {
        type: "string",
        default: ""
      },
      borderRadius: {
        type: "object",
        default: {
          desktop: { top: 8, right: 8, bottom: 8, left: 8, unit: "px" },
          tablet: { top: "", right: "", bottom: "", left: "", unit: "px" },
          mobile: { top: "", right: "", bottom: "", left: "", unit: "px" }
        }
      },
      borderWidth: {
        type: "object",
        default: {
          desktop: { top: 1, right: 1, bottom: 1, left: 1, unit: "px" },
          tablet: { top: "", right: "", bottom: "", left: "", unit: "px" },
          mobile: { top: "", right: "", bottom: "", left: "", unit: "px" }
        }
      },
      borderStyle: {
        type: "string",
        default: "solid"
      },
      boxShadow: {
        type: "object",
        default: {
          enable: false,
          color: "rgba(0, 0, 0, 0.2)",
          horizontal: 0,
          vertical: 0,
          blur: 0,
          spread: 0,
          position: "outset"
        }
      },
      boxShadowHover: {
        type: "object",
        default: {
          enable: false,
          color: "rgba(0, 0, 0, 0.2)",
          horizontal: 0,
          vertical: 0,
          blur: 0,
          spread: 0,
          position: "outset"
        }
      },
      padding: {
        type: "object",
        default: {
          desktop: { top: 20, right: 20, bottom: 20, left: 20, unit: "px" },
          tablet: { top: 15, right: 15, bottom: 15, left: 15, unit: "px" },
          mobile: { top: 10, right: 10, bottom: 10, left: 10, unit: "px" }
        }
      },
      margin: {
        type: "object",
        default: {
          desktop: { top: 0, right: 0, bottom: 30, left: 0, unit: "px" },
          tablet: { top: 0, right: 0, bottom: 25, left: 0, unit: "px" },
          mobile: { top: 0, right: 0, bottom: 20, left: 0, unit: "px" }
        }
      },
      titleTypography: {
        type: "object",
        default: {
          fontFamily: "",
          fontSize: { desktop: 18, tablet: 16, mobile: 16 },
          fontSizeUnit: "px",
          fontWeight: "600",
          fontStyle: "normal",
          textTransform: "none",
          textDecoration: "none",
          lineHeight: { desktop: 1.5, tablet: 1.4, mobile: 1.3 },
          lineHeightUnit: "em",
          letterSpacing: { desktop: 0, tablet: 0, mobile: 0 },
          letterSpacingUnit: "px"
        }
      },
      contentTypography: {
        type: "object",
        default: {
          fontFamily: "",
          fontSize: { desktop: 16, tablet: 15, mobile: 14 },
          fontSizeUnit: "px",
          fontWeight: "",
          fontStyle: "normal",
          textTransform: "",
          textDecoration: "",
          lineHeight: { desktop: 1.5, tablet: 1.4, mobile: 1.3 },
          lineHeightUnit: "em",
          letterSpacing: { desktop: 0, tablet: 0, mobile: 0 },
          letterSpacingUnit: "px"
        }
      },
      iconPosition: {
        type: "string",
        default: "right"
      },
      iconColor: {
        type: "string",
        default: "#333333"
      },
      iconHoverColor: {
        type: "string",
        default: ""
      },
      iconActiveColor: {
        type: "string",
        default: "#1e73be"
      },
      iconSize: {
        type: "object",
        default: {
          desktop: 16,
          tablet: 14,
          mobile: 12
        }
      },
      animation: {
        type: "string",
        default: "none"
      },
      allowMultipleOpen: {
        type: "boolean",
        default: false
      },
      iconType: {
        type: "string",
        default: "plusMinus"
      }
    },
    example: {
      attributes: {
        items: [
          {
            id: "item-1",
            title: __49("Accordion Item 1", "digiblocks"),
            content: __49("This is some sample content for the accordion item.", "digiblocks"),
            isOpen: true
          },
          {
            id: "item-2",
            title: __49("Accordion Item 2", "digiblocks"),
            content: __49("Click on an accordion item to see it expand.", "digiblocks"),
            isOpen: false
          }
        ]
      }
    },
    edit: edit_default3,
    save: save_default3
  });
  registerBlockType("digiblocks/buttons", {
    apiVersion: 2,
    title: digiBlocksData.blocks["buttons"].title,
    category: "digiblocks",
    icon: {
      src: () => {
        const { viewbox, path } = digiBlocksData.blocks["buttons"].icon;
        return /* @__PURE__ */ wp.element.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: `0 0 ${viewbox}`, className: "digiblocks-editor-icons" }, /* @__PURE__ */ wp.element.createElement("path", { d: path }));
      }
    },
    description: digiBlocksData.blocks["buttons"].description,
    keywords: [__49("buttons", "digiblocks"), __49("button group", "digiblocks"), __49("link", "digiblocks")],
    supports: {
      inserter: getBlockActiveStatus("buttons") ? true : false,
      html: false,
      className: false,
      customClassName: false,
      anchor: false
    },
    attributes: {
      id: {
        type: "string",
        default: ""
      },
      anchor: {
        type: "string",
        default: ""
      },
      visibility: {
        type: "object",
        default: {
          desktop: false,
          tablet: false,
          mobile: false
        }
      },
      customClasses: {
        type: "string",
        default: ""
      },
      layout: {
        type: "string",
        default: "horizontal"
      },
      align: {
        type: "string",
        default: "flex-start"
      },
      buttonSpacing: {
        type: "object",
        default: {
          desktop: 10,
          tablet: 8,
          mobile: 6
        }
      },
      animation: {
        type: "string",
        default: "none"
      }
    },
    example: {
      innerBlocks: [
        {
          name: "digiblocks/button",
          attributes: {
            text: __49("Call to Action", "digiblocks")
          }
        },
        {
          name: "digiblocks/button",
          attributes: {
            text: __49("Learn More", "digiblocks")
          }
        }
      ]
    },
    edit: edit_default4,
    save: save_default4
  });
  registerBlockType("digiblocks/button", {
    apiVersion: 2,
    title: __49("Button", "digiblocks"),
    parent: ["digiblocks/buttons"],
    icon: {
      src: () => /* @__PURE__ */ wp.element.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 24 24", width: "24", height: "24" }, /* @__PURE__ */ wp.element.createElement("path", { d: "M19 6.5H5c-1.1 0-2 .9-2 2v7c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2v-7c0-1.1-.9-2-2-2zm0 9H5v-7h14v7z" }))
    },
    description: __49("A single button within the buttons block", "digiblocks"),
    supports: {
      inserter: false,
      // Can only be inserted within buttons block
      html: false,
      className: false,
      customClassName: false,
      anchor: false,
      reusable: false
    },
    attributes: {
      id: {
        type: "string",
        default: ""
      },
      anchor: {
        type: "string",
        default: ""
      },
      visibility: {
        type: "object",
        default: {
          desktop: false,
          tablet: false,
          mobile: false
        }
      },
      customClasses: {
        type: "string",
        default: ""
      },
      text: {
        type: "string",
        default: __49("Button", "digiblocks")
      },
      url: {
        type: "string",
        default: ""
      },
      opensInNewTab: {
        type: "boolean",
        default: false
      },
      rel: {
        type: "boolean",
        default: false
      },
      iconValue: {
        type: "object",
        default: null
      },
      iconPosition: {
        type: "string",
        default: "left"
      },
      size: {
        type: "string",
        default: "medium"
      },
      fill: {
        type: "boolean",
        default: false
      },
      buttonTypography: {
        type: "object",
        default: {
          fontFamily: "",
          fontSize: { desktop: 16, tablet: 15, mobile: 14 },
          fontSizeUnit: "px",
          fontWeight: "",
          fontStyle: "normal",
          textTransform: "",
          textDecoration: "",
          lineHeight: { desktop: 1.5, tablet: 1.4, mobile: 1.3 },
          lineHeightUnit: "em",
          letterSpacing: { desktop: 0, tablet: 0, mobile: 0 },
          letterSpacingUnit: "px"
        }
      },
      textColor: {
        type: "string",
        default: "#ffffff"
      },
      textHoverColor: {
        type: "string",
        default: ""
      },
      backgroundColor: {
        type: "string",
        default: "#1e73be"
      },
      backgroundHoverColor: {
        type: "string",
        default: ""
      },
      borderStyle: {
        type: "string",
        default: "default"
      },
      borderWidth: {
        type: "object",
        default: {
          desktop: { top: 1, right: 1, bottom: 1, left: 1, unit: "px" },
          tablet: { top: "", right: "", bottom: "", left: "", unit: "px" },
          mobile: { top: "", right: "", bottom: "", left: "", unit: "px" }
        }
      },
      borderRadius: {
        type: "object",
        default: {
          desktop: { top: "", right: "", bottom: "", left: "", unit: "px" },
          tablet: { top: "", right: "", bottom: "", left: "", unit: "px" },
          mobile: { top: "", right: "", bottom: "", left: "", unit: "px" }
        }
      },
      borderColor: {
        type: "string",
        default: ""
      },
      borderHoverColor: {
        type: "string",
        default: ""
      },
      boxShadow: {
        type: "object",
        default: {
          enable: false,
          color: "rgba(0, 0, 0, 0.2)",
          horizontal: 0,
          vertical: 0,
          blur: 0,
          spread: 0,
          position: "outset"
        }
      },
      boxShadowHover: {
        type: "object",
        default: {
          enable: false,
          color: "rgba(0, 0, 0, 0.2)",
          horizontal: 0,
          vertical: 0,
          blur: 0,
          spread: 0,
          position: "outset"
        }
      },
      padding: {
        type: "object",
        default: {
          desktop: { top: 12, right: 24, bottom: 12, left: 24, unit: "px" },
          tablet: { top: 10, right: 20, bottom: 10, left: 20, unit: "px" },
          mobile: { top: 8, right: 16, bottom: 8, left: 16, unit: "px" }
        }
      },
      margin: {
        type: "object",
        default: {
          desktop: { top: "", right: "", bottom: "", left: "", unit: "px" },
          tablet: { top: "", right: "", bottom: "", left: "", unit: "px" },
          mobile: { top: "", right: "", bottom: "", left: "", unit: "px" }
        }
      },
      onlyIcon: {
        type: "boolean",
        default: false
      }
    },
    example: {
      attributes: {
        text: __49("Button", "digiblocks"),
        backgroundColor: "#1e73be",
        textColor: "#ffffff"
      }
    },
    edit: edit_default5,
    save: save_default5
  });
  registerBlockType("digiblocks/call-to-action", {
    apiVersion: 2,
    title: digiBlocksData.blocks["call-to-action"].title,
    category: "digiblocks",
    icon: {
      src: () => {
        const { viewbox, path } = digiBlocksData.blocks["call-to-action"].icon;
        return /* @__PURE__ */ wp.element.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: `0 0 ${viewbox}`, className: "digiblocks-editor-icons" }, /* @__PURE__ */ wp.element.createElement("path", { d: path }));
      }
    },
    description: digiBlocksData.blocks["call-to-action"].description,
    keywords: [__49("cta", "digiblocks"), __49("call to action", "digiblocks"), __49("button", "digiblocks"), __49("conversion", "digiblocks")],
    supports: {
      inserter: getBlockActiveStatus("call-to-action") ? true : false,
      html: false,
      className: false,
      customClassName: false,
      anchor: false
    },
    attributes: {
      id: {
        type: "string",
        default: ""
      },
      anchor: {
        type: "string",
        default: ""
      },
      visibility: {
        type: "object",
        default: {
          desktop: false,
          tablet: false,
          mobile: false
        }
      },
      customClasses: {
        type: "string",
        default: ""
      },
      style: {
        type: "string",
        default: "basic"
      },
      horizontalLayout: {
        type: "boolean",
        default: false
      },
      title: {
        type: "string",
        default: __49("Ready to Get Started?", "digiblocks")
      },
      content: {
        type: "string",
        default: __49("Join thousands of satisfied customers who have already taken the next step. Sign up today and experience the difference.", "digiblocks")
      },
      headingTag: {
        type: "string",
        default: "h2"
      },
      titleColor: {
        type: "string",
        default: "#333333"
      },
      textColor: {
        type: "string",
        default: "#666666"
      },
      buttonColor: {
        type: "string",
        default: "#1e73be"
      },
      buttonTextColor: {
        type: "string",
        default: "#ffffff"
      },
      backgroundColor: {
        type: "string",
        default: "#f5f5f5"
      },
      backgroundType: {
        type: "string",
        default: "color"
      },
      backgroundImage: {
        type: "object",
        default: null
      },
      backgroundOverlayColor: {
        type: "string",
        default: "rgba(0,0,0,0.5)"
      },
      backgroundOverlayOpacity: {
        type: "number",
        default: 50
      },
      backgroundPosition: {
        type: "string",
        default: "center center"
      },
      backgroundSize: {
        type: "string",
        default: "cover"
      },
      backgroundRepeat: {
        type: "string",
        default: "no-repeat"
      },
      borderStyle: {
        type: "string",
        default: "none"
      },
      borderWidth: {
        type: "object",
        default: {
          desktop: { top: "", right: "", bottom: "", left: "", unit: "px" },
          tablet: { top: "", right: "", bottom: "", left: "", unit: "px" },
          mobile: { top: "", right: "", bottom: "", left: "", unit: "px" }
        }
      },
      borderRadius: {
        type: "object",
        default: {
          desktop: { top: "", right: "", bottom: "", left: "", unit: "px" },
          tablet: { top: "", right: "", bottom: "", left: "", unit: "px" },
          mobile: { top: "", right: "", bottom: "", left: "", unit: "px" }
        }
      },
      borderColor: {
        type: "string",
        default: "#e0e0e0"
      },
      padding: {
        type: "object",
        default: {
          desktop: { top: 40, right: 30, bottom: 40, left: 30, unit: "px" },
          tablet: { top: "", right: "", bottom: "", left: "", unit: "px" },
          mobile: { top: "", right: "", bottom: "", left: "", unit: "px" }
        }
      },
      margin: {
        type: "object",
        default: {
          desktop: { top: "", right: "", bottom: "", left: "", unit: "px" },
          tablet: { top: "", right: "", bottom: "", left: "", unit: "px" },
          mobile: { top: "", right: "", bottom: "", left: "", unit: "px" }
        }
      },
      align: {
        type: "string",
        default: "left"
      },
      titleTypography: {
        type: "object"
      },
      contentTypography: {
        type: "object"
      },
      buttonTypography: {
        type: "object"
      },
      contentWidth: {
        type: "number"
      },
      width: {
        type: "string",
        default: "100%"
      },
      animation: {
        type: "string",
        default: "none"
      },
      boxShadow: {
        type: "object"
      },
      boxShadowHover: {
        type: "object"
      },
      buttonBorderRadius: {
        type: "object",
        default: {
          desktop: { top: 4, right: 4, bottom: 4, left: 4, unit: "px" },
          tablet: { top: "", right: "", bottom: "", left: "", unit: "px" },
          mobile: { top: "", right: "", bottom: "", left: "", unit: "px" }
        }
      },
      buttonPadding: {
        type: "object",
        default: {
          desktop: { top: 10, right: 20, bottom: 10, left: 20, unit: "px" },
          tablet: { top: "", right: "", bottom: "", left: "", unit: "px" },
          mobile: { top: "", right: "", bottom: "", left: "", unit: "px" }
        }
      },
      buttonsAlign: {
        type: "string",
        default: "left"
      },
      buttons: {
        type: "array",
        default: []
      },
      titleHoverColor: {
        type: "string",
        default: ""
      },
      textHoverColor: {
        type: "string",
        default: ""
      },
      buttonHoverColor: {
        type: "string",
        default: ""
      },
      buttonTextHoverColor: {
        type: "string",
        default: ""
      },
      backgroundHoverColor: {
        type: "string",
        default: ""
      },
      highlightText: {
        type: "string",
        default: ""
      },
      highlightColor: {
        type: "string",
        default: "#ffde59"
      },
      highlightType: {
        type: "string",
        default: "none"
      },
      verticalAlign: {
        type: "string",
        default: "center"
      },
      reverseColumnsMobile: {
        type: "boolean",
        default: false
      },
      minHeight: {
        type: "object"
      },
      gradientDirection: {
        type: "number",
        default: 135
      },
      ribbonColor: {
        type: "string",
        default: "#1e73be"
      },
      ribbonTextColor: {
        type: "string",
        default: "#ffffff"
      },
      ribbonPosition: {
        type: "string",
        default: "top-right"
      },
      ribbonText: {
        type: "string",
        default: "Special Offer"
      }
    },
    example: {
      attributes: {
        style: "basic",
        title: __49("Ready to Get Started?", "digiblocks"),
        content: __49("Join us today and experience the difference.", "digiblocks"),
        buttons: [
          {
            id: "button-1",
            text: __49("Sign Up Now", "digiblocks"),
            url: "#",
            isPrimary: true
          }
        ],
        backgroundColor: "#f5f5f5"
      }
    },
    edit: edit_default6,
    save: save_default6
  });
  registerBlockType("digiblocks/countdown", {
    apiVersion: 2,
    title: digiBlocksData.blocks["countdown"].title,
    category: "digiblocks",
    icon: {
      src: () => {
        const { viewbox, path } = digiBlocksData.blocks["countdown"].icon;
        return /* @__PURE__ */ wp.element.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: `0 0 ${viewbox}`, className: "digiblocks-editor-icons" }, /* @__PURE__ */ wp.element.createElement("path", { d: path }));
      }
    },
    description: digiBlocksData.blocks["countdown"].description,
    keywords: [__49("countdown", "digiblocks"), __49("timer", "digiblocks"), __49("clock", "digiblocks")],
    supports: {
      inserter: getBlockActiveStatus("countdown") ? true : false,
      html: false,
      className: false,
      customClassName: false,
      anchor: false
    },
    attributes: {
      id: {
        type: "string",
        default: ""
      },
      anchor: {
        type: "string",
        default: ""
      },
      visibility: {
        type: "object",
        default: {
          desktop: false,
          tablet: false,
          mobile: false
        }
      },
      customClasses: {
        type: "string",
        default: ""
      },
      endDate: {
        type: "string",
        default: ""
      },
      showDays: {
        type: "boolean",
        default: true
      },
      showHours: {
        type: "boolean",
        default: true
      },
      showMinutes: {
        type: "boolean",
        default: true
      },
      showSeconds: {
        type: "boolean",
        default: true
      },
      daysLabel: {
        type: "string",
        default: __49("Days", "digiblocks")
      },
      hoursLabel: {
        type: "string",
        default: __49("Hours", "digiblocks")
      },
      minutesLabel: {
        type: "string",
        default: __49("Minutes", "digiblocks")
      },
      secondsLabel: {
        type: "string",
        default: __49("Seconds", "digiblocks")
      },
      digitColor: {
        type: "string",
        default: "#333333"
      },
      digitBackground: {
        type: "string",
        default: "#f0f0f0"
      },
      digitHoverColor: {
        type: "string",
        default: ""
      },
      digitHoverBackground: {
        type: "string",
        default: ""
      },
      labelColor: {
        type: "string",
        default: "#666666"
      },
      labelHoverColor: {
        type: "string",
        default: ""
      },
      separatorColor: {
        type: "string",
        default: "#333333"
      },
      separatorHoverColor: {
        type: "string",
        default: ""
      },
      boxStyle: {
        type: "string",
        default: "default"
      },
      boxBorderRadius: {
        type: "object",
        default: {
          desktop: { top: 4, right: 4, bottom: 4, left: 4, unit: "px" },
          tablet: { top: "", right: "", bottom: "", left: "", unit: "px" },
          mobile: { top: "", right: "", bottom: "", left: "", unit: "px" }
        }
      },
      boxPadding: {
        type: "object",
        default: {
          desktop: { top: 10, right: 10, bottom: 10, left: 10, unit: "px" },
          tablet: { top: "", right: "", bottom: "", left: "", unit: "px" },
          mobile: { top: "", right: "", bottom: "", left: "", unit: "px" }
        }
      },
      boxMargin: {
        type: "object",
        default: {
          desktop: { top: "", right: "", bottom: "", left: "", unit: "px" },
          tablet: { top: "", right: "", bottom: "", left: "", unit: "px" },
          mobile: { top: "", right: "", bottom: "", left: "", unit: "px" }
        }
      },
      boxBorderWidth: {
        type: "object",
        default: {
          desktop: { top: 1, right: 1, bottom: 1, left: 1, unit: "px" },
          tablet: { top: "", right: "", bottom: "", left: "", unit: "px" },
          mobile: { top: "", right: "", bottom: "", left: "", unit: "px" }
        }
      },
      boxBorderColor: {
        type: "string",
        default: "#e0e0e0"
      },
      showBoxShadow: {
        type: "boolean",
        default: false
      },
      boxShadow: {
        type: "object",
        default: {
          enable: false,
          color: "rgba(0, 0, 0, 0.2)",
          horizontal: 0,
          vertical: 0,
          blur: 0,
          spread: 0,
          position: "outset"
        }
      },
      boxShadowHover: {
        type: "object",
        default: {
          enable: false,
          color: "rgba(0, 0, 0, 0.2)",
          horizontal: 0,
          vertical: 0,
          blur: 0,
          spread: 0,
          position: "outset"
        }
      },
      itemSpacing: {
        type: "object",
        default: {
          desktop: 48,
          tablet: 30,
          mobile: 16
        }
      },
      align: {
        type: "string",
        default: "center"
      },
      labelPosition: {
        type: "string",
        default: "bottom"
      },
      labelSpacing: {
        type: "object",
        default: {
          desktop: 5,
          tablet: 4,
          mobile: 3
        }
      },
      titleTypography: {
        type: "object",
        default: {
          fontFamily: "",
          fontSize: { desktop: 70, tablet: 38, mobile: 26 },
          fontSizeUnit: "px",
          fontWeight: "600",
          fontStyle: "normal",
          textTransform: "",
          textDecoration: "",
          lineHeight: { desktop: 1.2, tablet: 1.2, mobile: 1.2 },
          lineHeightUnit: "em",
          letterSpacing: { desktop: 0, tablet: 0, mobile: 0 },
          letterSpacingUnit: "px"
        }
      },
      contentTypography: {
        type: "object",
        default: {
          fontFamily: "",
          fontSize: { desktop: 16, tablet: 14, mobile: 12 },
          fontSizeUnit: "px",
          fontWeight: "",
          fontStyle: "normal",
          textTransform: "",
          textDecoration: "",
          lineHeight: { desktop: 1.4, tablet: 1.4, mobile: 1.4 },
          lineHeightUnit: "em",
          letterSpacing: { desktop: 0, tablet: 0, mobile: 0 },
          letterSpacingUnit: "px"
        }
      },
      expiredMessage: {
        type: "string",
        default: __49("Time's up!", "digiblocks")
      },
      animation: {
        type: "string",
        default: "none"
      },
      displaySeparator: {
        type: "boolean",
        default: false
      },
      separatorType: {
        type: "string",
        default: "colon"
      },
      boxesEqual: {
        type: "boolean",
        default: false
      },
      style: {
        type: "string",
        default: "boxes"
      }
    },
    example: {
      attributes: {
        endDate: new Date(Date.now() + 2592e6).toISOString(),
        // 30 days from now
        style: "boxes",
        boxStyle: "filled",
        digitColor: "#ffffff",
        digitBackground: "#1e73be",
        labelColor: "#333333",
        showDays: true,
        showHours: true,
        showMinutes: true,
        showSeconds: true,
        titleTypography: {
          fontSize: { desktop: 32 }
        },
        contentTypography: {
          fontSize: { desktop: 14 }
        }
      }
    },
    edit: edit_default7,
    save: save_default7
  });
  registerBlockType("digiblocks/counter", {
    apiVersion: 2,
    title: digiBlocksData.blocks["counter"].title,
    category: "digiblocks",
    icon: {
      src: () => {
        const { viewbox, path } = digiBlocksData.blocks["counter"].icon;
        return /* @__PURE__ */ wp.element.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: `0 0 ${viewbox}`, className: "digiblocks-editor-icons" }, /* @__PURE__ */ wp.element.createElement("path", { d: path }));
      }
    },
    description: digiBlocksData.blocks["counter"].description,
    keywords: [__49("counter", "digiblocks"), __49("number", "digiblocks"), __49("stats", "digiblocks"), __49("count up", "digiblocks")],
    supports: {
      inserter: getBlockActiveStatus("counter") ? true : false,
      html: false,
      className: false,
      customClassName: false,
      anchor: false
    },
    attributes: {
      id: {
        type: "string",
        default: ""
      },
      anchor: {
        type: "string",
        default: ""
      },
      visibility: {
        type: "object",
        default: {
          desktop: false,
          tablet: false,
          mobile: false
        }
      },
      customClasses: {
        type: "string",
        default: ""
      },
      iconValue: {
        type: "object",
        default: null
      },
      startNumber: {
        type: "string",
        default: "0"
      },
      endNumber: {
        type: "string",
        default: "100"
      },
      counterPrefix: {
        type: "string",
        default: ""
      },
      counterPrefixSpacing: {
        type: "number",
        default: 5
      },
      counterSuffix: {
        type: "string",
        default: ""
      },
      counterSuffixSpacing: {
        type: "number",
        default: 5
      },
      title: {
        type: "string",
        default: "Counter Title"
      },
      description: {
        type: "string",
        default: "Add description here."
      },
      counterColor: {
        type: "string",
        default: "#333333"
      },
      counterHoverColor: {
        type: "string",
        default: ""
      },
      titleColor: {
        type: "string",
        default: "#333333"
      },
      titleHoverColor: {
        type: "string",
        default: ""
      },
      textColor: {
        type: "string",
        default: "#666666"
      },
      textHoverColor: {
        type: "string",
        default: ""
      },
      backgroundColor: {
        type: "string",
        default: "transparent"
      },
      backgroundHoverColor: {
        type: "string",
        default: ""
      },
      iconColor: {
        type: "string",
        default: "#1e73be"
      },
      iconHoverColor: {
        type: "string",
        default: ""
      },
      iconBackgroundColor: {
        type: "string",
        default: "transparent"
      },
      iconHoverBackgroundColor: {
        type: "string",
        default: ""
      },
      iconSize: {
        type: "object",
        default: {
          desktop: 32,
          tablet: 28,
          mobile: 24
        }
      },
      iconPadding: {
        type: "object",
        default: {
          desktop: { top: "", right: "", bottom: "", left: "", unit: "px" },
          tablet: { top: "", right: "", bottom: "", left: "", unit: "px" },
          mobile: { top: "", right: "", bottom: "", left: "", unit: "px" }
        }
      },
      iconMargin: {
        type: "object",
        default: {
          desktop: { top: 0, right: 0, bottom: 20, left: 0, unit: "px" },
          tablet: { top: 0, right: 0, bottom: 15, left: 0, unit: "px" },
          mobile: { top: 0, right: 0, bottom: 10, left: 0, unit: "px" }
        }
      },
      iconBorderStyle: {
        type: "string",
        default: "default"
      },
      iconBorderWidth: {
        type: "object",
        default: {
          desktop: { top: 1, right: 1, bottom: 1, left: 1, unit: "px" },
          tablet: { top: "", right: "", bottom: "", left: "", unit: "px" },
          mobile: { top: "", right: "", bottom: "", left: "", unit: "px" }
        }
      },
      iconBorderRadius: {
        type: "object",
        default: {
          desktop: { top: "", right: "", bottom: "", left: "", unit: "px" },
          tablet: { top: "", right: "", bottom: "", left: "", unit: "px" },
          mobile: { top: "", right: "", bottom: "", left: "", unit: "px" }
        }
      },
      iconBorderColor: {
        type: "string",
        default: "#e0e0e0"
      },
      iconHoverBorderColor: {
        type: "string",
        default: ""
      },
      typography: {
        type: "object",
        default: {
          fontFamily: "",
          fontSize: { desktop: 48, tablet: 42, mobile: 36 },
          fontSizeUnit: "px",
          fontWeight: "700",
          fontStyle: "normal",
          textTransform: "",
          textDecoration: "",
          lineHeight: { desktop: 1.2, tablet: 1.2, mobile: 1.2 },
          lineHeightUnit: "em",
          letterSpacing: { desktop: 0, tablet: 0, mobile: 0 },
          letterSpacingUnit: "px"
        }
      },
      titleTypography: {
        type: "object",
        default: {
          fontFamily: "",
          fontSize: { desktop: 20, tablet: 18, mobile: 16 },
          fontSizeUnit: "px",
          fontWeight: "500",
          fontStyle: "normal",
          textTransform: "",
          textDecoration: "",
          lineHeight: { desktop: 1.4, tablet: 1.3, mobile: 1.2 },
          lineHeightUnit: "em",
          letterSpacing: { desktop: 0, tablet: 0, mobile: 0 },
          letterSpacingUnit: "px"
        }
      },
      contentTypography: {
        type: "object",
        default: {
          fontFamily: "",
          fontSize: { desktop: 16, tablet: 15, mobile: 14 },
          fontSizeUnit: "px",
          fontWeight: "",
          fontStyle: "normal",
          textTransform: "",
          textDecoration: "",
          lineHeight: { desktop: 1.5, tablet: 1.4, mobile: 1.3 },
          lineHeightUnit: "em",
          letterSpacing: { desktop: 0, tablet: 0, mobile: 0 },
          letterSpacingUnit: "px"
        }
      },
      padding: {
        type: "object",
        default: {
          desktop: {
            top: 30,
            right: 30,
            bottom: 30,
            left: 30,
            unit: "px"
          },
          tablet: {
            top: 25,
            right: 25,
            bottom: 25,
            left: 25,
            unit: "px"
          },
          mobile: {
            top: 20,
            right: 20,
            bottom: 20,
            left: 20,
            unit: "px"
          }
        }
      },
      margin: {
        type: "object",
        default: {
          desktop: {
            top: 0,
            right: 0,
            bottom: 30,
            left: 0,
            unit: "px"
          },
          tablet: {
            top: 0,
            right: 0,
            bottom: 25,
            left: 0,
            unit: "px"
          },
          mobile: {
            top: 0,
            right: 0,
            bottom: 20,
            left: 0,
            unit: "px"
          }
        }
      },
      align: {
        type: "string",
        default: "center"
      },
      animation: {
        type: "string",
        default: "none"
      },
      boxShadow: {
        type: "object",
        default: {
          enable: false,
          color: "rgba(0, 0, 0, 0.2)",
          horizontal: 0,
          vertical: 0,
          blur: 0,
          spread: 0,
          position: "outset"
        }
      },
      boxShadowHover: {
        type: "object",
        default: {
          enable: false,
          color: "rgba(0, 0, 0, 0.2)",
          horizontal: 0,
          vertical: 0,
          blur: 0,
          spread: 0,
          position: "outset"
        }
      },
      borderStyle: {
        type: "string",
        default: "default"
      },
      borderRadius: {
        type: "object",
        default: {
          desktop: {
            top: 8,
            right: 8,
            bottom: 8,
            left: 8,
            unit: "px"
          },
          tablet: {
            top: "",
            right: "",
            bottom: "",
            left: "",
            unit: "px"
          },
          mobile: {
            top: "",
            right: "",
            bottom: "",
            left: "",
            unit: "px"
          }
        }
      },
      borderWidth: {
        type: "object",
        default: {
          desktop: {
            top: 1,
            right: 1,
            bottom: 1,
            left: 1,
            unit: "px"
          },
          tablet: {
            top: "",
            right: "",
            bottom: "",
            left: "",
            unit: "px"
          },
          mobile: {
            top: "",
            right: "",
            bottom: "",
            left: "",
            unit: "px"
          }
        }
      },
      borderColor: {
        type: "string",
        default: "#e0e0e0"
      },
      hoverEffect: {
        type: "string",
        default: "none"
      },
      animationDuration: {
        type: "number",
        default: 2e3
      },
      animationDelay: {
        type: "number",
        default: 0
      },
      thousandSeparator: {
        type: "string",
        default: ","
      },
      decimalPlaces: {
        type: "number",
        default: 0
      },
      decimalSeparator: {
        type: "string",
        default: "."
      },
      layoutStyle: {
        type: "string",
        default: "stacked"
      },
      verticalSpacing: {
        type: "number",
        default: 15
      },
      displayIcon: {
        type: "boolean",
        default: false
      },
      numberWithCommas: {
        type: "boolean",
        default: true
      }
    },
    example: {
      attributes: {
        startNumber: "0",
        endNumber: "100",
        counterPrefix: "",
        counterSuffix: "+",
        title: "Happy Clients",
        description: "Serving clients with excellence",
        displayIcon: true,
        iconValue: {
          id: "user-check",
          name: "User Check",
          svg: '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 640 512"><path d="M274.7 304H173.3C77.61 304 0 381.6 0 477.3C0 496.5 15.52 512 34.66 512H413.3C432.5 512 448 496.5 448 477.3C448 381.6 370.4 304 274.7 304zM224 256c70.7 0 128-57.31 128-128S294.7 0 224 0C153.3 0 96 57.31 96 128S153.3 256 224 256zM632.3 134.4c-9.703-9-24.91-8.453-33.92 1.266l-87.05 93.75l-38.39-38.39c-9.375-9.375-24.56-9.375-33.94 0s-9.375 24.56 0 33.94l56 56C499.5 285.5 505.6 288 512 288h.4375c6.531-.125 12.72-2.891 17.16-7.672l104-112C642.6 158.6 642 143.4 632.3 134.4z"/></svg>',
          style: "solid",
          categories: ["users-people"]
        },
        counterColor: "#1e73be",
        iconColor: "#1e73be",
        backgroundColor: "#ffffff"
      }
    },
    edit: edit_default8,
    save: save_default8
  });
  if (isDigiActive()) {
    registerBlockType("digiblocks/digi-products", {
      apiVersion: 2,
      title: digiBlocksData.blocks["digi-products"].title,
      category: "digiblocks",
      icon: {
        src: () => {
          const { viewbox, path } = digiBlocksData.blocks["digi-products"].icon;
          return /* @__PURE__ */ wp.element.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: `0 0 ${viewbox}`, className: "digiblocks-editor-icons" }, /* @__PURE__ */ wp.element.createElement("path", { d: path }));
        }
      },
      description: digiBlocksData.blocks["digi-products"].description,
      keywords: [__49("products", "digiblocks"), __49("digicommerce", "digiblocks"), __49("ecommerce", "digiblocks"), __49("store", "digiblocks")],
      supports: {
        inserter: getBlockActiveStatus("digi-products") ? true : false,
        html: false,
        className: false,
        customClassName: false,
        anchor: false
      },
      attributes: {
        id: {
          type: "string",
          default: ""
        },
        anchor: {
          type: "string",
          default: ""
        },
        visibility: {
          type: "object",
          default: {
            desktop: false,
            tablet: false,
            mobile: false
          }
        },
        customClasses: {
          type: "string",
          default: ""
        },
        productsToShow: {
          type: "number",
          default: 3
        },
        columns: {
          type: "object",
          default: {
            desktop: 3,
            tablet: 2,
            mobile: 1
          }
        },
        productStyle: {
          type: "string",
          default: "grid"
        },
        displayFeaturedImage: {
          type: "boolean",
          default: true
        },
        displayTitle: {
          type: "boolean",
          default: true
        },
        displayPrice: {
          type: "boolean",
          default: true
        },
        displayRating: {
          type: "boolean",
          default: true
        },
        displaySalePrice: {
          type: "boolean",
          default: true
        },
        displayCategories: {
          type: "boolean",
          default: true
        },
        displayExcerpt: {
          type: "boolean",
          default: true
        },
        displayViewProductButton: {
          type: "boolean",
          default: true
        },
        enablePagination: {
          type: "boolean",
          default: false
        },
        paginationAlign: {
          type: "string",
          default: "center"
        },
        excerptLength: {
          type: "number",
          default: 25
        },
        viewProductText: {
          type: "string",
          default: __49("View Product", "digiblocks")
        },
        order: {
          type: "string",
          default: "desc"
        },
        orderBy: {
          type: "string",
          default: "date"
        },
        categories: {
          type: "array",
          default: []
        },
        paginationBackgroundColor: {
          type: "string",
          default: "#f8f9fa"
        },
        paginationTextColor: {
          type: "string",
          default: "#333333"
        },
        paginationActiveBackgroundColor: {
          type: "string",
          default: "#4a6cf7"
        },
        paginationActiveTextColor: {
          type: "string",
          default: "#ffffff"
        },
        titleColor: {
          type: "string",
          default: "#333333"
        },
        titleHoverColor: {
          type: "string",
          default: ""
        },
        excerptColor: {
          type: "string",
          default: "#666666"
        },
        priceColor: {
          type: "string",
          default: "#4a6cf7"
        },
        salePriceColor: {
          type: "string",
          default: "#e53935"
        },
        catBackgroundColor: {
          type: "string",
          default: "#52576b"
        },
        catColor: {
          type: "string",
          default: "#fff"
        },
        catHoverBackgroundColor: {
          type: "string",
          default: "#3f4a73"
        },
        catHoverColor: {
          type: "string",
          default: "#fff"
        },
        buttonBackgroundColor: {
          type: "string",
          default: "#4a6cf7"
        },
        buttonTextColor: {
          type: "string",
          default: "#ffffff"
        },
        buttonBackgroundHoverColor: {
          type: "string",
          default: "#3a5ce5"
        },
        buttonTextHoverColor: {
          type: "string",
          default: "#ffffff"
        },
        imageMargin: {
          type: "object",
          default: {
            desktop: 15,
            tablet: 15,
            mobile: 15
          }
        },
        contentMargin: {
          type: "object",
          default: {
            desktop: 18,
            tablet: 15,
            mobile: 15
          }
        },
        padding: {
          type: "object",
          default: {
            desktop: { top: "", right: "", bottom: "", left: "", unit: "px" },
            tablet: { top: "", right: "", bottom: "", left: "", unit: "px" },
            mobile: { top: "", right: "", bottom: "", left: "", unit: "px" }
          }
        },
        margin: {
          type: "object",
          default: {
            desktop: { top: 0, right: 0, bottom: 30, left: 0, unit: "px" },
            tablet: { top: 0, right: 0, bottom: 25, left: 0, unit: "px" },
            mobile: { top: 0, right: 0, bottom: 20, left: 0, unit: "px" }
          }
        },
        itemSpacing: {
          type: "object",
          default: {
            desktop: 20,
            tablet: 15,
            mobile: 10
          }
        },
        titleTypography: {
          type: "object",
          default: {
            fontFamily: "",
            fontSize: { desktop: 20, tablet: 18, mobile: 16 },
            fontSizeUnit: "px",
            fontWeight: "600",
            fontStyle: "normal",
            textTransform: "none",
            textDecoration: "none",
            lineHeight: { desktop: 1.4, tablet: 1.3, mobile: 1.2 },
            lineHeightUnit: "em",
            letterSpacing: { desktop: 0, tablet: 0, mobile: 0 },
            letterSpacingUnit: "px"
          }
        },
        headingTypography: {
          type: "object",
          default: {
            fontFamily: "",
            fontSize: { desktop: 18, tablet: 16, mobile: 15 },
            fontSizeUnit: "px",
            fontWeight: "700",
            fontStyle: "normal",
            textTransform: "none",
            textDecoration: "none",
            lineHeight: { desktop: 1.4, tablet: 1.3, mobile: 1.2 },
            lineHeightUnit: "em",
            letterSpacing: { desktop: 0, tablet: 0, mobile: 0 },
            letterSpacingUnit: "px"
          }
        },
        textTypography: {
          type: "object",
          default: {
            fontFamily: "",
            fontSize: { desktop: 13, tablet: 12, mobile: 11 },
            fontSizeUnit: "px",
            fontWeight: "normal",
            fontStyle: "normal",
            textTransform: "none",
            textDecoration: "none",
            lineHeight: { desktop: 1.4, tablet: 1.3, mobile: 1.2 },
            lineHeightUnit: "em",
            letterSpacing: { desktop: 0, tablet: 0, mobile: 0 },
            letterSpacingUnit: "px"
          }
        },
        contentTypography: {
          type: "object",
          default: {
            fontFamily: "",
            fontSize: { desktop: 16, tablet: 15, mobile: 14 },
            fontSizeUnit: "px",
            fontWeight: "normal",
            fontStyle: "normal",
            textTransform: "none",
            textDecoration: "none",
            lineHeight: { desktop: 1.5, tablet: 1.4, mobile: 1.3 },
            lineHeightUnit: "em",
            letterSpacing: { desktop: 0, tablet: 0, mobile: 0 },
            letterSpacingUnit: "px"
          }
        },
        buttonTypography: {
          type: "object",
          default: {
            fontFamily: "",
            fontSize: { desktop: 16, tablet: 15, mobile: 14 },
            fontSizeUnit: "px",
            fontWeight: "500",
            fontStyle: "normal",
            textTransform: "none",
            textDecoration: "none",
            lineHeight: { desktop: 1.5, tablet: 1.4, mobile: 1.3 },
            lineHeightUnit: "em",
            letterSpacing: { desktop: 0, tablet: 0, mobile: 0 },
            letterSpacingUnit: "px"
          }
        },
        buttonPadding: {
          type: "object",
          default: {
            desktop: { top: 10, right: 20, bottom: 10, left: 20, unit: "px" },
            tablet: { top: 8, right: 16, bottom: 8, left: 16, unit: "px" },
            mobile: { top: 6, right: 12, bottom: 6, left: 12, unit: "px" }
          }
        },
        buttonBorderRadius: {
          type: "object",
          default: {
            desktop: { top: 4, right: 4, bottom: 4, left: 4, unit: "px" },
            tablet: { top: "", right: "", bottom: "", left: "", unit: "px" },
            mobile: { top: "", right: "", bottom: "", left: "", unit: "px" }
          }
        },
        imageSize: {
          type: "string",
          default: "medium"
        },
        imageBorderRadius: {
          type: "object",
          default: {
            desktop: { top: 8, right: 8, bottom: 8, left: 8, unit: "px" },
            tablet: { top: "", right: "", bottom: "", left: "", unit: "px" },
            mobile: { top: "", right: "", bottom: "", left: "", unit: "px" }
          }
        },
        cardStyle: {
          type: "boolean",
          default: false
        },
        cardBackgroundColor: {
          type: "string",
          default: "#ffffff"
        },
        cardPadding: {
          type: "object",
          default: {
            desktop: { top: 20, right: 20, bottom: 20, left: 20, unit: "px" },
            tablet: { top: 15, right: 15, bottom: 15, left: 15, unit: "px" },
            mobile: { top: 10, right: 10, bottom: 10, left: 10, unit: "px" }
          }
        },
        cardBorderRadius: {
          type: "object",
          default: {
            desktop: { top: 8, right: 8, bottom: 8, left: 8, unit: "px" },
            tablet: { top: "", right: "", bottom: "", left: "", unit: "px" },
            mobile: { top: "", right: "", bottom: "", left: "", unit: "px" }
          }
        },
        cardBorderStyle: {
          type: "string",
          default: "solid"
        },
        cardBorderWidth: {
          type: "object",
          default: {
            desktop: { top: 1, right: 1, bottom: 1, left: 1, unit: "px" },
            tablet: { top: "", right: "", bottom: "", left: "", unit: "px" },
            mobile: { top: "", right: "", bottom: "", left: "", unit: "px" }
          }
        },
        cardBorderColor: {
          type: "string",
          default: "#e0e0e0"
        },
        cardShadow: {
          type: "object",
          default: {
            enable: false,
            color: "rgba(0, 0, 0, 0.1)",
            horizontal: 0,
            vertical: 0,
            blur: 0,
            spread: 0,
            position: "outset"
          }
        },
        cardShadowHover: {
          type: "object",
          default: {
            enable: false,
            color: "rgba(0, 0, 0, 0.2)",
            horizontal: 0,
            vertical: 0,
            blur: 0,
            spread: 0,
            position: "outset"
          }
        },
        animation: {
          type: "string",
          default: "none"
        }
      },
      example: {
        attributes: {
          productStyle: "grid",
          productsToShow: 2,
          columns: {
            desktop: 2,
            tablet: 2,
            mobile: 1
          },
          displayFeaturedImage: true,
          displayTitle: true,
          displayPrice: true,
          displayExcerpt: true,
          excerptLength: 15,
          cardStyle: true
        },
        viewportWidth: 800
      },
      edit: edit_default9,
      save: save_default9
    });
  }
  registerBlockType("digiblocks/faq", {
    apiVersion: 2,
    title: digiBlocksData.blocks["faq"].title,
    category: "digiblocks",
    icon: {
      src: () => {
        const { viewbox, path } = digiBlocksData.blocks["faq"].icon;
        return /* @__PURE__ */ wp.element.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: `0 0 ${viewbox}`, className: "digiblocks-editor-icons" }, /* @__PURE__ */ wp.element.createElement("path", { d: path }));
      }
    },
    description: digiBlocksData.blocks["faq"].description,
    keywords: [__49("faq", "digiblocks"), __49("questions", "digiblocks"), __49("answers", "digiblocks"), __49("schema", "digiblocks")],
    // Disable all default controls and settings panels
    supports: {
      inserter: getBlockActiveStatus("faq") ? true : false,
      // Remove the block if disabled
      html: false,
      className: false,
      customClassName: false,
      anchor: false
    },
    attributes: {
      id: {
        type: "string",
        default: ""
      },
      anchor: {
        type: "string",
        default: ""
      },
      visibility: {
        type: "object",
        default: {
          desktop: false,
          tablet: false,
          mobile: false
        }
      },
      customClasses: {
        type: "string",
        default: ""
      },
      items: {
        type: "array",
        default: [
          {
            id: "faq-item-1",
            title: __49("What is a frequently asked question?", "digiblocks"),
            content: __49("A frequently asked question (FAQ) is a question that is commonly asked by users or customers. FAQs are typically displayed in a list with their answers to help visitors find information quickly.", "digiblocks"),
            isOpen: true
          },
          {
            id: "faq-item-2",
            title: __49("How do I add more questions and answers?", "digiblocks"),
            content: __49('Simply click the "Add FAQ Item" button below to add more questions and answers to your FAQ section. You can also reorder, edit, or remove existing items using the control buttons.', "digiblocks"),
            isOpen: false
          }
        ]
      },
      titleColor: {
        type: "string",
        default: "#333333"
      },
      titleHoverColor: {
        type: "string",
        default: ""
      },
      titleActiveColor: {
        type: "string",
        default: "#1e73be"
      },
      backgroundColor: {
        type: "string",
        default: "#ffffff"
      },
      backgroundHoverColor: {
        type: "string",
        default: ""
      },
      backgroundActiveColor: {
        type: "string",
        default: "#f7f7f7"
      },
      contentColor: {
        type: "string",
        default: "#666666"
      },
      contentBackgroundColor: {
        type: "string",
        default: ""
      },
      borderColor: {
        type: "string",
        default: "#e0e0e0"
      },
      borderHoverColor: {
        type: "string",
        default: ""
      },
      borderRadius: {
        type: "object",
        default: {
          desktop: { top: 8, right: 8, bottom: 8, left: 8, unit: "px" },
          tablet: { top: "", right: "", bottom: "", left: "", unit: "px" },
          mobile: { top: "", right: "", bottom: "", left: "", unit: "px" }
        }
      },
      borderWidth: {
        type: "object",
        default: {
          desktop: { top: 1, right: 1, bottom: 1, left: 1, unit: "px" },
          tablet: { top: "", right: "", bottom: "", left: "", unit: "px" },
          mobile: { top: "", right: "", bottom: "", left: "", unit: "px" }
        }
      },
      borderStyle: {
        type: "string",
        default: "solid"
      },
      boxShadow: {
        type: "object",
        default: {
          enable: false,
          color: "rgba(0, 0, 0, 0.2)",
          horizontal: 0,
          vertical: 0,
          blur: 0,
          spread: 0,
          position: "outset"
        }
      },
      boxShadowHover: {
        type: "object",
        default: {
          enable: false,
          color: "rgba(0, 0, 0, 0.2)",
          horizontal: 0,
          vertical: 0,
          blur: 0,
          spread: 0,
          position: "outset"
        }
      },
      padding: {
        type: "object",
        default: {
          desktop: { top: 20, right: 20, bottom: 20, left: 20, unit: "px" },
          tablet: { top: 15, right: 15, bottom: 15, left: 15, unit: "px" },
          mobile: { top: 10, right: 10, bottom: 10, left: 10, unit: "px" }
        }
      },
      margin: {
        type: "object",
        default: {
          desktop: { top: 0, right: 0, bottom: 30, left: 0, unit: "px" },
          tablet: { top: 0, right: 0, bottom: 25, left: 0, unit: "px" },
          mobile: { top: 0, right: 0, bottom: 20, left: 0, unit: "px" }
        }
      },
      titleTypography: {
        type: "object",
        default: {
          fontFamily: "",
          fontSize: { desktop: 18, tablet: 16, mobile: 15 },
          fontSizeUnit: "px",
          fontWeight: "600",
          fontStyle: "normal",
          textTransform: "none",
          textDecoration: "none",
          lineHeight: { desktop: 1.5, tablet: 1.4, mobile: 1.3 },
          lineHeightUnit: "em",
          letterSpacing: { desktop: 0, tablet: 0, mobile: 0 },
          letterSpacingUnit: "px"
        }
      },
      contentTypography: {
        type: "object",
        default: {
          fontFamily: "",
          fontSize: { desktop: 16, tablet: 15, mobile: 14 },
          fontSizeUnit: "px",
          fontWeight: "",
          fontStyle: "normal",
          textTransform: "",
          textDecoration: "",
          lineHeight: { desktop: 1.5, tablet: 1.4, mobile: 1.3 },
          lineHeightUnit: "em",
          letterSpacing: { desktop: 0, tablet: 0, mobile: 0 },
          letterSpacingUnit: "px"
        }
      },
      iconPosition: {
        type: "string",
        default: "right"
      },
      iconColor: {
        type: "string",
        default: "#333333"
      },
      iconHoverColor: {
        type: "string",
        default: ""
      },
      iconActiveColor: {
        type: "string",
        default: "#1e73be"
      },
      iconSize: {
        type: "object",
        default: {
          desktop: 16,
          tablet: 14,
          mobile: 12
        }
      },
      animation: {
        type: "string",
        default: "none"
      },
      allowMultipleOpen: {
        type: "boolean",
        default: false
      },
      iconType: {
        type: "string",
        default: "plusMinus"
      },
      titleTag: {
        type: "string",
        default: "h3"
      },
      questionPrefix: {
        type: "string",
        default: ""
      },
      questionPrefixColor: {
        type: "string",
        default: ""
      },
      answerPrefix: {
        type: "string",
        default: ""
      },
      answerPrefixColor: {
        type: "string",
        default: ""
      },
      layout: {
        type: "string",
        default: "boxed"
      },
      itemsSpacing: {
        type: "object",
        default: {
          desktop: 16,
          tablet: 12,
          mobile: 8
        }
      },
      schemaEnabled: {
        type: "boolean",
        default: true
      },
      schemaType: {
        type: "string",
        default: "FAQPage"
      },
      schemaName: {
        type: "string",
        default: ""
      }
    },
    example: {
      attributes: {
        items: [
          {
            id: "faq-item-1",
            title: __49("What is a frequently asked question?", "digiblocks"),
            content: __49("A frequently asked question (FAQ) is a question that is commonly asked by users or customers.", "digiblocks"),
            isOpen: true
          },
          {
            id: "faq-item-2",
            title: __49("How do I add more questions?", "digiblocks"),
            content: __49('Click the "Add FAQ Item" button to add more questions and answers.', "digiblocks"),
            isOpen: false
          }
        ],
        layout: "boxed",
        titleColor: "#333333",
        titleActiveColor: "#1e73be",
        backgroundColor: "#ffffff"
      }
    },
    edit: edit_default10,
    save: save_default10
  });
  registerBlockType("digiblocks/forms", {
    apiVersion: 2,
    title: digiBlocksData.blocks["forms"].title,
    category: "digiblocks",
    icon: {
      src: () => {
        const { viewbox, path } = digiBlocksData.blocks["forms"].icon;
        return /* @__PURE__ */ wp.element.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: `0 0 ${viewbox}`, className: "digiblocks-editor-icons" }, /* @__PURE__ */ wp.element.createElement("path", { d: path }));
      }
    },
    description: digiBlocksData.blocks["forms"].description,
    keywords: [__49("form", "digiblocks"), __49("contact", "digiblocks"), __49("input", "digiblocks"), __49("email", "digiblocks"), __49("field", "digiblocks")],
    supports: {
      inserter: getBlockActiveStatus("forms") ? true : false,
      html: false,
      className: false,
      customClassName: false,
      anchor: false
    },
    attributes: {
      id: {
        type: "string",
        default: ""
      },
      anchor: {
        type: "string"
      },
      visibility: {
        type: "object",
        default: {
          desktop: false,
          tablet: false,
          mobile: false
        }
      },
      customClasses: {
        type: "string"
      },
      formName: {
        type: "string",
        default: __49("Contact Form", "digiblocks")
      },
      recipientEmail: {
        type: "string",
        default: ""
      },
      emailSubject: {
        type: "string",
        default: __49("New form submission", "digiblocks")
      },
      successMessage: {
        type: "string",
        default: __49("Thank you for your submission!", "digiblocks")
      },
      errorMessage: {
        type: "string",
        default: __49("There was an error submitting the form. Please try again.", "digiblocks")
      },
      enableRecaptcha: {
        type: "boolean",
        default: false
      },
      useSiteLogo: {
        type: "boolean",
        default: true
      },
      customLogo: {
        type: "string",
        default: ""
      },
      emailHeader: {
        type: "string",
        default: ""
      },
      emailFooter: {
        type: "string",
        default: ""
      },
      businessName: {
        type: "string",
        default: ""
      },
      businessAddress: {
        type: "string",
        default: ""
      },
      submitButtonText: {
        type: "string",
        default: __49("Submit", "digiblocks")
      },
      buttonAlign: {
        type: "string",
        default: "left"
      },
      backgroundColor: {
        type: "string",
        default: "#ffffff"
      },
      textColor: {
        type: "string",
        default: "#333333"
      },
      labelColor: {
        type: "string",
        default: "#333333"
      },
      buttonBackgroundColor: {
        type: "string",
        default: "#4a6cf7"
      },
      buttonTextColor: {
        type: "string",
        default: "#ffffff"
      },
      buttonBackgroundHoverColor: {
        type: "string",
        default: "#3a5ce5"
      },
      buttonTextHoverColor: {
        type: "string",
        default: "#ffffff"
      },
      borderStyle: {
        type: "string",
        default: "solid"
      },
      borderColor: {
        type: "string",
        default: "#e0e0e0"
      },
      borderWidth: {
        type: "object",
        default: {
          desktop: { top: 1, right: 1, bottom: 1, left: 1, unit: "px" },
          tablet: { top: "", right: "", bottom: "", left: "", unit: "px" },
          mobile: { top: "", right: "", bottom: "", left: "", unit: "px" }
        }
      },
      borderRadius: {
        type: "object",
        default: {
          desktop: { top: 8, right: 8, bottom: 8, left: 8, unit: "px" },
          tablet: { top: "", right: "", bottom: "", left: "", unit: "px" },
          mobile: { top: "", right: "", bottom: "", left: "", unit: "px" }
        }
      },
      padding: {
        type: "object",
        default: {
          desktop: { top: 30, right: 30, bottom: 30, left: 30, unit: "px" },
          tablet: { top: 25, right: 25, bottom: 25, left: 25, unit: "px" },
          mobile: { top: 20, right: 20, bottom: 20, left: 20, unit: "px" }
        }
      },
      margin: {
        type: "object",
        default: {
          desktop: { top: 0, right: 0, bottom: 30, left: 0, unit: "px" },
          tablet: { top: 0, right: 0, bottom: 25, left: 0, unit: "px" },
          mobile: { top: 0, right: 0, bottom: 20, left: 0, unit: "px" }
        }
      },
      typography: {
        type: "object",
        default: {}
      },
      textTypography: {
        type: "object",
        default: {}
      },
      buttonTypography: {
        type: "object",
        default: {}
      },
      boxShadow: {
        type: "object",
        default: {
          enable: false,
          color: "rgba(0, 0, 0, 0.1)",
          horizontal: 0,
          vertical: 0,
          blur: 0,
          spread: 0,
          position: "outset"
        }
      },
      boxShadowHover: {
        type: "object",
        default: {
          enable: false,
          color: "rgba(0, 0, 0, 0.2)",
          horizontal: 0,
          vertical: 0,
          blur: 0,
          spread: 0,
          position: "outset"
        }
      },
      inputBorderStyle: {
        type: "string",
        default: "solid"
      },
      inputBorderColor: {
        type: "string",
        default: "#e0e0e0"
      },
      inputBorderWidth: {
        type: "object",
        default: {
          desktop: { top: 1, right: 1, bottom: 1, left: 1, unit: "px" },
          tablet: { top: "", right: "", bottom: "", left: "", unit: "px" },
          mobile: { top: "", right: "", bottom: "", left: "", unit: "px" }
        }
      },
      inputBorderRadius: {
        type: "object",
        default: {
          desktop: { top: 4, right: 4, bottom: 4, left: 4, unit: "px" },
          tablet: { top: "", right: "", bottom: "", left: "", unit: "px" },
          mobile: { top: "", right: "", bottom: "", left: "", unit: "px" }
        }
      },
      inputPadding: {
        type: "object",
        default: {
          desktop: { top: 12, right: 15, bottom: 12, left: 15, unit: "px" },
          tablet: { top: 10, right: 12, bottom: 10, left: 12, unit: "px" },
          mobile: { top: 8, right: 10, bottom: 8, left: 10, unit: "px" }
        }
      },
      inputBackgroundColor: {
        type: "string",
        default: "#ffffff"
      },
      inputTextColor: {
        type: "string",
        default: "#333333"
      },
      inputFocusBorderColor: {
        type: "string",
        default: "#4a6cf7"
      },
      animation: {
        type: "string",
        default: "none"
      },
      fieldGap: {
        type: "object",
        default: {
          desktop: 20,
          tablet: 15,
          mobile: 12
        }
      },
      labelMargin: {
        type: "object",
        default: {
          desktop: 8,
          tablet: 6,
          mobile: 5
        }
      },
      fields: {
        type: "array",
        default: [
          {
            id: "name",
            type: "text",
            label: __49("Name", "digiblocks"),
            placeholder: __49("Enter your name", "digiblocks"),
            required: true,
            width: 100
          },
          {
            id: "email",
            type: "email",
            label: __49("Email", "digiblocks"),
            placeholder: __49("Enter your email", "digiblocks"),
            required: true,
            width: 100
          },
          {
            id: "message",
            type: "textarea",
            label: __49("Message", "digiblocks"),
            placeholder: __49("Enter your message", "digiblocks"),
            required: true,
            width: 100
          }
        ]
      }
    },
    example: {
      attributes: {
        fields: [
          {
            id: "name",
            type: "text",
            label: __49("Name", "digiblocks"),
            placeholder: __49("Enter your name", "digiblocks"),
            required: true,
            width: 100
          },
          {
            id: "email",
            type: "email",
            label: __49("Email", "digiblocks"),
            placeholder: __49("Enter your email", "digiblocks"),
            required: true,
            width: 100
          },
          {
            id: "message",
            type: "textarea",
            label: __49("Message", "digiblocks"),
            placeholder: __49("Enter your message", "digiblocks"),
            required: true,
            width: 100
          }
        ],
        formName: __49("Contact Form", "digiblocks"),
        backgroundColor: "#ffffff",
        textColor: "#333333",
        labelColor: "#333333",
        borderStyle: "solid",
        borderColor: "#e0e0e0",
        buttonBackgroundColor: "#4a6cf7",
        buttonTextColor: "#ffffff",
        submitButtonText: __49("Submit", "digiblocks"),
        viewportWidth: 450
      }
    },
    edit: edit_default11,
    save: save_default11
  });
  registerBlockType("digiblocks/google-map", {
    apiVersion: 2,
    title: digiBlocksData.blocks["google-map"].title,
    category: "digiblocks",
    icon: {
      src: () => {
        const { viewbox, path } = digiBlocksData.blocks["google-map"].icon;
        return /* @__PURE__ */ wp.element.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: `0 0 ${viewbox}`, className: "digiblocks-editor-icons" }, /* @__PURE__ */ wp.element.createElement("path", { d: path }));
      }
    },
    description: digiBlocksData.blocks["google-map"].description,
    keywords: [__49("map", "digiblocks"), __49("google", "digiblocks"), __49("location", "digiblocks"), __49("marker", "digiblocks")],
    supports: {
      inserter: getBlockActiveStatus("google-map") ? true : false,
      html: false,
      className: false,
      customClassName: false,
      anchor: false
    },
    attributes: {
      id: {
        type: "string",
        default: ""
      },
      anchor: {
        type: "string",
        default: ""
      },
      visibility: {
        type: "object",
        default: {
          desktop: false,
          tablet: false,
          mobile: false
        }
      },
      customClasses: {
        type: "string",
        default: ""
      },
      address: {
        type: "string",
        default: ""
      },
      mapHeight: {
        type: "object",
        default: {
          desktop: 400,
          tablet: 350,
          mobile: 300
        }
      },
      zoom: {
        type: "number",
        default: 10
      },
      mapType: {
        type: "string",
        default: "roadmap"
      },
      mapStyle: {
        type: "string",
        default: "default"
      },
      customMapStyle: {
        type: "string",
        default: ""
      },
      mapId: {
        type: "string",
        default: ""
      },
      markers: {
        type: "array",
        default: []
      },
      animation: {
        type: "string",
        default: "none"
      },
      enableZoom: {
        type: "boolean",
        default: true
      },
      enableScroll: {
        type: "boolean",
        default: true
      },
      enableFullscreenControl: {
        type: "boolean",
        default: true
      },
      enableStreetViewControl: {
        type: "boolean",
        default: true
      },
      enableMapTypeControl: {
        type: "boolean",
        default: true
      },
      borderStyle: {
        type: "string",
        default: "none"
      },
      borderWidth: {
        type: "object",
        default: {
          desktop: { top: 1, right: 1, bottom: 1, left: 1, unit: "px" },
          tablet: { top: "", right: "", bottom: "", left: "", unit: "px" },
          mobile: { top: "", right: "", bottom: "", left: "", unit: "px" }
        }
      },
      borderRadius: {
        type: "object",
        default: {
          desktop: { top: "", right: "", bottom: "", left: "", unit: "px" },
          tablet: { top: "", right: "", bottom: "", left: "", unit: "px" },
          mobile: { top: "", right: "", bottom: "", left: "", unit: "px" }
        }
      },
      borderColor: {
        type: "string",
        default: "#e0e0e0"
      },
      boxShadow: {
        type: "object",
        default: {
          enable: false,
          color: "rgba(0, 0, 0, 0.2)",
          horizontal: 0,
          vertical: 0,
          blur: 0,
          spread: 0,
          position: "outset"
        }
      },
      boxShadowHover: {
        type: "object",
        default: {
          enable: false,
          color: "rgba(0, 0, 0, 0.2)",
          horizontal: 0,
          vertical: 0,
          blur: 0,
          spread: 0,
          position: "outset"
        }
      }
    },
    example: {
      attributes: {
        address: "New York, NY",
        mapHeight: {
          desktop: 300
        },
        zoom: 12,
        mapType: "roadmap"
      }
    },
    edit: edit_default12,
    save: save_default12
  });
  registerBlockType("digiblocks/heading", {
    apiVersion: 2,
    title: digiBlocksData.blocks["heading"].title,
    category: "digiblocks",
    icon: {
      src: () => {
        const { viewbox, path } = digiBlocksData.blocks["heading"].icon;
        return /* @__PURE__ */ wp.element.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: `0 0 ${viewbox}`, className: "digiblocks-editor-icons" }, /* @__PURE__ */ wp.element.createElement("path", { d: path }));
      }
    },
    description: digiBlocksData.blocks["heading"].description,
    keywords: [__49("heading", "digiblocks"), __49("title", "digiblocks"), __49("header", "digiblocks")],
    // Disable default controls and settings panels
    supports: {
      inserter: getBlockActiveStatus("heading") ? true : false,
      // Remove the block if disabled
      html: false,
      className: false,
      customClassName: false,
      anchor: false
    },
    attributes: {
      id: {
        type: "string",
        default: ""
      },
      anchor: {
        type: "string",
        default: ""
      },
      visibility: {
        type: "object",
        default: {
          desktop: false,
          tablet: false,
          mobile: false
        }
      },
      customClasses: {
        type: "string",
        default: ""
      },
      content: {
        type: "string",
        default: __49("Add Your Heading", "digiblocks")
      },
      headingTag: {
        type: "string",
        default: "h2"
      },
      textColor: {
        type: "string",
        default: "#333333"
      },
      textHoverColor: {
        type: "string",
        default: ""
      },
      backgroundColor: {
        type: "string",
        default: ""
      },
      backgroundHoverColor: {
        type: "string",
        default: ""
      },
      typography: {
        type: "object",
        default: {
          fontFamily: "",
          fontSize: { desktop: 32, tablet: 28, mobile: 24 },
          fontSizeUnit: "px",
          fontWeight: "600",
          fontStyle: "normal",
          textTransform: "none",
          textDecoration: "none",
          lineHeight: { desktop: 1.2, tablet: 1.2, mobile: 1.2 },
          lineHeightUnit: "em",
          letterSpacing: { desktop: 0, tablet: 0, mobile: 0 },
          letterSpacingUnit: "px"
        }
      },
      align: {
        type: "object",
        default: {
          desktop: "left",
          tablet: "left",
          mobile: "left"
        }
      },
      padding: {
        type: "object",
        default: {
          desktop: { top: "", right: "", bottom: "", left: "", unit: "px" },
          tablet: { top: "", right: "", bottom: "", left: "", unit: "px" },
          mobile: { top: "", right: "", bottom: "", left: "", unit: "px" }
        }
      },
      margin: {
        type: "object",
        default: {
          desktop: { top: "", right: "", bottom: "", left: "", unit: "px" },
          tablet: { top: "", right: "", bottom: "", left: "", unit: "px" },
          mobile: { top: "", right: "", bottom: "", left: "", unit: "px" }
        }
      },
      animation: {
        type: "string",
        default: "none"
      },
      highlightText: {
        type: "string",
        default: ""
      },
      highlightColor: {
        type: "string",
        default: "#ffde59"
      },
      highlightType: {
        type: "string",
        default: "background"
      },
      displaySeparator: {
        type: "boolean",
        default: false
      },
      separatorColor: {
        type: "string",
        default: "#1e73be"
      },
      separatorSecondaryColor: {
        type: "string",
        default: "#e0e0e0"
      },
      separatorWidth: {
        type: "object",
        default: {
          desktop: 50,
          tablet: 40,
          mobile: 30
        }
      },
      separatorHeight: {
        type: "object",
        default: {
          desktop: 3,
          tablet: 2,
          mobile: 2
        }
      },
      separatorPosition: {
        type: "string",
        default: "bottom"
      },
      separatorStyle: {
        type: "string",
        default: "line-solid"
      },
      separatorSpacing: {
        type: "object",
        default: {
          desktop: 10,
          tablet: 8,
          mobile: 6
        }
      },
      separatorBorderRadius: {
        type: "object",
        default: {
          desktop: { top: "", right: "", bottom: "", left: "", unit: "px" },
          tablet: { top: "", right: "", bottom: "", left: "", unit: "px" },
          mobile: { top: "", right: "", bottom: "", left: "", unit: "px" }
        }
      },
      linkEnabled: {
        type: "boolean",
        default: false
      },
      linkUrl: {
        type: "string",
        default: ""
      },
      linkOpenInNewTab: {
        type: "boolean",
        default: false
      },
      linkRel: {
        type: "string",
        default: ""
      },
      shadowEnabled: {
        type: "boolean",
        default: false
      },
      textShadow: {
        type: "object",
        default: {
          horizontal: 2,
          vertical: 2,
          blur: 3,
          color: "rgba(0,0,0,0.3)"
        }
      }
    },
    example: {
      attributes: {
        content: __49("Beautiful Heading", "digiblocks"),
        level: 2,
        textColor: "#333333",
        typography: {
          fontSize: { desktop: 32 },
          fontWeight: "600",
          lineHeight: { desktop: 1.2 }
        },
        displaySeparator: true,
        separatorStyle: "line-gradient",
        separatorColor: "#1e73be"
      }
    },
    edit: edit_default13,
    save: save_default13
  });
  registerBlockType("digiblocks/icon", {
    apiVersion: 2,
    title: digiBlocksData.blocks["icon"].title,
    category: "digiblocks",
    icon: {
      src: () => {
        const { viewbox, path } = digiBlocksData.blocks["icon"].icon;
        return /* @__PURE__ */ wp.element.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: `0 0 ${viewbox}`, className: "digiblocks-editor-icons" }, /* @__PURE__ */ wp.element.createElement("path", { d: path }));
      }
    },
    description: digiBlocksData.blocks["icon"].description,
    keywords: [__49("icon", "digiblocks"), __49("symbol", "digiblocks"), __49("fontawesome", "digiblocks")],
    // Disable all default controls and settings panels
    supports: {
      inserter: getBlockActiveStatus("icon") ? true : false,
      // Remove the block if disabled
      html: false,
      className: false,
      customClassName: false,
      anchor: false
    },
    attributes: {
      id: {
        type: "string",
        default: ""
      },
      anchor: {
        type: "string",
        default: ""
      },
      visibility: {
        type: "object",
        default: {
          desktop: false,
          tablet: false,
          mobile: false
        }
      },
      customClasses: {
        type: "string",
        default: ""
      },
      iconSource: {
        type: "string",
        default: "library"
      },
      customSvg: {
        type: "string",
        default: ""
      },
      iconValue: {
        type: "object",
        default: {
          id: "heart",
          name: "Heart",
          svg: '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512" width="1em" height="1em"><path d="M47.6 300.4L228.3 469.1c7.5 7 17.4 10.9 27.7 10.9s20.2-3.9 27.7-10.9L464.4 300.4c30.4-28.3 47.6-68 47.6-109.5v-5.8c0-69.9-50.5-129.5-119.4-141C347 36.5 300.6 51.4 268 84L256 96 244 84c-32.6-32.6-79-47.5-124.6-39.9C50.5 55.6 0 115.2 0 185.1v5.8c0 41.5 17.2 81.2 47.6 109.5z"></path></svg>',
          style: "solid",
          categories: ["symbols", "emoji"]
        }
      },
      align: {
        type: "object",
        default: {
          desktop: "flex-start",
          tablet: "",
          mobile: ""
        }
      },
      iconColor: {
        type: "string",
        default: "#1e73be"
      },
      iconBackgroundColor: {
        type: "string",
        default: "transparent"
      },
      iconBorderStyle: {
        type: "string",
        default: "default"
      },
      iconBorderWidth: {
        type: "object",
        default: {
          desktop: { top: 1, right: 1, bottom: 1, left: 1, unit: "px" },
          tablet: { top: "", right: "", bottom: "", left: "", unit: "px" },
          mobile: { top: "", right: "", bottom: "", left: "", unit: "px" }
        }
      },
      iconBorderRadius: {
        type: "object",
        default: {
          desktop: { top: "", right: "", bottom: "", left: "", unit: "px" },
          tablet: { top: "", right: "", bottom: "", left: "", unit: "px" },
          mobile: { top: "", right: "", bottom: "", left: "", unit: "px" }
        }
      },
      iconBorderColor: {
        type: "string",
        default: "#e0e0e0"
      },
      iconPadding: {
        type: "object",
        default: {
          desktop: { top: 10, right: 10, bottom: 10, left: 10, unit: "px" },
          tablet: { top: 8, right: 8, bottom: 8, left: 8, unit: "px" },
          mobile: { top: 5, right: 5, bottom: 5, left: 5, unit: "px" }
        }
      },
      iconMargin: {
        type: "object",
        default: {
          desktop: { top: "", right: "", bottom: "", left: "", unit: "px" },
          tablet: { top: "", right: "", bottom: "", left: "", unit: "px" },
          mobile: { top: "", right: "", bottom: "", left: "", unit: "px" }
        }
      },
      iconHoverColor: {
        type: "string",
        default: ""
      },
      iconHoverBackgroundColor: {
        type: "string",
        default: ""
      },
      iconHoverBorderColor: {
        type: "string",
        default: ""
      },
      linkEnabled: {
        type: "boolean",
        default: false
      },
      linkUrl: {
        type: "string",
        default: ""
      },
      linkOpenInNewTab: {
        type: "boolean",
        default: false
      },
      linkRel: {
        type: "string",
        default: ""
      },
      iconSize: {
        type: "object",
        default: {
          desktop: 48,
          tablet: 40,
          mobile: 32
        }
      },
      backgroundColor: {
        type: "string",
        default: "transparent"
      },
      backgroundHoverColor: {
        type: "string",
        default: ""
      },
      animation: {
        type: "string",
        default: "none"
      },
      borderStyle: {
        type: "string",
        default: "default"
      },
      borderRadius: {
        type: "object",
        default: {
          desktop: {
            top: 8,
            right: 8,
            bottom: 8,
            left: 8,
            unit: "px"
          },
          tablet: {
            top: 8,
            right: 8,
            bottom: 8,
            left: 8,
            unit: "px"
          },
          mobile: {
            top: 8,
            right: 8,
            bottom: 8,
            left: 8,
            unit: "px"
          }
        }
      },
      borderWidth: {
        type: "object",
        default: {
          desktop: {
            top: 1,
            right: 1,
            bottom: 1,
            left: 1,
            unit: "px"
          },
          tablet: {
            top: 1,
            right: 1,
            bottom: 1,
            left: 1,
            unit: "px"
          },
          mobile: {
            top: 1,
            right: 1,
            bottom: 1,
            left: 1,
            unit: "px"
          }
        }
      },
      borderColor: {
        type: "string",
        default: "#e0e0e0"
      },
      hoverEffect: {
        type: "string",
        default: "none"
      },
      boxShadow: {
        type: "object",
        default: {
          enable: false,
          color: "rgba(0, 0, 0, 0.2)",
          horizontal: 0,
          vertical: 0,
          blur: 0,
          spread: 0,
          position: "outset"
        }
      },
      boxShadowHover: {
        type: "object",
        default: {
          enable: false,
          color: "rgba(0, 0, 0, 0.2)",
          horizontal: 0,
          vertical: 0,
          blur: 0,
          spread: 0,
          position: "outset"
        }
      },
      rotateIcon: {
        type: "number",
        default: 0
      },
      flipHorizontal: {
        type: "boolean",
        default: false
      },
      flipVertical: {
        type: "boolean",
        default: false
      }
    },
    example: {
      attributes: {
        iconValue: {
          id: "star",
          name: "Star",
          svg: '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 576 512" width="1em" height="1em"><path d="M381.2 150.3L524.9 171.5C536.8 173.2 546.8 181.6 550.6 193.1C554.4 204.7 551.3 217.3 542.7 225.9L438.5 328.1L463.1 474.7C465.1 486.7 460.2 498.9 450.2 506C440.3 513.1 427.2 514 416.5 508.3L288.1 439.8L159.8 508.3C149 514 135.9 513.1 126 506C116.1 498.9 111.1 486.7 113.2 474.7L137.8 328.1L33.58 225.9C24.97 217.3 21.91 204.7 25.69 193.1C29.46 181.6 39.43 173.2 51.42 171.5L195 150.3L259.4 17.97C264.7 6.954 275.9-.0391 288.1-.0391C300.4-.0391 311.6 6.954 316.9 17.97L381.2 150.3z"></path></svg>',
          style: "solid",
          categories: ["design", "basic-shapes"]
        },
        iconColor: "#1e73be",
        backgroundColor: "transparent",
        iconSize: { desktop: 80 },
        iconPadding: {
          desktop: { top: "", right: "", bottom: "", left: "", unit: "px" },
          tablet: { top: "", right: "", bottom: "", left: "", unit: "px" },
          mobile: { top: "", right: "", bottom: "", left: "", unit: "px" }
        }
      }
    },
    edit: edit_default14,
    save: save_default14
  });
  registerBlockType("digiblocks/icon-box", {
    apiVersion: 2,
    title: digiBlocksData.blocks["icon-box"].title,
    category: "digiblocks",
    icon: {
      src: () => {
        const { viewbox, path } = digiBlocksData.blocks["icon-box"].icon;
        return /* @__PURE__ */ wp.element.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: `0 0 ${viewbox}`, className: "digiblocks-editor-icons" }, /* @__PURE__ */ wp.element.createElement("path", { d: path }));
      }
    },
    description: digiBlocksData.blocks["icon-box"].description,
    keywords: [__49("icon", "digiblocks"), __49("box", "digiblocks"), __49("feature", "digiblocks"), __49("service", "digiblocks")],
    // Disable all default controls and settings panels
    supports: {
      inserter: getBlockActiveStatus("icon-box") ? true : false,
      // Remove the block if disabled
      html: false,
      className: false,
      customClassName: false,
      anchor: false
    },
    attributes: {
      id: {
        type: "string",
        default: ""
      },
      anchor: {
        type: "string",
        default: ""
      },
      visibility: {
        type: "object",
        default: {
          desktop: false,
          tablet: false,
          mobile: false
        }
      },
      customClasses: {
        type: "string",
        default: ""
      },
      iconSource: {
        type: "string",
        default: "library"
      },
      customSvg: {
        type: "string",
        default: ""
      },
      iconValue: {
        type: "object",
        default: null
      },
      align: {
        type: "object",
        default: {
          desktop: "center",
          tablet: "center",
          mobile: "center"
        }
      },
      iconLayout: {
        type: "object",
        default: {
          desktop: "above",
          tablet: "above",
          mobile: "above"
        }
      },
      iconContentGap: {
        type: "object",
        default: {
          desktop: { value: 20, unit: "px" },
          tablet: { value: 15, unit: "px" },
          mobile: { value: 10, unit: "px" }
        }
      },
      showTitle: {
        type: "boolean",
        default: true
      },
      showContent: {
        type: "boolean",
        default: true
      },
      title: {
        type: "string",
        default: __49("Feature Title", "digiblocks")
      },
      content: {
        type: "string",
        default: __49("Add your feature description here. Explain what makes this feature special.", "digiblocks")
      },
      iconColor: {
        type: "string",
        default: "#1e73be"
      },
      titleColor: {
        type: "string",
        default: "#333333"
      },
      titleHoverColor: {
        type: "string",
        default: ""
      },
      textColor: {
        type: "string",
        default: "#666666"
      },
      textHoverColor: {
        type: "string",
        default: ""
      },
      backgroundColor: {
        type: "string",
        default: "#ffffff"
      },
      backgroundHoverColor: {
        type: "string",
        default: ""
      },
      iconBackgroundColor: {
        type: "string",
        default: "transparent"
      },
      iconBorderStyle: {
        type: "string",
        default: "default"
      },
      iconBorderWidth: {
        type: "object",
        default: {
          desktop: { top: 1, right: 1, bottom: 1, left: 1, unit: "px" },
          tablet: { top: "", right: "", bottom: "", left: "", unit: "px" },
          mobile: { top: "", right: "", bottom: "", left: "", unit: "px" }
        }
      },
      iconBorderRadius: {
        type: "object",
        default: {
          desktop: { top: "", right: "", bottom: "", left: "", unit: "px" },
          tablet: { top: "", right: "", bottom: "", left: "", unit: "px" },
          mobile: { top: "", right: "", bottom: "", left: "", unit: "px" }
        }
      },
      iconBorderColor: {
        type: "string",
        default: "#e0e0e0"
      },
      iconPadding: {
        type: "object",
        default: {
          desktop: { top: "", right: "", bottom: "", left: "", unit: "px" },
          tablet: { top: "", right: "", bottom: "", left: "", unit: "px" },
          mobile: { top: "", right: "", bottom: "", left: "", unit: "px" }
        }
      },
      iconMargin: {
        type: "object",
        default: {
          desktop: { top: "", right: "", bottom: "", left: "", unit: "px" },
          tablet: { top: "", right: "", bottom: "", left: "", unit: "px" },
          mobile: { top: "", right: "", bottom: "", left: "", unit: "px" }
        }
      },
      iconHoverColor: {
        type: "string",
        default: ""
      },
      iconHoverBackgroundColor: {
        type: "string",
        default: ""
      },
      iconHoverBorderColor: {
        type: "string",
        default: ""
      },
      linkEnabled: {
        type: "boolean",
        default: false
      },
      linkType: {
        type: "string",
        default: "box"
      },
      linkUrl: {
        type: "string",
        default: ""
      },
      linkOpenInNewTab: {
        type: "boolean",
        default: false
      },
      linkRel: {
        type: "string",
        default: ""
      },
      buttonText: {
        type: "string",
        default: __49("Learn More", "digiblocks")
      },
      buttonBackgroundColor: {
        type: "string",
        default: "#1e73be"
      },
      buttonBackgroundHoverColor: {
        type: "string",
        default: "#135e9e"
      },
      buttonTextColor: {
        type: "string",
        default: "#ffffff"
      },
      buttonTextHoverColor: {
        type: "string",
        default: "#ffffff"
      },
      buttonBorderStyle: {
        type: "string",
        default: "default"
      },
      buttonBorderWidth: {
        type: "object",
        default: {
          desktop: { top: 1, right: 1, bottom: 1, left: 1, unit: "px" },
          tablet: { top: "", right: "", bottom: "", left: "", unit: "px" },
          mobile: { top: "", right: "", bottom: "", left: "", unit: "px" }
        }
      },
      buttonBorderRadius: {
        type: "object",
        default: {
          desktop: { top: 4, right: 4, bottom: 4, left: 4, unit: "px" },
          tablet: { top: "", right: "", bottom: "", left: "", unit: "px" },
          mobile: { top: "", right: "", bottom: "", left: "", unit: "px" }
        }
      },
      buttonBorderColor: {
        type: "string",
        default: ""
      },
      buttonBorderHoverColor: {
        type: "string",
        default: ""
      },
      buttonBoxShadow: {
        type: "object",
        default: {
          enable: false,
          color: "rgba(0, 0, 0, 0.2)",
          horizontal: 0,
          vertical: 0,
          blur: 0,
          spread: 0,
          position: "outset"
        }
      },
      buttonBoxShadowHover: {
        type: "object",
        default: {
          enable: false,
          color: "rgba(0, 0, 0, 0.2)",
          horizontal: 0,
          vertical: 0,
          blur: 0,
          spread: 0,
          position: "outset"
        }
      },
      buttonPadding: {
        type: "object",
        default: {
          desktop: { top: 10, right: 20, bottom: 10, left: 20, unit: "px" },
          tablet: { top: 8, right: 16, bottom: 8, left: 16, unit: "px" },
          mobile: { top: 6, right: 12, bottom: 6, left: 12, unit: "px" }
        }
      },
      buttonMargin: {
        type: "object",
        default: {
          desktop: { top: 15, right: 0, bottom: 0, left: 0, unit: "px" },
          tablet: { top: 10, right: 0, bottom: 0, left: 0, unit: "px" },
          mobile: { top: 8, right: 0, bottom: 0, left: 0, unit: "px" }
        }
      },
      buttonTypography: {
        type: "object",
        default: {
          fontFamily: "",
          fontSize: { desktop: 16, tablet: 15, mobile: 14 },
          fontSizeUnit: "px",
          fontWeight: "500",
          fontStyle: "normal",
          textTransform: "",
          textDecoration: "",
          lineHeight: { desktop: 1.5, tablet: 1.4, mobile: 1.3 },
          lineHeightUnit: "em",
          letterSpacing: { desktop: 0, tablet: 0, mobile: 0 },
          letterSpacingUnit: "px"
        }
      },
      iconSize: {
        type: "object",
        default: {
          desktop: 48,
          tablet: 40,
          mobile: 32
        }
      },
      titleTypography: {
        type: "object",
        default: {
          fontFamily: "",
          fontSize: { desktop: 22, tablet: 20, mobile: 18 },
          fontSizeUnit: "px",
          fontWeight: "",
          fontStyle: "normal",
          textTransform: "",
          textDecoration: "",
          lineHeight: { desktop: 1.5, tablet: 1.4, mobile: 1.3 },
          lineHeightUnit: "em",
          letterSpacing: { desktop: 0, tablet: 0, mobile: 0 },
          letterSpacingUnit: "px"
        }
      },
      contentTypography: {
        type: "object",
        default: {
          fontFamily: "",
          fontSize: { desktop: 16, tablet: 15, mobile: 14 },
          fontSizeUnit: "px",
          fontWeight: "",
          fontStyle: "normal",
          textTransform: "",
          textDecoration: "",
          lineHeight: { desktop: 1.5, tablet: 1.4, mobile: 1.3 },
          lineHeightUnit: "em",
          letterSpacing: { desktop: 0, tablet: 0, mobile: 0 },
          letterSpacingUnit: "px"
        }
      },
      padding: {
        type: "object",
        default: {
          desktop: {
            top: 30,
            right: 30,
            bottom: 30,
            left: 30,
            unit: "px"
          },
          tablet: {
            top: 25,
            right: 25,
            bottom: 25,
            left: 25,
            unit: "px"
          },
          mobile: {
            top: 20,
            right: 20,
            bottom: 20,
            left: 20,
            unit: "px"
          }
        }
      },
      margin: {
        type: "object",
        default: {
          desktop: {
            top: 0,
            right: 0,
            bottom: 30,
            left: 0,
            unit: "px"
          },
          tablet: {
            top: 0,
            right: 0,
            bottom: 25,
            left: 0,
            unit: "px"
          },
          mobile: {
            top: 0,
            right: 0,
            bottom: 20,
            left: 0,
            unit: "px"
          }
        }
      },
      animation: {
        type: "string",
        default: "none"
      },
      borderStyle: {
        type: "string",
        default: "default"
      },
      borderRadius: {
        type: "object",
        default: {
          desktop: {
            top: 8,
            right: 8,
            bottom: 8,
            left: 8,
            unit: "px"
          },
          tablet: {
            top: 8,
            right: 8,
            bottom: 8,
            left: 8,
            unit: "px"
          },
          mobile: {
            top: 8,
            right: 8,
            bottom: 8,
            left: 8,
            unit: "px"
          }
        }
      },
      borderWidth: {
        type: "object",
        default: {
          desktop: {
            top: 1,
            right: 1,
            bottom: 1,
            left: 1,
            unit: "px"
          },
          tablet: {
            top: 1,
            right: 1,
            bottom: 1,
            left: 1,
            unit: "px"
          },
          mobile: {
            top: 1,
            right: 1,
            bottom: 1,
            left: 1,
            unit: "px"
          }
        }
      },
      borderColor: {
        type: "string",
        default: "#e0e0e0"
      },
      hoverEffect: {
        type: "string",
        default: "none"
      },
      boxShadow: {
        type: "object",
        default: {
          enable: false,
          color: "rgba(0, 0, 0, 0.2)",
          horizontal: 0,
          vertical: 0,
          blur: 0,
          spread: 0,
          position: "outset"
        }
      },
      boxShadowHover: {
        type: "object",
        default: {
          enable: false,
          color: "rgba(0, 0, 0, 0.2)",
          horizontal: 0,
          vertical: 0,
          blur: 0,
          spread: 0,
          position: "outset"
        }
      }
    },
    example: {
      attributes: {
        iconValue: {
          id: "star",
          name: "Star",
          svg: '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 576 512" width="1em" height="1em"><path d="M381.2 150.3L524.9 171.5C536.8 173.2 546.8 181.6 550.6 193.1C554.4 204.7 551.3 217.3 542.7 225.9L438.5 328.1L463.1 474.7C465.1 486.7 460.2 498.9 450.2 506C440.3 513.1 427.2 514 416.5 508.3L288.1 439.8L159.8 508.3C149 514 135.9 513.1 126 506C116.1 498.9 111.1 486.7 113.2 474.7L137.8 328.1L33.58 225.9C24.97 217.3 21.91 204.7 25.69 193.1C29.46 181.6 39.43 173.2 51.42 171.5L195 150.3L259.4 17.97C264.7 6.954 275.9-.0391 288.1-.0391C300.4-.0391 311.6 6.954 316.9 17.97L381.2 150.3z"></path></svg>',
          style: "solid",
          categories: ["design", "lifestyle-and-hobbies", "social"]
        },
        title: __49("Feature Title", "digiblocks"),
        content: __49("Add your feature description here. Explain what makes this feature special.", "digiblocks"),
        iconColor: "#1e73be",
        backgroundColor: "#ffffff"
      },
      viewportWidth: 400
    },
    edit: edit_default15,
    save: save_default15
  });
  registerBlockType("digiblocks/icon-list", {
    apiVersion: 2,
    title: digiBlocksData.blocks["icon-list"].title,
    category: "digiblocks",
    icon: {
      src: () => {
        const { viewbox, path } = digiBlocksData.blocks["icon-list"].icon;
        return /* @__PURE__ */ wp.element.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: `0 0 ${viewbox}`, className: "digiblocks-editor-icons" }, /* @__PURE__ */ wp.element.createElement("path", { d: path }));
      }
    },
    description: digiBlocksData.blocks["icon-list"].description,
    keywords: [__49("icon", "digiblocks"), __49("list", "digiblocks"), __49("menu", "digiblocks"), __49("feature", "digiblocks"), __49("service", "digiblocks")],
    // Disable all default controls and settings panels
    supports: {
      inserter: getBlockActiveStatus("icon-list") ? true : false,
      // Remove the block if disabled
      html: false,
      className: false,
      customClassName: false,
      anchor: false
    },
    attributes: {
      id: {
        type: "string",
        default: ""
      },
      anchor: {
        type: "string",
        default: ""
      },
      visibility: {
        type: "object",
        default: {
          desktop: false,
          tablet: false,
          mobile: false
        }
      },
      customClasses: {
        type: "string",
        default: ""
      },
      defaultIconSource: {
        type: "string",
        default: "library"
      },
      defaultCustomSvg: {
        type: "string",
        default: ""
      },
      items: {
        type: "array",
        default: [
          {
            id: "item-1",
            content: __49("First list item with icon", "digiblocks"),
            iconSource: "library",
            icon: {
              id: "check",
              name: "Check",
              svg: '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512" width="1em" height="1em"><path d="M470.6 105.4c12.5 12.5 12.5 32.8 0 45.3l-256 256c-12.5 12.5-32.8 12.5-45.3 0l-128-128c-12.5-12.5-12.5-32.8 0-45.3s32.8-12.5 45.3 0L192 338.7 425.4 105.4c12.5-12.5 32.8-12.5 45.3 0z"/></svg>',
              style: "solid",
              categories: ["design"]
            },
            customSvg: "",
            linkEnabled: false,
            linkUrl: "",
            linkOpenInNewTab: false,
            linkRel: ""
          },
          {
            id: "item-2",
            content: __49("Second list item with star icon", "digiblocks"),
            iconSource: "library",
            icon: {
              id: "star",
              name: "Star",
              svg: '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 576 512" width="1em" height="1em"><path d="M381.2 150.3L524.9 171.5C536.8 173.2 546.8 181.6 550.6 193.1C554.4 204.7 551.3 217.3 542.7 225.9L438.5 328.1L463.1 474.7C465.1 486.7 460.2 498.9 450.2 506C440.3 513.1 427.2 514 416.5 508.3L288.1 439.8L159.8 508.3C149 514 135.9 513.1 126 506C116.1 498.9 111.1 486.7 113.2 474.7L137.8 328.1L33.58 225.9C24.97 217.3 21.91 204.7 25.69 193.1C29.46 181.6 39.43 173.2 51.42 171.5L195 150.3L259.4 17.97C264.7 6.954 275.9-.0391 288.1-.0391C300.4-.0391 311.6 6.954 316.9 17.97L381.2 150.3z"/></svg>',
              style: "solid",
              categories: ["design"]
            },
            customSvg: "",
            linkUrl: "",
            linkOpenInNewTab: false,
            linkRel: ""
          },
          {
            id: "item-3",
            content: __49("Third list item with heart icon", "digiblocks"),
            iconSource: "library",
            icon: {
              id: "heart",
              name: "Heart",
              svg: '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512" width="1em" height="1em"><path d="M47.6 300.4L228.3 469.1c7.5 7 17.4 10.9 27.7 10.9s20.2-3.9 27.7-10.9L464.4 300.4c30.4-28.3 47.6-68 47.6-109.5v-5.8c0-69.9-50.5-129.5-119.4-141C347 36.5 300.6 51.4 268 84L256 96 244 84c-32.6-32.6-79-47.5-124.6-39.9C50.5 55.6 0 115.2 0 185.1v5.8c0 41.5 17.2 81.2 47.6 109.5z"/></svg>',
              style: "solid",
              categories: ["design"]
            },
            customSvg: "",
            linkUrl: "",
            linkOpenInNewTab: false,
            linkRel: ""
          }
        ]
      },
      defaultIcon: {
        type: "object",
        default: {
          id: "check",
          name: "Check",
          svg: '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512" width="1em" height="1em"><path d="M470.6 105.4c12.5 12.5 12.5 32.8 0 45.3l-256 256c-12.5 12.5-32.8 12.5-45.3 0l-128-128c-12.5-12.5-12.5-32.8 0-45.3s32.8-12.5 45.3 0L192 338.7 425.4 105.4c12.5-12.5 32.8-12.5 45.3 0z"/></svg>',
          style: "solid",
          categories: ["design"]
        }
      },
      contentTypography: {
        type: "object",
        default: {
          fontFamily: "",
          fontSize: { desktop: 16, tablet: 15, mobile: 14 },
          fontSizeUnit: "px",
          fontWeight: "",
          fontStyle: "normal",
          textTransform: "",
          textDecoration: "",
          lineHeight: { desktop: 1.5, tablet: 1.4, mobile: 1.3 },
          lineHeightUnit: "em",
          letterSpacing: { desktop: 0, tablet: 0, mobile: 0 },
          letterSpacingUnit: "px"
        }
      },
      listLayout: {
        type: "string",
        default: "vertical"
      },
      listAlign: {
        type: "string",
        default: "left"
      },
      iconPosition: {
        type: "string",
        default: "before"
      },
      iconSize: {
        type: "object",
        default: {
          desktop: 24,
          tablet: 20,
          mobile: 18
        }
      },
      iconSpace: {
        type: "object",
        default: {
          desktop: 12,
          tablet: 10,
          mobile: 8
        }
      },
      itemSpace: {
        type: "object",
        default: {
          desktop: 16,
          tablet: 12,
          mobile: 8
        }
      },
      iconColor: {
        type: "string",
        default: "#1e73be"
      },
      iconHoverColor: {
        type: "string",
        default: ""
      },
      textColor: {
        type: "string",
        default: "#333333"
      },
      textHoverColor: {
        type: "string",
        default: ""
      },
      animation: {
        type: "string",
        default: "none"
      },
      padding: {
        type: "object",
        default: {
          desktop: { top: "", right: "", bottom: "", left: "", unit: "px" },
          tablet: { top: "", right: "", bottom: "", left: "", unit: "px" },
          mobile: { top: "", right: "", bottom: "", left: "", unit: "px" }
        }
      },
      margin: {
        type: "object",
        default: {
          desktop: { top: 0, right: 0, bottom: 30, left: 0, unit: "px" },
          tablet: { top: 0, right: 0, bottom: 25, left: 0, unit: "px" },
          mobile: { top: 0, right: 0, bottom: 20, left: 0, unit: "px" }
        }
      },
      borderStyle: {
        type: "string",
        default: "none"
      },
      borderWidth: {
        type: "object",
        default: {
          desktop: { top: 1, right: 1, bottom: 1, left: 1, unit: "px" },
          tablet: { top: "", right: "", bottom: "", left: "", unit: "px" },
          mobile: { top: "", right: "", bottom: "", left: "", unit: "px" }
        }
      },
      borderRadius: {
        type: "object",
        default: {
          desktop: { top: 8, right: 8, bottom: 8, left: 8, unit: "px" },
          tablet: { top: "", right: "", bottom: "", left: "", unit: "px" },
          mobile: { top: "", right: "", bottom: "", left: "", unit: "px" }
        }
      },
      borderColor: {
        type: "string",
        default: "#e0e0e0"
      },
      borderHoverColor: {
        type: "string",
        default: ""
      },
      boxShadow: {
        type: "object",
        default: {
          enable: false,
          color: "rgba(0, 0, 0, 0.2)",
          horizontal: 0,
          vertical: 0,
          blur: 0,
          spread: 0,
          position: "outset"
        }
      },
      boxShadowHover: {
        type: "object",
        default: {
          enable: false,
          color: "rgba(0, 0, 0, 0.2)",
          horizontal: 0,
          vertical: 0,
          blur: 0,
          spread: 0,
          position: "outset"
        }
      },
      backgroundColor: {
        type: "string",
        default: ""
      },
      backgroundHoverColor: {
        type: "string",
        default: ""
      },
      hoverEffect: {
        type: "string",
        default: "none"
      }
    },
    example: {
      attributes: {
        items: [
          {
            id: "item-1",
            content: __49("Professional feature", "digiblocks"),
            icon: {
              id: "star",
              name: "Star",
              svg: '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 576 512" width="1em" height="1em"><path d="M381.2 150.3L524.9 171.5C536.8 173.2 546.8 181.6 550.6 193.1C554.4 204.7 551.3 217.3 542.7 225.9L438.5 328.1L463.1 474.7C465.1 486.7 460.2 498.9 450.2 506C440.3 513.1 427.2 514 416.5 508.3L288.1 439.8L159.8 508.3C149 514 135.9 513.1 126 506C116.1 498.9 111.1 486.7 113.2 474.7L137.8 328.1L33.58 225.9C24.97 217.3 21.91 204.7 25.69 193.1C29.46 181.6 39.43 173.2 51.42 171.5L195 150.3L259.4 17.97C264.7 6.954 275.9-.0391 288.1-.0391C300.4-.0391 311.6 6.954 316.9 17.97L381.2 150.3z"/></svg>',
              style: "solid",
              categories: ["design"]
            }
          },
          {
            id: "item-2",
            content: __49("24/7 support service", "digiblocks"),
            icon: {
              id: "headset",
              name: "Headset",
              svg: '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512" width="1em" height="1em"><path d="M256 48C141.1 48 48 141.1 48 256v40c0 13.3-10.7 24-24 24s-24-10.7-24-24V256C0 114.6 114.6 0 256 0S512 114.6 512 256V400.1c0 48.6-39.4 88-88.1 88L313.6 488c-8.3 14.3-23.8 24-41.6 24H240c-26.5 0-48-21.5-48-48s21.5-48 48-48h32c17.8 0 33.3 9.7 41.6 24l110.4 .1c22.1 0 40-17.9 40-40V256c0-114.9-93.1-208-208-208zM144 208h16c17.7 0 32 14.3 32 32V352c0 17.7-14.3 32-32 32H144c-35.3 0-64-28.7-64-64V272c0-35.3 28.7-64 64-64zm224 0c35.3 0 64 28.7 64 64v48c0 35.3-28.7 64-64 64H352c-17.7 0-32-14.3-32-32V240c0-17.7 14.3-32 32-32h16z"/></svg>',
              style: "solid",
              categories: ["business", "technology"]
            }
          },
          {
            id: "item-3",
            content: __49("Free updates and documentation", "digiblocks"),
            icon: {
              id: "download",
              name: "Download",
              svg: '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512" width="1em" height="1em"><path d="M256 0c17.7 0 32 14.3 32 32V242.7l73.4-73.4c12.5-12.5 32.8-12.5 45.3 0s12.5 32.8 0 45.3l-128 128c-12.5 12.5-32.8 12.5-45.3 0l-128-128c-12.5-12.5-12.5-32.8 0-45.3s32.8-12.5 45.3 0L224 242.7V32c0-17.7 14.3-32 32-32zM48 384c-17.7 0-32 14.3-32 32v64c0 17.7 14.3 32 32 32H464c17.7 0 32-14.3 32-32V416c0-17.7-14.3-32-32-32H304 208 48zm272 80c0-8.8-7.2-16-16-16s-16 7.2-16 16s7.2 16 16 16s16-7.2 16-16zm80 0c0-8.8-7.2-16-16-16s-16 7.2-16 16s7.2 16 16 16s16-7.2 16-16z"/></svg>',
              style: "solid",
              categories: ["arrows", "technology"]
            }
          }
        ],
        iconColor: "#1e73be",
        textColor: "#333333"
      },
      viewportWidth: 800
    },
    edit: edit_default16,
    save: save_default16
  });
  registerBlockType("digiblocks/image", {
    apiVersion: 2,
    title: digiBlocksData.blocks["image"].title,
    category: "digiblocks",
    icon: {
      src: () => {
        const { viewbox, path } = digiBlocksData.blocks["image"].icon;
        return /* @__PURE__ */ wp.element.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: `0 0 ${viewbox}`, className: "digiblocks-editor-icons" }, /* @__PURE__ */ wp.element.createElement("path", { d: path }));
      }
    },
    description: digiBlocksData.blocks["image"].description,
    keywords: [__49("image", "digiblocks"), __49("picture", "digiblocks"), __49("photo", "digiblocks"), __49("media", "digiblocks")],
    supports: {
      inserter: getBlockActiveStatus("image") ? true : false,
      html: false,
      className: false,
      customClassName: false,
      anchor: false
    },
    attributes: {
      id: {
        type: "string",
        default: ""
      },
      anchor: {
        type: "string",
        default: ""
      },
      visibility: {
        type: "object",
        default: {
          desktop: false,
          tablet: false,
          mobile: false
        }
      },
      customClasses: {
        type: "string",
        default: ""
      },
      imageId: {
        type: "number"
      },
      imageUrl: {
        type: "string",
        source: "attribute",
        selector: "img",
        attribute: "src"
      },
      altText: {
        type: "string",
        source: "attribute",
        selector: "img",
        attribute: "alt",
        default: ""
      },
      title: {
        type: "string",
        source: "attribute",
        selector: "img",
        attribute: "title",
        default: ""
      },
      caption: {
        type: "string",
        source: "html",
        selector: "figcaption",
        default: ""
      },
      width: {
        type: "object",
        default: {
          desktop: 100,
          tablet: 100,
          mobile: 100
        }
      },
      widthUnit: {
        type: "string",
        default: "%"
      },
      height: {
        type: "object",
        default: {
          desktop: "auto",
          tablet: "auto",
          mobile: "auto"
        }
      },
      heightUnit: {
        type: "string",
        default: "px"
      },
      sizeSlug: {
        type: "string",
        default: "large"
      },
      align: {
        type: "string",
        default: "center"
      },
      alignTablet: {
        type: "string",
        default: "center"
      },
      alignMobile: {
        type: "string",
        default: "center"
      },
      objectFit: {
        type: "string",
        default: "cover"
      },
      borderStyle: {
        type: "string",
        default: "none"
      },
      borderWidth: {
        type: "object",
        default: {
          desktop: { top: 1, right: 1, bottom: 1, left: 1, unit: "px" },
          tablet: { top: "", right: "", bottom: "", left: "", unit: "px" },
          mobile: { top: "", right: "", bottom: "", left: "", unit: "px" }
        }
      },
      borderRadius: {
        type: "object",
        default: {
          desktop: { top: "", right: "", bottom: "", left: "", unit: "px" },
          tablet: { top: "", right: "", bottom: "", left: "", unit: "px" },
          mobile: { top: "", right: "", bottom: "", left: "", unit: "px" }
        }
      },
      borderColor: {
        type: "string",
        default: "#e0e0e0"
      },
      borderHoverColor: {
        type: "string"
      },
      boxShadow: {
        type: "object",
        default: {
          enable: false,
          color: "rgba(0, 0, 0, 0.1)",
          horizontal: 0,
          vertical: 0,
          blur: 0,
          spread: 0,
          position: "outset"
        }
      },
      boxShadowHover: {
        type: "object",
        default: {
          enable: false,
          color: "rgba(0, 0, 0, 0.2)",
          horizontal: 0,
          vertical: 0,
          blur: 0,
          spread: 0,
          position: "outset"
        }
      },
      padding: {
        type: "object",
        default: {
          desktop: { top: "", right: "", bottom: "", left: "", unit: "px" },
          tablet: { top: "", right: "", bottom: "", left: "", unit: "px" },
          mobile: { top: "", right: "", bottom: "", left: "", unit: "px" }
        }
      },
      margin: {
        type: "object",
        default: {
          desktop: { top: "", right: "", bottom: "", left: "", unit: "px" },
          tablet: { top: "", right: "", bottom: "", left: "", unit: "px" },
          mobile: { top: "", right: "", bottom: "", left: "", unit: "px" }
        }
      },
      url: {
        type: "string",
        default: ""
      },
      opensInNewTab: {
        type: "boolean",
        default: false
      },
      rel: {
        type: "string",
        default: ""
      },
      animation: {
        type: "string",
        default: "none"
      },
      hoverEffect: {
        type: "string",
        default: "none"
      },
      overlayEnable: {
        type: "boolean",
        default: false
      },
      overlayColor: {
        type: "string",
        default: "rgba(0,0,0,0.5)"
      },
      overlayHoverOnly: {
        type: "boolean",
        default: true
      }
    },
    example: {
      attributes: {
        imageUrl: "https://s.w.org/images/core/5.3/MtBlanc1.jpg",
        sizeSlug: "large",
        width: {
          desktop: 100,
          tablet: 100,
          mobile: 100
        },
        widthUnit: "%"
      }
    },
    edit: edit_default17,
    save: save_default17
  });
  registerBlockType("digiblocks/lottie", {
    apiVersion: 2,
    title: digiBlocksData.blocks["lottie"].title,
    category: "digiblocks",
    icon: {
      src: () => {
        const { viewbox, path } = digiBlocksData.blocks["lottie"].icon;
        return /* @__PURE__ */ wp.element.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: `0 0 ${viewbox}`, className: "digiblocks-editor-icons" }, /* @__PURE__ */ wp.element.createElement("path", { d: path }));
      }
    },
    description: digiBlocksData.blocks["lottie"].description,
    keywords: [__49("lottie", "digiblocks"), __49("animation", "digiblocks"), __49("dotlottie", "digiblocks"), __49("motion", "digiblocks")],
    supports: {
      inserter: getBlockActiveStatus("lottie") ? true : false,
      // Remove the block if disabled
      html: false,
      className: false,
      customClassName: false,
      anchor: false
    },
    attributes: {
      id: {
        type: "string",
        default: ""
      },
      anchor: {
        type: "string",
        default: ""
      },
      visibility: {
        type: "object",
        default: {
          desktop: false,
          tablet: false,
          mobile: false
        }
      },
      customClasses: {
        type: "string",
        default: ""
      },
      lottieSource: {
        type: "string",
        default: ""
      },
      sourceType: {
        type: "string",
        default: "file"
      },
      lottieFile: {
        type: "object",
        default: null
      },
      autoplay: {
        type: "boolean",
        default: true
      },
      loop: {
        type: "boolean",
        default: true
      },
      speed: {
        type: "number",
        default: 1
      },
      width: {
        type: "object",
        default: {
          desktop: 300,
          tablet: 300,
          mobile: 300
        }
      },
      widthUnit: {
        type: "string",
        default: "px"
      },
      height: {
        type: "object",
        default: {
          desktop: 300,
          tablet: 300,
          mobile: 300
        }
      },
      heightUnit: {
        type: "string",
        default: "px"
      },
      alignment: {
        type: "string",
        default: "center"
      },
      backgroundColor: {
        type: "string",
        default: ""
      },
      showControls: {
        type: "boolean",
        default: false
      },
      padding: {
        type: "object",
        default: {
          desktop: { top: "", right: "", bottom: "", left: "", unit: "px" },
          tablet: { top: "", right: "", bottom: "", left: "", unit: "px" },
          mobile: { top: "", right: "", bottom: "", left: "", unit: "px" }
        }
      },
      margin: {
        type: "object",
        default: {
          desktop: { top: "", right: "", bottom: "", left: "", unit: "px" },
          tablet: { top: "", right: "", bottom: "", left: "", unit: "px" },
          mobile: { top: "", right: "", bottom: "", left: "", unit: "px" }
        }
      },
      borderStyle: {
        type: "string",
        default: "none"
      },
      borderWidth: {
        type: "object",
        default: {
          desktop: { top: 1, right: 1, bottom: 1, left: 1, unit: "px" },
          tablet: { top: "", right: "", bottom: "", left: "", unit: "px" },
          mobile: { top: "", right: "", bottom: "", left: "", unit: "px" }
        }
      },
      borderRadius: {
        type: "object",
        default: {
          desktop: { top: "", right: "", bottom: "", left: "", unit: "px" },
          tablet: { top: "", right: "", bottom: "", left: "", unit: "px" },
          mobile: { top: "", right: "", bottom: "", left: "", unit: "px" }
        }
      },
      borderColor: {
        type: "string",
        default: "#e0e0e0"
      },
      shadow: {
        type: "object",
        default: {
          enable: false,
          color: "rgba(0, 0, 0, 0.2)",
          horizontal: 0,
          vertical: 0,
          blur: 0,
          spread: 0
        }
      },
      animation: {
        type: "string",
        default: "none"
      }
    },
    example: {
      attributes: {
        lottieSource: "https://lottie.host/74c2e0cc-daa3-4269-b9a8-3205d6cd70d6/V7KchLpRt2.lottie",
        autoplay: true,
        loop: true,
        width: {
          desktop: 300,
          tablet: 300,
          mobile: 300
        },
        height: {
          desktop: 300,
          tablet: 300,
          mobile: 300
        }
      }
    },
    edit: edit_default18,
    save: save_default18
  });
  registerBlockType("digiblocks/newsletter", {
    apiVersion: 2,
    title: digiBlocksData.blocks["newsletter"].title,
    category: "digiblocks",
    icon: {
      src: () => {
        const { viewbox, path } = digiBlocksData.blocks["newsletter"].icon;
        return /* @__PURE__ */ wp.element.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: `0 0 ${viewbox}`, className: "digiblocks-editor-icons" }, /* @__PURE__ */ wp.element.createElement("path", { d: path }));
      }
    },
    description: digiBlocksData.blocks["newsletter"].description,
    keywords: [__49("newsletter", "digiblocks"), __49("subscribe", "digiblocks"), __49("email", "digiblocks"), __49("mailchimp", "digiblocks")],
    supports: {
      inserter: getBlockActiveStatus("newsletter") ? true : false,
      html: false,
      className: false,
      customClassName: false,
      anchor: false
    },
    attributes: {
      id: {
        type: "string",
        default: ""
      },
      anchor: {
        type: "string",
        default: ""
      },
      visibility: {
        type: "object",
        default: {
          desktop: false,
          tablet: false,
          mobile: false
        }
      },
      customClasses: {
        type: "string",
        default: ""
      },
      layout: {
        type: "string",
        default: "stacked"
      },
      align: {
        type: "object",
        default: {
          desktop: "left",
          tablet: "left",
          mobile: "left"
        }
      },
      title: {
        type: "string",
        default: __49("Subscribe to our Newsletter", "digiblocks")
      },
      showTitle: {
        type: "boolean",
        default: true
      },
      description: {
        type: "string",
        default: __49("Stay updated with our latest news and offers", "digiblocks")
      },
      showDescription: {
        type: "boolean",
        default: true
      },
      emailPlaceholder: {
        type: "string",
        default: __49("Enter your email address", "digiblocks")
      },
      namePlaceholder: {
        type: "string",
        default: __49("Enter your name", "digiblocks")
      },
      buttonText: {
        type: "string",
        default: __49("Subscribe", "digiblocks")
      },
      showNameField: {
        type: "boolean",
        default: false
      },
      successMessage: {
        type: "string",
        default: __49("Thank you for subscribing!", "digiblocks")
      },
      errorMessage: {
        type: "string",
        default: __49("Something went wrong. Please try again.", "digiblocks")
      },
      titleColor: {
        type: "string",
        default: "#333333"
      },
      titleHoverColor: {
        type: "string",
        default: ""
      },
      descriptionColor: {
        type: "string",
        default: "#666666"
      },
      inputTextColor: {
        type: "string",
        default: "#333333"
      },
      inputBackgroundColor: {
        type: "string",
        default: "#ffffff"
      },
      inputBorderColor: {
        type: "string",
        default: "#e0e0e0"
      },
      inputBorderFocusColor: {
        type: "string",
        default: "#4a6cf7"
      },
      inputPlaceholderColor: {
        type: "string",
        default: "#999999"
      },
      buttonTextColor: {
        type: "string",
        default: "#ffffff"
      },
      buttonBackgroundColor: {
        type: "string",
        default: "#4a6cf7"
      },
      buttonTextHoverColor: {
        type: "string",
        default: ""
      },
      buttonBackgroundHoverColor: {
        type: "string",
        default: ""
      },
      buttonBorderColor: {
        type: "string",
        default: ""
      },
      buttonBorderHoverColor: {
        type: "string",
        default: ""
      },
      backgroundColor: {
        type: "string",
        default: ""
      },
      backgroundHoverColor: {
        type: "string",
        default: ""
      },
      containerBorderColor: {
        type: "string",
        default: ""
      },
      containerBorderHoverColor: {
        type: "string",
        default: ""
      },
      titleTypography: {
        type: "object",
        default: {
          fontFamily: "",
          fontSize: { desktop: 24, tablet: 22, mobile: 20 },
          fontSizeUnit: "px",
          fontWeight: "600",
          fontStyle: "normal",
          textTransform: "none",
          textDecoration: "none",
          lineHeight: { desktop: 1.4, tablet: 1.3, mobile: 1.2 },
          lineHeightUnit: "em",
          letterSpacing: { desktop: 0, tablet: 0, mobile: 0 },
          letterSpacingUnit: "px"
        }
      },
      contentTypography: {
        type: "object",
        default: {
          fontFamily: "",
          fontSize: { desktop: 16, tablet: 15, mobile: 14 },
          fontSizeUnit: "px",
          fontWeight: "normal",
          fontStyle: "normal",
          textTransform: "none",
          textDecoration: "none",
          lineHeight: { desktop: 1.5, tablet: 1.4, mobile: 1.3 },
          lineHeightUnit: "em",
          letterSpacing: { desktop: 0, tablet: 0, mobile: 0 },
          letterSpacingUnit: "px"
        }
      },
      textTypography: {
        type: "object",
        default: {
          fontFamily: "",
          fontSize: { desktop: 16, tablet: 15, mobile: 14 },
          fontSizeUnit: "px",
          fontWeight: "normal",
          fontStyle: "normal",
          textTransform: "none",
          textDecoration: "none",
          lineHeight: { desktop: 1.5, tablet: 1.4, mobile: 1.3 },
          lineHeightUnit: "em",
          letterSpacing: { desktop: 0, tablet: 0, mobile: 0 },
          letterSpacingUnit: "px"
        }
      },
      buttonTypography: {
        type: "object",
        default: {
          fontFamily: "",
          fontSize: { desktop: 16, tablet: 15, mobile: 14 },
          fontSizeUnit: "px",
          fontWeight: "500",
          fontStyle: "normal",
          textTransform: "none",
          textDecoration: "none",
          lineHeight: { desktop: 1.5, tablet: 1.4, mobile: 1.3 },
          lineHeightUnit: "em",
          letterSpacing: { desktop: 0, tablet: 0, mobile: 0 },
          letterSpacingUnit: "px"
        }
      },
      containerBorderRadius: {
        type: "object",
        default: {
          desktop: { top: 4, right: 4, bottom: 4, left: 4, unit: "px" },
          tablet: { top: "", right: "", bottom: "", left: "", unit: "px" },
          mobile: { top: "", right: "", bottom: "", left: "", unit: "px" }
        }
      },
      containerBorderWidth: {
        type: "object",
        default: {
          desktop: 1,
          tablet: 1,
          mobile: 1
        }
      },
      containerBorderStyle: {
        type: "string",
        default: "none"
      },
      inputBorderRadius: {
        type: "object",
        default: {
          desktop: { top: 4, right: 4, bottom: 4, left: 4, unit: "px" },
          tablet: { top: "", right: "", bottom: "", left: "", unit: "px" },
          mobile: { top: "", right: "", bottom: "", left: "", unit: "px" }
        }
      },
      inputBorderWidth: {
        type: "object",
        default: {
          desktop: 1,
          tablet: 1,
          mobile: 1
        }
      },
      inputBorderStyle: {
        type: "string",
        default: "solid"
      },
      buttonBorderRadius: {
        type: "object",
        default: {
          desktop: { top: 4, right: 4, bottom: 4, left: 4, unit: "px" },
          tablet: { top: "", right: "", bottom: "", left: "", unit: "px" },
          mobile: { top: "", right: "", bottom: "", left: "", unit: "px" }
        }
      },
      buttonBorderWidth: {
        type: "object",
        default: {
          desktop: 1,
          tablet: 1,
          mobile: 1
        }
      },
      buttonBorderStyle: {
        type: "string",
        default: "solid"
      },
      spacing: {
        type: "object",
        default: {
          desktop: { value: 20, unit: "px" },
          tablet: { value: 15, unit: "px" },
          mobile: { value: 10, unit: "px" }
        }
      },
      inputSpacing: {
        type: "object",
        default: {
          desktop: { value: 10, unit: "px" },
          tablet: { value: 8, unit: "px" },
          mobile: { value: 6, unit: "px" }
        }
      },
      padding: {
        type: "object",
        default: {
          desktop: { top: "", right: "", bottom: "", left: "", unit: "px" },
          tablet: { top: "", right: "", bottom: "", left: "", unit: "px" },
          mobile: { top: "", right: "", bottom: "", left: "", unit: "px" }
        }
      },
      margin: {
        type: "object",
        default: {
          desktop: { top: "", right: "", bottom: "", left: "", unit: "px" },
          tablet: { top: "", right: "", bottom: "", left: "", unit: "px" },
          mobile: { top: "", right: "", bottom: "", left: "", unit: "px" }
        }
      },
      boxShadow: {
        type: "object",
        default: {
          enable: false,
          color: "rgba(0, 0, 0, 0.1)",
          horizontal: 0,
          vertical: 0,
          blur: 0,
          spread: 0,
          position: "outset"
        }
      },
      boxShadowHover: {
        type: "object",
        default: {
          enable: false,
          color: "rgba(0, 0, 0, 0.2)",
          horizontal: 0,
          vertical: 0,
          blur: 0,
          spread: 0,
          position: "outset"
        }
      },
      buttonBoxShadow: {
        type: "object",
        default: {
          enable: false,
          color: "rgba(0, 0, 0, 0.1)",
          horizontal: 0,
          vertical: 0,
          blur: 0,
          spread: 0,
          position: "outset"
        }
      },
      buttonBoxShadowHover: {
        type: "object",
        default: {
          enable: false,
          color: "rgba(0, 0, 0, 0.15)",
          horizontal: 0,
          vertical: 2,
          blur: 8,
          spread: 0,
          position: "outset"
        }
      },
      inputBoxShadow: {
        type: "object",
        default: {
          enable: false,
          color: "rgba(0, 0, 0, 0.1)",
          horizontal: 0,
          vertical: 0,
          blur: 0,
          spread: 0,
          position: "outset"
        }
      },
      inputBoxShadowHover: {
        type: "object",
        default: {
          enable: false,
          color: "rgba(0, 0, 0, 0.15)",
          horizontal: 0,
          vertical: 2,
          blur: 4,
          spread: 0,
          position: "outset"
        }
      },
      animation: {
        type: "string",
        default: "none"
      }
    },
    example: {
      attributes: {
        title: __49("Subscribe to our Newsletter", "digiblocks"),
        description: __49("Stay updated with our latest news and offers", "digiblocks"),
        layout: "stacked",
        showTitle: true,
        showDescription: true,
        showNameField: false,
        buttonText: __49("Subscribe", "digiblocks")
      }
    },
    edit: edit_default19,
    save: save_default19
  });
  registerBlockType("digiblocks/posts", {
    apiVersion: 2,
    title: digiBlocksData.blocks["posts"].title,
    category: "digiblocks",
    icon: {
      src: () => {
        const { viewbox, path } = digiBlocksData.blocks["posts"].icon;
        return /* @__PURE__ */ wp.element.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: `0 0 ${viewbox}`, className: "digiblocks-editor-icons" }, /* @__PURE__ */ wp.element.createElement("path", { d: path }));
      }
    },
    description: digiBlocksData.blocks["posts"].description,
    keywords: [__49("post", "digiblocks"), __49("blog", "digiblocks"), __49("article", "digiblocks"), __49("grid", "digiblocks")],
    supports: {
      inserter: getBlockActiveStatus("posts") ? true : false,
      // Remove the block if disabled
      html: false,
      className: false,
      customClassName: false,
      anchor: false
    },
    attributes: {
      id: {
        type: "string",
        default: ""
      },
      anchor: {
        type: "string",
        default: ""
      },
      visibility: {
        type: "object",
        default: {
          desktop: false,
          tablet: false,
          mobile: false
        }
      },
      customClasses: {
        type: "string",
        default: ""
      },
      postsToShow: {
        type: "number",
        default: 3
      },
      columns: {
        type: "object",
        default: {
          desktop: 3,
          tablet: 2,
          mobile: 1
        }
      },
      postStyle: {
        type: "string",
        default: "grid"
      },
      displayFeaturedImage: {
        type: "boolean",
        default: true
      },
      displayTitle: {
        type: "boolean",
        default: true
      },
      displayMeta: {
        type: "boolean",
        default: true
      },
      displayExcerpt: {
        type: "boolean",
        default: true
      },
      displayReadMoreButton: {
        type: "boolean",
        default: true
      },
      metaSettings: {
        type: "object",
        default: {
          displayAuthor: true,
          displayDate: true,
          displayCategories: true,
          displayComments: true
        }
      },
      excerptLength: {
        type: "number",
        default: 25
      },
      readMoreText: {
        type: "string",
        default: __49("Read More", "digiblocks")
      },
      order: {
        type: "string",
        default: "desc"
      },
      orderBy: {
        type: "string",
        default: "date"
      },
      categories: {
        type: "array",
        default: []
      },
      enablePagination: {
        type: "boolean",
        default: false
      },
      paginationAlign: {
        type: "string",
        default: "center"
      },
      paginationBackgroundColor: {
        type: "string",
        default: "#f8f9fa"
      },
      paginationTextColor: {
        type: "string",
        default: "#333333"
      },
      paginationActiveBackgroundColor: {
        type: "string",
        default: "#4a6cf7"
      },
      paginationActiveTextColor: {
        type: "string",
        default: "#ffffff"
      },
      titleColor: {
        type: "string",
        default: "#333333"
      },
      titleHoverColor: {
        type: "string",
        default: ""
      },
      excerptColor: {
        type: "string",
        default: "#666666"
      },
      catBackgroundColor: {
        type: "string",
        default: "#52576b"
      },
      catColor: {
        type: "string",
        default: "#fff"
      },
      catHoverBackgroundColor: {
        type: "string",
        default: "#3f4a73"
      },
      catHoverColor: {
        type: "string",
        default: "#fff"
      },
      metaColor: {
        type: "string",
        default: "#666666"
      },
      metaHoverColor: {
        type: "string",
        default: ""
      },
      buttonBackgroundColor: {
        type: "string",
        default: "#4a6cf7"
      },
      buttonTextColor: {
        type: "string",
        default: "#ffffff"
      },
      buttonBackgroundHoverColor: {
        type: "string",
        default: "#3a5ce5"
      },
      buttonTextHoverColor: {
        type: "string",
        default: "#ffffff"
      },
      imageMargin: {
        type: "object",
        default: {
          desktop: 15,
          tablet: 15,
          mobile: 15
        }
      },
      contentMargin: {
        type: "object",
        default: {
          desktop: 18,
          tablet: 15,
          mobile: 15
        }
      },
      padding: {
        type: "object",
        default: {
          desktop: { top: "", right: "", bottom: "", left: "", unit: "px" },
          tablet: { top: "", right: "", bottom: "", left: "", unit: "px" },
          mobile: { top: "", right: "", bottom: "", left: "", unit: "px" }
        }
      },
      margin: {
        type: "object",
        default: {
          desktop: { top: 0, right: 0, bottom: 30, left: 0, unit: "px" },
          tablet: { top: 0, right: 0, bottom: 25, left: 0, unit: "px" },
          mobile: { top: 0, right: 0, bottom: 20, left: 0, unit: "px" }
        }
      },
      itemSpacing: {
        type: "object",
        default: {
          desktop: 20,
          tablet: 15,
          mobile: 10
        }
      },
      titleTypography: {
        type: "object",
        default: {
          fontFamily: "",
          fontSize: { desktop: 20, tablet: 18, mobile: 16 },
          fontSizeUnit: "px",
          fontWeight: "600",
          fontStyle: "normal",
          textTransform: "none",
          textDecoration: "none",
          lineHeight: { desktop: 1.4, tablet: 1.3, mobile: 1.2 },
          lineHeightUnit: "em",
          letterSpacing: { desktop: 0, tablet: 0, mobile: 0 },
          letterSpacingUnit: "px"
        }
      },
      textTypography: {
        type: "object",
        default: {
          fontFamily: "",
          fontSize: { desktop: 13, tablet: 12, mobile: 11 },
          fontSizeUnit: "px",
          fontWeight: "normal",
          fontStyle: "normal",
          textTransform: "none",
          textDecoration: "none",
          lineHeight: { desktop: 1.4, tablet: 1.3, mobile: 1.2 },
          lineHeightUnit: "em",
          letterSpacing: { desktop: 0, tablet: 0, mobile: 0 },
          letterSpacingUnit: "px"
        }
      },
      contentTypography: {
        type: "object",
        default: {
          fontFamily: "",
          fontSize: { desktop: 16, tablet: 15, mobile: 14 },
          fontSizeUnit: "px",
          fontWeight: "normal",
          fontStyle: "normal",
          textTransform: "none",
          textDecoration: "none",
          lineHeight: { desktop: 1.5, tablet: 1.4, mobile: 1.3 },
          lineHeightUnit: "em",
          letterSpacing: { desktop: 0, tablet: 0, mobile: 0 },
          letterSpacingUnit: "px"
        }
      },
      buttonTypography: {
        type: "object",
        default: {
          fontFamily: "",
          fontSize: { desktop: 16, tablet: 15, mobile: 14 },
          fontSizeUnit: "px",
          fontWeight: "500",
          fontStyle: "normal",
          textTransform: "none",
          textDecoration: "none",
          lineHeight: { desktop: 1.5, tablet: 1.4, mobile: 1.3 },
          lineHeightUnit: "em",
          letterSpacing: { desktop: 0, tablet: 0, mobile: 0 },
          letterSpacingUnit: "px"
        }
      },
      buttonPadding: {
        type: "object",
        default: {
          desktop: { top: 10, right: 20, bottom: 10, left: 20, unit: "px" },
          tablet: { top: 8, right: 16, bottom: 8, left: 16, unit: "px" },
          mobile: { top: 6, right: 12, bottom: 6, left: 12, unit: "px" }
        }
      },
      buttonBorderRadius: {
        type: "object",
        default: {
          desktop: { top: 4, right: 4, bottom: 4, left: 4, unit: "px" },
          tablet: { top: "", right: "", bottom: "", left: "", unit: "px" },
          mobile: { top: "", right: "", bottom: "", left: "", unit: "px" }
        }
      },
      imageSize: {
        type: "string",
        default: "medium"
      },
      imageBorderRadius: {
        type: "object",
        default: {
          desktop: { top: 8, right: 8, bottom: 8, left: 8, unit: "px" },
          tablet: { top: "", right: "", bottom: "", left: "", unit: "px" },
          mobile: { top: "", right: "", bottom: "", left: "", unit: "px" }
        }
      },
      cardStyle: {
        type: "boolean",
        default: false
      },
      cardBackgroundColor: {
        type: "string",
        default: "#ffffff"
      },
      cardPadding: {
        type: "object",
        default: {
          desktop: { top: 20, right: 20, bottom: 20, left: 20, unit: "px" },
          tablet: { top: 15, right: 15, bottom: 15, left: 15, unit: "px" },
          mobile: { top: 10, right: 10, bottom: 10, left: 10, unit: "px" }
        }
      },
      cardBorderRadius: {
        type: "object",
        default: {
          desktop: { top: 8, right: 8, bottom: 8, left: 8, unit: "px" },
          tablet: { top: "", right: "", bottom: "", left: "", unit: "px" },
          mobile: { top: "", right: "", bottom: "", left: "", unit: "px" }
        }
      },
      cardBorderStyle: {
        type: "string",
        default: "solid"
      },
      cardBorderWidth: {
        type: "object",
        default: {
          desktop: { top: 1, right: 1, bottom: 1, left: 1, unit: "px" },
          tablet: { top: "", right: "", bottom: "", left: "", unit: "px" },
          mobile: { top: "", right: "", bottom: "", left: "", unit: "px" }
        }
      },
      cardBorderColor: {
        type: "string",
        default: "#e0e0e0"
      },
      cardShadow: {
        type: "object",
        default: {
          enable: false,
          color: "rgba(0, 0, 0, 0.1)",
          horizontal: 0,
          vertical: 0,
          blur: 0,
          spread: 0,
          position: "outset"
        }
      },
      cardShadowHover: {
        type: "object",
        default: {
          enable: false,
          color: "rgba(0, 0, 0, 0.2)",
          horizontal: 0,
          vertical: 0,
          blur: 0,
          spread: 0,
          position: "outset"
        }
      },
      animation: {
        type: "string",
        default: "none"
      }
    },
    example: {
      attributes: {
        postStyle: "grid",
        postsToShow: 1,
        columns: 1,
        displayFeaturedImage: true,
        displayTitle: true,
        displayExcerpt: true,
        excerptLength: 15,
        displayMeta: true,
        titleColor: "#333333",
        excerptColor: "#666666",
        metaColor: "#666666",
        buttonBackgroundColor: "#4a6cf7",
        buttonTextColor: "#ffffff",
        itemSpacing: {
          desktop: 20,
          tablet: 15,
          mobile: 10
        }
      },
      viewportWidth: 600
    },
    edit: edit_default20,
    save: save_default20
  });
  registerBlockType("digiblocks/pricing-table", {
    apiVersion: 2,
    title: digiBlocksData.blocks["pricing-table"].title,
    category: "digiblocks",
    icon: {
      src: () => {
        const { viewbox, path } = digiBlocksData.blocks["pricing-table"].icon;
        return /* @__PURE__ */ wp.element.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: `0 0 ${viewbox}`, className: "digiblocks-editor-icons" }, /* @__PURE__ */ wp.element.createElement("path", { d: path }));
      }
    },
    description: digiBlocksData.blocks["pricing-table"].description,
    keywords: [__49("pricing", "digiblocks"), __49("price", "digiblocks"), __49("table", "digiblocks"), __49("plan", "digiblocks"), __49("subscription", "digiblocks")],
    // Disable all default controls and settings panels
    supports: {
      inserter: getBlockActiveStatus("pricing-table") ? true : false,
      // Remove the block if disabled
      html: false,
      className: false,
      customClassName: false,
      anchor: false
    },
    attributes: {
      id: {
        type: "string"
      },
      anchor: {
        type: "string"
      },
      visibility: {
        type: "object",
        default: {
          desktop: false,
          tablet: false,
          mobile: false
        }
      },
      customClasses: {
        type: "string"
      },
      tables: {
        type: "array",
        default: []
      },
      columns: {
        type: "number",
        default: 2
      },
      tableStyle: {
        type: "string",
        default: "style1"
      },
      align: {
        type: "string",
        default: "center"
      },
      animation: {
        type: "string",
        default: "none"
      },
      titleTypography: {
        type: "object",
        default: {}
      },
      headingTypography: {
        type: "object",
        default: {}
      },
      textTypography: {
        type: "object",
        default: {}
      },
      contentTypography: {
        type: "object",
        default: {}
      },
      buttonTypography: {
        type: "object",
        default: {}
      },
      padding: {
        type: "object",
        default: {
          desktop: { top: "", right: "", bottom: "", left: "", unit: "px" },
          tablet: { top: "", right: "", bottom: "", left: "", unit: "px" },
          mobile: { top: "", right: "", bottom: "", left: "", unit: "px" }
        }
      },
      margin: {
        type: "object",
        default: {
          desktop: { top: 0, right: 0, bottom: 30, left: 0, unit: "px" },
          tablet: { top: 0, right: 0, bottom: 20, left: 0, unit: "px" },
          mobile: { top: 0, right: 0, bottom: 15, left: 0, unit: "px" }
        }
      },
      borderRadius: {
        type: "object",
        default: {
          desktop: { top: 8, right: 8, bottom: 8, left: 8, unit: "px" },
          tablet: { top: "", right: "", bottom: "", left: "", unit: "px" },
          mobile: { top: "", right: "", bottom: "", left: "", unit: "px" }
        }
      },
      borderStyle: {
        type: "string",
        default: "solid"
      },
      borderWidth: {
        type: "object",
        default: {
          desktop: { top: 1, right: 1, bottom: 1, left: 1, unit: "px" },
          tablet: { top: "", right: "", bottom: "", left: "", unit: "px" },
          mobile: { top: "", right: "", bottom: "", left: "", unit: "px" }
        }
      },
      borderColor: {
        type: "string",
        default: "#e6e6e6"
      },
      boxShadow: {
        type: "object",
        default: {
          enable: false,
          color: "rgba(0, 0, 0, 0.1)",
          horizontal: 0,
          vertical: 0,
          blur: 0,
          spread: 0,
          position: "outset"
        }
      },
      boxShadowHover: {
        type: "object",
        default: {
          enable: false,
          color: "rgba(0, 0, 0, 0.15)",
          horizontal: 0,
          vertical: 0,
          blur: 0,
          spread: 0,
          position: "outset"
        }
      },
      buttonRadius: {
        type: "number",
        default: 4
      },
      buttonPadding: {
        type: "object",
        default: {
          desktop: { top: 10, right: 20, bottom: 10, left: 20, unit: "px" },
          tablet: { top: 8, right: 16, bottom: 8, left: 16, unit: "px" },
          mobile: { top: 6, right: 12, bottom: 6, left: 12, unit: "px" }
        }
      },
      buttonBorderStyle: {
        type: "string",
        default: "none"
      },
      buttonBorderWidth: {
        type: "object",
        default: {
          desktop: { top: 1, right: 1, bottom: 1, left: 1, unit: "px" },
          tablet: { top: "", right: "", bottom: "", left: "", unit: "px" },
          mobile: { top: "", right: "", bottom: "", left: "", unit: "px" }
        }
      },
      buttonBorderColor: {
        type: "string",
        default: ""
      },
      buttonBorderHoverColor: {
        type: "string",
        default: ""
      },
      showRibbon: {
        type: "boolean",
        default: true
      },
      ribbonStyle: {
        type: "string",
        default: "corner"
      },
      ribbonPosition: {
        type: "string",
        default: "right"
      },
      tableTextColor: {
        type: "string",
        default: "#333333"
      },
      tableBackgroundColor: {
        type: "string",
        default: "#ffffff"
      },
      headerBackgroundColor: {
        type: "string",
        default: "#f8f9fa"
      },
      buttonTextColor: {
        type: "string",
        default: "#ffffff"
      },
      buttonBackgroundColor: {
        type: "string",
        default: "#4a6cf7"
      },
      buttonTextHoverColor: {
        type: "string",
        default: "#ffffff"
      },
      buttonBackgroundHoverColor: {
        type: "string",
        default: "#3151e1"
      },
      ribbonTextColor: {
        type: "string",
        default: "#ffffff"
      },
      ribbonBackgroundColor: {
        type: "string",
        default: "#4a6cf7"
      }
    },
    example: {
      attributes: {
        tables: [
          {
            id: "table-1-example",
            title: "Basic Plan",
            price: "$19",
            period: "/month",
            description: "Great for starters",
            features: [
              { text: "1 Website", enabled: true },
              { text: "5GB Storage", enabled: true },
              { text: "Premium Support", enabled: false }
            ],
            buttonText: "Get Started",
            isHighlighted: false,
            ribbonText: "Popular"
          }
        ],
        columns: 1,
        tableStyle: "style1",
        showRibbon: true
      }
    },
    edit: edit_default21,
    save: save_default21
  });
  registerBlockType("digiblocks/separator", {
    apiVersion: 2,
    title: digiBlocksData.blocks["separator"].title,
    category: "digiblocks",
    icon: {
      src: () => {
        const { viewbox, path } = digiBlocksData.blocks["separator"].icon;
        return /* @__PURE__ */ wp.element.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: `0 0 ${viewbox}`, className: "digiblocks-editor-icons" }, /* @__PURE__ */ wp.element.createElement("path", { d: path }));
      }
    },
    description: digiBlocksData.blocks["separator"].description,
    keywords: [__49("separator", "digiblocks"), __49("divider", "digiblocks"), __49("horizontal rule", "digiblocks"), __49("hr", "digiblocks")],
    // Disable all default controls and settings panels
    supports: {
      inserter: getBlockActiveStatus("separator") ? true : false,
      // Remove the block if disabled
      html: false,
      className: false,
      customClassName: false,
      anchor: false
    },
    attributes: {
      id: {
        type: "string",
        default: ""
      },
      anchor: {
        type: "string",
        default: ""
      },
      visibility: {
        type: "object",
        default: {
          desktop: false,
          tablet: false,
          mobile: false
        }
      },
      customClasses: {
        type: "string",
        default: ""
      },
      contentType: {
        type: "string",
        default: "none"
      },
      content: {
        type: "string",
        default: "Separator"
      },
      iconValue: {
        type: "object",
        default: null
      },
      separatorStyle: {
        type: "string",
        default: "line"
      },
      primaryColor: {
        type: "string",
        default: "#222222"
      },
      secondaryColor: {
        type: "string",
        default: "#f0f0f0"
      },
      textColor: {
        type: "string",
        default: "#333333"
      },
      width: {
        type: "object",
        default: {
          desktop: 100,
          tablet: 100,
          mobile: 100
        }
      },
      widthUnit: {
        type: "string",
        default: "%"
      },
      height: {
        type: "object",
        default: {
          desktop: 3,
          tablet: 2,
          mobile: 2
        }
      },
      heightUnit: {
        type: "string",
        default: "px"
      },
      borderRadius: {
        type: "object",
        default: {
          desktop: 0,
          tablet: 0,
          mobile: 0
        }
      },
      margin: {
        type: "object",
        default: {
          desktop: {
            top: 30,
            bottom: 30,
            unit: "px"
          },
          tablet: {
            top: 25,
            bottom: 25,
            unit: "px"
          },
          mobile: {
            top: 20,
            bottom: 20,
            unit: "px"
          }
        }
      },
      align: {
        type: "string",
        default: "center"
      },
      animation: {
        type: "string",
        default: "none"
      },
      typography: {
        type: "object",
        default: {
          fontFamily: "",
          fontSize: { desktop: 16, tablet: 15, mobile: 14 },
          fontSizeUnit: "px",
          fontWeight: "",
          fontStyle: "normal",
          textTransform: "",
          textDecoration: "",
          lineHeight: { desktop: 1.5, tablet: 1.5, mobile: 1.5 },
          lineHeightUnit: "em",
          letterSpacing: { desktop: 0, tablet: 0, mobile: 0 },
          letterSpacingUnit: "px"
        }
      },
      iconSize: {
        type: "object",
        default: {
          desktop: 24,
          tablet: 20,
          mobile: 16
        }
      },
      gap: {
        type: "object",
        default: {
          desktop: 15,
          tablet: 10,
          mobile: 8
        }
      }
    },
    example: {
      attributes: {
        separatorStyle: "gradient",
        primaryColor: "#1e73be",
        secondaryColor: "#f0f0f0",
        width: { desktop: 80 },
        height: { desktop: 4 },
        contentType: "text",
        content: "Section",
        textColor: "#333333"
      }
    },
    edit: edit_default22,
    save: save_default22
  });
  registerBlockType("digiblocks/social-icons", {
    apiVersion: 2,
    title: digiBlocksData.blocks["social-icons"].title,
    category: "digiblocks",
    icon: {
      src: () => {
        const { viewbox, path } = digiBlocksData.blocks["social-icons"].icon;
        return /* @__PURE__ */ wp.element.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: `0 0 ${viewbox}`, className: "digiblocks-editor-icons" }, /* @__PURE__ */ wp.element.createElement("path", { d: path }));
      }
    },
    description: digiBlocksData.blocks["social-icons"].description,
    keywords: [__49("social", "digiblocks"), __49("icons", "digiblocks"), __49("networks", "digiblocks"), __49("media", "digiblocks")],
    // Disable all default controls and settings panels
    supports: {
      inserter: getBlockActiveStatus("social-icons") ? true : false,
      // Remove the block if disabled
      html: false,
      className: false,
      customClassName: false,
      anchor: false
    },
    attributes: {
      id: {
        type: "string",
        default: ""
      },
      anchor: {
        type: "string",
        default: ""
      },
      visibility: {
        type: "object",
        default: {
          desktop: false,
          tablet: false,
          mobile: false
        }
      },
      customClasses: {
        type: "string",
        default: ""
      },
      align: {
        type: "object",
        default: {
          desktop: "flex-start",
          tablet: "",
          mobile: ""
        }
      },
      icons: {
        type: "array",
        default: [
          {
            id: "social-icon-1",
            iconValue: {
              name: "Facebook",
              network: "facebook",
              svg: "M80 299.3V512H196V299.3h86.5l18-97.8H196V166.9c0-51.7 20.3-71.5 72.7-71.5c16.3 0 29.4 .4 37 1.2V7.9C291.4 4 256.4 0 236.2 0C129.3 0 80 50.5 80 159.4v42.1H14v97.8H80z"
            },
            url: "https://facebook.com",
            label: "Facebook",
            openInNewTab: true,
            rel: "nofollow"
          },
          {
            id: "social-icon-2",
            iconValue: {
              name: "Twitter",
              network: "twitter",
              svg: "M389.2 48h70.6L305.6 224.2 487 464H345L233.7 318.6 106.5 464H35.8L200.7 275.5 26.8 48H172.4L272.9 180.9 389.2 48zM364.4 421.8h39.1L151.1 88h-42L364.4 421.8z"
            },
            url: "https://twitter.com",
            label: "Twitter",
            openInNewTab: true,
            rel: "nofollow"
          },
          {
            id: "social-icon-3",
            iconValue: {
              name: "Instagram",
              network: "instagram",
              svg: "M224.1 141c-63.6 0-114.9 51.3-114.9 114.9s51.3 114.9 114.9 114.9S339 319.5 339 255.9 287.7 141 224.1 141zm0 189.6c-41.1 0-74.7-33.5-74.7-74.7s33.5-74.7 74.7-74.7 74.7 33.5 74.7 74.7-33.6 74.7-74.7 74.7zm146.4-194.3c0 14.9-12 26.8-26.8 26.8-14.9 0-26.8-12-26.8-26.8s12-26.8 26.8-26.8 26.8 12 26.8 26.8zm76.1 27.2c-1.7-35.9-9.9-67.7-36.2-93.9-26.2-26.2-58-34.4-93.9-36.2-37-2.1-147.9-2.1-184.9 0-35.8 1.7-67.6 9.9-93.9 36.1s-34.4 58-36.2 93.9c-2.1 37-2.1 147.9 0 184.9 1.7 35.9 9.9 67.7 36.2 93.9s58 34.4 93.9 36.2c37 2.1 147.9 2.1 184.9 0 35.9-1.7 67.7-9.9 93.9-36.2 26.2-26.2 34.4-58 36.2-93.9 2.1-37 2.1-147.8 0-184.8zM398.8 388c-7.8 19.6-22.9 34.7-42.6 42.6-29.5 11.7-99.5 9-132.1 9s-102.7 2.6-132.1-9c-19.6-7.8-34.7-22.9-42.6-42.6-11.7-29.5-9-99.5-9-132.1s-2.6-102.7 9-132.1c7.8-19.6 22.9-34.7 42.6-42.6 29.5-11.7 99.5-9 132.1-9s102.7-2.6 132.1 9c19.6 7.8 34.7 22.9 42.6 42.6 11.7 29.5 9 99.5 9 132.1s2.7 102.7-9 132.1z"
            },
            url: "https://instagram.com",
            label: "Instagram",
            openInNewTab: true,
            rel: "nofollow"
          }
        ]
      },
      iconSize: {
        type: "object",
        default: {
          desktop: 24,
          tablet: 22,
          mobile: 20
        }
      },
      iconSpacing: {
        type: "object",
        default: {
          desktop: 10,
          tablet: 8,
          mobile: 6
        }
      },
      labelSpacing: {
        type: "object",
        default: {
          desktop: 5,
          tablet: 5,
          mobile: 5
        }
      },
      iconColor: {
        type: "string",
        default: "#333333"
      },
      iconHoverColor: {
        type: "string",
        default: ""
      },
      labelColor: {
        type: "string",
        default: ""
      },
      labelHoverColor: {
        type: "string",
        default: ""
      },
      iconBackground: {
        type: "string",
        default: "transparent"
      },
      iconHoverBackground: {
        type: "string",
        default: ""
      },
      iconBorderStyle: {
        type: "string",
        default: "none"
      },
      iconBorderWidth: {
        type: "object",
        default: {
          desktop: { top: 1, right: 1, bottom: 1, left: 1, unit: "px" },
          tablet: { top: "", right: "", bottom: "", left: "", unit: "px" },
          mobile: { top: "", right: "", bottom: "", left: "", unit: "px" }
        }
      },
      iconBorderRadius: {
        type: "object",
        default: {
          desktop: { top: "", right: "", bottom: "", left: "", unit: "px" },
          tablet: { top: "", right: "", bottom: "", left: "", unit: "px" },
          mobile: { top: "", right: "", bottom: "", left: "", unit: "px" }
        }
      },
      iconBorderColor: {
        type: "string",
        default: "#e0e0e0"
      },
      iconHoverBorderColor: {
        type: "string",
        default: ""
      },
      padding: {
        type: "object",
        default: {
          desktop: { top: "", right: "", bottom: "", left: "", unit: "px" },
          tablet: { top: "", right: "", bottom: "", left: "", unit: "px" },
          mobile: { top: "", right: "", bottom: "", left: "", unit: "px" }
        }
      },
      animation: {
        type: "string",
        default: "none"
      },
      showLabels: {
        type: "boolean",
        default: false
      },
      labelPosition: {
        type: "string",
        default: "bottom"
      },
      textTypography: {
        type: "object",
        default: {
          fontFamily: "",
          fontSize: { desktop: 14, tablet: 13, mobile: 12 },
          fontSizeUnit: "px",
          fontWeight: "",
          fontStyle: "normal",
          textTransform: "",
          textDecoration: "",
          lineHeight: { desktop: 1.5, tablet: 1.4, mobile: 1.3 },
          lineHeightUnit: "em",
          letterSpacing: { desktop: 0, tablet: 0, mobile: 0 },
          letterSpacingUnit: "px"
        }
      }
    },
    example: {
      attributes: {
        icons: [
          {
            id: "example-icon-1",
            iconValue: {
              name: "Facebook",
              network: "facebook",
              svg: "M80 299.3V512H196V299.3h86.5l18-97.8H196V166.9c0-51.7 20.3-71.5 72.7-71.5c16.3 0 29.4 .4 37 1.2V7.9C291.4 4 256.4 0 236.2 0C129.3 0 80 50.5 80 159.4v42.1H14v97.8H80z"
            },
            url: "https://facebook.com",
            label: "Facebook",
            openInNewTab: true,
            rel: "nofollow"
          },
          {
            id: "example-icon-2",
            iconValue: {
              name: "Twitter",
              network: "twitter",
              svg: "M389.2 48h70.6L305.6 224.2 487 464H345L233.7 318.6 106.5 464H35.8L200.7 275.5 26.8 48H172.4L272.9 180.9 389.2 48zM364.4 421.8h39.1L151.1 88h-42L364.4 421.8z"
            },
            url: "https://twitter.com",
            label: "Twitter",
            openInNewTab: true,
            rel: "nofollow"
          },
          {
            id: "example-icon-3",
            iconValue: {
              name: "Instagram",
              network: "instagram",
              svg: "M224.1 141c-63.6 0-114.9 51.3-114.9 114.9s51.3 114.9 114.9 114.9S339 319.5 339 255.9 287.7 141 224.1 141zm0 189.6c-41.1 0-74.7-33.5-74.7-74.7s33.5-74.7 74.7-74.7 74.7 33.5 74.7 74.7-33.6 74.7-74.7 74.7zm146.4-194.3c0 14.9-12 26.8-26.8 26.8-14.9 0-26.8-12-26.8-26.8s12-26.8 26.8-26.8 26.8 12 26.8 26.8zm76.1 27.2c-1.7-35.9-9.9-67.7-36.2-93.9-26.2-26.2-58-34.4-93.9-36.2-37-2.1-147.9-2.1-184.9 0-35.8 1.7-67.6 9.9-93.9 36.1s-34.4 58-36.2 93.9c-2.1 37-2.1 147.9 0 184.9 1.7 35.9 9.9 67.7 36.2 93.9s58 34.4 93.9 36.2c37 2.1 147.9 2.1 184.9 0 35.9-1.7 67.7-9.9 93.9-36.2 26.2-26.2 34.4-58 36.2-93.9 2.1-37 2.1-147.8 0-184.8zM398.8 388c-7.8 19.6-22.9 34.7-42.6 42.6-29.5 11.7-99.5 9-132.1 9s-102.7 2.6-132.1-9c-19.6-7.8-34.7-22.9-42.6-42.6-11.7-29.5-9-99.5-9-132.1s-2.6-102.7 9-132.1c7.8-19.6 22.9-34.7 42.6-42.6 29.5-11.7 99.5-9 132.1-9s102.7-2.6 132.1 9c19.6 7.8 34.7 22.9 42.6 42.6 11.7 29.5 9 99.5 9 132.1s2.7 102.7-9 132.1z"
            },
            url: "https://instagram.com",
            label: "Instagram",
            openInNewTab: true,
            rel: "nofollow"
          }
        ],
        iconSpacing: { desktop: 20 },
        align: "center",
        iconColor: "#1e73be",
        labelColor: "#09053a",
        iconBackground: "transparent",
        showLabels: true,
        labelPosition: "right"
      }
    },
    edit: edit_default23,
    save: save_default23
  });
  registerBlockType("digiblocks/spacer", {
    apiVersion: 2,
    title: digiBlocksData.blocks["spacer"].title,
    category: "digiblocks",
    icon: {
      src: () => {
        const { viewbox, path } = digiBlocksData.blocks["spacer"].icon;
        return /* @__PURE__ */ wp.element.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: `0 0 ${viewbox}`, className: "digiblocks-editor-icons" }, /* @__PURE__ */ wp.element.createElement("path", { d: path }));
      }
    },
    description: digiBlocksData.blocks["spacer"].description,
    keywords: [__49("spacer", "digiblocks"), __49("gap", "digiblocks"), __49("spacing", "digiblocks")],
    supports: {
      inserter: getBlockActiveStatus("spacer") ? true : false,
      html: false,
      className: false,
      customClassName: false,
      anchor: false
    },
    attributes: {
      id: {
        type: "string",
        default: ""
      },
      anchor: {
        type: "string",
        default: ""
      },
      visibility: {
        type: "object",
        default: {
          desktop: false,
          tablet: false,
          mobile: false
        }
      },
      customClasses: {
        type: "string",
        default: ""
      },
      height: {
        type: "object",
        default: {
          desktop: 80,
          tablet: 60,
          mobile: 40
        }
      }
    },
    example: {
      attributes: {
        height: {
          desktop: 80
        }
      }
    },
    edit: edit_default24,
    save: save_default24
  });
  registerBlockType("digiblocks/table", {
    apiVersion: 2,
    title: digiBlocksData.blocks["table"].title,
    category: "digiblocks",
    icon: {
      src: () => {
        const { viewbox, path } = digiBlocksData.blocks["table"].icon;
        return /* @__PURE__ */ wp.element.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: `0 0 ${viewbox}`, className: "digiblocks-editor-icons" }, /* @__PURE__ */ wp.element.createElement("path", { d: path }));
      }
    },
    description: digiBlocksData.blocks["table"].description,
    keywords: [__49("table", "digiblocks"), __49("comparison", "digiblocks"), __49("grid", "digiblocks"), __49("cells", "digiblocks")],
    supports: {
      inserter: getBlockActiveStatus("table") ? true : false,
      html: false,
      className: false,
      customClassName: false,
      anchor: false
    },
    attributes: {
      id: {
        type: "string",
        default: ""
      },
      anchor: {
        type: "string",
        default: ""
      },
      visibility: {
        type: "object",
        default: {
          desktop: false,
          tablet: false,
          mobile: false
        }
      },
      customClasses: {
        type: "string",
        default: ""
      },
      tableData: {
        type: "array",
        default: [
          ["Header 1", "Header 2", "Header 3"],
          ["Cell 1,1", "Cell 1,2", "Cell 1,3"],
          ["Cell 2,1", "Cell 2,2", "Cell 2,3"]
        ]
      },
      hasHeader: {
        type: "boolean",
        default: true
      },
      hasFooter: {
        type: "boolean",
        default: false
      },
      tableBorderColor: {
        type: "string",
        default: "#e0e0e0"
      },
      tableBorderWidth: {
        type: "number",
        default: 1
      },
      tableBorderStyle: {
        type: "string",
        default: "solid"
      },
      cellPadding: {
        type: "object",
        default: {
          desktop: { top: 15, right: 15, bottom: 15, left: 15, unit: "px" },
          tablet: { top: 12, right: 12, bottom: 12, left: 12, unit: "px" },
          mobile: { top: "", right: "", bottom: "", left: "", unit: "px" }
        }
      },
      tableBorderCollapse: {
        type: "string",
        default: "collapse"
      },
      headerBackgroundColor: {
        type: "string",
        default: "#f8f9fa"
      },
      headerTextColor: {
        type: "string",
        default: "#333333"
      },
      headingTypography: {
        type: "object",
        default: {
          fontFamily: "",
          fontSize: { desktop: 18, tablet: 16, mobile: 15 },
          fontSizeUnit: "px",
          fontWeight: "600",
          fontStyle: "normal",
          textTransform: "none",
          textDecoration: "none",
          lineHeight: { desktop: 1.5, tablet: 1.4, mobile: 1.3 },
          lineHeightUnit: "em",
          letterSpacing: { desktop: 0, tablet: 0, mobile: 0 },
          letterSpacingUnit: "px"
        }
      },
      bodyBackgroundColor: {
        type: "string",
        default: "#ffffff"
      },
      altRowBackgroundColor: {
        type: "string",
        default: ""
      },
      bodyTextColor: {
        type: "string",
        default: "#666666"
      },
      textTypography: {
        type: "object",
        default: {
          fontFamily: "",
          fontSize: { desktop: 16, tablet: 15, mobile: 14 },
          fontSizeUnit: "px",
          fontWeight: "",
          fontStyle: "normal",
          textTransform: "",
          textDecoration: "",
          lineHeight: { desktop: 1.5, tablet: 1.4, mobile: 1.3 },
          lineHeightUnit: "em",
          letterSpacing: { desktop: 0, tablet: 0, mobile: 0 },
          letterSpacingUnit: "px"
        }
      },
      footerBackgroundColor: {
        type: "string",
        default: "#f8f9fa"
      },
      footerTextColor: {
        type: "string",
        default: "#333333"
      },
      contentTypography: {
        type: "object",
        default: {
          fontFamily: "",
          fontSize: { desktop: 16, tablet: 15, mobile: 14 },
          fontSizeUnit: "px",
          fontWeight: "600",
          fontStyle: "normal",
          textTransform: "none",
          textDecoration: "none",
          lineHeight: { desktop: 1.5, tablet: 1.4, mobile: 1.3 },
          lineHeightUnit: "em",
          letterSpacing: { desktop: 0, tablet: 0, mobile: 0 },
          letterSpacingUnit: "px"
        }
      },
      borderRadius: {
        type: "object",
        default: {
          desktop: { top: 8, right: 8, bottom: 8, left: 8, unit: "px" },
          tablet: { top: "", right: "", bottom: "", left: "", unit: "px" },
          mobile: { top: "", right: "", bottom: "", left: "", unit: "px" }
        }
      },
      boxShadow: {
        type: "object",
        default: {
          enable: false,
          color: "rgba(0, 0, 0, 0.1)",
          horizontal: 0,
          vertical: 2,
          blur: 10,
          spread: 0,
          position: "outset"
        }
      },
      boxShadowHover: {
        type: "object",
        default: {
          enable: false,
          color: "rgba(0, 0, 0, 0.2)",
          horizontal: 0,
          vertical: 10,
          blur: 25,
          spread: 0,
          position: "outset"
        }
      },
      margin: {
        type: "object",
        default: {
          desktop: { top: 0, right: 0, bottom: 30, left: 0, unit: "px" },
          tablet: { top: 0, right: 0, bottom: 25, left: 0, unit: "px" },
          mobile: { top: 0, right: 0, bottom: 20, left: 0, unit: "px" }
        }
      },
      cellAlignment: {
        type: "string",
        default: "left"
      },
      headerAlignment: {
        type: "string",
        default: "left"
      },
      footerAlignment: {
        type: "string",
        default: "left"
      },
      tablePreset: {
        type: "string",
        default: "default"
      },
      responsiveMode: {
        type: "string",
        default: "stack"
      },
      animation: {
        type: "string",
        default: "none"
      },
      firstColHeader: {
        type: "boolean",
        default: false
      },
      cellControls: {
        type: "object",
        default: {}
      }
    },
    example: {
      attributes: {
        tableData: [
          ["Feature", "Basic", "Premium"],
          ["Storage", "10GB", "1TB"],
          ["Users", "1", "Unlimited"],
          ["Support", "Email", "24/7 Phone"],
          ["Price", "$9.99", "$29.99"]
        ],
        hasHeader: true,
        headerBackgroundColor: "#f8f9fa",
        bodyBackgroundColor: "#ffffff",
        altRowBackgroundColor: "#f9f9f9"
      }
    },
    edit: edit_default25,
    save: save_default25
  });
  registerBlockType("digiblocks/team", {
    apiVersion: 2,
    title: digiBlocksData.blocks["team"].title,
    category: "digiblocks",
    icon: {
      src: () => {
        const { viewbox, path } = digiBlocksData.blocks["team"].icon;
        return /* @__PURE__ */ wp.element.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: `0 0 ${viewbox}`, className: "digiblocks-editor-icons" }, /* @__PURE__ */ wp.element.createElement("path", { d: path }));
      }
    },
    description: digiBlocksData.blocks["team"].description,
    keywords: [__49("team", "digiblocks"), __49("members", "digiblocks"), __49("staff", "digiblocks"), __49("people", "digiblocks")],
    supports: {
      inserter: getBlockActiveStatus("team") ? true : false,
      html: false,
      className: false,
      customClassName: false,
      anchor: false
    },
    attributes: {
      id: {
        type: "string",
        default: ""
      },
      anchor: {
        type: "string",
        default: ""
      },
      visibility: {
        type: "object",
        default: {
          desktop: false,
          tablet: false,
          mobile: false
        }
      },
      customClasses: {
        type: "string",
        default: ""
      },
      members: {
        type: "array",
        default: [
          {
            id: "team-member-1",
            name: __49("John Doe", "digiblocks"),
            position: __49("CEO & Founder", "digiblocks"),
            bio: __49("John has over 15 years of experience in the industry and leads our team with vision and expertise.", "digiblocks"),
            image: {
              url: "",
              id: "",
              alt: ""
            },
            socials: [
              {
                id: "social-1",
                network: "facebook",
                url: "https://facebook.com"
              },
              {
                id: "social-2",
                network: "twitter",
                url: "https://twitter.com"
              }
            ]
          },
          {
            id: "team-member-2",
            name: __49("Jane Smith", "digiblocks"),
            position: __49("Creative Director", "digiblocks"),
            bio: __49("Jane brings creativity and innovation to every project with her background in design and marketing.", "digiblocks"),
            image: {
              url: "",
              id: "",
              alt: ""
            },
            socials: [
              {
                id: "social-3",
                network: "linkedin",
                url: "https://linkedin.com"
              },
              {
                id: "social-4",
                network: "instagram",
                url: "https://instagram.com"
              }
            ]
          },
          {
            id: "team-member-3",
            name: __49("Mike Johnson", "digiblocks"),
            position: __49("Lead Developer", "digiblocks"),
            bio: __49("Mike is our technical expert, specializing in cutting-edge technologies and solving complex problems.", "digiblocks"),
            image: {
              url: "",
              id: "",
              alt: ""
            },
            socials: [
              {
                id: "social-5",
                network: "github",
                url: "https://github.com"
              },
              {
                id: "social-6",
                network: "dribbble",
                url: "https://dribbble.com"
              }
            ]
          }
        ]
      },
      columns: {
        type: "object",
        default: {
          desktop: 3,
          tablet: 2,
          mobile: 1
        }
      },
      gutter: {
        type: "object",
        default: {
          desktop: 30,
          tablet: 20,
          mobile: 15
        }
      },
      layout: {
        type: "string",
        default: "grid"
      },
      alignment: {
        type: "string",
        default: "center"
      },
      imageStyle: {
        type: "string",
        default: "circle"
      },
      imageSize: {
        type: "object",
        default: {
          desktop: 150,
          tablet: 120,
          mobile: 100
        }
      },
      imageBorderRadius: {
        type: "object",
        default: {
          desktop: { top: 8, right: 8, bottom: 8, left: 8, unit: "px" },
          tablet: { top: "", right: "", bottom: "", left: "", unit: "px" },
          mobile: { top: "", right: "", bottom: "", left: "", unit: "px" }
        }
      },
      imageBorderWidth: {
        type: "object",
        default: {
          desktop: { top: "", right: "", bottom: "", left: "", unit: "px" },
          tablet: { top: "", right: "", bottom: "", left: "", unit: "px" },
          mobile: { top: "", right: "", bottom: "", left: "", unit: "px" }
        }
      },
      imageBorderColor: {
        type: "string",
        default: "#e0e0e0"
      },
      imageBorderStyle: {
        type: "string",
        default: "none"
      },
      typography: {
        type: "object",
        default: {
          fontFamily: "",
          fontSize: { desktop: 22, tablet: 20, mobile: 18 },
          fontSizeUnit: "px",
          fontWeight: "600",
          fontStyle: "normal",
          textTransform: "none",
          textDecoration: "none",
          lineHeight: { desktop: 1.5, tablet: 1.4, mobile: 1.3 },
          lineHeightUnit: "em",
          letterSpacing: { desktop: 0, tablet: 0, mobile: 0 },
          letterSpacingUnit: "px"
        }
      },
      textTypography: {
        type: "object",
        default: {
          fontFamily: "",
          fontSize: { desktop: 16, tablet: 15, mobile: 14 },
          fontSizeUnit: "px",
          fontWeight: "400",
          fontStyle: "normal",
          textTransform: "none",
          textDecoration: "none",
          lineHeight: { desktop: 1.5, tablet: 1.4, mobile: 1.3 },
          lineHeightUnit: "em",
          letterSpacing: { desktop: 0, tablet: 0, mobile: 0 },
          letterSpacingUnit: "px"
        }
      },
      contentTypography: {
        type: "object",
        default: {
          fontFamily: "",
          fontSize: { desktop: 16, tablet: 15, mobile: 14 },
          fontSizeUnit: "px",
          fontWeight: "400",
          fontStyle: "normal",
          textTransform: "none",
          textDecoration: "none",
          lineHeight: { desktop: 1.5, tablet: 1.4, mobile: 1.3 },
          lineHeightUnit: "em",
          letterSpacing: { desktop: 0, tablet: 0, mobile: 0 },
          letterSpacingUnit: "px"
        }
      },
      nameColor: {
        type: "string",
        default: "#333333"
      },
      positionColor: {
        type: "string",
        default: "#666666"
      },
      bioColor: {
        type: "string",
        default: "#666666"
      },
      iconColor: {
        type: "string",
        default: "#1e73be"
      },
      iconHoverColor: {
        type: "string",
        default: "#135e9e"
      },
      iconSize: {
        type: "object",
        default: {
          desktop: 20,
          tablet: 18,
          mobile: 16
        }
      },
      iconSpacing: {
        type: "object",
        default: {
          desktop: 10,
          tablet: 8,
          mobile: 6
        }
      },
      iconBackgroundColor: {
        type: "string",
        default: "transparent"
      },
      iconBackgroundHoverColor: {
        type: "string",
        default: ""
      },
      iconBorderRadius: {
        type: "object",
        default: {
          desktop: { top: 50, right: 50, bottom: 50, left: 50, unit: "%" },
          tablet: { top: "", right: "", bottom: "", left: "", unit: "%" },
          mobile: { top: "", right: "", bottom: "", left: 50, unit: "%" }
        }
      },
      iconPadding: {
        type: "object",
        default: {
          desktop: { top: 8, right: 8, bottom: 8, left: 8, unit: "px" },
          tablet: { top: 6, right: 6, bottom: 6, left: 6, unit: "px" },
          mobile: { top: "", right: "", bottom: "", left: "", unit: "px" }
        }
      },
      boxBackgroundColor: {
        type: "string",
        default: "#ffffff"
      },
      boxBorderColor: {
        type: "string",
        default: "#e0e0e0"
      },
      boxBorderRadius: {
        type: "object",
        default: {
          desktop: { top: 8, right: 8, bottom: 8, left: 8, unit: "px" },
          tablet: { top: "", right: "", bottom: "", left: "", unit: "px" },
          mobile: { top: "", right: "", bottom: "", left: "", unit: "px" }
        }
      },
      boxBorderWidth: {
        type: "object",
        default: {
          desktop: { top: 1, right: 1, bottom: 1, left: 1, unit: "px" },
          tablet: { top: "", right: "", bottom: "", left: "", unit: "px" },
          mobile: { top: "", right: "", bottom: "", left: "", unit: "px" }
        }
      },
      boxBorderStyle: {
        type: "string",
        default: "solid"
      },
      boxPadding: {
        type: "object",
        default: {
          desktop: { top: 30, right: 30, bottom: 30, left: 30, unit: "px" },
          tablet: { top: 25, right: 25, bottom: 25, left: 25, unit: "px" },
          mobile: { top: 20, right: 20, bottom: 20, left: 20, unit: "px" }
        }
      },
      boxMargin: {
        type: "object",
        default: {
          desktop: { top: 0, right: 0, bottom: 30, left: 0, unit: "px" },
          tablet: { top: 0, right: 0, bottom: 25, left: 0, unit: "px" },
          mobile: { top: 0, right: 0, bottom: 20, left: 0, unit: "px" }
        }
      },
      boxShadow: {
        type: "object",
        default: {
          enable: false,
          color: "rgba(0, 0, 0, 0.1)",
          horizontal: 0,
          vertical: 5,
          blur: 15,
          spread: 0,
          position: "outset"
        }
      },
      boxShadowHover: {
        type: "object",
        default: {
          enable: false,
          color: "rgba(0, 0, 0, 0.2)",
          horizontal: 0,
          vertical: 10,
          blur: 25,
          spread: 0,
          position: "outset"
        }
      },
      animation: {
        type: "string",
        default: "none"
      },
      showName: {
        type: "boolean",
        default: true
      },
      showPosition: {
        type: "boolean",
        default: true
      },
      showBio: {
        type: "boolean",
        default: true
      },
      showSocial: {
        type: "boolean",
        default: true
      }
    },
    example: {
      attributes: {
        members: [
          {
            id: "team-member-1",
            name: __49("John Doe", "digiblocks"),
            position: __49("CEO & Founder", "digiblocks"),
            bio: __49("John has over 15 years of experience in the industry.", "digiblocks"),
            socials: [
              {
                id: "social-1",
                network: "facebook",
                url: "https://facebook.com"
              },
              {
                id: "social-2",
                network: "twitter",
                url: "https://twitter.com"
              }
            ]
          },
          {
            id: "team-member-2",
            name: __49("Jane Smith", "digiblocks"),
            position: __49("Creative Director", "digiblocks"),
            bio: __49("Jane brings creativity to every project.", "digiblocks"),
            socials: [
              {
                id: "social-3",
                network: "linkedin",
                url: "https://linkedin.com"
              }
            ]
          }
        ],
        columns: {
          desktop: 2,
          tablet: 2,
          mobile: 1
        }
      }
    },
    edit: edit_default26,
    save: save_default26
  });
  registerBlockType("digiblocks/testimonials", {
    apiVersion: 2,
    title: digiBlocksData.blocks["testimonials"].title,
    category: "digiblocks",
    icon: {
      src: () => {
        const { viewbox, path } = digiBlocksData.blocks["testimonials"].icon;
        return /* @__PURE__ */ wp.element.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: `0 0 ${viewbox}`, className: "digiblocks-editor-icons" }, /* @__PURE__ */ wp.element.createElement("path", { d: path }));
      }
    },
    description: digiBlocksData.blocks["testimonials"].description,
    keywords: [__49("testimonials", "digiblocks"), __49("reviews", "digiblocks"), __49("quotes", "digiblocks"), __49("testimonial", "digiblocks")],
    // Disable all default controls and settings panels
    supports: {
      inserter: getBlockActiveStatus("testimonials") ? true : false,
      // Remove the block if disabled
      html: false,
      className: false,
      customClassName: false,
      anchor: false
    },
    attributes: {
      id: {
        type: "string",
        default: ""
      },
      anchor: {
        type: "string",
        default: ""
      },
      visibility: {
        type: "object",
        default: {
          desktop: false,
          tablet: false,
          mobile: false
        }
      },
      customClasses: {
        type: "string",
        default: ""
      },
      testimonials: {
        type: "array",
        default: [
          {
            id: "testimonial-1",
            name: __49("John Doe", "digiblocks"),
            position: __49("CEO", "digiblocks"),
            company: __49("Tech Innovations Inc.", "digiblocks"),
            content: __49("This product has completely transformed our business operations. The support team is incredibly responsive and helpful.", "digiblocks"),
            imageUrl: "",
            imageId: "",
            rating: 5
          },
          {
            id: "testimonial-2",
            name: __49("Sarah Johnson", "digiblocks"),
            position: __49("Marketing Director", "digiblocks"),
            company: __49("Creative Solutions", "digiblocks"),
            content: __49("I cannot recommend this service enough. The quality and attention to detail exceeded our expectations.", "digiblocks"),
            imageUrl: "",
            imageId: "",
            rating: 5
          }
        ]
      },
      columns: {
        type: "object",
        default: {
          desktop: 2,
          tablet: 2,
          mobile: 1
        }
      },
      align: {
        type: "string",
        default: "left"
      },
      autoplay: {
        type: "boolean",
        default: true
      },
      autoplaySpeed: {
        type: "number",
        default: 3e3
      },
      showArrows: {
        type: "boolean",
        default: true
      },
      showDots: {
        type: "boolean",
        default: true
      },
      nameColor: {
        type: "string",
        default: "#333333"
      },
      nameHoverColor: {
        type: "string",
        default: ""
      },
      positionColor: {
        type: "string",
        default: "#666666"
      },
      contentColor: {
        type: "string",
        default: "#444444"
      },
      backgroundColor: {
        type: "string",
        default: "#ffffff"
      },
      backgroundHoverColor: {
        type: "string",
        default: ""
      },
      quoteIconColor: {
        type: "string",
        default: "#e0e0e0"
      },
      ratingColor: {
        type: "string",
        default: "#ffc107"
      },
      borderStyle: {
        type: "string",
        default: "default"
      },
      borderWidth: {
        type: "object",
        default: {
          desktop: { top: 1, right: 1, bottom: 1, left: 1, unit: "px" },
          tablet: { top: "", right: "", bottom: "", left: "", unit: "px" },
          mobile: { top: "", right: "", bottom: "", left: "", unit: "px" }
        }
      },
      borderRadius: {
        type: "object",
        default: {
          desktop: { top: 12, right: 12, bottom: 12, left: 12, unit: "px" },
          tablet: { top: "", right: "", bottom: "", left: "", unit: "px" },
          mobile: { top: "", right: "", bottom: "", left: "", unit: "px" }
        }
      },
      borderColor: {
        type: "string",
        default: "#e0e0e0"
      },
      boxShadow: {
        type: "object",
        default: {
          enable: true,
          color: "rgba(0, 0, 0, 0.12)",
          horizontal: 0,
          vertical: 5,
          blur: 15,
          spread: 0,
          position: "outset"
        }
      },
      boxShadowHover: {
        type: "object",
        default: {
          enable: true,
          color: "rgba(0, 0, 0, 0.2)",
          horizontal: 0,
          vertical: 10,
          blur: 20,
          spread: 0,
          position: "outset"
        }
      },
      padding: {
        type: "object",
        default: {
          desktop: { top: 40, right: 40, bottom: 40, left: 40, unit: "px" },
          tablet: { top: 30, right: 30, bottom: 30, left: 30, unit: "px" },
          mobile: { top: 20, right: 20, bottom: 20, left: 20, unit: "px" }
        }
      },
      margin: {
        type: "object",
        default: {
          desktop: { top: "", right: "", bottom: "", left: "", unit: "px" },
          tablet: { top: "", right: "", bottom: "", left: "", unit: "px" },
          mobile: { top: "", right: "", bottom: "", left: "", unit: "px" }
        }
      },
      contentTypography: {
        type: "object",
        default: {
          fontFamily: "",
          fontSize: { desktop: 16, tablet: 15, mobile: 14 },
          fontSizeUnit: "px",
          fontWeight: "",
          fontStyle: "italic",
          textTransform: "",
          textDecoration: "",
          lineHeight: { desktop: 1.7, tablet: 1.6, mobile: 1.5 },
          lineHeightUnit: "em",
          letterSpacing: { desktop: 0, tablet: 0, mobile: 0 },
          letterSpacingUnit: "px"
        }
      },
      headingTypography: {
        type: "object",
        default: {
          fontFamily: "",
          fontSize: { desktop: 20, tablet: 18, mobile: 16 },
          fontSizeUnit: "px",
          fontWeight: "600",
          fontStyle: "normal",
          textTransform: "",
          textDecoration: "",
          lineHeight: { desktop: 1.3, tablet: 1.3, mobile: 1.3 },
          lineHeightUnit: "em",
          letterSpacing: { desktop: 0, tablet: 0, mobile: 0 },
          letterSpacingUnit: "px"
        }
      },
      textTypography: {
        type: "object",
        default: {
          fontFamily: "",
          fontSize: { desktop: 14, tablet: 13, mobile: 12 },
          fontSizeUnit: "px",
          fontWeight: "",
          fontStyle: "normal",
          textTransform: "",
          textDecoration: "",
          lineHeight: { desktop: 1.4, tablet: 1.4, mobile: 1.4 },
          lineHeightUnit: "em",
          letterSpacing: { desktop: 0.5, tablet: 0.5, mobile: 0.5 },
          letterSpacingUnit: "px"
        }
      },
      imageSize: {
        type: "object",
        default: {
          desktop: 64,
          tablet: 56,
          mobile: 48
        }
      },
      quoteIconSize: {
        type: "object",
        default: {
          desktop: 80,
          tablet: 50,
          mobile: 30
        }
      },
      showRating: {
        type: "boolean",
        default: true
      },
      showQuoteIcon: {
        type: "boolean",
        default: true
      },
      animation: {
        type: "string",
        default: "none"
      },
      itemSpacing: {
        type: "object",
        default: {
          desktop: 30,
          tablet: 25,
          mobile: 20
        }
      }
    },
    example: {
      attributes: {
        testimonials: [
          {
            id: "testimonial-1",
            name: __49("John Doe", "digiblocks"),
            position: __49("CEO", "digiblocks"),
            company: __49("Tech Innovations Inc.", "digiblocks"),
            content: __49("This product has completely transformed our business operations. The support team is incredibly responsive and helpful.", "digiblocks"),
            imageUrl: "",
            imageId: "",
            rating: 5
          },
          {
            id: "testimonial-2",
            name: __49("Charlotte Lebon", "digiblocks"),
            position: __49("Marketing", "digiblocks"),
            company: __49("Creative Solutions", "digiblocks"),
            content: __49("We've seen a 40% increase in customer engagement since implementing this solution. Highly recommended for any business.", "digiblocks"),
            imageUrl: "",
            imageId: "",
            rating: 5
          }
        ],
        layout: "card",
        backgroundColor: "#ffffff"
      },
      viewportWidth: 800
    },
    edit: edit_default27,
    save: save_default27
  });
  if (isWooActive()) {
    registerBlockType("digiblocks/woo-products", {
      apiVersion: 2,
      title: digiBlocksData.blocks["woo-products"].title,
      category: "digiblocks",
      icon: {
        src: () => {
          const { viewbox, path } = digiBlocksData.blocks["woo-products"].icon;
          return /* @__PURE__ */ wp.element.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: `0 0 ${viewbox}`, className: "digiblocks-editor-icons" }, /* @__PURE__ */ wp.element.createElement("path", { d: path }));
        }
      },
      description: digiBlocksData.blocks["woo-products"].description,
      keywords: [__49("woocommerce", "digiblocks"), __49("products", "digiblocks"), __49("shop", "digiblocks"), __49("store", "digiblocks"), __49("ecommerce", "digiblocks")],
      supports: {
        inserter: getBlockActiveStatus("woo-products") ? true : false,
        html: false,
        className: false,
        customClassName: false,
        anchor: false
      },
      attributes: {
        id: {
          type: "string",
          default: ""
        },
        anchor: {
          type: "string",
          default: ""
        },
        visibility: {
          type: "object",
          default: {
            desktop: false,
            tablet: false,
            mobile: false
          }
        },
        customClasses: {
          type: "string",
          default: ""
        },
        productsToShow: {
          type: "number",
          default: 4
        },
        columns: {
          type: "object",
          default: {
            desktop: 4,
            tablet: 2,
            mobile: 1
          }
        },
        displayFeaturedImage: {
          type: "boolean",
          default: true
        },
        displayTitle: {
          type: "boolean",
          default: true
        },
        displayPrice: {
          type: "boolean",
          default: true
        },
        displayRating: {
          type: "boolean",
          default: true
        },
        displaySaleBadge: {
          type: "boolean",
          default: true
        },
        displayCategories: {
          type: "boolean",
          default: true
        },
        displayShortDescription: {
          type: "boolean",
          default: true
        },
        displayAddToCart: {
          type: "boolean",
          default: true
        },
        shortDescriptionLength: {
          type: "number",
          default: 25
        },
        order: {
          type: "string",
          default: "desc"
        },
        orderBy: {
          type: "string",
          default: "date"
        },
        categories: {
          type: "array",
          default: []
        },
        onSale: {
          type: "boolean",
          default: false
        },
        featured: {
          type: "boolean",
          default: false
        },
        enablePagination: {
          type: "boolean",
          default: false
        },
        paginationAlign: {
          type: "string",
          default: "center"
        },
        paginationBackgroundColor: {
          type: "string",
          default: "#f8f9fa"
        },
        paginationTextColor: {
          type: "string",
          default: "#333333"
        },
        paginationActiveBackgroundColor: {
          type: "string",
          default: "#4a6cf7"
        },
        paginationActiveTextColor: {
          type: "string",
          default: "#ffffff"
        },
        titleColor: {
          type: "string",
          default: "#333333"
        },
        titleHoverColor: {
          type: "string",
          default: ""
        },
        priceColor: {
          type: "string",
          default: "#4a6cf7"
        },
        saleColor: {
          type: "string",
          default: "#ff5252"
        },
        regularPriceColor: {
          type: "string",
          default: "#999999"
        },
        ratingColor: {
          type: "string",
          default: "#ffc107"
        },
        catBackgroundColor: {
          type: "string",
          default: "#52576b"
        },
        catColor: {
          type: "string",
          default: "#fff"
        },
        catHoverBackgroundColor: {
          type: "string",
          default: "#3f4a73"
        },
        catHoverColor: {
          type: "string",
          default: "#fff"
        },
        saleBadgeBackgroundColor: {
          type: "string",
          default: "#ff5252"
        },
        saleBadgeColor: {
          type: "string",
          default: "#ffffff"
        },
        descriptionColor: {
          type: "string",
          default: "#666666"
        },
        buttonBackgroundColor: {
          type: "string",
          default: "#4a6cf7"
        },
        buttonTextColor: {
          type: "string",
          default: "#ffffff"
        },
        buttonBackgroundHoverColor: {
          type: "string",
          default: "#3a5ce5"
        },
        buttonTextHoverColor: {
          type: "string",
          default: "#ffffff"
        },
        imageMargin: {
          type: "object",
          default: {
            desktop: 15,
            tablet: 15,
            mobile: 15
          }
        },
        contentMargin: {
          type: "object",
          default: {
            desktop: 14,
            tablet: 12,
            mobile: 12
          }
        },
        padding: {
          type: "object",
          default: {
            desktop: { top: "", right: "", bottom: "", left: "", unit: "px" },
            tablet: { top: "", right: "", bottom: "", left: "", unit: "px" },
            mobile: { top: "", right: "", bottom: "", left: "", unit: "px" }
          }
        },
        margin: {
          type: "object",
          default: {
            desktop: { top: 0, right: 0, bottom: 30, left: 0, unit: "px" },
            tablet: { top: 0, right: 0, bottom: 25, left: 0, unit: "px" },
            mobile: { top: 0, right: 0, bottom: 20, left: 0, unit: "px" }
          }
        },
        itemSpacing: {
          type: "object",
          default: {
            desktop: 20,
            tablet: 15,
            mobile: 10
          }
        },
        titleTypography: {
          type: "object",
          default: {
            fontFamily: "",
            fontSize: { desktop: 20, tablet: 18, mobile: 16 },
            fontSizeUnit: "px",
            fontWeight: "600",
            fontStyle: "normal",
            textTransform: "none",
            textDecoration: "none",
            lineHeight: { desktop: 1.4, tablet: 1.3, mobile: 1.2 },
            lineHeightUnit: "em",
            letterSpacing: { desktop: 0, tablet: 0, mobile: 0 },
            letterSpacingUnit: "px"
          }
        },
        headingTypography: {
          type: "object",
          default: {
            fontFamily: "",
            fontSize: { desktop: 18, tablet: 16, mobile: 15 },
            fontSizeUnit: "px",
            fontWeight: "700",
            fontStyle: "normal",
            textTransform: "none",
            textDecoration: "none",
            lineHeight: { desktop: 1.4, tablet: 1.3, mobile: 1.2 },
            lineHeightUnit: "em",
            letterSpacing: { desktop: 0, tablet: 0, mobile: 0 },
            letterSpacingUnit: "px"
          }
        },
        textTypography: {
          type: "object",
          default: {
            fontFamily: "",
            fontSize: { desktop: 13, tablet: 12, mobile: 11 },
            fontSizeUnit: "px",
            fontWeight: "normal",
            fontStyle: "normal",
            textTransform: "none",
            textDecoration: "none",
            lineHeight: { desktop: 1.4, tablet: 1.3, mobile: 1.2 },
            lineHeightUnit: "em",
            letterSpacing: { desktop: 0, tablet: 0, mobile: 0 },
            letterSpacingUnit: "px"
          }
        },
        contentTypography: {
          type: "object",
          default: {
            fontFamily: "",
            fontSize: { desktop: 16, tablet: 15, mobile: 14 },
            fontSizeUnit: "px",
            fontWeight: "normal",
            fontStyle: "normal",
            textTransform: "none",
            textDecoration: "none",
            lineHeight: { desktop: 1.5, tablet: 1.4, mobile: 1.3 },
            lineHeightUnit: "em",
            letterSpacing: { desktop: 0, tablet: 0, mobile: 0 },
            letterSpacingUnit: "px"
          }
        },
        buttonTypography: {
          type: "object",
          default: {
            fontFamily: "",
            fontSize: { desktop: 16, tablet: 15, mobile: 14 },
            fontSizeUnit: "px",
            fontWeight: "500",
            fontStyle: "normal",
            textTransform: "none",
            textDecoration: "none",
            lineHeight: { desktop: 1.5, tablet: 1.4, mobile: 1.3 },
            lineHeightUnit: "em",
            letterSpacing: { desktop: 0, tablet: 0, mobile: 0 },
            letterSpacingUnit: "px"
          }
        },
        buttonPadding: {
          type: "object",
          default: {
            desktop: { top: 10, right: 20, bottom: 10, left: 20, unit: "px" },
            tablet: { top: 8, right: 16, bottom: 8, left: 16, unit: "px" },
            mobile: { top: 6, right: 12, bottom: 6, left: 12, unit: "px" }
          }
        },
        buttonBorderRadius: {
          type: "object",
          default: {
            desktop: { top: 4, right: 4, bottom: 4, left: 4, unit: "px" },
            tablet: { top: "", right: "", bottom: "", left: "", unit: "px" },
            mobile: { top: "", right: "", bottom: "", left: "", unit: "px" }
          }
        },
        imageSize: {
          type: "string",
          default: "woocommerce_thumbnail"
        },
        imageBorderRadius: {
          type: "object",
          default: {
            desktop: { top: 8, right: 8, bottom: 8, left: 8, unit: "px" },
            tablet: { top: "", right: "", bottom: "", left: "", unit: "px" },
            mobile: { top: "", right: "", bottom: "", left: "", unit: "px" }
          }
        },
        cardStyle: {
          type: "boolean",
          default: false
        },
        cardBackgroundColor: {
          type: "string",
          default: "#ffffff"
        },
        cardPadding: {
          type: "object",
          default: {
            desktop: { top: 20, right: 20, bottom: 20, left: 20, unit: "px" },
            tablet: { top: 15, right: 15, bottom: 15, left: 15, unit: "px" },
            mobile: { top: 10, right: 10, bottom: 10, left: 10, unit: "px" }
          }
        },
        cardBorderRadius: {
          type: "object",
          default: {
            desktop: { top: 8, right: 8, bottom: 8, left: 8, unit: "px" },
            tablet: { top: "", right: "", bottom: "", left: "", unit: "px" },
            mobile: { top: "", right: "", bottom: "", left: "", unit: "px" }
          }
        },
        cardBorderStyle: {
          type: "string",
          default: "solid"
        },
        cardBorderWidth: {
          type: "object",
          default: {
            desktop: { top: 1, right: 1, bottom: 1, left: 1, unit: "px" },
            tablet: { top: "", right: "", bottom: "", left: "", unit: "px" },
            mobile: { top: "", right: "", bottom: "", left: "", unit: "px" }
          }
        },
        cardBorderColor: {
          type: "string",
          default: "#e0e0e0"
        },
        cardShadow: {
          type: "object",
          default: {
            enable: false,
            color: "rgba(0, 0, 0, 0.1)",
            horizontal: 0,
            vertical: 0,
            blur: 0,
            spread: 0,
            position: "outset"
          }
        },
        cardShadowHover: {
          type: "object",
          default: {
            enable: false,
            color: "rgba(0, 0, 0, 0.2)",
            horizontal: 0,
            vertical: 0,
            blur: 0,
            spread: 0,
            position: "outset"
          }
        },
        animation: {
          type: "string",
          default: "none"
        }
      },
      example: {
        attributes: {
          productsToShow: 2,
          columns: {
            desktop: 2,
            tablet: 2,
            mobile: 1
          },
          displayFeaturedImage: true,
          displayTitle: true,
          displayPrice: true,
          displayRating: true,
          displayAddToCart: true,
          cardStyle: true
        },
        viewportWidth: 800
      },
      edit: edit_default28,
      save: save_default28
    });
  }
  registerBlockType("digiblocks/logo", {
    apiVersion: 2,
    title: digiBlocksData.blocks["logo"].title,
    category: "digiblocks-theme",
    icon: {
      src: () => {
        const { viewbox, path } = digiBlocksData.blocks["logo"].icon;
        return /* @__PURE__ */ wp.element.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: `0 0 ${viewbox}`, className: "digiblocks-editor-icons" }, /* @__PURE__ */ wp.element.createElement("path", { d: path }));
      }
    },
    description: digiBlocksData.blocks["logo"].description,
    keywords: [__49("logo", "digiblocks"), __49("brand", "digiblocks"), __49("identity", "digiblocks"), __49("header", "digiblocks"), __49("theme", "digiblocks")],
    supports: {
      inserter: getBlockActiveStatus("logo") ? true : false,
      html: false,
      className: false,
      customClassName: false,
      anchor: false
    },
    attributes: {
      id: {
        type: "string",
        default: ""
      },
      anchor: {
        type: "string",
        default: ""
      },
      visibility: {
        type: "object",
        default: {
          desktop: false,
          tablet: false,
          mobile: false
        }
      },
      customClasses: {
        type: "string",
        default: ""
      },
      logoType: {
        type: "string",
        default: "image"
      },
      imageId: {
        type: "number",
        default: 0
      },
      imageUrl: {
        type: "string",
        default: ""
      },
      imageAlt: {
        type: "string",
        default: ""
      },
      text: {
        type: "string",
        default: __49("Site Logo", "digiblocks")
      },
      textTypography: {
        type: "object",
        default: {
          fontFamily: "",
          fontSize: { desktop: 28, tablet: 26, mobile: 24 },
          fontSizeUnit: "px",
          fontWeight: "700",
          fontStyle: "normal",
          textTransform: "none",
          textDecoration: "none",
          lineHeight: { desktop: 1.2, tablet: 1.2, mobile: 1.2 },
          lineHeightUnit: "em",
          letterSpacing: { desktop: 0, tablet: 0, mobile: 0 },
          letterSpacingUnit: "px"
        }
      },
      textIcon: {
        type: "object",
        default: null
      },
      iconPosition: {
        type: "string",
        default: "before"
      },
      logoWidth: {
        type: "object",
        default: {
          desktop: { value: 200, unit: "px" },
          tablet: { value: 180, unit: "px" },
          mobile: { value: 150, unit: "px" }
        }
      },
      logoHeight: {
        type: "object",
        default: {
          desktop: { value: 0, unit: "px" },
          tablet: { value: 0, unit: "px" },
          mobile: { value: 0, unit: "px" }
        }
      },
      iconSize: {
        type: "object",
        default: {
          desktop: { value: 30, unit: "px" },
          tablet: { value: 28, unit: "px" },
          mobile: { value: 26, unit: "px" }
        }
      },
      logoAlignment: {
        type: "object",
        default: {
          desktop: "flex-start",
          tablet: "",
          mobile: ""
        }
      },
      textColor: {
        type: "string",
        default: "#333333"
      },
      textHoverColor: {
        type: "string",
        default: ""
      },
      backgroundColor: {
        type: "string",
        default: ""
      },
      backgroundHoverColor: {
        type: "string",
        default: ""
      },
      linkEnabled: {
        type: "boolean",
        default: true
      },
      linkUrl: {
        type: "string",
        default: ""
      },
      linkOpenInNewTab: {
        type: "boolean",
        default: false
      },
      linkRel: {
        type: "string",
        default: ""
      },
      borderStyle: {
        type: "string",
        default: "none"
      },
      borderWidth: {
        type: "object",
        default: {
          desktop: { top: 1, right: 1, bottom: 1, left: 1, unit: "px" },
          tablet: { top: "", right: "", bottom: "", left: "", unit: "px" },
          mobile: { top: "", right: "", bottom: "", left: "", unit: "px" }
        }
      },
      borderRadius: {
        type: "object",
        default: {
          desktop: { top: "", right: "", bottom: "", left: "", unit: "px" },
          tablet: { top: "", right: "", bottom: "", left: "", unit: "px" },
          mobile: { top: "", right: "", bottom: "", left: "", unit: "px" }
        }
      },
      borderColor: {
        type: "string",
        default: "#e0e0e0"
      },
      borderHoverColor: {
        type: "string",
        default: ""
      },
      boxShadow: {
        type: "object",
        default: {
          enable: false,
          color: "rgba(0, 0, 0, 0.2)",
          horizontal: 0,
          vertical: 0,
          blur: 0,
          spread: 0,
          position: "outset"
        }
      },
      boxShadowHover: {
        type: "object",
        default: {
          enable: false,
          color: "rgba(0, 0, 0, 0.2)",
          horizontal: 0,
          vertical: 0,
          blur: 0,
          spread: 0,
          position: "outset"
        }
      },
      padding: {
        type: "object",
        default: {
          desktop: { top: "", right: "", bottom: "", left: "", unit: "px" },
          tablet: { top: "", right: "", bottom: "", left: "", unit: "px" },
          mobile: { top: "", right: "", bottom: "", left: "", unit: "px" }
        }
      },
      margin: {
        type: "object",
        default: {
          desktop: { top: "", right: "", bottom: "", left: "", unit: "px" },
          tablet: { top: "", right: "", bottom: "", left: "", unit: "px" },
          mobile: { top: "", right: "", bottom: "", left: "", unit: "px" }
        }
      },
      animation: {
        type: "string",
        default: "none"
      },
      hoverEffect: {
        type: "string",
        default: "none"
      }
    },
    example: {
      attributes: {
        logoType: "text",
        text: __49("My Company", "digiblocks"),
        logoAlignment: "center",
        textColor: "#333333"
      }
    },
    edit: edit_default29,
    save: save_default29
  });
  registerBlockType("digiblocks/navigation", {
    apiVersion: 2,
    title: digiBlocksData.blocks["navigation"].title,
    category: "digiblocks-theme",
    icon: {
      src: () => {
        const { viewbox, path } = digiBlocksData.blocks["navigation"].icon;
        return /* @__PURE__ */ wp.element.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: `0 0 ${viewbox}`, className: "digiblocks-editor-icons" }, /* @__PURE__ */ wp.element.createElement("path", { d: path }));
      }
    },
    description: digiBlocksData.blocks["navigation"].description,
    keywords: [__49("navigation", "digiblocks"), __49("menu", "digiblocks"), __49("header", "digiblocks")],
    supports: {
      inserter: getBlockActiveStatus("navigation") ? true : false,
      html: false,
      className: false,
      customClassName: false,
      anchor: false
    },
    attributes: {
      id: {
        type: "string",
        default: ""
      },
      anchor: {
        type: "string",
        default: ""
      },
      visibility: {
        type: "object",
        default: {
          desktop: false,
          tablet: false,
          mobile: false
        }
      },
      customClasses: {
        type: "string",
        default: ""
      },
      menuType: {
        type: "string",
        default: "wordpress"
      },
      selectedMenu: {
        type: "object",
        default: null
      },
      customItems: {
        type: "array",
        default: []
      },
      flexWrap: {
        type: "object",
        default: {
          desktop: "nowrap",
          tablet: "",
          mobile: ""
        }
      },
      orientation: {
        type: "object",
        default: {
          desktop: "horizontal",
          tablet: "",
          mobile: ""
        }
      },
      align: {
        type: "object",
        default: {
          desktop: "flex-start",
          tablet: "",
          mobile: ""
        }
      },
      columns: {
        type: "object",
        default: {
          desktop: 1,
          tablet: 1,
          mobile: 1
        }
      },
      linkEffect: {
        type: "string",
        default: "none"
      },
      submenuEffect: {
        type: "string",
        default: "fade"
      },
      mobileBreakpoint: {
        type: "number",
        default: 768
      },
      showMobileToggle: {
        type: "boolean",
        default: true
      },
      mobileAlign: {
        type: "object",
        default: "flex-end"
      },
      toggleIcon: {
        type: "string",
        default: "hamburger"
      },
      customToggleIcon: {
        type: "object",
        default: null
      },
      toggleIconColor: {
        type: "string",
        default: "#333333"
      },
      toggleIconHoverColor: {
        type: "string",
        default: ""
      },
      mobileToggleSize: {
        type: "object",
        default: {
          desktop: 48,
          tablet: 44,
          mobile: 40
        }
      },
      mobileIconSize: {
        type: "object",
        default: {
          desktop: 24,
          tablet: 22,
          mobile: 20
        }
      },
      textTypography: {
        type: "object",
        default: {
          fontFamily: "",
          fontSize: { desktop: 16, tablet: 15, mobile: 14 },
          fontSizeUnit: "px",
          fontWeight: "",
          fontStyle: "normal",
          textTransform: "",
          textDecoration: "",
          lineHeight: { desktop: 1.5, tablet: 1.4, mobile: 3 },
          lineHeightUnit: "em",
          letterSpacing: { desktop: 0, tablet: 0, mobile: 0 },
          letterSpacingUnit: "px"
        }
      },
      linkColor: {
        type: "string",
        default: "#333333"
      },
      linkHoverColor: {
        type: "string",
        default: "#1e73be"
      },
      linkBackgroundColor: {
        type: "string",
        default: "transparent"
      },
      linkHoverBackgroundColor: {
        type: "string",
        default: "transparent"
      },
      submenuBackgroundColor: {
        type: "string",
        default: "#ffffff"
      },
      submenuBorderColor: {
        type: "string",
        default: "#e0e0e0"
      },
      submenuMobileBackgroundColor: {
        type: "string",
        default: "rgba(0, 0, 0, 0.02)"
      },
      submenuMobileLinkColor: {
        type: "string",
        default: ""
      },
      submenuMobileLinkHoverColor: {
        type: "string",
        default: ""
      },
      submenuMobileLinkHoverBackgroundColor: {
        type: "string",
        default: ""
      },
      itemSpacing: {
        type: "object",
        default: {
          desktop: 20,
          tablet: 15,
          mobile: 12
        }
      },
      padding: {
        type: "object",
        default: {
          desktop: { top: 8, right: 10, bottom: 8, left: 10, unit: "px" },
          tablet: { top: 6, right: 8, bottom: 6, left: 8, unit: "px" },
          mobile: { top: 0, right: 20, bottom: 0, left: 20, unit: "px" }
        }
      },
      borderRadius: {
        type: "object",
        default: {
          desktop: { top: 4, right: 4, bottom: 4, left: 4, unit: "px" },
          tablet: { top: "", right: "", bottom: "", left: "", unit: "px" },
          mobile: { top: "", right: "", bottom: "", left: "", unit: "px" }
        }
      },
      animation: {
        type: "string",
        default: "none"
      },
      mobileFullWidth: {
        type: "boolean",
        default: true
      }
    },
    example: {
      attributes: {
        menuType: "custom",
        customItems: [
          {
            id: "nav-item-1",
            text: __49("Home", "digiblocks"),
            url: "#",
            opensInNewTab: false,
            icon: null
          },
          {
            id: "nav-item-2",
            text: __49("About", "digiblocks"),
            url: "#",
            opensInNewTab: false,
            icon: null
          },
          {
            id: "nav-item-3",
            text: __49("Contact", "digiblocks"),
            url: "#",
            opensInNewTab: false,
            icon: null
          }
        ]
      }
    },
    edit: edit_default30,
    save: save_default30
  });
  registerBlockType("digiblocks/login-link", {
    apiVersion: 2,
    title: digiBlocksData.blocks["login-link"].title,
    category: "digiblocks-theme",
    icon: {
      src: () => {
        const { viewbox, path } = digiBlocksData.blocks["login-link"].icon;
        return /* @__PURE__ */ wp.element.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: `0 0 ${viewbox}`, className: "digiblocks-editor-icons" }, /* @__PURE__ */ wp.element.createElement("path", { d: path }));
      }
    },
    description: digiBlocksData.blocks["login-link"].description,
    keywords: [__49("login", "digiblocks"), __49("account", "digiblocks"), __49("user", "digiblocks"), __49("link", "digiblocks")],
    // Disable all default controls and settings panels
    supports: {
      inserter: getBlockActiveStatus("login-link") ? true : false,
      html: false,
      className: false,
      customClassName: false,
      anchor: false
    },
    attributes: {
      id: {
        type: "string"
      },
      customClasses: {
        type: "string"
      },
      visibility: {
        type: "object",
        default: {
          desktop: false,
          tablet: false,
          mobile: false
        }
      },
      loginText: {
        type: "string",
        default: __49("Log In", "digiblocks")
      },
      loginIconValue: {
        type: "object",
        default: null
      },
      loginIconPosition: {
        type: "string",
        default: "left"
      },
      loginUrl: {
        type: "string",
        default: ""
      },
      loginOpenInNewTab: {
        type: "boolean",
        default: false
      },
      loginRel: {
        type: "string",
        default: ""
      },
      loggedInText: {
        type: "string",
        default: __49("My Account", "digiblocks")
      },
      loggedInIconValue: {
        type: "object",
        default: null
      },
      loggedInIconPosition: {
        type: "string",
        default: "left"
      },
      loggedInUrl: {
        type: "string",
        default: ""
      },
      loggedInOpenInNewTab: {
        type: "boolean",
        default: false
      },
      loggedInRel: {
        type: "string",
        default: ""
      },
      align: {
        type: "object",
        default: {
          desktop: "flex-start",
          tablet: "",
          mobile: ""
        }
      },
      textColor: {
        type: "string"
      },
      textHoverColor: {
        type: "string"
      },
      typography: {
        type: "object",
        default: {}
      },
      iconSize: {
        type: "object",
        default: {
          desktop: 16,
          tablet: 15,
          mobile: 14
        }
      }
    },
    example: {
      attributes: {
        loginText: __49("Log In", "digiblocks"),
        loggedInText: __49("My Account", "digiblocks"),
        loginIconPosition: "left",
        textColor: "#3a86ff",
        textHoverColor: "#023e8a",
        typography: {
          fontSize: {
            desktop: 16,
            tablet: 15,
            mobile: 14
          },
          fontWeight: "500"
        }
      }
    },
    edit: edit_default31,
    save: save_default31
  });
  registerBlockType("digiblocks/page-title", {
    apiVersion: 2,
    title: digiBlocksData.blocks["page-title"].title,
    category: "digiblocks-theme",
    icon: {
      src: () => {
        const { viewbox, path } = digiBlocksData.blocks["page-title"].icon;
        return /* @__PURE__ */ wp.element.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: `0 0 ${viewbox}`, className: "digiblocks-editor-icons" }, /* @__PURE__ */ wp.element.createElement("path", { d: path }));
      }
    },
    description: digiBlocksData.blocks["page-title"].description,
    keywords: [__49("title", "digiblocks"), __49("heading", "digiblocks"), __49("header", "digiblocks")],
    // Disable all default controls and settings panels
    supports: {
      inserter: getBlockActiveStatus("page-title") ? true : false,
      html: false,
      className: false,
      customClassName: false,
      anchor: false
    },
    attributes: {
      id: {
        type: "string",
        default: ""
      },
      anchor: {
        type: "string",
        default: ""
      },
      visibility: {
        type: "object",
        default: {
          desktop: false,
          tablet: false,
          mobile: false
        }
      },
      customClasses: {
        type: "string",
        default: ""
      },
      headingTag: {
        type: "string",
        default: "h2"
      },
      align: {
        type: "object",
        default: {
          desktop: "left",
          tablet: "left",
          mobile: "left"
        }
      },
      color: {
        type: "string",
        default: "#333333"
      },
      hoverColor: {
        type: "string",
        default: ""
      },
      typography: {
        type: "object",
        default: {
          fontFamily: "",
          fontSize: { desktop: 42, tablet: 32, mobile: 24 },
          fontSizeUnit: "px",
          fontWeight: "700",
          fontStyle: "normal",
          textTransform: "",
          textDecoration: "",
          lineHeight: { desktop: 1.2, tablet: 1.2, mobile: 1.2 },
          lineHeightUnit: "em",
          letterSpacing: { desktop: 0, tablet: 0, mobile: 0 },
          letterSpacingUnit: "px"
        }
      },
      padding: {
        type: "object",
        default: {
          desktop: { top: 0, right: 0, bottom: 15, left: 0, unit: "px" },
          tablet: { top: 0, right: 0, bottom: 12, left: 0, unit: "px" },
          mobile: { top: 0, right: 0, bottom: 10, left: 0, unit: "px" }
        }
      },
      margin: {
        type: "object",
        default: {
          desktop: { top: "", right: "", bottom: "", left: "", unit: "px" },
          tablet: { top: "", right: "", bottom: "", left: "", unit: "px" },
          mobile: { top: "", right: "", bottom: "", left: "", unit: "px" }
        }
      },
      animation: {
        type: "string",
        default: "none"
      }
    },
    example: {
      attributes: {
        headingTag: "h2",
        align: "left",
        color: "#333333",
        typography: {
          fontSize: { desktop: 32 },
          fontWeight: "700",
          lineHeight: { desktop: 1.2 }
        }
      }
    },
    edit: edit_default32,
    save: save_default32
  });
  registerBlockType("digiblocks/breadcrumbs", {
    apiVersion: 2,
    title: digiBlocksData.blocks["breadcrumbs"].title,
    category: "digiblocks-theme",
    icon: {
      src: () => {
        const { viewbox, path } = digiBlocksData.blocks["breadcrumbs"].icon;
        return /* @__PURE__ */ wp.element.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: `0 0 ${viewbox}`, className: "digiblocks-editor-icons" }, /* @__PURE__ */ wp.element.createElement("path", { d: path }));
      }
    },
    description: digiBlocksData.blocks["breadcrumbs"].description,
    keywords: [__49("breadcrumb", "digiblocks"), __49("navigation", "digiblocks"), __49("path", "digiblocks")],
    supports: {
      inserter: getBlockActiveStatus("breadcrumbs") ? true : false,
      html: false,
      className: false,
      customClassName: false,
      anchor: false
    },
    attributes: {
      id: {
        type: "string",
        default: ""
      },
      anchor: {
        type: "string",
        default: ""
      },
      visibility: {
        type: "object",
        default: {
          desktop: false,
          tablet: false,
          mobile: false
        }
      },
      customClasses: {
        type: "string",
        default: ""
      },
      align: {
        type: "object",
        default: {
          desktop: "left",
          tablet: "left",
          mobile: "left"
        }
      },
      textColor: {
        type: "string",
        default: "#666666"
      },
      linkColor: {
        type: "string",
        default: "#0066cc"
      },
      linkHoverColor: {
        type: "string",
        default: "#004c99"
      },
      separatorColor: {
        type: "string",
        default: "#666666"
      },
      typography: {
        type: "object",
        default: {
          fontFamily: "",
          fontSize: { desktop: 14, tablet: 13, mobile: 12 },
          fontSizeUnit: "px",
          fontWeight: "normal",
          fontStyle: "normal",
          textTransform: "",
          textDecoration: "",
          lineHeight: { desktop: 1.5, tablet: 1.5, mobile: 1.5 },
          lineHeightUnit: "em",
          letterSpacing: { desktop: 0, tablet: 0, mobile: 0 },
          letterSpacingUnit: "px"
        }
      },
      margin: {
        type: "object",
        default: {
          desktop: { top: "", right: "", bottom: "", left: "", unit: "px" },
          tablet: { top: "", right: "", bottom: "", left: "", unit: "px" },
          mobile: { top: "", right: "", bottom: "", left: "", unit: "px" }
        }
      },
      separatorSize: {
        type: "object",
        default: {
          desktop: 12,
          tablet: 10,
          mobile: 9
        }
      },
      separatorSpacing: {
        type: "object",
        default: {
          desktop: 8,
          tablet: 6,
          mobile: 4
        }
      },
      showHome: {
        type: "boolean",
        default: true
      },
      homeText: {
        type: "string",
        default: __49("Home", "digiblocks")
      },
      showCurrent: {
        type: "boolean",
        default: true
      },
      useYoast: {
        type: "boolean",
        default: false
      },
      useRankMath: {
        type: "boolean",
        default: false
      },
      useMicrodata: {
        type: "boolean",
        default: true
      },
      animation: {
        type: "string",
        default: "none"
      }
    },
    example: {
      attributes: {
        textColor: "#666666",
        linkColor: "#0066cc",
        homeText: __49("Home", "digiblocks"),
        showHome: true,
        showCurrent: true
      }
    },
    edit: edit_default33,
    save: save_default33
  });
  registerBlockType("digiblocks/featured-image", {
    apiVersion: 2,
    title: digiBlocksData.blocks["featured-image"].title,
    category: "digiblocks-theme",
    icon: {
      src: () => {
        const { viewbox, path } = digiBlocksData.blocks["featured-image"].icon;
        return /* @__PURE__ */ wp.element.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: `0 0 ${viewbox}`, className: "digiblocks-editor-icons" }, /* @__PURE__ */ wp.element.createElement("path", { d: path }));
      }
    },
    description: digiBlocksData.blocks["featured-image"].description,
    keywords: [__49("featured image", "digiblocks"), __49("thumbnail", "digiblocks"), __49("post image", "digiblocks")],
    // Disable all default controls and settings panels
    supports: {
      inserter: getBlockActiveStatus("featured-image") ? true : false,
      html: false,
      className: false,
      customClassName: false,
      anchor: false
    },
    attributes: {
      id: {
        type: "string",
        default: ""
      },
      anchor: {
        type: "string",
        default: ""
      },
      visibility: {
        type: "object",
        default: {
          desktop: false,
          tablet: false,
          mobile: false
        }
      },
      customClasses: {
        type: "string",
        default: ""
      },
      imageSize: {
        type: "string",
        default: "large"
      },
      imageCrop: {
        type: "boolean",
        default: false
      },
      aspectRatio: {
        type: "string",
        default: "default"
      },
      customHeight: {
        type: "object",
        default: {
          desktop: 300,
          tablet: 250,
          mobile: 200
        }
      },
      enableCaption: {
        type: "boolean",
        default: false
      },
      linkToPost: {
        type: "boolean",
        default: false
      },
      width: {
        type: "object",
        default: {
          desktop: 100,
          tablet: 100,
          mobile: 100
        }
      },
      align: {
        type: "object",
        default: {
          desktop: "center",
          tablet: "center",
          mobile: "center"
        }
      },
      borderStyle: {
        type: "string",
        default: "none"
      },
      borderWidth: {
        type: "object",
        default: {
          desktop: { top: 1, right: 1, bottom: 1, left: 1, unit: "px" },
          tablet: { top: "", right: "", bottom: "", left: "", unit: "px" },
          mobile: { top: "", right: "", bottom: "", left: "", unit: "px" }
        }
      },
      borderRadius: {
        type: "object",
        default: {
          desktop: { top: "", right: "", bottom: "", left: "", unit: "px" },
          tablet: { top: "", right: "", bottom: "", left: "", unit: "px" },
          mobile: { top: "", right: "", bottom: "", left: "", unit: "px" }
        }
      },
      borderColor: {
        type: "string",
        default: "#e0e0e0"
      },
      boxShadow: {
        type: "object",
        default: {
          enable: false,
          color: "rgba(0, 0, 0, 0.2)",
          horizontal: 0,
          vertical: 0,
          blur: 0,
          spread: 0,
          position: "outset"
        }
      },
      boxShadowHover: {
        type: "object",
        default: {
          enable: false,
          color: "rgba(0, 0, 0, 0.3)",
          horizontal: 0,
          vertical: 0,
          blur: 0,
          spread: 0,
          position: "outset"
        }
      },
      padding: {
        type: "object",
        default: {
          desktop: { top: "", right: "", bottom: "", left: "", unit: "px" },
          tablet: { top: "", right: "", bottom: "", left: "", unit: "px" },
          mobile: { top: "", right: "", bottom: "", left: "", unit: "px" }
        }
      },
      margin: {
        type: "object",
        default: {
          desktop: { top: "", right: "", bottom: "", left: "", unit: "px" },
          tablet: { top: "", right: "", bottom: "", left: "", unit: "px" },
          mobile: { top: "", right: "", bottom: "", left: "", unit: "px" }
        }
      },
      animation: {
        type: "string",
        default: "none"
      }
    },
    example: {
      attributes: {
        imageSize: "medium",
        borderStyle: "solid",
        borderColor: "#e0e0e0",
        borderRadius: {
          desktop: { top: 8, right: 8, bottom: 8, left: 8, unit: "px" }
        }
      }
    },
    edit: edit_default34,
    save: save_default34
  });
  registerBlockType("digiblocks/post-meta", {
    apiVersion: 2,
    title: digiBlocksData.blocks["post-meta"].title,
    category: "digiblocks-theme",
    icon: {
      src: () => {
        const { viewbox, path } = digiBlocksData.blocks["post-meta"].icon;
        return /* @__PURE__ */ wp.element.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: `0 0 ${viewbox}`, className: "digiblocks-editor-icons" }, /* @__PURE__ */ wp.element.createElement("path", { d: path }));
      }
    },
    description: digiBlocksData.blocks["post-meta"].description,
    keywords: [__49("meta", "digiblocks"), __49("author", "digiblocks"), __49("date", "digiblocks"), __49("categories", "digiblocks"), __49("tags", "digiblocks")],
    supports: {
      inserter: getBlockActiveStatus("post-meta") ? true : false,
      html: false,
      className: false,
      customClassName: false,
      anchor: false
    },
    attributes: {
      id: {
        type: "string",
        default: ""
      },
      anchor: {
        type: "string",
        default: ""
      },
      visibility: {
        type: "object",
        default: {
          desktop: false,
          tablet: false,
          mobile: false
        }
      },
      customClasses: {
        type: "string",
        default: ""
      },
      displayAuthor: {
        type: "boolean",
        default: true
      },
      displayDate: {
        type: "boolean",
        default: true
      },
      displayCategories: {
        type: "boolean",
        default: true
      },
      displayTags: {
        type: "boolean",
        default: true
      },
      iconDisplay: {
        type: "boolean",
        default: true
      },
      layout: {
        type: "string",
        default: "inline"
      },
      separator: {
        type: "string",
        default: "dot"
      },
      align: {
        type: "object",
        default: {
          desktop: "left",
          tablet: "left",
          mobile: "left"
        }
      },
      spacing: {
        type: "object",
        default: {
          desktop: 15,
          tablet: 15,
          mobile: 10
        }
      },
      textColor: {
        type: "string",
        default: ""
      },
      textHoverColor: {
        type: "string",
        default: ""
      },
      iconColor: {
        type: "string",
        default: ""
      },
      typography: {
        type: "object",
        default: {
          fontFamily: "",
          fontSize: { desktop: 14, tablet: 13, mobile: 12 },
          fontSizeUnit: "px",
          fontWeight: "normal",
          fontStyle: "normal",
          textTransform: "",
          textDecoration: "",
          lineHeight: { desktop: 1.5, tablet: 1.4, mobile: 1.3 },
          lineHeightUnit: "em",
          letterSpacing: { desktop: 0, tablet: 0, mobile: 0 },
          letterSpacingUnit: "px"
        }
      },
      padding: {
        type: "object",
        default: {
          desktop: { top: "", right: "", bottom: "", left: "", unit: "px" },
          tablet: { top: "", right: "", bottom: "", left: "", unit: "px" },
          mobile: { top: "", right: "", bottom: "", left: "", unit: "px" }
        }
      },
      margin: {
        type: "object",
        default: {
          desktop: { top: "", right: "", bottom: "", left: "", unit: "px" },
          tablet: { top: "", right: "", bottom: "", left: "", unit: "px" },
          mobile: { top: "", right: "", bottom: "", left: "", unit: "px" }
        }
      },
      animation: {
        type: "string",
        default: "none"
      }
    },
    example: {
      attributes: {
        displayAuthor: true,
        displayDate: true,
        displayCategories: true,
        displayTags: false,
        iconDisplay: true,
        separator: "dot",
        layout: "inline",
        textColor: "#666666"
      }
    },
    edit: edit_default35,
    save: save_default35
  });
  registerBlockType("digiblocks/post-content", {
    apiVersion: 2,
    title: digiBlocksData.blocks["post-content"].title,
    category: "digiblocks-theme",
    icon: {
      src: () => {
        const { viewbox, path } = digiBlocksData.blocks["post-content"].icon;
        return /* @__PURE__ */ wp.element.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: `0 0 ${viewbox}`, className: "digiblocks-editor-icons" }, /* @__PURE__ */ wp.element.createElement("path", { d: path }));
      }
    },
    description: digiBlocksData.blocks["post-content"].description,
    keywords: [__49("content", "digiblocks"), __49("text", "digiblocks"), __49("post", "digiblocks")],
    supports: {
      inserter: getBlockActiveStatus("post-content") ? true : false,
      html: false,
      className: false,
      customClassName: false,
      anchor: false
    },
    attributes: {
      id: {
        type: "string",
        default: ""
      },
      anchor: {
        type: "string",
        default: ""
      },
      visibility: {
        type: "object",
        default: {
          desktop: false,
          tablet: false,
          mobile: false
        }
      },
      customClasses: {
        type: "string",
        default: ""
      },
      color: {
        type: "string",
        default: ""
      },
      textAlign: {
        type: "object",
        default: {
          desktop: "left",
          tablet: "left",
          mobile: "left"
        }
      },
      columns: {
        type: "object",
        default: {
          desktop: 1,
          tablet: 1,
          mobile: 1
        }
      },
      dropcap: {
        type: "boolean",
        default: false
      },
      dropCapColor: {
        type: "string",
        default: "#333333"
      },
      dropCapSize: {
        type: "object",
        default: {
          desktop: 3.5,
          tablet: 3,
          mobile: 2.5
        }
      },
      dropCapSpace: {
        type: "object",
        default: {
          desktop: 10,
          tablet: 8,
          mobile: 6
        }
      },
      listSpacing: {
        type: "object",
        default: {
          desktop: 20,
          tablet: 15,
          mobile: 10
        }
      },
      paragraphSpacing: {
        type: "object",
        default: {
          desktop: 20,
          tablet: 15,
          mobile: 10
        }
      },
      headingSpacing: {
        type: "object",
        default: {
          desktop: 30,
          tablet: 25,
          mobile: 20
        }
      },
      typography: {
        type: "object",
        default: {
          fontFamily: "",
          fontSize: { desktop: 16, tablet: 15, mobile: 14 },
          fontSizeUnit: "px",
          fontWeight: "",
          fontStyle: "normal",
          textTransform: "",
          textDecoration: "",
          lineHeight: { desktop: 1.7, tablet: 1.6, mobile: 1.5 },
          lineHeightUnit: "em",
          letterSpacing: { desktop: 0, tablet: 0, mobile: 0 },
          letterSpacingUnit: "px"
        }
      },
      padding: {
        type: "object",
        default: {
          desktop: {
            top: "",
            right: "",
            bottom: "",
            left: "",
            unit: "px"
          },
          tablet: {
            top: "",
            right: "",
            bottom: "",
            left: "",
            unit: "px"
          },
          mobile: {
            top: "",
            right: "",
            bottom: "",
            left: "",
            unit: "px"
          }
        }
      },
      margin: {
        type: "object",
        default: {
          desktop: {
            top: "",
            right: "",
            bottom: "",
            left: "",
            unit: "px"
          },
          tablet: {
            top: "",
            right: "",
            bottom: "",
            left: "",
            unit: "px"
          },
          mobile: {
            top: "",
            right: "",
            bottom: "",
            left: "",
            unit: "px"
          }
        }
      },
      animation: {
        type: "string",
        default: "none"
      }
    },
    example: {
      attributes: {
        dropcap: true,
        color: "#333333",
        typography: {
          fontSize: { desktop: 16 },
          lineHeight: { desktop: 1.7 }
        }
      }
    },
    edit: edit_default36,
    save: save_default36
  });
  registerBlockType("digiblocks/post-navigation", {
    apiVersion: 2,
    title: digiBlocksData.blocks["post-navigation"].title,
    category: "digiblocks-theme",
    icon: {
      src: () => {
        const { viewbox, path } = digiBlocksData.blocks["post-navigation"].icon;
        return /* @__PURE__ */ wp.element.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: `0 0 ${viewbox}`, className: "digiblocks-editor-icons" }, /* @__PURE__ */ wp.element.createElement("path", { d: path }));
      }
    },
    description: digiBlocksData.blocks["post-navigation"].description,
    keywords: [__49("navigation", "digiblocks"), __49("post links", "digiblocks"), __49("next", "digiblocks"), __49("previous", "digiblocks")],
    supports: {
      inserter: getBlockActiveStatus("post-navigation") ? true : false,
      html: false,
      className: false,
      customClassName: false,
      anchor: false
    },
    attributes: {
      id: {
        type: "string",
        default: ""
      },
      anchor: {
        type: "string",
        default: ""
      },
      visibility: {
        type: "object",
        default: {
          desktop: false,
          tablet: false,
          mobile: false
        }
      },
      customClasses: {
        type: "string",
        default: ""
      },
      showPostTitle: {
        type: "boolean",
        default: true
      },
      showNavLabels: {
        type: "boolean",
        default: true
      },
      previousLabel: {
        type: "string",
        default: __49("Previous", "digiblocks")
      },
      nextLabel: {
        type: "string",
        default: __49("Next", "digiblocks")
      },
      showFeaturedImage: {
        type: "boolean",
        default: false
      },
      imageSize: {
        type: "string",
        default: "thumbnail"
      },
      color: {
        type: "string",
        default: "#333333"
      },
      hoverColor: {
        type: "string",
        default: ""
      },
      backgroundColor: {
        type: "string",
        default: "transparent"
      },
      backgroundHoverColor: {
        type: "string",
        default: ""
      },
      borderStyle: {
        type: "string",
        default: "default"
      },
      borderWidth: {
        type: "object",
        default: {
          desktop: { top: 1, right: 1, bottom: 1, left: 1, unit: "px" },
          tablet: { top: "", right: "", bottom: "", left: "", unit: "px" },
          mobile: { top: "", right: "", bottom: "", left: "", unit: "px" }
        }
      },
      borderRadius: {
        type: "object",
        default: {
          desktop: { top: 4, right: 4, bottom: 4, left: 4, unit: "px" },
          tablet: { top: "", right: "", bottom: "", left: "", unit: "px" },
          mobile: { top: "", right: "", bottom: "", left: "", unit: "px" }
        }
      },
      borderColor: {
        type: "string",
        default: "#e0e0e0"
      },
      borderHoverColor: {
        type: "string",
        default: ""
      },
      padding: {
        type: "object",
        default: {
          desktop: { top: "", right: "", bottom: "", left: "", unit: "px" },
          tablet: { top: "", right: "", bottom: "", left: "", unit: "px" },
          mobile: { top: "", right: "", bottom: "", left: "", unit: "px" }
        }
      },
      margin: {
        type: "object",
        default: {
          desktop: { top: "", right: "", bottom: "", left: "", unit: "px" },
          tablet: { top: "", right: "", bottom: "", left: "", unit: "px" },
          mobile: { top: "", right: "", bottom: "", left: "", unit: "px" }
        }
      },
      typography: {
        type: "object",
        default: {
          fontFamily: "",
          fontSize: { desktop: 16, tablet: 15, mobile: 14 },
          fontSizeUnit: "px",
          fontWeight: "",
          fontStyle: "normal",
          textTransform: "",
          textDecoration: "",
          lineHeight: { desktop: 1.5, tablet: 1.4, mobile: 1.3 },
          lineHeightUnit: "em",
          letterSpacing: { desktop: 0, tablet: 0, mobile: 0 },
          letterSpacingUnit: "px"
        }
      },
      boxShadow: {
        type: "object",
        default: {
          enable: false,
          color: "rgba(0, 0, 0, 0.1)",
          horizontal: 0,
          vertical: 0,
          blur: 5,
          spread: 0,
          position: "outset"
        }
      },
      boxShadowHover: {
        type: "object",
        default: {
          enable: false,
          color: "rgba(0, 0, 0, 0.2)",
          horizontal: 0,
          vertical: 0,
          blur: 0,
          spread: 0,
          position: "outset"
        }
      },
      animation: {
        type: "string",
        default: "none"
      }
    },
    example: {
      attributes: {
        navigationType: "default",
        showPostTitle: true,
        showNavLabels: true,
        previousLabel: __49("Previous", "digiblocks"),
        nextLabel: __49("Next", "digiblocks"),
        color: "#333333",
        backgroundColor: "transparent"
      }
    },
    edit: edit_default37,
    save: save_default37
  });
  registerBlockType("digiblocks/social-share", {
    apiVersion: 2,
    title: digiBlocksData.blocks["social-share"].title,
    category: "digiblocks-theme",
    icon: {
      src: () => {
        const { viewbox, path } = digiBlocksData.blocks["social-share"].icon;
        return /* @__PURE__ */ wp.element.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: `0 0 ${viewbox}`, className: "digiblocks-editor-icons" }, /* @__PURE__ */ wp.element.createElement("path", { d: path }));
      }
    },
    description: digiBlocksData.blocks["social-share"].description,
    keywords: [__49("social", "digiblocks"), __49("share", "digiblocks"), __49("facebook", "digiblocks"), __49("twitter", "digiblocks")],
    supports: {
      inserter: getBlockActiveStatus("social-share") ? true : false,
      html: false,
      className: false,
      customClassName: false,
      anchor: false
    },
    attributes: {
      id: {
        type: "string",
        default: ""
      },
      anchor: {
        type: "string",
        default: ""
      },
      visibility: {
        type: "object",
        default: {
          desktop: false,
          tablet: false,
          mobile: false
        }
      },
      customClasses: {
        type: "string",
        default: ""
      },
      showLabels: {
        type: "boolean",
        default: false
      },
      buttonStyle: {
        type: "string",
        default: "filled"
      },
      buttonSize: {
        type: "object",
        default: {
          desktop: 40,
          tablet: 36,
          mobile: 32
        }
      },
      iconSpacing: {
        type: "object",
        default: {
          desktop: 10,
          tablet: 8,
          mobile: 6
        }
      },
      alignment: {
        type: "object",
        default: {
          desktop: "flex-start",
          tablet: "",
          mobile: ""
        }
      },
      useCustomColors: {
        type: "boolean",
        default: false
      },
      buttonBackgroundColor: {
        type: "string",
        default: ""
      },
      buttonTextColor: {
        type: "string",
        default: ""
      },
      buttonHoverBackgroundColor: {
        type: "string",
        default: ""
      },
      buttonHoverTextColor: {
        type: "string",
        default: ""
      },
      borderStyle: {
        type: "string",
        default: "none"
      },
      borderColor: {
        type: "string",
        default: ""
      },
      borderHoverColor: {
        type: "string",
        default: ""
      },
      borderWidth: {
        type: "object",
        default: {
          desktop: { top: 1, right: 1, bottom: 1, left: 1, unit: "px" },
          tablet: { top: "", right: "", bottom: "", left: "", unit: "px" },
          mobile: { top: "", right: "", bottom: "", left: "", unit: "px" }
        }
      },
      borderRadius: {
        type: "object",
        default: {
          desktop: { top: 4, right: 4, bottom: 4, left: 4, unit: "px" },
          tablet: { top: "", right: "", bottom: "", left: "", unit: "px" },
          mobile: { top: "", right: "", bottom: "", left: "", unit: "px" }
        }
      },
      padding: {
        type: "object",
        default: {
          desktop: { top: 10, right: 15, bottom: 10, left: 15, unit: "px" },
          tablet: { top: 8, right: 12, bottom: 8, left: 12, unit: "px" },
          mobile: { top: 6, right: 10, bottom: 6, left: 10, unit: "px" }
        }
      },
      margin: {
        type: "object",
        default: {
          desktop: { top: "", right: "", bottom: "", left: "", unit: "px" },
          tablet: { top: "", right: "", bottom: "", left: "", unit: "px" },
          mobile: { top: "", right: "", bottom: "", left: "", unit: "px" }
        }
      },
      typography: {
        type: "object",
        default: {
          fontFamily: "",
          fontSize: { desktop: 14, tablet: 13, mobile: 12 },
          fontSizeUnit: "px",
          fontWeight: "",
          fontStyle: "normal",
          textTransform: "",
          textDecoration: "",
          lineHeight: { desktop: 1.4, tablet: 1.3, mobile: 1.2 },
          lineHeightUnit: "em",
          letterSpacing: { desktop: 0, tablet: 0, mobile: 0 },
          letterSpacingUnit: "px"
        }
      },
      // Social platforms
      facebook: {
        type: "boolean",
        default: true
      },
      twitter: {
        type: "boolean",
        default: true
      },
      linkedin: {
        type: "boolean",
        default: true
      },
      pinterest: {
        type: "boolean",
        default: true
      },
      reddit: {
        type: "boolean",
        default: false
      },
      whatsapp: {
        type: "boolean",
        default: false
      },
      telegram: {
        type: "boolean",
        default: false
      },
      email: {
        type: "boolean",
        default: true
      },
      print: {
        type: "boolean",
        default: false
      },
      animation: {
        type: "string",
        default: "none"
      }
    },
    example: {
      attributes: {
        facebook: true,
        twitter: true,
        linkedin: true,
        email: true,
        pinterest: false,
        reddit: false,
        whatsapp: false,
        telegram: false,
        print: false,
        buttonStyle: "filled",
        buttonSize: {
          desktop: 40
        },
        alignment: {
          desktop: "flex-start"
        }
      }
    },
    edit: edit_default38,
    save: save_default38
  });
  registerBlockType("digiblocks/table-of-contents", {
    apiVersion: 2,
    title: digiBlocksData.blocks["table-of-contents"].title,
    category: "digiblocks-theme",
    icon: {
      src: () => {
        const { viewbox, path } = digiBlocksData.blocks["table-of-contents"].icon;
        return /* @__PURE__ */ wp.element.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: `0 0 ${viewbox}`, className: "digiblocks-editor-icons" }, /* @__PURE__ */ wp.element.createElement("path", { d: path }));
      }
    },
    description: digiBlocksData.blocks["table-of-contents"].description,
    keywords: [__49("toc", "digiblocks"), __49("table of contents", "digiblocks"), __49("contents", "digiblocks"), __49("headings", "digiblocks")],
    supports: {
      inserter: getBlockActiveStatus("table-of-contents") ? true : false,
      html: false,
      className: false,
      customClassName: false,
      anchor: false
    },
    attributes: {
      id: {
        type: "string",
        default: ""
      },
      anchor: {
        type: "string",
        default: ""
      },
      visibility: {
        type: "object",
        default: {
          desktop: false,
          tablet: false,
          mobile: false
        }
      },
      customClasses: {
        type: "string",
        default: ""
      },
      title: {
        type: "string",
        default: __49("Table of Contents", "digiblocks")
      },
      showTitle: {
        type: "boolean",
        default: true
      },
      titleTag: {
        type: "string",
        default: "h2"
      },
      headingSelector: {
        type: "string",
        default: "h2"
      },
      maxDepth: {
        type: "number",
        default: 3
      },
      listType: {
        type: "string",
        default: "ul"
      },
      scrollOffset: {
        type: "number",
        default: 30
      },
      enableSmoothScroll: {
        type: "boolean",
        default: true
      },
      enableSEOMarkup: {
        type: "boolean",
        default: true
      },
      minimizeBox: {
        type: "boolean",
        default: false
      },
      showAsCollapsible: {
        type: "boolean",
        default: false
      },
      initialCollapseState: {
        type: "boolean",
        default: false
      },
      collapseButtonText: {
        type: "object",
        default: {
          show: __49("Show", "digiblocks"),
          hide: __49("Hide", "digiblocks")
        }
      },
      align: {
        type: "object",
        default: {
          desktop: "left",
          tablet: "left",
          mobile: "left"
        }
      },
      width: {
        type: "object",
        default: {
          desktop: { value: 100, unit: "%" },
          tablet: { value: 100, unit: "%" },
          mobile: { value: 100, unit: "%" }
        }
      },
      maxWidth: {
        type: "object",
        default: {
          desktop: { value: "", unit: "px" },
          tablet: { value: "", unit: "px" },
          mobile: { value: "", unit: "px" }
        }
      },
      backgroundColor: {
        type: "string",
        default: "#f8f9fa"
      },
      titleColor: {
        type: "string",
        default: "#333333"
      },
      textColor: {
        type: "string",
        default: "#333333"
      },
      linkColor: {
        type: "string",
        default: "#4a6cf7"
      },
      linkHoverColor: {
        type: "string",
        default: "#3a5ce5"
      },
      borderStyle: {
        type: "string",
        default: "solid"
      },
      borderWidth: {
        type: "object",
        default: {
          desktop: { top: 1, right: 1, bottom: 1, left: 1, unit: "px" },
          tablet: { top: "", right: "", bottom: "", left: "", unit: "px" },
          mobile: { top: "", right: "", bottom: "", left: "", unit: "px" }
        }
      },
      borderRadius: {
        type: "object",
        default: {
          desktop: { top: 8, right: 8, bottom: 8, left: 8, unit: "px" },
          tablet: { top: "", right: "", bottom: "", left: "", unit: "px" },
          mobile: { top: "", right: "", bottom: "", left: "", unit: "px" }
        }
      },
      borderColor: {
        type: "string",
        default: "#e0e0e0"
      },
      padding: {
        type: "object",
        default: {
          desktop: { top: 25, right: 30, bottom: 25, left: 30, unit: "px" },
          tablet: { top: 20, right: 25, bottom: 20, left: 25, unit: "px" },
          mobile: { top: 15, right: 20, bottom: 15, left: 20, unit: "px" }
        }
      },
      margin: {
        type: "object",
        default: {
          desktop: { top: 0, right: 0, bottom: 30, left: 0, unit: "px" },
          tablet: { top: 0, right: 0, bottom: 25, left: 0, unit: "px" },
          mobile: { top: 0, right: 0, bottom: 20, left: 0, unit: "px" }
        }
      },
      boxShadow: {
        type: "object",
        default: {
          enable: false,
          color: "rgba(0, 0, 0, 0.1)",
          horizontal: 0,
          vertical: 0,
          blur: 5,
          spread: 0,
          position: "outset"
        }
      },
      boxShadowHover: {
        type: "object",
        default: {
          enable: false,
          color: "rgba(0, 0, 0, 0.2)",
          horizontal: 0,
          vertical: 0,
          blur: 0,
          spread: 0,
          position: "outset"
        }
      },
      titleTypography: {
        type: "object",
        default: {
          fontFamily: "",
          fontSize: { desktop: 22, tablet: 20, mobile: 18 },
          fontSizeUnit: "px",
          fontWeight: "600",
          fontStyle: "normal",
          textTransform: "",
          textDecoration: "",
          lineHeight: { desktop: 1.4, tablet: 1.3, mobile: 1.2 },
          lineHeightUnit: "em",
          letterSpacing: { desktop: 0, tablet: 0, mobile: 0 },
          letterSpacingUnit: "px"
        }
      },
      typography: {
        type: "object",
        default: {
          fontFamily: "",
          fontSize: { desktop: 16, tablet: 15, mobile: 14 },
          fontSizeUnit: "px",
          fontWeight: "",
          fontStyle: "normal",
          textTransform: "",
          textDecoration: "",
          lineHeight: { desktop: 1.6, tablet: 1.5, mobile: 1.4 },
          lineHeightUnit: "em",
          letterSpacing: { desktop: 0, tablet: 0, mobile: 0 },
          letterSpacingUnit: "px"
        }
      },
      listSpacing: {
        type: "object",
        default: {
          desktop: { value: 15, unit: "px" },
          tablet: { value: 12, unit: "px" },
          mobile: { value: 10, unit: "px" }
        }
      },
      animation: {
        type: "string",
        default: "none"
      }
    },
    example: {
      attributes: {
        title: __49("Table of Contents", "digiblocks"),
        showTitle: true,
        titleTag: "h2",
        headingSelector: "h2",
        backgroundColor: "#f8f9fa",
        titleColor: "#333333",
        textColor: "#333333",
        linkColor: "#4a6cf7"
      }
    },
    edit: edit_default39,
    save: save_default39
  });
  registerBlockType("digiblocks/author-box", {
    apiVersion: 2,
    title: digiBlocksData.blocks["author-box"].title,
    category: "digiblocks-theme",
    icon: {
      src: () => {
        const { viewbox, path } = digiBlocksData.blocks["author-box"].icon;
        return /* @__PURE__ */ wp.element.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: `0 0 ${viewbox}`, className: "digiblocks-editor-icons" }, /* @__PURE__ */ wp.element.createElement("path", { d: path }));
      }
    },
    description: digiBlocksData.blocks["author-box"].description,
    keywords: [__49("author", "digiblocks"), __49("profile", "digiblocks"), __49("bio", "digiblocks")],
    supports: {
      inserter: getBlockActiveStatus("author-box") ? true : false,
      html: false,
      className: false,
      customClassName: false,
      anchor: false
    },
    attributes: {
      id: {
        type: "string",
        default: ""
      },
      anchor: {
        type: "string",
        default: ""
      },
      visibility: {
        type: "object",
        default: {
          desktop: false,
          tablet: false,
          mobile: false
        }
      },
      customClasses: {
        type: "string",
        default: ""
      },
      layout: {
        type: "string",
        default: "horizontal"
      },
      spacing: {
        type: "number",
        default: {
          desktop: 40,
          tablet: "",
          mobile: ""
        }
      },
      avatarSize: {
        type: "number",
        default: {
          desktop: 100,
          tablet: "",
          mobile: ""
        }
      },
      nameColor: {
        type: "string",
        default: "#333333"
      },
      nameHoverColor: {
        type: "string",
        default: ""
      },
      descriptionColor: {
        type: "string",
        default: "#666666"
      },
      backgroundColor: {
        type: "string",
        default: "#f9f9f9"
      },
      backgroundHoverColor: {
        type: "string",
        default: ""
      },
      avatarBorderColor: {
        type: "string",
        default: "#e0e0e0"
      },
      avatarBorderHoverColor: {
        type: "string",
        default: ""
      },
      avatarBorderWidth: {
        type: "object",
        default: {
          desktop: { top: "", right: "", bottom: "", left: "", unit: "px" },
          tablet: { top: "", right: "", bottom: "", left: "", unit: "px" },
          mobile: { top: "", right: "", bottom: "", left: "", unit: "px" }
        }
      },
      avatarBorderRadius: {
        type: "object",
        default: {
          desktop: { top: 50, right: 50, bottom: 50, left: 50, unit: "%" },
          tablet: { top: "", right: "", bottom: "", left: "", unit: "%" },
          mobile: { top: "", right: "", bottom: "", left: "", unit: "%" }
        }
      },
      socialIconColor: {
        type: "string",
        default: "#555555"
      },
      socialIconHoverColor: {
        type: "string",
        default: "#ffffff"
      },
      socialIconBackgroundColor: {
        type: "string",
        default: "#f0f0f0"
      },
      socialIconBackgroundHoverColor: {
        type: "string",
        default: "#4a6cf7"
      },
      socialButtonSize: {
        type: "object",
        default: {
          desktop: { value: 36, unit: "px" },
          tablet: { value: 32, unit: "px" },
          mobile: { value: 28, unit: "px" }
        }
      },
      socialIconSize: {
        type: "object",
        default: {
          desktop: { value: 18, unit: "px" },
          tablet: { value: 16, unit: "px" },
          mobile: { value: 14, unit: "px" }
        }
      },
      socialIconSpacing: {
        type: "object",
        default: {
          desktop: { value: 8, unit: "px" },
          tablet: { value: 8, unit: "px" },
          mobile: { value: 6, unit: "px" }
        }
      },
      socialIconBorderRadius: {
        type: "object",
        default: {
          desktop: { top: 50, right: 50, bottom: 50, left: 50, unit: "%" },
          tablet: { top: "", right: "", bottom: "", left: "", unit: "%" },
          mobile: { top: "", right: "", bottom: "", left: "", unit: "%" }
        }
      },
      socialIconBorderStyle: {
        type: "string",
        default: "none"
      },
      socialIconBorderWidth: {
        type: "object",
        default: {
          desktop: { top: 0, right: 0, bottom: 0, left: 0, unit: "px" },
          tablet: { top: "", right: "", bottom: "", left: "", unit: "px" },
          mobile: { top: "", right: "", bottom: "", left: "", unit: "px" }
        }
      },
      socialIconBorderColor: {
        type: "string",
        default: ""
      },
      socialIconBorderHoverColor: {
        type: "string",
        default: ""
      },
      padding: {
        type: "object",
        default: {
          desktop: { top: 30, right: 30, bottom: 30, left: 30, unit: "px" },
          tablet: { top: 25, right: 25, bottom: 25, left: 25, unit: "px" },
          mobile: { top: 20, right: 20, bottom: 20, left: 20, unit: "px" }
        }
      },
      margin: {
        type: "object",
        default: {
          desktop: { top: "", right: "", bottom: "", left: "", unit: "px" },
          tablet: { top: "", right: "", bottom: "", left: "", unit: "px" },
          mobile: { top: "", right: "", bottom: "", left: "", unit: "px" }
        }
      },
      boxShadow: {
        type: "object",
        default: {
          enable: false,
          color: "rgba(0, 0, 0, 0.1)",
          horizontal: 0,
          vertical: 0,
          blur: 5,
          spread: 0,
          position: "outset"
        }
      },
      boxShadowHover: {
        type: "object",
        default: {
          enable: false,
          color: "rgba(0, 0, 0, 0.15)",
          horizontal: 0,
          vertical: 5,
          blur: 15,
          spread: 0,
          position: "outset"
        }
      },
      borderWidth: {
        type: "object",
        default: {
          desktop: { top: 1, right: 1, bottom: 1, left: 1, unit: "px" },
          tablet: { top: "", right: "", bottom: "", left: "", unit: "px" },
          mobile: { top: "", right: "", bottom: "", left: "", unit: "px" }
        }
      },
      borderStyle: {
        type: "string",
        default: "solid"
      },
      borderColor: {
        type: "string",
        default: "#e0e0e0"
      },
      borderHoverColor: {
        type: "string",
        default: ""
      },
      borderRadius: {
        type: "object",
        default: {
          desktop: { top: 8, right: 8, bottom: 8, left: 8, unit: "px" },
          tablet: { top: "", right: "", bottom: "", left: "", unit: "px" },
          mobile: { top: "", right: "", bottom: "", left: "", unit: "px" }
        }
      },
      titleTypography: {
        type: "object",
        default: {
          fontFamily: "",
          fontSize: { desktop: 22, tablet: 20, mobile: 18 },
          fontSizeUnit: "px",
          fontWeight: "600",
          fontStyle: "normal",
          textTransform: "",
          textDecoration: "",
          lineHeight: { desktop: 1.4, tablet: 1.3, mobile: 1.2 },
          lineHeightUnit: "em",
          letterSpacing: { desktop: 0, tablet: 0, mobile: 0 },
          letterSpacingUnit: "px"
        }
      },
      contentTypography: {
        type: "object",
        default: {
          fontFamily: "",
          fontSize: { desktop: 16, tablet: 15, mobile: 14 },
          fontSizeUnit: "px",
          fontWeight: "normal",
          fontStyle: "normal",
          textTransform: "",
          textDecoration: "",
          lineHeight: { desktop: 1.5, tablet: 1.4, mobile: 1.3 },
          lineHeightUnit: "em",
          letterSpacing: { desktop: 0, tablet: 0, mobile: 0 },
          letterSpacingUnit: "px"
        }
      },
      animation: {
        type: "string",
        default: "none"
      },
      displayAvatar: {
        type: "boolean",
        default: true
      },
      displayName: {
        type: "boolean",
        default: true
      },
      displayBio: {
        type: "boolean",
        default: true
      },
      displaySocial: {
        type: "boolean",
        default: true
      },
      socialProfiles: {
        type: "object",
        default: {
          website: {
            enabled: false
          },
          facebook: {
            enabled: false
          },
          twitter: {
            enabled: false
          },
          instagram: {
            enabled: false
          },
          linkedin: {
            enabled: false
          },
          youtube: {
            enabled: false
          },
          github: {
            enabled: false
          }
        }
      }
    },
    example: {
      attributes: {
        layout: "horizontal",
        displayAvatar: true,
        displayName: true,
        displayBio: true,
        displaySocial: true,
        socialProfiles: {
          twitter: {
            enabled: true
          },
          linkedin: {
            enabled: true
          }
        }
      }
    },
    edit: edit_default40,
    save: save_default40
  });
  registerBlockType("digiblocks/related-posts", {
    apiVersion: 2,
    title: digiBlocksData.blocks["related-posts"].title,
    category: "digiblocks-theme",
    icon: {
      src: () => {
        const { viewbox, path } = digiBlocksData.blocks["related-posts"].icon;
        return /* @__PURE__ */ wp.element.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: `0 0 ${viewbox}`, className: "digiblocks-editor-icons" }, /* @__PURE__ */ wp.element.createElement("path", { d: path }));
      }
    },
    description: digiBlocksData.blocks["related-posts"].description,
    keywords: [__49("related", "digiblocks"), __49("posts", "digiblocks"), __49("similar", "digiblocks"), __49("category", "digiblocks"), __49("tag", "digiblocks")],
    supports: {
      inserter: getBlockActiveStatus("related-posts") ? true : false,
      html: false,
      className: false,
      customClassName: false,
      anchor: false
    },
    attributes: {
      id: {
        type: "string",
        default: ""
      },
      anchor: {
        type: "string",
        default: ""
      },
      visibility: {
        type: "object",
        default: {
          desktop: false,
          tablet: false,
          mobile: false
        }
      },
      customClasses: {
        type: "string",
        default: ""
      },
      postsToShow: {
        type: "number",
        default: 3
      },
      columns: {
        type: "object",
        default: {
          desktop: 3,
          tablet: 2,
          mobile: 1
        }
      },
      postStyle: {
        type: "string",
        default: "grid"
      },
      displayFeaturedImage: {
        type: "boolean",
        default: true
      },
      displayTitle: {
        type: "boolean",
        default: true
      },
      displayMeta: {
        type: "boolean",
        default: true
      },
      displayExcerpt: {
        type: "boolean",
        default: true
      },
      displayReadMoreButton: {
        type: "boolean",
        default: true
      },
      metaSettings: {
        type: "object",
        default: {
          displayAuthor: true,
          displayDate: true,
          displayCategories: true,
          displayComments: false
        }
      },
      excerptLength: {
        type: "number",
        default: 25
      },
      readMoreText: {
        type: "string",
        default: __49("Read More", "digiblocks")
      },
      relationType: {
        type: "string",
        default: "category"
        // category, tag, both
      },
      noRelatedPostsText: {
        type: "string",
        default: __49("No related posts found.", "digiblocks")
      },
      headingText: {
        type: "string",
        default: __49("Related Posts", "digiblocks")
      },
      displayHeading: {
        type: "boolean",
        default: true
      },
      titleColor: {
        type: "string",
        default: "#333333"
      },
      titleHoverColor: {
        type: "string",
        default: ""
      },
      excerptColor: {
        type: "string",
        default: "#666666"
      },
      catBackgroundColor: {
        type: "string",
        default: "#52576b"
      },
      catColor: {
        type: "string",
        default: "#fff"
      },
      catHoverBackgroundColor: {
        type: "string",
        default: "#3f4a73"
      },
      catHoverColor: {
        type: "string",
        default: "#fff"
      },
      metaColor: {
        type: "string",
        default: "#666666"
      },
      metaHoverColor: {
        type: "string",
        default: ""
      },
      buttonBackgroundColor: {
        type: "string",
        default: "#4a6cf7"
      },
      buttonTextColor: {
        type: "string",
        default: "#ffffff"
      },
      buttonBackgroundHoverColor: {
        type: "string",
        default: "#3a5ce5"
      },
      buttonTextHoverColor: {
        type: "string",
        default: "#ffffff"
      },
      headingColor: {
        type: "string",
        default: "#333333"
      },
      imageMargin: {
        type: "object",
        default: {
          desktop: 15,
          tablet: 15,
          mobile: 15
        }
      },
      contentMargin: {
        type: "object",
        default: {
          desktop: 18,
          tablet: 15,
          mobile: 15
        }
      },
      padding: {
        type: "object",
        default: {
          desktop: { top: "", right: "", bottom: "", left: "", unit: "px" },
          tablet: { top: "", right: "", bottom: "", left: "", unit: "px" },
          mobile: { top: "", right: "", bottom: "", left: "", unit: "px" }
        }
      },
      margin: {
        type: "object",
        default: {
          desktop: { top: 0, right: 0, bottom: 30, left: 0, unit: "px" },
          tablet: { top: 0, right: 0, bottom: 25, left: 0, unit: "px" },
          mobile: { top: 0, right: 0, bottom: 20, left: 0, unit: "px" }
        }
      },
      itemSpacing: {
        type: "object",
        default: {
          desktop: 20,
          tablet: 15,
          mobile: 10
        }
      },
      headingTypography: {
        type: "object",
        default: {
          fontFamily: "",
          fontSize: { desktop: 24, tablet: 22, mobile: 20 },
          fontSizeUnit: "px",
          fontWeight: "600",
          fontStyle: "normal",
          textTransform: "none",
          textDecoration: "none",
          lineHeight: { desktop: 1.4, tablet: 1.3, mobile: 1.2 },
          lineHeightUnit: "em",
          letterSpacing: { desktop: 0, tablet: 0, mobile: 0 },
          letterSpacingUnit: "px"
        }
      },
      titleTypography: {
        type: "object",
        default: {
          fontFamily: "",
          fontSize: { desktop: 20, tablet: 18, mobile: 16 },
          fontSizeUnit: "px",
          fontWeight: "600",
          fontStyle: "normal",
          textTransform: "none",
          textDecoration: "none",
          lineHeight: { desktop: 1.4, tablet: 1.3, mobile: 1.2 },
          lineHeightUnit: "em",
          letterSpacing: { desktop: 0, tablet: 0, mobile: 0 },
          letterSpacingUnit: "px"
        }
      },
      textTypography: {
        type: "object",
        default: {
          fontFamily: "",
          fontSize: { desktop: 13, tablet: 12, mobile: 11 },
          fontSizeUnit: "px",
          fontWeight: "normal",
          fontStyle: "normal",
          textTransform: "none",
          textDecoration: "none",
          lineHeight: { desktop: 1.4, tablet: 1.3, mobile: 1.2 },
          lineHeightUnit: "em",
          letterSpacing: { desktop: 0, tablet: 0, mobile: 0 },
          letterSpacingUnit: "px"
        }
      },
      contentTypography: {
        type: "object",
        default: {
          fontFamily: "",
          fontSize: { desktop: 16, tablet: 15, mobile: 14 },
          fontSizeUnit: "px",
          fontWeight: "normal",
          fontStyle: "normal",
          textTransform: "none",
          textDecoration: "none",
          lineHeight: { desktop: 1.5, tablet: 1.4, mobile: 1.3 },
          lineHeightUnit: "em",
          letterSpacing: { desktop: 0, tablet: 0, mobile: 0 },
          letterSpacingUnit: "px"
        }
      },
      buttonTypography: {
        type: "object",
        default: {
          fontFamily: "",
          fontSize: { desktop: 16, tablet: 15, mobile: 14 },
          fontSizeUnit: "px",
          fontWeight: "500",
          fontStyle: "normal",
          textTransform: "none",
          textDecoration: "none",
          lineHeight: { desktop: 1.5, tablet: 1.4, mobile: 1.3 },
          lineHeightUnit: "em",
          letterSpacing: { desktop: 0, tablet: 0, mobile: 0 },
          letterSpacingUnit: "px"
        }
      },
      buttonPadding: {
        type: "object",
        default: {
          desktop: { top: 10, right: 20, bottom: 10, left: 20, unit: "px" },
          tablet: { top: 8, right: 16, bottom: 8, left: 16, unit: "px" },
          mobile: { top: 6, right: 12, bottom: 6, left: 12, unit: "px" }
        }
      },
      buttonBorderRadius: {
        type: "object",
        default: {
          desktop: { top: 4, right: 4, bottom: 4, left: 4, unit: "px" },
          tablet: { top: "", right: "", bottom: "", left: "", unit: "px" },
          mobile: { top: "", right: "", bottom: "", left: "", unit: "px" }
        }
      },
      imageSize: {
        type: "string",
        default: "medium"
      },
      imageBorderRadius: {
        type: "object",
        default: {
          desktop: { top: 8, right: 8, bottom: 8, left: 8, unit: "px" },
          tablet: { top: "", right: "", bottom: "", left: "", unit: "px" },
          mobile: { top: "", right: "", bottom: "", left: "", unit: "px" }
        }
      },
      cardStyle: {
        type: "boolean",
        default: false
      },
      cardBackgroundColor: {
        type: "string",
        default: "#ffffff"
      },
      cardPadding: {
        type: "object",
        default: {
          desktop: { top: 20, right: 20, bottom: 20, left: 20, unit: "px" },
          tablet: { top: 15, right: 15, bottom: 15, left: 15, unit: "px" },
          mobile: { top: 10, right: 10, bottom: 10, left: 10, unit: "px" }
        }
      },
      cardBorderRadius: {
        type: "object",
        default: {
          desktop: { top: 8, right: 8, bottom: 8, left: 8, unit: "px" },
          tablet: { top: "", right: "", bottom: "", left: "", unit: "px" },
          mobile: { top: "", right: "", bottom: "", left: "", unit: "px" }
        }
      },
      cardBorderStyle: {
        type: "string",
        default: "solid"
      },
      cardBorderWidth: {
        type: "object",
        default: {
          desktop: { top: 1, right: 1, bottom: 1, left: 1, unit: "px" },
          tablet: { top: "", right: "", bottom: "", left: "", unit: "px" },
          mobile: { top: "", right: "", bottom: "", left: "", unit: "px" }
        }
      },
      cardBorderColor: {
        type: "string",
        default: "#e0e0e0"
      },
      cardShadow: {
        type: "object",
        default: {
          enable: false,
          color: "rgba(0, 0, 0, 0.1)",
          horizontal: 0,
          vertical: 0,
          blur: 0,
          spread: 0,
          position: "outset"
        }
      },
      cardShadowHover: {
        type: "object",
        default: {
          enable: false,
          color: "rgba(0, 0, 0, 0.2)",
          horizontal: 0,
          vertical: 0,
          blur: 0,
          spread: 0,
          position: "outset"
        }
      },
      animation: {
        type: "string",
        default: "none"
      }
    },
    example: {
      attributes: {
        postStyle: "grid",
        postsToShow: 3,
        columns: {
          desktop: 3,
          tablet: 2,
          mobile: 1
        },
        displayFeaturedImage: true,
        displayTitle: true,
        displayExcerpt: true,
        displayHeading: true,
        headingText: "Related Posts",
        relationType: "category"
      }
    },
    edit: edit_default41,
    save: save_default41
  });
  registerBlockType("digiblocks/post-comments", {
    apiVersion: 2,
    title: digiBlocksData.blocks["post-comments"].title,
    category: "digiblocks-theme",
    icon: {
      src: () => {
        const { viewbox, path } = digiBlocksData.blocks["post-comments"].icon;
        return /* @__PURE__ */ wp.element.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: `0 0 ${viewbox}`, className: "digiblocks-editor-icons" }, /* @__PURE__ */ wp.element.createElement("path", { d: path }));
      }
    },
    description: digiBlocksData.blocks["post-comments"].description,
    keywords: [__49("comments", "digiblocks"), __49("discussion", "digiblocks"), __49("feedback", "digiblocks")],
    supports: {
      inserter: getBlockActiveStatus("post-comments") ? true : false,
      html: false,
      className: false,
      customClassName: false,
      anchor: false
    },
    attributes: {
      id: {
        type: "string",
        default: ""
      },
      anchor: {
        type: "string",
        default: ""
      },
      visibility: {
        type: "object",
        default: {
          desktop: false,
          tablet: false,
          mobile: false
        }
      },
      customClasses: {
        type: "string",
        default: ""
      },
      showAvatars: {
        type: "boolean",
        default: true
      },
      avatarSize: {
        type: "object",
        default: {
          desktop: 50,
          tablet: 40,
          mobile: 30
        }
      },
      commentsPerPage: {
        type: "number",
        default: 20
      },
      nestedComments: {
        type: "boolean",
        default: true
      },
      commentsOrder: {
        type: "string",
        default: "asc"
      },
      displayTitle: {
        type: "boolean",
        default: true
      },
      titleText: {
        type: "string",
        default: __49("Comments", "digiblocks")
      },
      customFormTitle: {
        type: "boolean",
        default: false
      },
      formTitle: {
        type: "string",
        default: __49("Leave a Reply", "digiblocks")
      },
      displayLoggedIn: {
        type: "boolean",
        default: true
      },
      loggedInText: {
        type: "string",
        default: ""
      },
      displayCookieConsent: {
        type: "boolean",
        default: true
      },
      cookieConsentText: {
        type: "string",
        default: ""
      },
      displaySubmitButton: {
        type: "boolean",
        default: false
      },
      submitButtonText: {
        type: "string",
        default: ""
      },
      displayCancelReply: {
        type: "boolean",
        default: false
      },
      cancelReplyText: {
        type: "string",
        default: ""
      },
      titleColor: {
        type: "string",
        default: "#333333"
      },
      linkColor: {
        type: "string",
        default: "#4a6cf7"
      },
      linkHoverColor: {
        type: "string",
        default: "#333333"
      },
      textColor: {
        type: "string",
        default: "#333333"
      },
      metaColor: {
        type: "string",
        default: "#666666"
      },
      metaHoverColor: {
        type: "string",
        default: "#4a6cf7"
      },
      borderColor: {
        type: "string",
        default: "#e0e0e0"
      },
      backgroundColor: {
        type: "string",
        default: ""
      },
      commentBackgroundColor: {
        type: "string",
        default: "#ecf0f1"
      },
      threadedCommentsBackgroundColor: {
        type: "string",
        default: "#ffffff"
      },
      replyButtonColor: {
        type: "string",
        default: "#4a6cf7"
      },
      replyButtonBgColor: {
        type: "string",
        default: "transparent"
      },
      replyButtonHoverColor: {
        type: "string",
        default: "#3a5ce5"
      },
      replyButtonBgHoverColor: {
        type: "string",
        default: "transparent"
      },
      formBackgroundColor: {
        type: "string",
        default: "#ecf0f1"
      },
      formInputColor: {
        type: "string",
        default: "#333333"
      },
      formInputBgColor: {
        type: "string",
        default: "#ffffff"
      },
      formInputBorderColor: {
        type: "string",
        default: "#d1d5db"
      },
      formInputFocusBorderColor: {
        type: "string",
        default: "#4a6cf7"
      },
      submitButtonTextColor: {
        type: "string",
        default: "#ffffff"
      },
      submitButtonBgColor: {
        type: "string",
        default: "#4a6cf7"
      },
      submitButtonTextHoverColor: {
        type: "string",
        default: "#ffffff"
      },
      submitButtonBgHoverColor: {
        type: "string",
        default: "#3a5ce5"
      },
      padding: {
        type: "object",
        default: {
          desktop: { top: "", right: "", bottom: "", left: "", unit: "px" },
          tablet: { top: "", right: "", bottom: "", left: "", unit: "px" },
          mobile: { top: "", right: "", bottom: "", left: "", unit: "px" }
        }
      },
      margin: {
        type: "object",
        default: {
          desktop: { top: "", right: "", bottom: "", left: "", unit: "px" },
          tablet: { top: "", right: "", bottom: "", left: "", unit: "px" },
          mobile: { top: "", right: "", bottom: "", left: "", unit: "px" }
        }
      },
      avatarRadius: {
        type: "object",
        default: {
          desktop: { top: 50, right: 50, bottom: 50, left: 50, unit: "%" },
          tablet: { top: "", right: "", bottom: "", left: "", unit: "%" },
          mobile: { top: "", right: "", bottom: "", left: "", unit: "%" }
        }
      },
      formBorderRadius: {
        type: "object",
        default: {
          desktop: { top: 8, right: 8, bottom: 8, left: 8, unit: "px" },
          tablet: { top: "", right: "", bottom: "", left: "", unit: "px" },
          mobile: { top: "", right: "", bottom: "", left: "", unit: "px" }
        }
      },
      buttonBorderRadius: {
        type: "object",
        default: {
          desktop: { top: 4, right: 4, bottom: 4, left: 4, unit: "px" },
          tablet: { top: "", right: "", bottom: "", left: "", unit: "px" },
          mobile: { top: "", right: "", bottom: "", left: "", unit: "px" }
        }
      },
      formPadding: {
        type: "object",
        default: {
          desktop: { top: 30, right: 30, bottom: 30, left: 30, unit: "px" },
          tablet: { top: "", right: "", bottom: "", left: "", unit: "px" },
          mobile: { top: "", right: "", bottom: "", left: "", unit: "px" }
        }
      },
      buttonPadding: {
        type: "object",
        default: {
          desktop: { top: 8, right: 16, bottom: 8, left: 16, unit: "px" },
          tablet: { top: "", right: "", bottom: "", left: "", unit: "px" },
          mobile: { top: "", right: "", bottom: "", left: "", unit: "px" }
        }
      },
      titleTypography: {
        type: "object",
        default: {
          fontFamily: "",
          fontSize: { desktop: 24, tablet: 22, mobile: 20 },
          fontSizeUnit: "px",
          fontWeight: "600",
          fontStyle: "normal",
          textTransform: "",
          textDecoration: "",
          lineHeight: { desktop: 1.4, tablet: 1.3, mobile: 1.2 },
          lineHeightUnit: "em",
          letterSpacing: { desktop: 0, tablet: 0, mobile: 0 },
          letterSpacingUnit: "px"
        }
      },
      textTypography: {
        type: "object",
        default: {
          fontFamily: "",
          fontSize: { desktop: 14, tablet: 13, mobile: 12 },
          fontSizeUnit: "px",
          fontWeight: "normal",
          fontStyle: "normal",
          textTransform: "",
          textDecoration: "",
          lineHeight: { desktop: 1.4, tablet: 1.3, mobile: 1.2 },
          lineHeightUnit: "em",
          letterSpacing: { desktop: 0, tablet: 0, mobile: 0 },
          letterSpacingUnit: "px"
        }
      },
      contentTypography: {
        type: "object",
        default: {
          fontFamily: "",
          fontSize: { desktop: 16, tablet: 15, mobile: 14 },
          fontSizeUnit: "px",
          fontWeight: "normal",
          fontStyle: "normal",
          textTransform: "",
          textDecoration: "",
          lineHeight: { desktop: 1.6, tablet: 1.5, mobile: 1.4 },
          lineHeightUnit: "em",
          letterSpacing: { desktop: 0, tablet: 0, mobile: 0 },
          letterSpacingUnit: "px"
        }
      },
      buttonTypography: {
        type: "object",
        default: {
          fontFamily: "",
          fontSize: { desktop: 14, tablet: 13, mobile: 12 },
          fontSizeUnit: "px",
          fontWeight: "500",
          fontStyle: "normal",
          textTransform: "",
          textDecoration: "",
          lineHeight: { desktop: 1.5, tablet: 1.4, mobile: 1.3 },
          lineHeightUnit: "em",
          letterSpacing: { desktop: 0, tablet: 0, mobile: 0 },
          letterSpacingUnit: "px"
        }
      },
      animation: {
        type: "string",
        default: "none"
      },
      boxShadow: {
        type: "object",
        default: {
          enable: false,
          color: "rgba(0, 0, 0, 0.1)",
          horizontal: 0,
          vertical: 0,
          blur: 0,
          spread: 0,
          position: "outset"
        }
      },
      boxShadowHover: {
        type: "object",
        default: {
          enable: false,
          color: "rgba(0, 0, 0, 0.1)",
          horizontal: 0,
          vertical: 0,
          blur: 0,
          spread: 0,
          position: "outset"
        }
      },
      commentBoxShadow: {
        type: "object",
        default: {
          enable: false,
          color: "rgba(0, 0, 0, 0.1)",
          horizontal: 0,
          vertical: 0,
          blur: 5,
          spread: 0,
          position: "outset"
        }
      },
      commentBoxShadowHover: {
        type: "object",
        default: {
          enable: false,
          color: "rgba(0, 0, 0, 0.1)",
          horizontal: 0,
          vertical: 0,
          blur: 5,
          spread: 0,
          position: "outset"
        }
      },
      threadedCommentBoxShadow: {
        type: "object",
        default: {
          enable: false,
          color: "rgba(0, 0, 0, 0.1)",
          horizontal: 0,
          vertical: 0,
          blur: 0,
          spread: 0,
          position: "outset"
        }
      },
      threadedCommentBoxShadowHover: {
        type: "object",
        default: {
          enable: false,
          color: "rgba(0, 0, 0, 0.1)",
          horizontal: 0,
          vertical: 0,
          blur: 0,
          spread: 0,
          position: "outset"
        }
      },
      formBoxShadow: {
        type: "object",
        default: {
          enable: false,
          color: "rgba(0, 0, 0, 0.1)",
          horizontal: 0,
          vertical: 0,
          blur: 5,
          spread: 0,
          position: "outset"
        }
      },
      formBoxShadowHover: {
        type: "object",
        default: {
          enable: false,
          color: "rgba(0, 0, 0, 0.1)",
          horizontal: 0,
          vertical: 0,
          blur: 5,
          spread: 0,
          position: "outset"
        }
      },
      buttonBoxShadow: {
        type: "object",
        default: {
          enable: false,
          color: "rgba(0, 0, 0, 0.1)",
          horizontal: 0,
          vertical: 0,
          blur: 0,
          spread: 0,
          position: "outset"
        }
      },
      buttonBoxShadowHover: {
        type: "object",
        default: {
          enable: false,
          color: "rgba(0, 0, 0, 0.2)",
          horizontal: 0,
          vertical: 2,
          blur: 5,
          spread: 0,
          position: "outset"
        }
      },
      borderRadius: {
        type: "object",
        default: {
          desktop: { top: 8, right: 8, bottom: 8, left: 8, unit: "px" },
          tablet: { top: "", right: "", bottom: "", left: "", unit: "px" },
          mobile: { top: "", right: "", bottom: "", left: "", unit: "px" }
        }
      },
      borderWidth: {
        type: "object",
        default: {
          desktop: { top: 0, right: 0, bottom: 0, left: 0, unit: "px" },
          tablet: { top: "", right: "", bottom: "", left: "", unit: "px" },
          mobile: { top: "", right: "", bottom: "", left: "", unit: "px" }
        }
      },
      borderStyle: {
        type: "string",
        default: "none"
      },
      commentBorderRadius: {
        type: "object",
        default: {
          desktop: { top: 8, right: 8, bottom: 8, left: 8, unit: "px" },
          tablet: { top: "", right: "", bottom: "", left: "", unit: "px" },
          mobile: { top: "", right: "", bottom: "", left: "", unit: "px" }
        }
      },
      commentBorderWidth: {
        type: "object",
        default: {
          desktop: { top: 0, right: 0, bottom: 0, left: 0, unit: "px" },
          tablet: { top: "", right: "", bottom: "", left: "", unit: "px" },
          mobile: { top: "", right: "", bottom: "", left: "", unit: "px" }
        }
      },
      commentBorderStyle: {
        type: "string",
        default: "solid"
      },
      threadedCommentBorderRadius: {
        type: "object",
        default: {
          desktop: { top: 8, right: 8, bottom: 8, left: 8, unit: "px" },
          tablet: { top: "", right: "", bottom: "", left: "", unit: "px" },
          mobile: { top: "", right: "", bottom: "", left: "", unit: "px" }
        }
      },
      threadedCommentBorderWidth: {
        type: "object",
        default: {
          desktop: { top: 0, right: 0, bottom: 0, left: 0, unit: "px" },
          tablet: { top: "", right: "", bottom: "", left: "", unit: "px" },
          mobile: { top: "", right: "", bottom: "", left: "", unit: "px" }
        }
      },
      threadedCommentBorderStyle: {
        type: "string",
        default: "solid"
      },
      formBorderWidth: {
        type: "object",
        default: {
          desktop: { top: 0, right: 0, bottom: 0, left: 0, unit: "px" },
          tablet: { top: "", right: "", bottom: "", left: "", unit: "px" },
          mobile: { top: "", right: "", bottom: "", left: "", unit: "px" }
        }
      },
      formBorderStyle: {
        type: "string",
        default: "solid"
      },
      buttonBorderWidth: {
        type: "object",
        default: {
          desktop: { top: 0, right: 0, bottom: 0, left: 0, unit: "px" },
          tablet: { top: "", right: "", bottom: "", left: "", unit: "px" },
          mobile: { top: "", right: "", bottom: "", left: "", unit: "px" }
        }
      },
      buttonBorderStyle: {
        type: "string",
        default: "none"
      },
      buttonBorderColor: {
        type: "string",
        default: "#4a6cf7"
      },
      buttonBorderHoverColor: {
        type: "string",
        default: "#3a5ce5"
      }
    },
    example: {
      attributes: {
        layout: "standard",
        showAvatars: true,
        commentsPerPage: 1,
        nestedComments: true,
        displayTitle: true,
        titleText: "Comments",
        animation: "none"
      }
    },
    edit: edit_default42,
    save: save_default42
  });
  registerBlockType("digiblocks/copyright", {
    apiVersion: 2,
    title: digiBlocksData.blocks["copyright"].title,
    category: "digiblocks-theme",
    icon: {
      src: () => {
        const { viewbox, path } = digiBlocksData.blocks["copyright"].icon;
        return /* @__PURE__ */ wp.element.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: `0 0 ${viewbox}`, className: "digiblocks-editor-icons" }, /* @__PURE__ */ wp.element.createElement("path", { d: path }));
      }
    },
    description: digiBlocksData.blocks["copyright"].description,
    keywords: [__49("copyright", "digiblocks"), __49("footer", "digiblocks"), __49("text", "digiblocks")],
    supports: {
      inserter: getBlockActiveStatus("copyright") ? true : false,
      html: false,
      className: false,
      customClassName: false,
      anchor: false
    },
    attributes: {
      id: {
        type: "string",
        default: ""
      },
      anchor: {
        type: "string",
        default: ""
      },
      visibility: {
        type: "object",
        default: {
          desktop: false,
          tablet: false,
          mobile: false
        }
      },
      customClasses: {
        type: "string",
        default: ""
      },
      copyrightText: {
        type: "string",
        default: __49("\xA9 {year} {sitename}. All rights reserved.", "digiblocks")
      },
      textAlign: {
        type: "object",
        default: {
          desktop: "left",
          tablet: "",
          mobile: ""
        }
      },
      textColor: {
        type: "string",
        default: "#666666"
      },
      textHoverColor: {
        type: "string",
        default: ""
      },
      linkColor: {
        type: "string",
        default: ""
      },
      linkHoverColor: {
        type: "string",
        default: ""
      },
      typography: {
        type: "object",
        default: {
          fontFamily: "",
          fontSize: { desktop: 14, tablet: 13, mobile: 12 },
          fontSizeUnit: "px",
          fontWeight: "normal",
          fontStyle: "normal",
          textTransform: "",
          textDecoration: "",
          lineHeight: { desktop: 1.5, tablet: 1.4, mobile: 1.3 },
          lineHeightUnit: "em",
          letterSpacing: { desktop: 0, tablet: 0, mobile: 0 },
          letterSpacingUnit: "px"
        }
      },
      padding: {
        type: "object",
        default: {
          desktop: { top: "", right: "", bottom: "", left: "", unit: "px" },
          tablet: { top: "", right: "", bottom: "", left: "", unit: "px" },
          mobile: { top: "", right: "", bottom: "", left: "", unit: "px" }
        }
      },
      margin: {
        type: "object",
        default: {
          desktop: { top: "", right: "", bottom: "", left: "", unit: "px" },
          tablet: { top: "", right: "", bottom: "", left: "", unit: "px" },
          mobile: { top: "", right: "", bottom: "", left: "", unit: "px" }
        }
      },
      animation: {
        type: "string",
        default: "none"
      }
    },
    example: {
      attributes: {
        copyrightText: "\xA9 {year} {sitename}. All rights reserved.",
        textAlign: {
          desktop: "center",
          tablet: "center",
          mobile: "center"
        }
      }
    },
    edit: edit_default43,
    save: save_default43
  });
})();
