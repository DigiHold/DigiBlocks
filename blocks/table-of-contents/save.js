/**
 * WordPress dependencies
 */
const { useBlockProps, RichText } = wp.blockEditor;

/**
 * Save function for the Table of Contents block
 */
const TableOfContentsSave = ({ attributes }) => {
    const {
        id,
        anchor,
        customClasses,
        title,
        showTitle,
        titleTag,
        headingSelector,
        maxDepth,
        listType,
        scrollOffset,
        enableSmoothScroll,
        enableSEOMarkup,
        minimizeBox,
        showAsCollapsible,
        initialCollapseState,
        collapseButtonText,
        animation,
    } = attributes;

    // Build class names
    const blockClasses = [
        "digiblocks-table-of-contents",
        id,
        animation !== "none" ? `animate-${animation}` : "",
        customClasses || ""
    ]
        .filter(Boolean)
        .join(" ");

    // Get the block props
    const blockProps = useBlockProps.save({
        className: blockClasses,
        id: anchor || null,
    });
    
    // Define base attributes for SEO
    const containerAttr = {};
    if (enableSEOMarkup) {
        containerAttr['itemScope'] = true;
        containerAttr['itemType'] = 'https://schema.org/Table';
        containerAttr['itemProp'] = 'mainContentOfPage';
    }
    
    // Data attributes for JavaScript functionality
    const dataAttr = {
        'data-heading-selector': headingSelector,
        'data-max-depth': maxDepth,
        'data-scroll-offset': scrollOffset,
        'data-smooth-scroll': enableSmoothScroll ? 'true' : 'false',
        'data-minimize-box': minimizeBox ? 'true' : 'false',
        'data-initial-collapsed': initialCollapseState ? 'true' : 'false',
        'data-show-text': collapseButtonText.show,
        'data-hide-text': collapseButtonText.hide
    };

    // Determine which tag to use for the title
    const TitleTag = titleTag;

    return (
        <div {...blockProps}>
            <div 
                className="digiblocks-toc-container" 
                {...containerAttr}
                {...dataAttr}
            >
                {showTitle && (
                    <RichText.Content
                        tagName={TitleTag}
                        className="digiblocks-toc-title"
                        value={title}
                        itemProp={enableSEOMarkup ? "name" : undefined}
                    />
                )}
                
                {showAsCollapsible && (
                    <button 
                        className="digiblocks-toc-toggle-button"
                        aria-expanded={!initialCollapseState}
                    >
                        {initialCollapseState ? collapseButtonText.show : collapseButtonText.hide}
                    </button>
                )}
                
                <div 
                    className="digiblocks-toc-content"
                    style={{ display: showAsCollapsible && initialCollapseState ? 'none' : 'block' }}
                    itemProp={enableSEOMarkup ? "text" : undefined}
                >
                    {/* The actual TOC list will be generated by JavaScript on the frontend */}
                </div>
            </div>
        </div>
    );
};

export default TableOfContentsSave;