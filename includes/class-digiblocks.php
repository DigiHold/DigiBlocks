<?php
/**
 * DigiBlocks Plugin
 */

// Exit if accessed directly.
if ( ! defined( 'ABSPATH' ) ) {
	exit;
}

/**
 * DigiBlocks main class.
 *
 * @package DigiBlocks
 */
class DigiBlocks {
	/**
	 * Instance of the plugin.
	 *
	 * @var DigiBlocks
	 */
	private static $instance;

	/**
	 * Plugin name.
	 *
	 * @var string
	 */
	private $plugin_name = 'digiblocks';

	/**
	 * Active blocks.
	 *
	 * @var array
	 */
	private $active_blocks = array();

	/**
	 * Creates or returns an instance of this class.
	 */
	public static function get_instance() {
		if ( is_null( self::$instance ) ) {
			self::$instance = new self();
		}
		return self::$instance;
	}

	/**
	 * Class constructor.
	 */
	private function __construct() {
		// Review notice
		require_once DIGIBLOCKS_PLUGIN_DIR . 'includes/class-digiblocks-review-notice.php';

		// Initialize actions and filters.
		$this->init_hooks();

		// Register block category.
		add_filter( 'block_categories_all', array( $this, 'register_block_category' ), 9999999, 2 );

		// Register custom REST API routes.
		add_action( 'rest_api_init', array( $this, 'register_rest_routes' ) );

		// Enqueue assets.
		add_action( 'enqueue_block_editor_assets', array( $this, 'enqueue_editor_assets' ) );

		// Enqueue admin scripts.
		add_action( 'admin_enqueue_scripts', array( $this, 'enqueue_admin_scripts' ) );

		// Add admin menu.
		add_action( 'admin_menu', array( $this, 'add_admin_menu' ) );

		// Setup file generation hooks.
		add_action( 'save_post', array( $this, 'generate_block_assets' ), 10, 3 );

		// Enqueue block assets on frontend
		add_action( 'wp_enqueue_scripts', array( $this, 'enqueue_block_assets' ) );

		// Initialize fonts manager
		$this->init_fonts_manager();

		// Register blocks with server-side rendering
		add_action( 'init', array( $this, 'register_blocks' ) );

		// Initialize forms handler if needed
		add_action( 'init', array( $this, 'init_forms_handler' ) );

		// Initialize newsletter handler if needed
		add_action( 'init', array( $this, 'init_newsletter_handler' ) );
	}

	/**
	 * Initialize hooks.
	 */
	private function init_hooks() {
		// Activation hook.
		register_activation_hook( DIGIBLOCKS_PLUGIN_FILE, array( $this, 'plugin_activation' ) );

		// Deactivation hook.
		register_deactivation_hook( DIGIBLOCKS_PLUGIN_FILE, array( $this, 'plugin_deactivation' ) );
	}

	/**
     * Initialize the fonts manager.
     */
    private function init_fonts_manager() {
        // Include the DigiBlocks_Fonts class
        require_once DIGIBLOCKS_PLUGIN_DIR . 'includes/class-digiblocks-fonts.php';
		$fonts_handler = DigiBlocks_Fonts::get_instance();
		$fonts_handler->init();
    }

	/**
	 * Plugin activation.
	 */
	public function plugin_activation() {
		// Create the digiblocks folder in wp-content/uploads if it doesn't exist.
		if ( ! file_exists( DIGIBLOCKS_ASSETS_DIR ) ) {
			wp_mkdir_p( DIGIBLOCKS_ASSETS_DIR );
		}

		// Create default plugin settings.
		$default_settings = array(
			'content_width'        => '1200',
			'content_max_width'    => '90',
			'recaptcha_site_key'   => '',
			'recaptcha_secret_key' => '',
			'google_maps_api_key'  => '',
			'google_maps_map_id'   => '',
			'google_fonts_local'   => false,
		);

		// By default, no blocks are inactive
		$inactive_blocks = array();
    
		add_option( 'digiblocks_settings', $default_settings );
		add_option( 'digiblocks_inactive_blocks', $inactive_blocks );

		// Set transient to redirect to the dashboard on activation.
		set_transient( 'digiblocks_activation_redirect', true, 30 );
	}

	/**
	 * Plugin deactivation.
	 */
	public function plugin_deactivation() {
		// Nothing to do on deactivation.
	}

	/**
	 * Register block category.
	 *
	 * @param array   $categories Block categories.
	 * @param WP_Post $post Current post object.
	 * @return array Modified block categories.
	 */
	public function register_block_category( $categories, $post ) { // phpcs:ignore
		return array_merge(
			array(
				array(
					'slug'  => 'digiblocks',
					'title' => esc_html__( 'DigiBlocks', 'digiblocks' ),
					'icon'  => $this->get_category_icon(),
				),
				array(
					'slug'  => 'digiblocks-theme',
					'title' => esc_html__( 'DigiBlocks Theme', 'digiblocks' ),
					'icon'  => $this->get_category_icon(),
				),
			),
			$categories
		);
	}

	/**
	 * Get category icon.
	 *
	 * @return string SVG icon.
	 */
	private function get_category_icon() {
		return '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="24" height="24"><path fill="none" d="M0 0h24v24H0z"/><path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-1 17.93c-3.95-.49-7-3.85-7-7.93 0-.62.08-1.21.21-1.79L9 15v1c0 1.1.9 2 2 2v1.93zm6.9-2.54c-.26-.81-1-1.39-1.9-1.39h-1v-3c0-.55-.45-1-1-1H8v-2h2c.55 0 1-.45 1-1V7h2c1.1 0 2-.9 2-2v-.41c2.93 1.19 5 4.06 5 7.41 0 2.08-.8 3.97-2.1 5.39z" fill="currentColor"/></svg>';
	}

	/**
	 * Get list of all blocks available in the plugin.
	 *
	 * @return array List of blocks.
	 */
	public function get_blocks_list() {
		$blocks      = array();
		$blocks_data = $this->get_block_data();

		// Convert blocks data to the format expected by the dashboard
		foreach ($blocks_data as $block_name => $block_data) {
			// Generate SVG icon
			$icon = '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 ' . $block_data['icon']['viewbox'] . '"><path d="' . $block_data['icon']['path'] . '"/></svg>';

			$blocks[] = array(
				'name'        => $block_name,
				'title'       => $block_data['title'],
				'description' => $block_data['description'],
				'icon'        => $icon,
			);
		}

		return $blocks;
	}

	/**
	 * Get plugin logo.
	 *
	 * @return string SVG icon.
	 */
	private function get_plugin_logo() {
		return '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1764 350" width="200" height="40"><g><path d="M425.6331,249.9932V108.5933h69.6904c15.7559,0,29.624,2.8628,41.6123,8.585,11.9844,5.7256,21.3418,13.8369,28.0771,24.3408,6.7324,10.5039,10.1006,23.0283,10.1006,37.5728,0,14.6797-3.3682,27.3047-10.1006,37.875-6.7354,10.5732-16.0928,18.7197-28.0771,24.4414-11.9883,5.7256-25.8564,8.585-41.6123,8.585h-69.6904ZM473.305,212.8252h19.998c6.7324,0,12.625-1.2783,17.6758-3.8379,5.0498-2.5566,8.9883-6.3633,11.8164-11.4131s4.2422-11.2109,4.2422-18.4824c0-7.1367-1.4141-13.1968-4.2422-18.1807-2.8281-4.9805-6.7666-8.7524-11.8164-11.312-5.0508-2.5566-10.9434-3.8379-17.6758-3.8379h-19.998v67.064Z" fill="#16204c"/><path d="M592.4827,249.9932V108.5933h47.6719v141.3999h-47.6719Z" fill="#16204c"/><path d="M736.5071,253.2256c-11.4473,0-21.9863-1.7861-31.6133-5.3535-9.6289-3.5664-17.9775-8.6514-25.0479-15.251-7.0693-6.5967-12.5586-14.4082-16.4629-23.4316-3.9072-9.0205-5.8574-18.9883-5.8574-29.8965s1.9502-20.8721,5.8574-29.896c3.9043-9.0205,9.4248-16.832,16.5645-23.4316,7.1357-6.5967,15.585-11.6816,25.3506-15.251,9.7627-3.5669,20.5029-5.353,32.2188-5.353,14.0049,0,26.4941,2.3574,37.4717,7.0698,10.9736,4.7153,20.0293,11.4478,27.1689,20.2002l-30.502,26.8657c-4.4443-5.1162-9.2607-8.9888-14.4434-11.6147-5.1855-2.626-10.9424-3.939-17.2705-3.939-5.252,0-9.999.8076-14.2412,2.4238s-7.8467,3.9736-10.8076,7.0698c-2.9629,3.0996-5.252,6.8018-6.8672,11.1104-1.6162,4.311-2.4248,9.2256-2.4248,14.7456,0,5.252.8086,10.0693,2.4248,14.4434,1.6152,4.3779,3.9043,8.1152,6.8672,11.2109,2.9609,3.0996,6.4961,5.4893,10.6055,7.1709,4.1064,1.6855,8.7178,2.5254,13.8369,2.5254,5.3848,0,10.6367-.9092,15.7559-2.7275,5.1162-1.8174,10.5703-4.9482,16.3623-9.3926l26.6641,32.7236c-8.6201,5.792-18.4512,10.2363-29.4922,13.332-11.0439,3.0967-21.75,4.6465-32.1182,4.6465ZM756.7073,229.1875v-53.7324h41.4102v59.792l-41.4102-6.0596Z" fill="#16204c"/><path d="M818.5188,249.9932V108.5933h47.6719v141.3999h-47.6719Z" fill="#16204c"/><path d="M889.2161,249.9932V108.5933h75.5479c19.5254,0,33.9365,3.4688,43.2285,10.4028,9.292,6.9375,13.9375,15.791,13.9375,26.563,0,7.1396-1.9883,13.5024-5.959,19.0889-3.9736,5.5898-9.7305,9.999-17.2705,13.2319-7.5439,3.2314-16.8359,4.8477-27.876,4.8477l4.04-10.9082c11.04,0,20.5693,1.5493,28.583,4.6465,8.0107,3.0986,14.2061,7.5742,18.584,13.4326,4.374,5.8584,6.5645,12.8965,6.5645,21.1094,0,12.2549-5.084,21.8154-15.251,28.6836-10.1689,6.8682-25.0156,10.3018-44.541,10.3018h-79.5879ZM936.0803,216.6631h28.6836c5.2529,0,9.1914-.9404,11.8174-2.8281,2.626-1.8838,3.9395-4.6455,3.9395-8.2812s-1.3135-6.3945-3.9395-8.2822c-2.626-1.8848-6.5645-2.8281-11.8174-2.8281h-31.915v-31.5122h25.4512c5.3848,0,9.3242-.9092,11.8174-2.7271,2.4902-1.8179,3.7373-4.4092,3.7373-7.7769,0-3.5005-1.2471-6.1265-3.7373-7.8779-2.4932-1.7485-6.4326-2.626-11.8174-2.626h-22.2197v74.7397Z" fill="#16204c"/><path d="M1045.3616,249.9932V108.5933h47.6719v104.4341h63.832v36.9658h-111.5039Z" fill="#16204c"/><path d="M1242.3098,253.2256c-11.583,0-22.2539-1.8184-32.0166-5.4541-9.7656-3.6357-18.2148-8.7871-25.3506-15.4531-7.1396-6.666-12.6953-14.5088-16.665-23.5332-3.9736-9.0205-5.959-18.8516-5.959-29.4922,0-10.772,1.9854-20.6353,5.959-29.5928,3.9697-8.9541,9.5254-16.7661,16.665-23.4321,7.1357-6.666,15.585-11.8169,25.3506-15.4531,9.7627-3.6357,20.3672-5.4536,31.8154-5.4536,11.5801,0,22.2197,1.8179,31.916,5.4536,9.6953,3.6362,18.1104,8.7871,25.25,15.4531,7.1357,6.666,12.6904,14.478,16.6641,23.4321,3.9707,8.9575,5.96,18.8208,5.96,29.5928,0,10.6406-1.9893,20.4717-5.96,29.4922-3.9736,9.0244-9.5283,16.8672-16.6641,23.5332-7.1396,6.666-15.5547,11.8174-25.25,15.4531-9.6963,3.6357-20.2695,5.4541-31.7148,5.4541ZM1242.1087,214.6436c4.4434,0,8.585-.8086,12.4229-2.4238,3.8379-1.6162,7.2021-3.9395,10.0996-6.9697,2.8945-3.0293,5.1514-6.7314,6.7676-11.1094,1.6152-4.375,2.4238-9.3242,2.4238-14.8477,0-5.52-.8086-10.4692-2.4238-14.8467-1.6162-4.3745-3.873-8.0801-6.7676-11.1104-2.8975-3.0298-6.2617-5.3525-10.0996-6.9688s-7.9795-2.4238-12.4229-2.4238-8.585.8076-12.4238,2.4238c-3.8379,1.6162-7.2051,3.939-10.0996,6.9688-2.8975,3.0303-5.1514,6.7358-6.7666,11.1104-1.6162,4.3774-2.4248,9.3267-2.4248,14.8467,0,5.5234.8086,10.4727,2.4248,14.8477,1.6152,4.3779,3.8691,8.0801,6.7666,11.1094,2.8945,3.0303,6.2617,5.3535,10.0996,6.9697,3.8389,1.6152,7.9795,2.4238,12.4238,2.4238Z" fill="#16204c"/><path d="M1412.3928,253.2256c-11.3115,0-21.7842-1.7861-31.4111-5.3535-9.6289-3.5664-17.9775-8.6514-25.0479-15.251-7.0693-6.5967-12.5586-14.4082-16.4629-23.4316-3.9072-9.0205-5.8574-18.9883-5.8574-29.8965s1.9502-20.8721,5.8574-29.896c3.9043-9.0205,9.3936-16.832,16.4629-23.4316,7.0703-6.5967,15.4189-11.6816,25.0479-15.251,9.627-3.5669,20.0996-5.353,31.4111-5.353,13.8691,0,26.1592,2.4238,36.8652,7.272,10.7061,4.8477,19.5596,11.8516,26.5635,21.0078l-30.0986,26.8662c-4.1758-5.252-8.7871-9.3237-13.8369-12.2212-5.0498-2.894-10.7402-4.3428-17.0693-4.3428-4.9834,0-9.4932.8076-13.5332,2.4238s-7.5088,3.9736-10.4033,7.0698c-2.8975,3.0996-5.1514,6.8364-6.7666,11.2109-1.6162,4.3779-2.4248,9.2607-2.4248,14.645,0,5.3877.8086,10.2705,2.4248,14.6455,1.6152,4.3779,3.8691,8.1143,6.7666,11.2109,2.8945,3.0996,6.3633,5.4541,10.4033,7.0703,4.04,1.6152,8.5498,2.4238,13.5332,2.4238,6.3291,0,12.0195-1.4453,17.0693-4.3428,5.0498-2.8945,9.6611-6.9697,13.8369-12.2217l30.0986,26.8662c-7.0039,9.0234-15.8574,15.9932-26.5635,20.9072s-22.9961,7.373-36.8652,7.373Z" fill="#16204c"/><path d="M1489.554,249.9932V108.5933h46.8643v141.3999h-46.8643ZM1532.176,219.6934l-2.626-52.3184,53.3281-58.7817h51.9141l-59.792,65.8521-26.4619,27.0684-16.3623,18.1797ZM1582.4739,249.9932l-41.6113-54.9434,30.9053-32.7246,65.8525,87.668h-55.1465Z" fill="#16204c"/><path d="M1693.7766,253.2256c-11.8516,0-23.2998-1.3477-34.3398-4.04-11.0439-2.6924-20.1338-6.1924-27.2705-10.5039l15.3516-34.7441c6.7324,3.9072,14.2412,7.0381,22.5234,9.3926,8.2822,2.3584,16.3271,3.5352,24.1387,3.5352,4.5771,0,8.1816-.3027,10.8076-.9092,2.626-.6055,4.5449-1.4795,5.7568-2.626,1.2119-1.1426,1.8184-2.5244,1.8184-4.1406,0-2.5566-1.4141-4.5762-4.2422-6.0596-2.8281-1.4805-6.5654-2.7275-11.2109-3.7373-4.6465-1.0098-9.7314-2.0869-15.251-3.2324-5.5234-1.1426-11.0791-2.6572-16.665-4.5449-5.5898-1.8838-10.7061-4.374-15.3525-7.4736-4.6455-3.0967-8.3828-7.1709-11.2109-12.2217-2.8281-5.0498-4.2422-11.3433-4.2422-18.8867,0-8.7524,2.4561-16.7314,7.373-23.937,4.915-7.2026,12.2529-12.9595,22.0186-17.271,9.7617-4.3081,21.917-6.4639,36.4609-6.4639,9.5605,0,18.9883,1.0098,28.2803,3.0298s17.6396,5.1196,25.0479,9.292l-14.3428,34.542c-7.0029-3.5-13.7705-6.1265-20.3008-7.8779-6.5332-1.7485-12.8965-2.626-19.0889-2.626-4.5801,0-8.2158.4038-10.9082,1.2119-2.6953.8081-4.6143,1.8877-5.7568,3.2319-1.1455,1.3477-1.7168,2.8281-1.7168,4.4443,0,2.4238,1.4141,4.3428,4.2422,5.7568s6.5645,2.5942,11.2109,3.5352c4.6455.9434,9.7617,1.9536,15.3516,3.0298,5.5869,1.0796,11.1416,2.5596,16.665,4.4438,5.5205,1.8877,10.6055,4.3779,15.251,7.4741,4.6465,3.1001,8.3828,7.1401,11.2109,12.1206,2.8281,4.9834,4.2422,11.1787,4.2422,18.584,0,8.6191-2.459,16.5322-7.373,23.7344-4.917,7.2061-12.2207,12.998-21.917,17.3721-9.6963,4.375-21.8857,6.5654-36.5615,6.5654Z" fill="#16204c"/></g><g><circle cx="174.9319" cy="175" r="175" fill="#526bfe"/><g><path d="M176.5325,87.2646l-37.3028,20.1121c16.9844,9.3171,8.0137,4.3968,37.3001,20.4585l37.3054-20.4585-37.3028-20.1121Z" fill="#fff"/><path d="M135.1554,156.9631l-37.3028,20.1095c16.5799,9.0977,7.9343,4.3545,37.3001,20.4585l37.1732-20.3871c-11.9636-6.6336-4.5026-2.5699-37.1706-20.1809Z" fill="#fff"/><path d="M137.0908,243.6539l37.4931-20.7837v-42.5271l-37.4931,20.5616v42.7492Z" fill="#fff"/><path d="M217.9016,156.9631c-32.7976,17.6797-25.4396,13.6769-37.1732,20.1809,14.7768,8.1088,7.1015,3.8997,37.1706,20.3898l37.3054-20.4585-37.3028-20.1122Z" fill="#fff"/><path d="M215.9583,153.1718v-42.5271l-37.4931,20.5616v42.6012c12.2465-6.5992,4.7352-2.4773,37.4931-20.6356Z" fill="#fff"/><path d="M178.4757,180.3431v42.5271l37.4746,20.7837v-42.7519c-31.7664-17.4286-24.0119-13.1745-37.4746-20.559Z" fill="#fff"/><path d="M174.5813,173.8021v-42.5985c-30.2489-16.5958-22.5022-12.347-37.4746-20.559v42.5271c32.5015,18.0261,24.9637,13.8858,37.4746,20.6303Z" fill="#fff"/><path d="M219.8342,243.6539l37.4931-20.7837v-42.5271l-37.4931,20.5616v42.7492Z" fill="#fff"/><path d="M95.7296,180.3431v42.5271l37.4746,20.7837v-42.7519c-29.9792-16.4503-22.2246-12.1937-37.4746-20.559Z" fill="#fff"/></g></g></svg>';
	}

	/**
	 * Get promotional content for admin sidebar.
	 *
	 * @return string HTML content.
	 */
	public function get_promo_content() {
		ob_start();
		?>
		<!-- DigiCommerce Promo -->
		<div class="digiblocks-admin-section digiblocks-promo-section">
			<div class="digiblocks-section-header">
				<h2><?php esc_html_e( 'Grow Your Business', 'digiblocks' ); ?></h2>
			</div>

			<div class="digiblocks-promo-container">
				<div class="digiblocks-promo-product">
					<div class="digiblocks-promo-logo">
						<a href="https://digihold.click/digicommerce-site" target="_blank">
							<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 2148.09 350" width="200" height="33"><g><path d="M425.4756,249.9932V108.5933h69.6904c15.7559,0,29.624,2.8628,41.6123,8.585,11.9844,5.7256,21.3418,13.8369,28.0771,24.3408,6.7324,10.5039,10.1006,23.0283,10.1006,37.5718,0,14.6797-3.3682,27.3047-10.1006,37.875-6.7354,10.5732-16.0928,18.7197-28.0771,24.4424-11.9883,5.7256-25.8564,8.585-41.6123,8.585h-69.6904ZM473.1475,212.8252h19.998c6.7324,0,12.625-1.2783,17.6758-3.8379,5.0498-2.5566,8.9883-6.3633,11.8164-11.4131,2.8281-5.0508,4.2422-11.2109,4.2422-18.4834,0-7.1357-1.4141-13.1958-4.2422-18.1797-2.8281-4.9805-6.7666-8.7524-11.8164-11.312-5.0508-2.5566-10.9434-3.8379-17.6758-3.8379h-19.998v67.064Z" fill="#09053a"/><path d="M592.3252,249.9932V108.5933h47.6719v141.3999h-47.6719Z" fill="#09053a"/><path d="M736.3496,253.2246c-11.4473,0-21.9863-1.7861-31.6133-5.3525-9.6289-3.5664-17.9775-8.6514-25.0479-15.251-7.0693-6.5967-12.5586-14.4082-16.4629-23.4326-3.9072-9.0205-5.8574-18.9873-5.8574-29.8955s1.9502-20.8721,5.8574-29.896c3.9043-9.0205,9.4248-16.832,16.5645-23.4316,7.1357-6.5967,15.585-11.6816,25.3506-15.251,9.7627-3.5669,20.5029-5.353,32.2188-5.353,14.0049,0,26.4941,2.3574,37.4717,7.0698,10.9736,4.7153,20.0293,11.4478,27.1689,20.2002l-30.502,26.8657c-4.4443-5.1162-9.2607-8.9888-14.4434-11.6147-5.1855-2.626-10.9424-3.939-17.2705-3.939-5.252,0-9.999.8076-14.2412,2.4238s-7.8467,3.9736-10.8076,7.0698c-2.9629,3.0996-5.252,6.8018-6.8672,11.1104-1.6162,4.311-2.4248,9.2256-2.4248,14.7456,0,5.252.8086,10.0684,2.4248,14.4434,1.6152,4.377,3.9043,8.1143,6.8672,11.2109,2.9609,3.0986,6.4961,5.4883,10.6055,7.1709,4.1064,1.6855,8.7178,2.5244,13.8369,2.5244,5.3848,0,10.6367-.9082,15.7559-2.7266,5.1162-1.8184,10.5703-4.9492,16.3623-9.3936l26.6641,32.7246c-8.6201,5.792-18.4512,10.2354-29.4922,13.332-11.0439,3.0957-21.75,4.6455-32.1182,4.6455ZM756.5498,229.1865v-53.7314h41.4102v59.792l-41.4102-6.0605Z" fill="#09053a"/><path d="M818.3613,249.9932V108.5933h47.6719v141.3999h-47.6719Z" fill="#09053a"/><path d="M962.1826,253.2246c-11.3115,0-21.7842-1.7861-31.4111-5.3525-9.6289-3.5664-17.9775-8.6514-25.0479-15.251-7.0693-6.5967-12.5586-14.4082-16.4629-23.4326-3.9072-9.0205-5.8574-18.9873-5.8574-29.8955s1.9502-20.8721,5.8574-29.896c3.9043-9.0205,9.3936-16.832,16.4629-23.4316,7.0703-6.5967,15.4189-11.6816,25.0479-15.251,9.627-3.5669,20.0996-5.353,31.4111-5.353,13.8691,0,26.1592,2.4238,36.8652,7.272,10.7061,4.8477,19.5596,11.8516,26.5635,21.0078l-30.0986,26.8662c-4.1758-5.252-8.7871-9.3237-13.8369-12.2212-5.0498-2.894-10.7402-4.3428-17.0693-4.3428-4.9834,0-9.4932.8076-13.5332,2.4238s-7.5088,3.9736-10.4033,7.0698c-2.8975,3.0996-5.1514,6.8364-6.7666,11.2109-1.6162,4.3779-2.4248,9.2607-2.4248,14.645,0,5.3877.8086,10.2705,2.4248,14.6445,1.6152,4.3779,3.8691,8.1152,6.7666,11.2109,2.8945,3.0996,6.3633,5.4541,10.4033,7.0703s8.5498,2.4238,13.5332,2.4238c6.3291,0,12.0195-1.4453,17.0693-4.3428,5.0498-2.8945,9.6611-6.9688,13.8369-12.2207l30.0986,26.8662c-7.0039,9.0234-15.8574,15.9922-26.5635,20.9062-10.7061,4.915-22.9961,7.373-36.8652,7.373Z" fill="#09053a"/><path d="M1110.6504,253.2246c-11.583,0-22.2539-1.8174-32.0166-5.4541-9.7656-3.6357-18.2148-8.7861-25.3506-15.4521-7.1396-6.666-12.6953-14.5098-16.665-23.5332-3.9736-9.0205-5.959-18.8525-5.959-29.4922,0-10.772,1.9854-20.6353,5.959-29.5928,3.9697-8.9541,9.5254-16.7661,16.665-23.4321,7.1357-6.666,15.585-11.8169,25.3506-15.4531,9.7627-3.6357,20.3672-5.4536,31.8154-5.4536,11.5801,0,22.2197,1.8179,31.916,5.4536,9.6953,3.6362,18.1104,8.7871,25.25,15.4531,7.1357,6.666,12.6904,14.478,16.6641,23.4321,3.9707,8.9575,5.96,18.8208,5.96,29.5928,0,10.6396-1.9893,20.4717-5.96,29.4922-3.9736,9.0234-9.5283,16.8672-16.6641,23.5332-7.1396,6.666-15.5547,11.8164-25.25,15.4521-9.6963,3.6367-20.2695,5.4541-31.7148,5.4541ZM1110.4492,214.6426c4.4434,0,8.585-.8076,12.4229-2.4238s7.2021-3.9385,10.0996-6.9688c2.8945-3.0303,5.1514-6.7324,6.7676-11.1104,1.6152-4.374,2.4238-9.3232,2.4238-14.8467,0-5.52-.8086-10.4692-2.4238-14.8467-1.6162-4.3745-3.873-8.0801-6.7676-11.1104-2.8975-3.0298-6.2617-5.3525-10.0996-6.9688s-7.9795-2.4238-12.4229-2.4238-8.585.8076-12.4238,2.4238c-3.8379,1.6162-7.2051,3.939-10.0996,6.9688-2.8975,3.0303-5.1514,6.7358-6.7666,11.1104-1.6162,4.3774-2.4248,9.3267-2.4248,14.8467,0,5.5234.8086,10.4727,2.4248,14.8467,1.6152,4.3779,3.8691,8.0801,6.7666,11.1104,2.8945,3.0303,6.2617,5.3525,10.0996,6.9688,3.8389,1.6162,7.9795,2.4238,12.4238,2.4238Z" fill="#09053a"/><path d="M1207.6094,249.9932V108.5933h39.1885l56.5596,92.314h-20.6035l54.9434-92.314h39.1885l.4043,141.3999h-43.4307l-.4033-75.9521h6.8672l-37.5713,63.2256h-21.0078l-39.1885-63.2256h8.4844v75.9521h-43.4307Z" fill="#09053a"/><path d="M1400.3164,249.9932V108.5933h39.1885l56.5596,92.314h-20.6035l54.9434-92.314h39.1885l.4043,141.3999h-43.4307l-.4033-75.9521h6.8672l-37.5713,63.2256h-21.0078l-39.1885-63.2256h8.4844v75.9521h-43.4307Z" fill="#09053a"/><path d="M1639.8877,214.0371h70.7002v35.9561h-117.5645V108.5933h114.9385v35.9561h-68.0742v69.4878ZM1636.6562,161.1133h63.0234v34.3398h-63.0234v-34.3398Z" fill="#09053a"/><path d="M1728.9668,249.9932V108.5933h68.0742c13.1963,0,24.6094,2.1558,34.2393,6.4639,9.626,4.3115,17.0693,10.4727,22.3213,18.4829,5.252,8.0137,7.8779,17.4731,7.8779,28.3813s-2.626,20.3003-7.8779,28.1782-12.6953,13.9072-22.3213,18.0791c-9.6299,4.1758-21.043,6.2627-34.2393,6.2627h-41.6123l21.21-19.5947v55.1465h-47.6719ZM1776.6387,200.0986l-21.21-21.6133h38.582c6.5967,0,11.4795-1.4805,14.6455-4.4443,3.1621-2.9604,4.7471-7.0005,4.7471-12.1196s-1.585-9.1567-4.7471-12.1201c-3.166-2.9604-8.0488-4.4443-14.6455-4.4443h-38.582l21.21-21.6138v76.3555ZM1813.6055,249.9932l-34.7441-51.5098h50.5l35.1475,51.5098h-50.9033Z" fill="#09053a"/><path d="M1952.5801,253.2246c-11.3115,0-21.7842-1.7861-31.4111-5.3525-9.6289-3.5664-17.9775-8.6514-25.0479-15.251-7.0693-6.5967-12.5586-14.4082-16.4629-23.4326-3.9072-9.0205-5.8574-18.9873-5.8574-29.8955s1.9502-20.8721,5.8574-29.896c3.9043-9.0205,9.3936-16.832,16.4629-23.4316,7.0703-6.5967,15.4189-11.6816,25.0479-15.251,9.627-3.5669,20.0996-5.353,31.4111-5.353,13.8691,0,26.1592,2.4238,36.8652,7.272,10.7061,4.8477,19.5596,11.8516,26.5635,21.0078l-30.0986,26.8662c-4.1758-5.252-8.7871-9.3237-13.8369-12.2212-5.0498-2.894-10.7402-4.3428-17.0693-4.3428-4.9834,0-9.4932.8076-13.5332,2.4238s-7.5088,3.9736-10.4033,7.0698c-2.8975,3.0996-5.1514,6.8364-6.7666,11.2109-1.6162,4.3779-2.4248,9.2607-2.4248,14.645,0,5.3877.8086,10.2705,2.4248,14.6445,1.6152,4.3779,3.8691,8.1152,6.7666,11.2109,2.8945,3.0996,6.3633,5.4541,10.4033,7.0703s8.5498,2.4238,13.5332,2.4238c6.3291,0,12.0195-1.4453,17.0693-4.3428,5.0498-2.8945,9.6611-6.9688,13.8369-12.2207l30.0986,26.8662c-7.0039,9.0234-15.8574,15.9922-26.5635,20.9062-10.7061,4.915-22.9961,7.373-36.8652,7.373Z" fill="#09053a"/><path d="M2076.6055,214.0371h70.7002v35.9561h-117.5645V108.5933h114.9385v35.9561h-68.0742v69.4878ZM2073.374,161.1133h63.0234v34.3398h-63.0234v-34.3398Z" fill="#09053a"/></g><g><circle cx="175" cy="175" r="175" fill="#ccb161"/><path d="M349.8016,184.1762c-4.2758,82.7633-66.0552,150.3104-146.1534,163.4835l-81.4756-81.4756c-.3885-.3363-.7648-.6865-1.128-1.05-3.8777-3.8755-6.2738-9.2269-6.2738-15.1382-.009-6.1388,2.6257-11.9842,7.2311-16.0431l-8.3358-8.3358c-.3449-.299-.6796-.6111-1.0026-.9341-3.4402-3.4402-5.5752-8.1907-5.5752-13.4225,0-1.6406.2107-3.2339.6052-4.7542l-32.7454-32.7454c-2.0957-1.7274-2.3942-4.8267-.6668-6.9224.9339-1.133,2.3252-1.7894,3.7935-1.7897h38.6684l-45.2032-45.2032c-1.9201-1.9218-1.9187-5.0363.0031-6.9565.9211-.9202,2.1694-1.4378,3.4714-1.4392h28.3828l-24.457-24.457c-.9239-.9211-1.4422-2.1728-1.4401-3.4774-.0008-2.7163,2.2005-4.9189,4.9168-4.9197h20.5931c1.3409,0,2.5565.5359,3.4439,1.4051l.0729.0729,31.3753,31.3753h137.1708c1.4694-.003,2.8623.6545,3.7939,1.7908l70.9348,70.9363Z" fill="#ab8b2b" fill-rule="evenodd"/><path d="M247.1094,238.4189c3.1996,0,6.0907,1.2987,8.1966,3.3906,2.169,2.1718,3.3851,5.117,3.3804,8.1863,0,3.1938-1.2928,6.0907-3.3804,8.1827-2.1739,2.173-5.1228,3.3921-8.1966,3.3884-3.071.0049-6.0172-1.2146-8.1863-3.3884-2.1725-2.1686-3.3918-5.1131-3.3884-8.1827,0-3.1996,1.2965-6.0907,3.3884-8.1863,2.1696-2.1734,5.1154-3.3934,8.1863-3.3906h0ZM136.1827,238.4189c3.1988,0,6.0944,1.2987,8.1864,3.3906,2.1748,2.1686,3.3949,5.1151,3.3899,8.1863,0,3.1938-1.2943,6.0907-3.3899,8.1827-2.1685,2.1749-5.1152,3.3945-8.1864,3.3884-3.07.0055-6.0153-1.2141-8.1827-3.3884-2.1743-2.1675-3.3944-5.1126-3.3899-8.1827,0-3.1996,1.2943-6.0907,3.3899-8.1863,2.1678-2.1739,5.1126-3.3942,8.1827-3.3906h0ZM99.125,88.4322l5.4826,23.0161h-29.5947c-2.7165,0-4.9186,2.2021-4.9186,4.9186s2.2021,4.9186,4.9186,4.9186h68.8866c2.7159,0,4.9175,2.2016,4.9175,4.9175s-2.2016,4.9175-4.9175,4.9175h-34.6048l1.664,6.9934h-6.1666c-2.7165,0-4.9186,2.2021-4.9186,4.9186s2.2021,4.9186,4.9186,4.9186h44.2138c2.7165.0331,4.8917,2.2621,4.8586,4.9786-.0325,2.6698-2.1889,4.8261-4.8586,4.8586h-33.3645l1.7281,7.2596h-39.2962c-2.7147,0-4.9153,2.2014-4.9153,4.9175s2.2014,4.9175,4.9153,4.9175h77.7416c2.7165.0329,4.892,2.2616,4.8591,4.9781-.0323,2.6701-2.189,4.8268-4.8591,4.8591h-33.756l1.8251,7.6694c-4.3524.5068-8.268,2.4974-11.2211,5.4461-3.4402,3.4438-5.5752,8.1944-5.5752,13.424s2.1357,9.9823,5.5752,13.4225c3.4439,3.4461,8.1944,5.5796,13.4283,5.5796h1.766c-2.5444,1.0783-4.8574,2.6365-6.8126,4.5894-4.0237,4.0117-6.2817,9.4622-6.2738,15.1441,0,5.9114,2.396,11.2627,6.2738,15.1382,3.8755,3.8755,9.2305,6.2716,15.1382,6.2716,5.9114,0,11.2685-2.396,15.1441-6.2716,3.8755-3.8755,6.2716-9.2269,6.2716-15.1382.0077-5.6814-2.2493-11.1316-6.2716-15.1441-1.9561-1.9529-4.2698-3.511-6.8148-4.5894h94.2674c-2.5432,1.0782-4.8547,2.6364-6.8082,4.5894-3.8755,3.8755-6.2738,9.2305-6.2738,15.1441s2.3982,11.2627,6.2738,15.1382c3.8755,3.8755,9.2261,6.2716,15.1382,6.2716s11.2583-2.396,15.136-6.2716c3.8777-3.8755,6.2832-9.2269,6.2832-15.1382s-2.4062-11.2685-6.2832-15.1441c-1.9491-1.9546-4.2584-3.5131-6.8002-4.5894h7.019c2.7045,0,4.9117-2.2014,4.9117-4.9197s-2.2072-4.9197-4.9117-4.9197H126.0911c-2.5156,0-4.8059-1.0318-6.4728-2.6921-1.6603-1.6647-2.6965-3.9514-2.6965-6.4706,0-2.5156,1.0361-4.8023,2.6965-6.4663,1.6661-1.6603,3.9572-2.6965,6.4728-2.6965h119.6781c3.9827,0,7.6716-1.3322,10.6101-3.6429,2.9232-2.3005,5.0903-5.5694,6.0448-9.4588l17.3199-71.0639c.1609-.5052.2413-1.0325.2384-1.5626,0-2.7162-2.1875-4.9197-4.9117-4.9197H114.7168l-6.8863-28.91c-.4643-2.2944-2.4811-3.9437-4.822-3.9433h-20.5902c-2.7163-.0008-4.9189,2.2005-4.9197,4.9168v.0029c0,2.7159,2.2016,4.9175,4.9175,4.9175h16.7089v-.0007Z" fill="#fff" fill-rule="evenodd"/></g></svg>
						</a>
					</div>
					<div class="digiblocks-promo-content">
						<p><?php echo wp_kses_post( __( 'Transform your website into a powerful ecommerce platform to sell <strong>digital products</strong>, <strong>book services</strong>, and deliver <strong>online courses</strong> in minutes.', 'digiblocks' ) ); ?></p>
						<div class="digiblocks-link-wrapper">
							<a href="https://digihold.click/digicommerce-site" target="_blank" class="digiblocks-link">
								<span><?php esc_html_e( 'Learn More', 'digiblocks' ); ?></span>
								<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512" width="1em" height="1em"><path d="M505 273c9.4-9.4 9.4-24.6 0-33.9L369 103c-9.4-9.4-24.6-9.4-33.9 0s-9.4 24.6 0 33.9l95 95L24 232c-13.3 0-24 10.7-24 24s10.7 24 24 24l406.1 0-95 95c-9.4 9.4-9.4 24.6 0 33.9s24.6 9.4 33.9 0L505 273z"/></svg>
							</a>
						</div>
					</div>
				</div>

				<div class="digiblocks-promo-product digiblocks-coming-soon">
					<div class="digiblocks-promo-logo">
						<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1590 350" height="33"><g><path d="M425.8819,249.9932V108.5933h69.6904c15.7559,0,29.624,2.8628,41.6123,8.585,11.9844,5.7256,21.3418,13.8369,28.0771,24.3408,6.7324,10.5039,10.1006,23.0283,10.1006,37.5718,0,14.6797-3.3682,27.3047-10.1006,37.875-6.7354,10.5732-16.0928,18.7197-28.0771,24.4424-11.9883,5.7256-25.8564,8.585-41.6123,8.585h-69.6904ZM473.5537,212.8252h19.998c6.7324,0,12.625-1.2783,17.6758-3.8379,5.0498-2.5566,8.9883-6.3633,11.8164-11.4131,2.8281-5.0508,4.2422-11.2109,4.2422-18.4834,0-7.1357-1.4141-13.1958-4.2422-18.1797-2.8281-4.9805-6.7666-8.7524-11.8164-11.312-5.0508-2.5566-10.9434-3.8379-17.6758-3.8379h-19.998v67.064Z" fill="#2c3e50"/><path d="M592.7315,249.9932V108.5933h47.6719v141.3999h-47.6719Z" fill="#2c3e50"/><path d="M736.7559,253.2246c-11.4473,0-21.9863-1.7861-31.6133-5.3525-9.6289-3.5664-17.9775-8.6514-25.0479-15.251-7.0693-6.5967-12.5586-14.4082-16.4629-23.4326-3.9072-9.0205-5.8574-18.9873-5.8574-29.8955s1.9502-20.8721,5.8574-29.896c3.9043-9.0205,9.4248-16.832,16.5645-23.4316,7.1357-6.5967,15.585-11.6816,25.3506-15.251,9.7627-3.5669,20.5029-5.353,32.2188-5.353,14.0049,0,26.4941,2.3574,37.4717,7.0698,10.9736,4.7153,20.0293,11.4478,27.1689,20.2002l-30.502,26.8657c-4.4443-5.1162-9.2607-8.9888-14.4434-11.6147-5.1855-2.626-10.9424-3.939-17.2705-3.939-5.252,0-9.999.8076-14.2412,2.4238s-7.8467,3.9736-10.8076,7.0698c-2.9629,3.0996-5.252,6.8018-6.8672,11.1104-1.6162,4.311-2.4248,9.2256-2.4248,14.7456,0,5.252.8086,10.0684,2.4248,14.4434,1.6152,4.377,3.9043,8.1143,6.8672,11.2109,2.9609,3.0986,6.4961,5.4883,10.6055,7.1709,4.1064,1.6855,8.7178,2.5244,13.8369,2.5244,5.3848,0,10.6367-.9082,15.7559-2.7266,5.1162-1.8184,10.5703-4.9492,16.3623-9.3936l26.6641,32.7246c-8.6201,5.792-18.4512,10.2354-29.4922,13.332-11.0439,3.0957-21.75,4.6455-32.1182,4.6455ZM756.9561,229.1865v-53.7314h41.4102v59.792l-41.4102-6.0605Z" fill="#2c3e50"/><path d="M818.7676,249.9932V108.5933h47.6719v141.3999h-47.6719Z" fill="#2c3e50"/><path d="M942.1875,253.2246c-11.8516,0-23.2998-1.3477-34.3398-4.04-11.0439-2.6924-20.1338-6.1924-27.2705-10.5039l15.3516-34.7441c6.7324,3.9082,14.2412,7.0391,22.5234,9.3936,8.2822,2.3574,16.3271,3.5352,24.1387,3.5352,4.5771,0,8.1816-.3037,10.8076-.9092,2.626-.6064,4.5449-1.4805,5.7568-2.626,1.2119-1.1426,1.8184-2.5254,1.8184-4.1416,0-2.5557-1.4141-4.5762-4.2422-6.0596-2.8281-1.4805-6.5654-2.7266-11.2109-3.7373-4.6465-1.0098-9.7314-2.0859-15.251-3.2314-5.5234-1.1426-11.0791-2.6582-16.665-4.5449-5.5898-1.8848-10.7061-4.375-15.3525-7.4746-4.6455-3.0957-8.3828-7.1709-11.2109-12.2207s-4.2422-11.3433-4.2422-18.8867c0-8.7524,2.4561-16.7314,7.373-23.937,4.915-7.2026,12.2529-12.9595,22.0186-17.271,9.7617-4.3081,21.917-6.4639,36.4609-6.4639,9.5605,0,18.9883,1.0098,28.2803,3.0298s17.6396,5.1196,25.0479,9.292l-14.3428,34.542c-7.0029-3.5-13.7705-6.1265-20.3008-7.8779-6.5332-1.7485-12.8965-2.626-19.0889-2.626-4.5801,0-8.2158.4038-10.9082,1.2119-2.6953.8081-4.6143,1.8877-5.7568,3.2319-1.1455,1.3477-1.7168,2.8281-1.7168,4.4443,0,2.4238,1.4141,4.3428,4.2422,5.7568s6.5645,2.5942,11.2109,3.5352c4.6455.9434,9.7617,1.9536,15.3516,3.0298,5.5869,1.0796,11.1416,2.5596,16.665,4.4438,5.5205,1.8877,10.6055,4.3779,15.251,7.4741,4.6465,3.0991,8.3828,7.1392,11.2109,12.1196,2.8281,4.9844,4.2422,11.1797,4.2422,18.584,0,8.6201-2.459,16.5322-7.373,23.7354-4.917,7.2051-12.2207,12.9971-21.917,17.3721-9.6963,4.374-21.8857,6.5645-36.5615,6.5645Z" fill="#2c3e50"/><path d="M1050.8643,249.9932v-104.4341h-41.4102v-36.9658h130.4922v36.9658h-41.4102v104.4341h-47.6719Z" fill="#2c3e50"/><path d="M1224.583,253.2246c-11.583,0-22.2539-1.8174-32.0166-5.4541-9.7656-3.6357-18.2148-8.7861-25.3506-15.4521-7.1396-6.666-12.6953-14.5098-16.665-23.5332-3.9736-9.0205-5.959-18.8525-5.959-29.4922,0-10.772,1.9854-20.6353,5.959-29.5928,3.9697-8.9541,9.5254-16.7661,16.665-23.4321,7.1357-6.666,15.585-11.8169,25.3506-15.4531,9.7627-3.6357,20.3672-5.4536,31.8154-5.4536,11.5801,0,22.2197,1.8179,31.916,5.4536,9.6953,3.6362,18.1104,8.7871,25.25,15.4531,7.1357,6.666,12.6904,14.478,16.6641,23.4321,3.9707,8.9575,5.96,18.8208,5.96,29.5928,0,10.6396-1.9893,20.4717-5.96,29.4922-3.9736,9.0234-9.5283,16.8672-16.6641,23.5332-7.1396,6.666-15.5547,11.8164-25.25,15.4521-9.6963,3.6367-20.2695,5.4541-31.7148,5.4541ZM1224.3819,214.6426c4.4434,0,8.585-.8076,12.4229-2.4238s7.2021-3.9385,10.0996-6.9688c2.8945-3.0303,5.1514-6.7324,6.7676-11.1104,1.6152-4.374,2.4238-9.3232,2.4238-14.8467,0-5.52-.8086-10.4692-2.4238-14.8467-1.6162-4.3745-3.873-8.0801-6.7676-11.1104-2.8975-3.0298-6.2617-5.3525-10.0996-6.9688s-7.9795-2.4238-12.4229-2.4238-8.585.8076-12.4238,2.4238c-3.8379,1.6162-7.2051,3.939-10.0996,6.9688-2.8975,3.0303-5.1514,6.7358-6.7666,11.1104-1.6162,4.3774-2.4248,9.3267-2.4248,14.8467,0,5.5234.8086,10.4727,2.4248,14.8467,1.6152,4.3779,3.8691,8.0801,6.7666,11.1104,2.8945,3.0303,6.2617,5.3525,10.0996,6.9688,3.8389,1.6162,7.9795,2.4238,12.4238,2.4238Z" fill="#2c3e50"/><path d="M1321.542,249.9932V108.5933h68.0742c13.1963,0,24.6094,2.1558,34.2393,6.4639,9.626,4.3115,17.0693,10.4727,22.3213,18.4829,5.252,8.0137,7.8779,17.4731,7.8779,28.3813s-2.626,20.3003-7.8779,28.1782-12.6953,13.9072-22.3213,18.0791c-9.6299,4.1758-21.043,6.2627-34.2393,6.2627h-41.6123l21.21-19.5947v55.1465h-47.6719ZM1369.2139,200.0986l-21.21-21.6133h38.582c6.5967,0,11.4795-1.4805,14.6455-4.4443,3.1621-2.9604,4.7471-7.0005,4.7471-12.1196s-1.585-9.1567-4.7471-12.1201c-3.166-2.9604-8.0488-4.4443-14.6455-4.4443h-38.582l21.21-21.6138v76.3555ZM1406.1807,249.9932l-34.7441-51.5098h50.5l35.1475,51.5098h-50.9033Z" fill="#2c3e50"/><path d="M1518.8955,214.0371h70.7002v35.9561h-117.5645V108.5933h114.9385v35.9561h-68.0742v69.4878ZM1515.6641,161.1133h63.0234v34.3398h-63.0234v-34.3398Z" fill="#2c3e50"/></g><g><circle cx="175.4063" cy="175" r="175" fill="#e74c3c"/><polygon points="246.6483 149.4986 176.2769 149.4986 211.3633 53.5342 104.1643 200.5014 174.5356 200.5014 139.4492 296.4658 246.6483 149.4986" fill="#ffd83b"/></g></svg>
						<div class="digiblocks-coming-soon-badge"><?php esc_html_e( 'Coming Soon', 'digiblocks' ); ?></div>
					</div>
					<div class="digiblocks-promo-content">
						<p><?php esc_html_e( 'A simple, lightweight theme designed to work perfectly with DigiBlocks. Create beautiful, lightning-fast websites with minimal configuration.', 'digiblocks' ); ?></p>
					</div>
				</div>
			</div>
		</div>

		<!-- Resources Section -->
		<div class="digiblocks-admin-section digiblocks-resources-section">
			<div class="digiblocks-section-header">
				<h2><?php esc_html_e( 'Resources', 'digiblocks' ); ?></h2>
			</div>

			<div class="digiblocks-resources-container">
				<div class="digiblocks-resource-card">
					<div class="digiblocks-resource-title">
						<div class="digiblocks-resource-icon">
							<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 384 512" width="24" height="24" fill="#526bfe"><path d="M352 448l0-256-112 0c-26.5 0-48-21.5-48-48l0-112L64 32C46.3 32 32 46.3 32 64l0 384c0 17.7 14.3 32 32 32l256 0c17.7 0 32-14.3 32-32zm-.5-288c-.7-2.8-2.1-5.4-4.2-7.4L231.4 36.7c-2.1-2.1-4.6-3.5-7.4-4.2L224 144c0 8.8 7.2 16 16 16l111.5 0zM0 64C0 28.7 28.7 0 64 0L220.1 0c12.7 0 24.9 5.1 33.9 14.1L369.9 129.9c9 9 14.1 21.2 14.1 33.9L384 448c0 35.3-28.7 64-64 64L64 512c-35.3 0-64-28.7-64-64L0 64z"/></svg>
						</div>
						<h3><?php esc_html_e( 'Documentation', 'digiblocks' ); ?></h3>
					</div>
					<div class="digiblocks-resource-content">
						<p><?php esc_html_e( 'Step-by-step guides to help you get the most out of DigiBlocks.', 'digiblocks' ); ?></p>
						<div class="digiblocks-link-wrapper">
							<a href="https://digihold.click/digiblocks-docs" target="_blank" class="digiblocks-link">
								<span><?php esc_html_e( 'View Documentation', 'digiblocks' ); ?></span>
								<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512" width="1em" height="1em"><path d="M505 273c9.4-9.4 9.4-24.6 0-33.9L369 103c-9.4-9.4-24.6-9.4-33.9 0s-9.4 24.6 0 33.9l95 95L24 232c-13.3 0-24 10.7-24 24s10.7 24 24 24l406.1 0-95 95c-9.4 9.4-9.4 24.6 0 33.9s24.6 9.4 33.9 0L505 273z"/></svg>
							</a>
						</div>
					</div>
				</div>

				<div class="digiblocks-resource-card">
					<div class="digiblocks-resource-title">
						<div class="digiblocks-resource-icon">
							<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512" width="24" height="24" fill="#526bfe"><path d="M32 256C32 132.3 132.3 32 256 32s224 100.3 224 224l0 144.1c0 26.5-21.5 48-48 48l-82.7-.1c-6.6-18.6-24.4-32-45.3-32l-64 0c-26.5 0-48 21.5-48 48s21.5 48 48 48l64 0c20.9 0 38.7-13.4 45.3-32l82.7 .1c44.2 0 80.1-35.8 80.1-80L512 256C512 114.6 397.4 0 256 0S0 114.6 0 256l0 48c0 8.8 7.2 16 16 16s16-7.2 16-16l0-48zM320 464c0 8.8-7.2 16-16 16l-64 0c-8.8 0-16-7.2-16-16s7.2-16 16-16l64 0c8.8 0 16 7.2 16 16zM144 224l16 0 0 128-16 0c-26.5 0-48-21.5-48-48l0-32c0-26.5 21.5-48 48-48zM64 272l0 32c0 44.2 35.8 80 80 80l16 0c17.7 0 32-14.3 32-32l0-128c0-17.7-14.3-32-32-32l-16 0c-44.2 0-80 35.8-80 80zm288-48l16 0c26.5 0 48 21.5 48 48l0 32c0 26.5-21.5 48-48 48l-16 0 0-128zm16-32l-16 0c-17.7 0-32 14.3-32 32l0 128c0 17.7 14.3 32 32 32l16 0c44.2 0 80-35.8 80-80l0-32c0-44.2-35.8-80-80-80z"/></svg>
						</div>
						<h3><?php esc_html_e( 'Expert Support', 'digiblocks' ); ?></h3>
					</div>
					<div class="digiblocks-resource-content">
						<p><?php esc_html_e( 'Get help from our dedicated team whenever you face an issue.', 'digiblocks' ); ?></p>
						<div class="digiblocks-link-wrapper">
							<a href="https://digihold.click/digiblocks-support" target="_blank" class="digiblocks-link">
								<span><?php esc_html_e( 'Get Support', 'digiblocks' ); ?></span>
								<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512" width="1em" height="1em"><path d="M505 273c9.4-9.4 9.4-24.6 0-33.9L369 103c-9.4-9.4-24.6-9.4-33.9 0s-9.4 24.6 0 33.9l95 95L24 232c-13.3 0-24 10.7-24 24s10.7 24 24 24l406.1 0-95 95c-9.4 9.4-9.4 24.6 0 33.9s24.6 9.4 33.9 0L505 273z"/></svg>
							</a>
						</div>
					</div>
				</div>

				<div class="digiblocks-resource-card">
					<div class="digiblocks-resource-title">
						<div class="digiblocks-resource-icon">
							<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 320 512" width="24" height="24" fill="#526bfe"><path d="M80 299.3V512H196V299.3h86.5l18-97.8H196V166.9c0-51.7 20.3-71.5 72.7-71.5c16.3 0 29.4 .4 37 1.2V7.9C291.4 4 256.4 0 236.2 0C129.3 0 80 50.5 80 159.4v42.1H14v97.8H80z"/></svg>
						</div>
						<h3><?php esc_html_e( 'Join Community', 'digiblocks' ); ?></h3>
					</div>
					<div class="digiblocks-resource-content">
						<p><?php esc_html_e( 'Connect with other users and developers to share ideas and solutions.', 'digiblocks' ); ?></p>
						<div class="digiblocks-link-wrapper">
							<a href="https://digihold.click/digiblocks-fb" target="_blank" class="digiblocks-link">
								<span><?php esc_html_e( 'Connect with Us', 'digiblocks' ); ?></span>
								<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512" width="1em" height="1em"><path d="M505 273c9.4-9.4 9.4-24.6 0-33.9L369 103c-9.4-9.4-24.6-9.4-33.9 0s-9.4 24.6 0 33.9l95 95L24 232c-13.3 0-24 10.7-24 24s10.7 24 24 24l406.1 0-95 95c-9.4 9.4-9.4 24.6 0 33.9s24.6 9.4 33.9 0L505 273z"/></svg>
							</a>
						</div>
					</div>
				</div>

				<div class="digiblocks-resource-card">
					<div class="digiblocks-resource-title">
						<div class="digiblocks-resource-icon">
							<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 576 512" width="24" height="24" fill="#526bfe"><path d="M226.5 168.8L287.9 42.3l61.4 126.5c4.6 9.5 13.6 16.1 24.1 17.7l137.4 20.3-99.8 98.8c-7.4 7.3-10.8 17.8-9 28.1l23.5 139.5L303 407.7c-9.4-5-20.7-5-30.2 0L150.2 473.2l23.5-139.5c1.7-10.3-1.6-20.7-9-28.1L65 206.8l137.4-20.3c10.5-1.5 19.5-8.2 24.1-17.7zM424.9 509.1c8.1 4.3 17.9 3.7 25.3-1.7s11.2-14.5 9.7-23.5L433.6 328.4 544.8 218.2c6.5-6.4 8.7-15.9 5.9-24.5s-10.3-14.9-19.3-16.3L378.1 154.8 309.5 13.5C305.5 5.2 297.1 0 287.9 0s-17.6 5.2-21.6 13.5L197.7 154.8 44.5 177.5c-9 1.3-16.5 7.6-19.3 16.3s-.5 18.1 5.9 24.5L142.2 328.4 116 483.9c-1.5 9 2.2 18.1 9.7 23.5s17.3 6 25.3 1.7l137-73.2 137 73.2z"/></svg>
						</div>
						<h3><?php esc_html_e( 'Rate DigiBlocks', 'digiblocks' ); ?></h3>
					</div>
					<div class="digiblocks-resource-content">
						<p><?php esc_html_e( 'Enjoying DigiBlocks? Show your support by leaving a review.', 'digiblocks' ); ?></p>
						<div class="digiblocks-link-wrapper">
							<a href="https://digihold.click/digiblocks-reviews" target="_blank" class="digiblocks-link">
								<span><?php esc_html_e( 'Leave a Review', 'digiblocks' ); ?></span>
								<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512" width="1em" height="1em"><path d="M505 273c9.4-9.4 9.4-24.6 0-33.9L369 103c-9.4-9.4-24.6-9.4-33.9 0s-9.4 24.6 0 33.9l95 95L24 232c-13.3 0-24 10.7-24 24s10.7 24 24 24l406.1 0-95 95c-9.4 9.4-9.4 24.6 0 33.9s24.6 9.4 33.9 0L505 273z"/></svg>
							</a>
						</div>
					</div>
				</div>
			</div>
		</div>
		<?php
		return ob_get_clean();
	}

	/**
	 * Get allowed HTML tags including SVG elements.
	 *
	 * @return array Array of allowed HTML tags and attributes.
	 */
	private function get_allowed_svg() {
		$kses_defaults = wp_kses_allowed_html( 'post' );
		
		$svg_args = array(
			'svg'     => array(
				'class'           => true,
				'xmlns'           => true,
				'width'           => true,
				'height'          => true,
				'viewbox'         => true,
				'fill'            => true,
				'aria-hidden'     => true,
				'focusable'       => true,
			),
			'g'       => array(
				'fill'            => true,
				'fill-rule'       => true,
			),
			'path'    => array(
				'd'               => true,
				'fill'            => true,
				'fill-rule'       => true,
				'stroke'          => true,
				'stroke-width'    => true,
				'stroke-linecap'  => true,
				'stroke-linejoin' => true,
			),
			'circle'  => array(
				'cx'              => true,
				'cy'              => true,
				'r'               => true,
				'fill'            => true,
				'stroke'          => true,
				'stroke-width'    => true,
			),
			'rect'    => array(
				'x'               => true,
				'y'               => true,
				'width'           => true,
				'height'          => true,
				'fill'            => true,
				'stroke'          => true,
				'stroke-width'    => true,
				'rx'              => true,
				'ry'              => true,
			),
			'polygon' => array(
				'points'          => true,
				'fill'            => true,
				'fill-rule'       => true,
			),
		);
		
		return array_merge($kses_defaults, $svg_args);
	}

	/**
	 * Get block data (title, icon, description).
	 *
	 * @param string $block_name Block name.
	 * @return array|false Block data or false if not found.
	 */
	public function get_block_data( $block_name = '' ) {
		// Define all block data
		$blocks_data = array(
			'container' => array(
				'title'       => __( 'Container', 'digiblocks' ),
				'icon'        => array(
					'viewbox' => '640 512',
					'path'    => 'M448 64l0 384 128 0c17.7 0 32-14.3 32-32l0-320c0-17.7-14.3-32-32-32L448 64zm-32 0L224 64l0 384 192 0 0-384zM192 448l0-384L64 64C46.3 64 32 78.3 32 96l0 320c0 17.7 14.3 32 32 32l128 0zM0 96C0 60.7 28.7 32 64 32l512 0c35.3 0 64 28.7 64 64l0 320c0 35.3-28.7 64-64 64L64 480c-35.3 0-64-28.7-64-64L0 96z',
				),
				'description' => __( 'Create beautiful layouts with flexible containers and columns.', 'digiblocks' ),
			),
			'accordion' => array(
				'title'       => __( 'Accordion', 'digiblocks' ),
				'icon'        => array(
					'viewbox' => '448 512',
					'path'    => 'M240 64c0-8.8-7.2-16-16-16s-16 7.2-16 16l0 176L32 240c-8.8 0-16 7.2-16 16s7.2 16 16 16l176 0 0 176c0 8.8 7.2 16 16 16s16-7.2 16-16l0-176 176 0c8.8 0 16-7.2 16-16s-7.2-16-16-16l-176 0 0-176z',
				),
				'description' => __( 'Display a vertically stacked list of accordion items.', 'digiblocks' ),
			),
			'buttons' => array(
				'title'       => __( 'Buttons', 'digiblocks' ),
				'icon'        => array(
					'viewbox' => '640 512',
					'path'    => 'M591.5 256c50-50 50-131 0-181s-131-50-181 0L387.9 97.6c-6.2 6.2-6.2 16.4 0 22.6s16.4 6.2 22.6 0l22.6-22.6c37.5-37.5 98.3-37.5 135.8 0s37.5 98.3 0 135.8L444.3 357.9c-37.4 37.4-98.1 37.4-135.6 0c-35.6-35.6-37.6-92.6-4.7-130.6l5.3-6.1c5.8-6.7 5.1-16.8-1.6-22.6s-16.8-5.1-22.6 1.6l-5.3 6.1c-43.9 50.7-41.2 126.7 6.2 174.1c49.9 49.9 130.9 49.9 180.8 0L591.5 256zM48.5 256c-50 50-50 131 0 181s131 50 181 0l22.6-22.6c6.2-6.2 6.2-16.4 0-22.6s-16.4-6.2-22.6 0l-22.6 22.6c-37.5 37.5-98.3 37.5-135.8 0s-37.5-98.3 0-135.8L195.7 154.1c37.4-37.4 98.1-37.4 135.6 0c35.6 35.6 37.6 92.6 4.7 130.6l-5.3 6.1c-5.8 6.7-5.1 16.8 1.6 22.6s16.8 5.1 22.6-1.6l5.3-6.1c43.9-50.7 41.2-126.7-6.2-174.1C303.9 81.5 223 81.5 173 131.4L48.5 256z',
				),
				'description' => __( 'Add beautiful interactive buttons with icons.', 'digiblocks' ),
			),
			'call-to-action' => array(
				'title'       => __( 'Call To Action', 'digiblocks' ),
				'icon'        => array(
					'viewbox' => '512 512',
					'path'    => 'M256 480c123.7 0 224-100.3 224-224S379.7 32 256 32S32 132.3 32 256c0 10.4 .7 20.6 2.1 30.6l-9.6 3.5c-7.8 2.9-14.7 7.7-19.9 13.9C1.5 288.5 0 272.4 0 256C0 114.6 114.6 0 256 0S512 114.6 512 256s-114.6 256-256 256c-16.4 0-32.5-1.5-48.1-4.5c6.2-5.3 11-12.1 13.9-19.9l3.5-9.6c10 1.4 20.2 2.1 30.6 2.1zm-7.7-64.2L260 383.9c68.8-2.1 124-58.6 124-127.9c0-70.7-57.3-128-128-128c-69.3 0-125.8 55.1-127.9 124L96.2 263.7c-.1-2.6-.2-5.1-.2-7.7c0-88.4 71.6-160 160-160s160 71.6 160 160s-71.6 160-160 160c-2.6 0-5.2-.1-7.7-.2zM271 261.5l-79.2 215c-2.3 6.2-8.1 10.3-14.7 10.5s-12.6-3.8-15.1-9.9l-30.5-74L27.3 507.3c-6.2 6.2-16.4 6.2-22.6 0s-6.2-16.4 0-22.6L108.9 380.5 34.9 350c-6.1-2.5-10-8.5-9.9-15.1s4.3-12.4 10.5-14.7l215-79.2c5.9-2.2 12.4-.7 16.8 3.7s5.9 11 3.7 16.8zM143.3 360c3.9 1.6 7.1 4.8 8.7 8.7l24 58.2L229 283 85.1 336l58.2 24z',
				),
				'description' => __( 'Add a beautiful call to action block.', 'digiblocks' ),
			),
			'countdown' => array(
				'title'       => __( 'Countdown', 'digiblocks' ),
				'icon'        => array(
					'viewbox' => '512 512',
					'path'    => 'M256 0c-8.8 0-16 7.2-16 16l0 96c0 8.8 7.2 16 16 16s16-7.2 16-16l0-79.4C388.2 40.8 480 137.7 480 256c0 123.7-100.3 224-224 224S32 379.7 32 256c0-61.9 25.1-117.8 65.6-158.4c6.2-6.2 6.2-16.4 0-22.6s-16.4-6.2-22.6 0C28.7 121.3 0 185.3 0 256C0 397.4 114.6 512 256 512s256-114.6 256-256S397.4 0 256 0zM171.3 148.7c-6.2-6.2-16.4-6.2-22.6 0s-6.2 16.4 0 22.6l96 96c6.2 6.2 16.4 6.2 22.6 0s6.2-16.4 0-22.6l-96-96z',
				),
				'description' => __( 'Display a beautiful countdown timer.', 'digiblocks' ),
			),
			'counter' => array(
				'title'       => __( 'Counter', 'digiblocks' ),
				'icon'        => array(
					'viewbox' => '576 512',
					'path'    => 'M448 48c0-5.1-2.5-10-6.6-13s-9.5-3.8-14.4-2.2l-48 16c-8.4 2.8-12.9 11.9-10.1 20.2s11.9 12.9 20.2 10.1l26.9-9L416 192l-32 0c-8.8 0-16 7.2-16 16s7.2 16 16 16l48 0 48 0c8.8 0 16-7.2 16-16s-7.2-16-16-16l-32 0 0-144zM171.3 36.7c-6.2-6.2-16.4-6.2-22.6 0l-96 96c-6.2 6.2-6.2 16.4 0 22.6s16.4 6.2 22.6 0L144 86.6 144 464c0 8.8 7.2 16 16 16s16-7.2 16-16l0-377.4 68.7 68.7c6.2 6.2 16.4 6.2 22.6 0s6.2-16.4 0-22.6l-96-96zM428 392a52 52 0 1 1 0-104 52 52 0 1 1 0 104zm-84-52c0 46.4 37.6 84 84 84c.4 0 .9 0 1.3 0l-25.4 29.6c-5.8 6.7-5 16.8 1.7 22.6s16.8 5 22.6-1.7l62.4-72.5C504.4 385.8 512 365.2 512 344c0 0-.1 0-.1 0c.1-1.3 .1-2.7 .1-4c0-46.4-37.6-84-84-84s-84 37.6-84 84z',
				),
				'description' => __( 'Display animated numerical counters.', 'digiblocks' ),
			),
			'faq' => array(
				'title'       => __( 'FAQ', 'digiblocks' ),
				'icon'        => array(
					'viewbox' => '640 512',
					'path'    => 'M202.7 288L352 288c17.7 0 32-14.3 32-32l0-192c0-17.7-14.3-32-32-32L64 32C46.3 32 32 46.3 32 64l0 192c0 17.7 14.3 32 32 32l32 0c17.7 0 32 14.3 32 32l0 16 55.5-41.6c5.5-4.2 12.3-6.4 19.2-6.4zM352 320l-149.3 0-81.1 60.8c-4.8 3.6-11.3 4.2-16.8 1.5s-8.8-8.2-8.8-14.3l0-16 0-32-32 0c-35.3 0-64-28.7-64-64L0 64C0 28.7 28.7 0 64 0L352 0c35.3 0 64 28.7 64 64l0 192c0 35.3-28.7 64-64 64zM320 448c-35.3 0-64-28.7-64-64l0-32 32 0 0 32c0 17.7 14.3 32 32 32l117.3 0c6.9 0 13.7 2.2 19.2 6.4L512 464l0-16c0-17.7 14.3-32 32-32l32 0c17.7 0 32-14.3 32-32l0-192c0-17.7-14.3-32-32-32l-128 0 0-32 128 0c35.3 0 64 28.7 64 64l0 192c0 35.3-28.7 64-64 64l-32 0 0 32 0 16c0 6.1-3.4 11.6-8.8 14.3s-11.9 2.1-16.8-1.5L437.3 448 320 448zM184.3 70.3c-16.4 0-31 10.3-36.4 25.7l-.3 .9c-3 8.3 1.4 17.5 9.7 20.4s17.5-1.4 20.4-9.7l.3-.9c.9-2.7 3.5-4.4 6.3-4.4l41.3 0c6.5 0 11.7 5.3 11.7 11.7c0 4.2-2.2 8.1-5.9 10.2l-31.4 18c-5 2.9-8 8.1-8 13.9l0 9.5c0 8.8 7.2 16 16 16s16-7.2 16-16l0-.3L247.4 152c13.6-7.8 22-22.3 22-37.9c0-24.2-19.6-43.7-43.7-43.7l-41.3 0zM208 250.7a22.7 22.7 0 1 0 0-45.3 22.7 22.7 0 1 0 0 45.3z',
				),
				'description' => __( 'Create beautiful FAQ block with schema markup for SEO.', 'digiblocks' ),
			),
			'forms' => array(
				'title'       => __( 'Forms', 'digiblocks' ),
				'icon'        => array(
					'viewbox' => '512 512',
					'path'    => 'M511.6 36.9c1.9-12.1-3.4-24.3-13.5-31.2s-23.3-7.5-34-1.4l-448 256C5.5 266.3-.7 277.8 .1 290s8.4 22.9 19.6 27.6L160 376l0 93c0 23.8 19.3 43 43 43c13.1 0 25.4-5.9 33.6-16.1l52.8-66 .1 0 114.2 47.6c9.1 3.8 19.4 3.2 28-1.6s14.5-13.3 16-23l64-416zm-253 380.2l-47 58.8c-2.1 2.6-5.3 4.1-8.6 4.1c-6.1 0-11-4.9-11-11l0-79.7 66.6 27.8zm43.1-16.7l-96.6-40.3L474.1 70.5 416 448 301.8 400.4zM450.5 48.8L173.6 347 32 288 450.5 48.8z',
				),
				'description' => __( 'Create custom forms easily with a few clicks.', 'digiblocks' ),
			),
			'google-map' => array(
				'title'       => __( 'Google Map', 'digiblocks' ),
				'icon'        => array(
					'viewbox' => '384 512',
					'path'    => 'M352 192c0-88.4-71.6-160-160-160S32 103.6 32 192c0 15.6 5.4 37 16.6 63.4c10.9 25.9 26.2 54 43.6 82.1c34.1 55.3 74.4 108.2 99.9 140c25.4-31.8 65.8-84.7 99.9-140c17.3-28.1 32.7-56.3 43.6-82.1C346.6 229 352 207.6 352 192zm32 0c0 87.4-117 243-168.3 307.2c-12.3 15.3-35.1 15.3-47.4 0C117 435 0 279.4 0 192C0 86 86 0 192 0S384 86 384 192zm-240 0a48 48 0 1 0 96 0 48 48 0 1 0 -96 0zm48 80a80 80 0 1 1 0-160 80 80 0 1 1 0 160z',
				),
				'description' => __( 'Add a responsive Google Map with markers.', 'digiblocks' ),
			),
			'heading' => array(
				'title'       => __( 'Heading', 'digiblocks' ),
				'icon'        => array(
					'viewbox' => '448 512',
					'path'    => 'M0 48c0-8.8 7.2-16 16-16l64 0 64 0c8.8 0 16 7.2 16 16s-7.2 16-16 16L96 64l0 160 256 0 0-160-48 0c-8.8 0-16-7.2-16-16s7.2-16 16-16l64 0 64 0c8.8 0 16 7.2 16 16s-7.2 16-16 16l-48 0 0 176 0 208 48 0c8.8 0 16 7.2 16 16s-7.2 16-16 16l-128 0c-8.8 0-16-7.2-16-16s7.2-16 16-16l48 0 0-192L96 256l0 192 48 0c8.8 0 16 7.2 16 16s-7.2 16-16 16L16 480c-8.8 0-16-7.2-16-16s7.2-16 16-16l48 0 0-208L64 64 16 64C7.2 64 0 56.8 0 48z',
				),
				'description' => __( 'Create a beautiful heading with various styling options.', 'digiblocks' ),
			),
			'icon' => array(
				'title'       => __( 'Icon', 'digiblocks' ),
				'icon'        => array(
					'viewbox' => '384 512',
					'path'    => 'M310.3 258.1C326.5 234.8 336 206.6 336 176c0-79.5-64.5-144-144-144S48 96.5 48 176c0 30.6 9.5 58.8 25.7 82.1c4.1 5.9 8.8 12.3 13.6 19c0 0 0 0 0 0c12.7 17.5 27.1 37.2 38 57.1c8.9 16.2 13.7 33.3 16.2 49.9L109 384c-2.2-12-5.9-23.7-11.8-34.5c-9.9-18-22.2-34.9-34.5-51.8c0 0 0 0 0 0s0 0 0 0s0 0 0 0c-5.2-7.1-10.4-14.2-15.4-21.4C27.6 247.9 16 213.3 16 176C16 78.8 94.8 0 192 0s176 78.8 176 176c0 37.3-11.6 71.9-31.4 100.3c-5 7.2-10.2 14.3-15.4 21.4c0 0 0 0 0 0s0 0 0 0c-12.3 16.8-24.6 33.7-34.5 51.8c-5.9 10.8-9.6 22.5-11.8 34.5l-32.4 0c2.5-16.6 7.3-33.7 16.2-49.9c10.9-20 25.3-39.7 38-57.1c4.9-6.7 9.5-13 13.6-19zM192 96c-44.2 0-80 35.8-80 80c0 8.8-7.2 16-16 16s-16-7.2-16-16c0-61.9 50.1-112 112-112c8.8 0 16 7.2 16 16s-7.2 16-16 16zM146.7 448c6.6 18.6 24.4 32 45.3 32s38.7-13.4 45.3-32l-90.5 0zM112 432l0-5.3c0-5.9 4.8-10.7 10.7-10.7l138.7 0c5.9 0 10.7 4.8 10.7 10.7l0 5.3c0 44.2-35.8 80-80 80s-80-35.8-80-80z',
				),
				'description' => __( 'Add a customizable icon with various styling options.', 'digiblocks' ),
			),
			'icon-box' => array(
				'title'       => __( 'Icon Box', 'digiblocks' ),
				'icon'        => array(
					'viewbox' => '576 512',
					'path'    => 'M226.5 168.8L287.9 42.3l61.4 126.5c4.6 9.5 13.6 16.1 24.1 17.7l137.4 20.3-99.8 98.8c-7.4 7.3-10.8 17.8-9 28.1l23.5 139.5L303 407.7c-9.4-5-20.7-5-30.2 0L150.2 473.2l23.5-139.5c1.7-10.3-1.6-20.7-9-28.1L65 206.8l137.4-20.3c10.5-1.5 19.5-8.2 24.1-17.7zM424.9 509.1c8.1 4.3 17.9 3.7 25.3-1.7s11.2-14.5 9.7-23.5L433.6 328.4 544.8 218.2c6.5-6.4 8.7-15.9 5.9-24.5s-10.3-14.9-19.3-16.3L378.1 154.8 309.5 13.5C305.5 5.2 297.1 0 287.9 0s-17.6 5.2-21.6 13.5L197.7 154.8 44.5 177.5c-9 1.3-16.5 7.6-19.3 16.3s-.5 18.1 5.9 24.5L142.2 328.4 116 483.9c-1.5 9 2.2 18.1 9.7 23.5s17.3 6 25.3 1.7l137-73.2 137 73.2z',
				),
				'description' => __( 'Display an icon with title and text in a beautiful box layout.', 'digiblocks' ),
			),
			'icon-list' => array(
				'title'       => __( 'Icon List', 'digiblocks' ),
				'icon'        => array(
					'viewbox' => '512 512',
					'path'    => 'M48 112l0-32 32 0 0 32-32 0zM16 72l0 48c0 13.3 10.7 24 24 24l48 0c13.3 0 24-10.7 24-24l0-48c0-13.3-10.7-24-24-24L40 48C26.7 48 16 58.7 16 72zm160 8c-8.8 0-16 7.2-16 16s7.2 16 16 16l320 0c8.8 0 16-7.2 16-16s-7.2-16-16-16L176 80zm0 160c-8.8 0-16 7.2-16 16s7.2 16 16 16l320 0c8.8 0 16-7.2 16-16s-7.2-16-16-16l-320 0zm0 160c-8.8 0-16 7.2-16 16s7.2 16 16 16l320 0c8.8 0 16-7.2 16-16s-7.2-16-16-16l-320 0zM48 240l32 0 0 32-32 0 0-32zm-8-32c-13.3 0-24 10.7-24 24l0 48c0 13.3 10.7 24 24 24l48 0c13.3 0 24-10.7 24-24l0-48c0-13.3-10.7-24-24-24l-48 0zm8 224l0-32 32 0 0 32-32 0zM16 392l0 48c0 13.3 10.7 24 24 24l48 0c13.3 0 24-10.7 24-24l0-48c0-13.3-10.7-24-24-24l-48 0c-13.3 0-24 10.7-24 24z',
				),
				'description' => __( 'Display a list of items with custom icons.', 'digiblocks' ),
			),
			'image' => array(
				'title'       => __( 'Image', 'digiblocks' ),
				'icon'        => array(
					'viewbox' => '512 512',
					'path'    => 'M64 64C46.3 64 32 78.3 32 96l0 233.4 67.7-67.7c15.6-15.6 40.9-15.6 56.6 0L224 329.4 355.7 197.7c15.6-15.6 40.9-15.6 56.6 0L480 265.4 480 96c0-17.7-14.3-32-32-32L64 64zM32 374.6L32 416c0 17.7 14.3 32 32 32l41.4 0 96-96-67.7-67.7c-3.1-3.1-8.2-3.1-11.3 0L32 374.6zM389.7 220.3c-3.1-3.1-8.2-3.1-11.3 0L150.6 448 448 448c17.7 0 32-14.3 32-32l0-105.4-90.3-90.3zM0 96C0 60.7 28.7 32 64 32l384 0c35.3 0 64 28.7 64 64l0 320c0 35.3-28.7 64-64 64L64 480c-35.3 0-64-28.7-64-64L0 96zm160 48a16 16 0 1 0 -32 0 16 16 0 1 0 32 0zm-64 0a48 48 0 1 1 96 0 48 48 0 1 1 -96 0z',
				),
				'description' => __( 'Add responsive images with extensive styling options.', 'digiblocks' ),
			),
			'lottie' => array(
				'title'       => __( 'Lottie Animation', 'digiblocks' ),
				'icon'        => array(
					'viewbox' => '512 512',
					'path'    => 'M386.6624,0l12.8438,1.2874c55.1695,7.1603,100.6999,50.5056,110.7258,105.1334l1.7679,12.7729v273.6128l-1.3479,10.7353c-9.1948,55.0578-53.8233,99.0128-109.1071,107.1617l-10.377,1.2966H121.6512l-13.183-1.7674C49.715,499.884,6.029,451.5781.8231,392.1881c-.1712-1.953.5269-4.2986-.8231-5.9353V126.1568c1.3884-1.7501.6379-4.262.8233-6.3447C6.6279,54.5972,59.4634,2.93,125.1657.4265l.9911-.4265h260.5056ZM122.3859,25.9251c-50.0778,3.1809-93.1008,46.2036-96.191,96.321l.0026,268.3244c3.7841,51.0997,47.2896,93.5872,98.5299,96.0301h263.3644c53.0086-2.4162,97.6399-47.8651,98.9184-100.9664V126.7754c-1.0198-52.4937-45.6513-98.4885-98.0755-100.9901l-266.5488.1399ZM218.3877,280.0325c-16.8532,29.5562-34.8947,53.998-71.5496,57.4744-7.9794.7568-14.4657-.6898-21.7745,3.6207-12.0478,7.1054-14.5991,23.747-5.4711,34.2815,7.7087,8.8964,18.0707,8.4068,28.8833,7.5628,83.1748-6.493,106.6089-76.9458,140.8978-139.6782,17.8327-32.6253,35.5831-64.117,76.6071-68.3913,8.4121-.8765,15.1545.8325,22.8535-3.7705,14.1851-8.4808,14.4963-29.6045.5017-38.4326-6.5701-4.1445-12.4475-3.8956-19.961-3.5547-90.5816,4.1094-113.3086,84.8091-150.9872,150.888Z',
				),
				'description' => __( 'Add beautiful Lottie animations to your content.', 'digiblocks' ),
			),
			'newsletter' => array(
				'title'       => __( 'Newsletter', 'digiblocks' ),
				'icon'        => array(
					'viewbox' => '576 512',
					'path'    => 'M32 208l0 176c0 17.7 14.3 32 32 32l160 0c17.7 0 32-14.3 32-32l0-176c0-61.9-50.1-112-112-112S32 146.1 32 208zm256 0l0 176c0 11.7-3.1 22.6-8.6 32L512 416c17.7 0 32-14.3 32-32l0-176c0-61.9-50.1-112-112-112L234.5 96c32.6 26.4 53.5 66.8 53.5 112zM64 448c-35.3 0-64-28.7-64-64L0 208C0 128.5 64.5 64 144 64l288 0c79.5 0 144 64.5 144 144l0 176c0 35.3-28.7 64-64 64l-288 0L64 448zm48-256l64 0c8.8 0 16 7.2 16 16s-7.2 16-16 16l-64 0c-8.8 0-16-7.2-16-16s7.2-16 16-16zm224 0l96 0 56 0c13.3 0 24 10.7 24 24l0 80c0 13.3-10.7 24-24 24l-48 0c-13.3 0-24-10.7-24-24l0-72-80 0c-8.8 0-16-7.2-16-16s7.2-16 16-16zm112 96l32 0 0-64-32 0 0 64z',
				),
				'description' => __( 'Add a newsletter subscription form.', 'digiblocks' ),
			),
			'posts' => array(
				'title'       => __( 'Posts', 'digiblocks' ),
				'icon'        => array(
					'viewbox' => '512 512',
					'path'    => 'M80 64c-8.8 0-16 7.2-16 16l0 96c0 8.8 7.2 16 16 16l96 0c8.8 0 16-7.2 16-16l0-96c0-8.8-7.2-16-16-16L80 64zM32 80c0-26.5 21.5-48 48-48l96 0c26.5 0 48 21.5 48 48l0 96c0 26.5-21.5 48-48 48l-96 0c-26.5 0-48-21.5-48-48l0-96zM80 320c-8.8 0-16 7.2-16 16l0 96c0 8.8 7.2 16 16 16l96 0c8.8 0 16-7.2 16-16l0-96c0-8.8-7.2-16-16-16l-96 0zM32 336c0-26.5 21.5-48 48-48l96 0c26.5 0 48 21.5 48 48l0 96c0 26.5-21.5 48-48 48l-96 0c-26.5 0-48-21.5-48-48l0-96zM432 64l-96 0c-8.8 0-16 7.2-16 16l0 96c0 8.8 7.2 16 16 16l96 0c8.8 0 16-7.2 16-16l0-96c0-8.8-7.2-16-16-16zM336 32l96 0c26.5 0 48 21.5 48 48l0 96c0 26.5-21.5 48-48 48l-96 0c-26.5 0-48-21.5-48-48l0-96c0-26.5 21.5-48 48-48zm0 288c-8.8 0-16 7.2-16 16l0 96c0 8.8 7.2 16 16 16l96 0c8.8 0 16-7.2 16-16l0-96c0-8.8-7.2-16-16-16l-96 0zm-48 16c0-26.5 21.5-48 48-48l96 0c26.5 0 48 21.5 48 48l0 96c0 26.5-21.5 48-48 48l-96 0c-26.5 0-48-21.5-48-48l0-96z',
				),
				'description' => __( 'Display your WordPress posts in beautiful grid and list layouts.', 'digiblocks' ),
			),
			'pricing-table' => array(
				'title'       => __( 'Pricing Table', 'digiblocks' ),
				'icon'        => array(
					'viewbox' => '320 512',
					'path'    => 'M176 16c0-8.8-7.2-16-16-16s-16 7.2-16 16l0 47.5c-6.3 .1-12.6 .3-18.8 .9c-24 2-47.9 7.8-67.4 20.6C37.7 98.1 23.2 118 17.9 146c-3.8 20.3-1.9 38.2 5.7 53.7C31 215 43.1 226.5 57.1 235.4c26.7 17 63.6 26.7 97.2 35.5l1.7 .4c35.7 9.4 67.8 17.9 89.8 31.9c10.6 6.8 17.8 14.2 21.9 22.6c4 8.3 5.8 19 3 33.8c-3.9 20.7-18.4 36.4-42.9 46c-24.9 9.8-59.1 12.6-98 7c-24.4-3.6-61-12.1-91.3-25.2c-8.1-3.5-17.5 .2-21 8.4s.2 17.5 8.4 21c33.6 14.5 73.1 23.5 99.3 27.4c0 0 .1 0 .1 0c6.4 .9 12.7 1.6 18.9 2.1l0 49.5c0 8.8 7.2 16 16 16s16-7.2 16-16l0-48.6c23.2-.7 44.8-4.7 63.4-11.9c32-12.5 56.2-35.7 62.7-69.9c3.8-20.3 1.9-38.2-5.7-53.7c-7.4-15.3-19.6-26.8-33.5-35.6c-26.7-17-63.6-26.7-97.2-35.5l-1.7-.4c-35.7-9.4-67.8-17.9-89.8-31.9c-10.6-6.8-17.8-14.2-21.9-22.6c-4-8.3-5.8-19-3-33.8c3.6-19.3 13.1-31.8 26-40.2c13.4-8.8 31.5-13.7 52.6-15.5c42.3-3.5 91.3 6 124.3 14c8.6 2.1 17.2-3.2 19.3-11.8s-3.2-17.2-11.8-19.3c-21.9-5.3-52.1-11.7-83.8-14.4L176 16z',
				),
				'description' => __( 'Create beautiful pricing tables with multiple plans and features.', 'digiblocks' ),
			),
			'separator' => array(
				'title'       => __( 'Separator', 'digiblocks' ),
				'icon'        => array(
					'viewbox' => '448 512',
					'path'    => 'M235.3 4.7c-3-3-7.1-4.7-11.3-4.7s-8.3 1.7-11.3 4.7l-80 80c-6.2 6.2-6.2 16.4 0 22.6s16.4 6.2 22.6 0L208 54.6 208 176c0 8.8 7.2 16 16 16s16-7.2 16-16l0-121.4 52.7 52.7c6.2 6.2 16.4 6.2 22.6 0s6.2-16.4 0-22.6l-80-80zM0 256c0 8.8 7.2 16 16 16l416 0c8.8 0 16-7.2 16-16s-7.2-16-16-16L16 240c-8.8 0-16 7.2-16 16zM224 512c4.2 0 8.3-1.7 11.3-4.7l80-80c6.2-6.2 6.2-16.4 0-22.6s-16.4-6.2-22.6 0L240 457.4 240 336c0-8.8-7.2-16-16-16s-16 7.2-16 16l0 121.4-52.7-52.7c-6.2-6.2-16.4-6.2-22.6 0s-6.2 16.4 0 22.6l80 80c3 3 7.1 4.7 11.3 4.7z',
				),
				'description' => __( 'Add a separator with various styles, text, and icon options.', 'digiblocks' ),
			),
			'social-icons' => array(
				'title'       => __( 'Social Icons', 'digiblocks' ),
				'icon'        => array(
					'viewbox' => '448 512',
					'path'    => 'M448 112c0 44.2-35.8 80-80 80c-22.9 0-43.6-9.6-58.1-25l-151 75.5c.8 4.4 1.1 8.9 1.1 13.5s-.4 9.1-1.1 13.5l151 75.5c14.6-15.4 35.2-25 58.1-25c44.2 0 80 35.8 80 80s-35.8 80-80 80s-80-35.8-80-80c0-9.7 1.7-19 4.9-27.7L147.2 299.5c-14.3 22-39 36.5-67.2 36.5c-44.2 0-80-35.8-80-80s35.8-80 80-80c28.2 0 52.9 14.5 67.2 36.5l145.7-72.9c-3.2-8.6-4.9-17.9-4.9-27.7c0-44.2 35.8-80 80-80s80 35.8 80 80zM80 304a48 48 0 1 0 0-96 48 48 0 1 0 0 96zM416 112a48 48 0 1 0 -96 0 48 48 0 1 0 96 0zM368 448a48 48 0 1 0 0-96 48 48 0 1 0 0 96z',
				),
				'description' => __( 'Add social media links with beautiful icons.', 'digiblocks' ),
			),
			'spacer' => array(
				'title'       => __( 'Spacer', 'digiblocks' ),
				'icon'        => array(
					'viewbox' => '512 512',
					'path'    => 'M512 464c0-8.8-7.2-16-16-16L16 448c-8.8 0-16 7.2-16 16s7.2 16 16 16l480 0c8.8 0 16-7.2 16-16zM144 320c-8.8 0-16-7.2-16-16l0-96c0-8.8 7.2-16 16-16l224 0c8.8 0 16 7.2 16 16l0 96c0 8.8-7.2 16-16 16l-224 0zm224 32c26.5 0 48-21.5 48-48l0-96c0-26.5-21.5-48-48-48l-224 0c-26.5 0-48 21.5-48 48l0 96c0 26.5 21.5 48 48 48l224 0zM496 64c8.8 0 16-7.2 16-16s-7.2-16-16-16L16 32C7.2 32 0 39.2 0 48s7.2 16 16 16l480 0z',
				),
				'description' => __( 'Add vertical space between blocks with adjustable height.', 'digiblocks' ),
			),
			'table' => array(
				'title'       => __( 'Table', 'digiblocks' ),
				'icon'        => array(
					'viewbox' => '512 512',
					'path'    => 'M64 64C46.3 64 32 78.3 32 96l0 64 448 0 0-64c0-17.7-14.3-32-32-32L64 64zM32 192l0 112 208 0 0-112L32 192zm240 0l0 112 208 0 0-112-208 0zM240 336L32 336l0 80c0 17.7 14.3 32 32 32l176 0 0-112zm32 112l176 0c17.7 0 32-14.3 32-32l0-80-208 0 0 112zM0 96C0 60.7 28.7 32 64 32l384 0c35.3 0 64 28.7 64 64l0 320c0 35.3-28.7 64-64 64L64 480c-35.3 0-64-28.7-64-64L0 96z',
				),
				'description' => __( 'Build responsive comparison and data tables with ease.', 'digiblocks' ),
			),
			'team' => array(
				'title'       => __( 'Team', 'digiblocks' ),
				'icon'        => array(
					'viewbox' => '640 512',
					'path'    => 'M128 64a24 24 0 1 1 0 48 24 24 0 1 1 0-48zm0 80a56 56 0 1 0 0-112 56 56 0 1 0 0 112zM0 280c0 43.3 26.4 80.4 64 96l0 48c0 13.3 10.7 24 24 24l80 0c13.3 0 24-10.7 24-24l0-40c0-8.8-7.2-16-16-16s-16 7.2-16 16l0 32-64 0 0-207.6c2.6-.3 5.3-.4 8-.4l48 0c9.3 0 18.1 1.7 26.2 4.9c8.2 3.2 17.5-.9 20.7-9.1s-.9-17.5-9.1-20.7c-11.7-4.6-24.5-7.1-37.8-7.1l-48 0C46.6 176 0 222.6 0 280zm64 59.9C44.7 327 32 304.9 32 280c0-25 12.7-47 32-59.9l0 119.8zM512 64a24 24 0 1 1 0 48 24 24 0 1 1 0-48zm0 80a56 56 0 1 0 0-112 56 56 0 1 0 0 112zM640 280c0-57.4-46.6-104-104-104l-48 0c-13.3 0-26.1 2.5-37.8 7.1c-8.2 3.2-12.3 12.5-9.1 20.7s12.5 12.3 20.7 9.1c8.1-3.2 16.9-4.9 26.2-4.9l48 0c2.7 0 5.4 .1 8 .4L544 416l-64 0 0-32c0-8.8-7.2-16-16-16s-16 7.2-16 16l0 40c0 13.3 10.7 24 24 24l80 0c13.3 0 24-10.7 24-24l0-48c37.6-15.7 64-52.7 64-96zm-64 59.9l0-119.8C595.3 233 608 255 608 280c0 24.9-12.7 47-32 59.9zM288 96a32 32 0 1 1 64 0 32 32 0 1 1 -64 0zm96 0A64 64 0 1 0 256 96a64 64 0 1 0 128 0zm-80 96c-57.4 0-104 46.6-104 104c0 40.1 22.7 74.9 56 92.3l0 67.7c0 13.3 10.7 24 24 24l80 0c13.3 0 24-10.7 24-24l0-67.7c33.3-17.3 56-52.1 56-92.3c0-57.4-46.6-104-104-104l-32 0zm-48 50.3l0 107.3c-14.7-13.2-24-32.4-24-53.7c0-21.3 9.3-40.5 24-53.7zM288 448l0-222.2c5.1-1.2 10.5-1.8 16-1.8l32 0c5.5 0 10.9 .6 16 1.8L352 448l-64 0zm96-98.3l0-107.3c14.7 13.2 24 32.3 24 53.7c0 21.3-9.3 40.5-24 53.7z',
				),
				'description' => __( 'Display your team members in various layouts.', 'digiblocks' ),
			),
			'testimonials' => array(
				'title'       => __( 'Testimonials', 'digiblocks' ),
				'icon'        => array(
					'viewbox' => '512 512',
					'path'    => 'M32 240c0-91.4 93.8-176 224-176s224 84.6 224 176s-93.8 176-224 176c-32 0-63-5.9-93.5-16.2c-9.9-3.3-20.7-1.8-29.2 4.2c-15.4 10.7-31.4 20-48.4 27.4L91.2 446l-6.4-14.7c-10.5 4.6-21.5 8.6-32.7 11.5c.5-.9 1.1-1.8 1.6-2.6C68 416.5 76.3 391 79.4 363.9c1-9.2-2.1-17.7-7.4-23.9c-24.5-29.4-40-62.9-40-100zM256 32C114.5 32 0 125.2 0 240c0 46.6 19.6 87.1 47.4 120.5c0 .1 .1 .1 .1 .2c-2.6 22.6-9.5 43.5-21.3 63.1c-6.5 10.8-13.5 20.8-21.7 29c-4.5 4.6-5.9 11.5-3.4 17.4s8.3 9.8 14.8 9.8c28.7 0 57.6-8.9 81.6-19.3c19.2-8.4 37.1-18.7 53.9-30.5c.2-.1 .5-.2 .7-.1C185.5 441.3 220 448 256 448c141.5 0 256-93.2 256-208S397.5 32 256 32zM208 176l0 24 0 24-48 0 0-48 48 0zm-48 80l48 0c-.9 21.2-15.6 39.4-36.3 44.6l-15.5 3.9c-8.6 2.1-13.8 10.8-11.6 19.4s10.8 13.8 19.4 11.6l15.5-3.9C215 322.7 240 290.7 240 254l0-30 0-24 0-24c0-17.7-14.3-32-32-32l-48 0c-17.7 0-32 14.3-32 32l0 48c0 17.7 14.3 32 32 32zm144-80l48 0 0 24 0 24-48 0 0-48zm48 80c-.9 21.2-15.6 39.4-36.3 44.6l-15.5 3.9c-8.6 2.1-13.8 10.8-11.6 19.4s10.8 13.8 19.4 11.6l15.5-3.9C359 322.7 384 290.7 384 254l0-30 0-24 0-24c0-17.7-14.3-32-32-32l-48 0c-17.7 0-32 14.3-32 32l0 48c0 17.7 14.3 32 32 32l48 0z',
				),
				'description' => __( 'Display customer testimonials in beautiful layouts.', 'digiblocks' ),
			),
			/**
			 * Digiblocks Theme
			 */
			'logo' => array(
				'title'       => __( 'Logo', 'digiblocks' ),
				'icon'        => array(
					'viewbox' => '576 512',
					'path'    => 'M117.2 136C160.3 96 217.6 64 288 64s127.7 32 170.8 72c43.1 40 71.9 88 85.2 120c-13.3 32-42.1 80-85.2 120c-43.1 40-100.4 72-170.8 72s-127.7-32-170.8-72C74.1 336 45.3 288 32 256c13.3-32 42.1-80 85.2-120zM288 32c-80.8 0-145.5 36.8-192.6 80.6C48.6 156 17.3 208 2.5 243.7c-3.3 7.9-3.3 16.7 0 24.6C17.3 304 48.6 356 95.4 399.4C142.5 443.2 207.2 480 288 480s145.5-36.8 192.6-80.6c46.8-43.5 78.1-95.4 93-131.1c3.3-7.9 3.3-16.7 0-24.6c-14.9-35.7-46.2-87.7-93-131.1C433.5 68.8 368.8 32 288 32zM192 256a96 96 0 1 1 192 0 96 96 0 1 1 -192 0zm224 0a128 128 0 1 0 -256 0 128 128 0 1 0 256 0z',
				),
				'description' => __( 'Add a customizable logo for your website header or footer.', 'digiblocks' ),
			),
			'navigation' => array(
				'title'       => __( 'Navigation', 'digiblocks' ),
				'icon'        => array(
					'viewbox' => '448 512',
					'path'    => 'M0 80c0-8.8 7.2-16 16-16l416 0c8.8 0 16 7.2 16 16s-7.2 16-16 16L16 96C7.2 96 0 88.8 0 80zM0 240c0-8.8 7.2-16 16-16l416 0c8.8 0 16 7.2 16 16s-7.2 16-16 16L16 256c-8.8 0-16-7.2-16-16zM448 400c0 8.8-7.2 16-16 16L16 416c-8.8 0-16-7.2-16-16s7.2-16 16-16l416 0c8.8 0 16 7.2 16 16z',
				),
				'description' => __( 'Add a responsive navigation menu with custom or WordPress menus.', 'digiblocks' ),
			),
			'login-link' => array(
				'title'       => __( 'Login Link', 'digiblocks' ),
				'icon'        => array(
					'viewbox' => '512 512',
					'path'    => 'M347.3 267.3c6.2-6.2 6.2-16.4 0-22.6l-128-128c-6.2-6.2-16.4-6.2-22.6 0s-6.2 16.4 0 22.6L297.4 240 16 240c-8.8 0-16 7.2-16 16s7.2 16 16 16l281.4 0L196.7 372.7c-6.2 6.2-6.2 16.4 0 22.6s16.4 6.2 22.6 0l128-128zM336 448c-8.8 0-16 7.2-16 16s7.2 16 16 16l96 0c44.2 0 80-35.8 80-80l0-288c0-44.2-35.8-80-80-80l-96 0c-8.8 0-16 7.2-16 16s7.2 16 16 16l96 0c26.5 0 48 21.5 48 48l0 288c0 26.5-21.5 48-48 48l-96 0z',
				),
				'description' => __( 'Add a customizable login/account link for your header.', 'digiblocks' ),
			),
			'page-title' => array(
				'title'       => __( 'Page Title', 'digiblocks' ),
				'icon'        => array(
					'viewbox' => '448 512',
					'path'    => 'M0 48c0-8.8 7.2-16 16-16l64 0 64 0c8.8 0 16 7.2 16 16s-7.2 16-16 16L96 64l0 160 256 0 0-160-48 0c-8.8 0-16-7.2-16-16s7.2-16 16-16l64 0 64 0c8.8 0 16 7.2 16 16s-7.2 16-16 16l-48 0 0 176 0 208 48 0c8.8 0 16 7.2 16 16s-7.2 16-16 16l-128 0c-8.8 0-16-7.2-16-16s7.2-16 16-16l48 0 0-192L96 256l0 192 48 0c8.8 0 16 7.2 16 16s-7.2 16-16 16L16 480c-8.8 0-16-7.2-16-16s7.2-16 16-16l48 0 0-208L64 64 16 64C7.2 64 0 56.8 0 48z',
				),
				'description' => __( 'Display the title of the current page or post.', 'digiblocks' ),
			),
			'breadcrumbs' => array(
				'title'       => __( 'Breadcrumbs', 'digiblocks' ),
				'icon'        => array(
					'viewbox' => '320 512',
					'path'    => 'M267.3 244.7c6.2 6.2 6.2 16.4 0 22.6l-160 160c-6.2 6.2-16.4 6.2-22.6 0s-6.2-16.4 0-22.6L233.4 256 84.7 107.3c-6.2-6.2-6.2-16.4 0-22.6s16.4-6.2 22.6 0l160 160z',
				),
				'description' => __( 'Show navigation path.', 'digiblocks' ),
			),
			'featured-image' => array(
				'title'       => __( 'Featured Image', 'digiblocks' ),
				'icon'        => array(
					'viewbox' => '576 512',
					'path'    => 'M160 64l352 0c17.7 0 32 14.3 32 32l0 105.4L486.6 144c-12.5-12.5-32.8-12.5-45.3 0L304 281.4 230.6 208c-12.5-12.5-32.8-12.5-45.3 0L128 265.4 128 96c0-17.7 14.3-32 32-32zM576 96c0-35.3-28.7-64-64-64L160 32c-35.3 0-64 28.7-64 64l0 208 0 16c0 35.3 28.7 64 64 64l80 0c0 0 0 0 0 0l272 0c35.3 0 64-28.7 64-64l0-80c0 0 0 0 0-.1l0-144zM464 166.6l80 80 0 73.4c0 17.7-14.3 32-32 32l-233.4 0 36.7-36.7L464 166.6zM281.4 304l-48 48L160 352c-17.7 0-32-14.3-32-32l0-9.4 80-80L281.4 304zM32 112c0-8.8-7.2-16-16-16s-16 7.2-16 16L0 352c0 70.7 57.3 128 128 128l336 0c8.8 0 16-7.2 16-16s-7.2-16-16-16l-336 0c-53 0-96-43-96-96l0-240zm232 48a24 24 0 1 0 0-48 24 24 0 1 0 0 48z',
				),
				'description' => __( 'Display the featured image of the current post.', 'digiblocks' ),
			),
			'post-meta' => array(
				'title'       => __( 'Post Meta', 'digiblocks' ),
				'icon'        => array(
					'viewbox' => '448 512',
					'path'    => 'M320 128a96 96 0 1 0 -192 0 96 96 0 1 0 192 0zM96 128a128 128 0 1 1 256 0A128 128 0 1 1 96 128zM32 480l384 0c-1.2-79.7-66.2-144-146.3-144l-91.4 0c-80 0-145 64.3-146.3 144zM0 482.3C0 383.8 79.8 304 178.3 304l91.4 0C368.2 304 448 383.8 448 482.3c0 16.4-13.3 29.7-29.7 29.7L29.7 512C13.3 512 0 498.7 0 482.3z',
				),
				'description' => __( 'Display the main content of the current post or page.', 'digiblocks' ),
			),
			'post-content' => array(
				'title'       => __( 'Post Content', 'digiblocks' ),
				'icon'        => array(
					'viewbox' => '512 512',
					'path'    => 'M160 64c-17.7 0-32 14.3-32 32l0 320c0 11.7-3.1 22.6-8.6 32L432 448c26.5 0 48-21.5 48-48l0-304c0-17.7-14.3-32-32-32L160 64zM64 480c-35.3 0-64-28.7-64-64L0 160c0-35.3 28.7-64 64-64l0 32c-17.7 0-32 14.3-32 32l0 256c0 17.7 14.3 32 32 32s32-14.3 32-32L96 96c0-35.3 28.7-64 64-64l288 0c35.3 0 64 28.7 64 64l0 304c0 44.2-35.8 80-80 80L64 480zM384 112c0-8.8 7.2-16 16-16l32 0c8.8 0 16 7.2 16 16s-7.2 16-16 16l-32 0c-8.8 0-16-7.2-16-16zm0 64c0-8.8 7.2-16 16-16l32 0c8.8 0 16 7.2 16 16s-7.2 16-16 16l-32 0c-8.8 0-16-7.2-16-16zm0 64c0-8.8 7.2-16 16-16l32 0c8.8 0 16 7.2 16 16s-7.2 16-16 16l-32 0c-8.8 0-16-7.2-16-16zM160 304c0-8.8 7.2-16 16-16l256 0c8.8 0 16 7.2 16 16s-7.2 16-16 16l-256 0c-8.8 0-16-7.2-16-16zm0 64c0-8.8 7.2-16 16-16l256 0c8.8 0 16 7.2 16 16s-7.2 16-16 16l-256 0c-8.8 0-16-7.2-16-16zm32-144l128 0 0-96-128 0 0 96zM160 120c0-13.3 10.7-24 24-24l144 0c13.3 0 24 10.7 24 24l0 112c0 13.3-10.7 24-24 24l-144 0c-13.3 0-24-10.7-24-24l0-112z',
				),
				'description' => __( 'Display post metadata like author, date, categories, and tags.', 'digiblocks' ),
			),
			'post-navigation' => array(
				'title'       => __( 'Post Navigation', 'digiblocks' ),
				'icon'        => array(
					'viewbox' => '448 512',
					'path'    => 'M443.3 267.3c6.2-6.2 6.2-16.4 0-22.6l-176-176c-6.2-6.2-16.4-6.2-22.6 0s-6.2 16.4 0 22.6L393.4 240 16 240c-8.8 0-16 7.2-16 16s7.2 16 16 16l377.4 0L244.7 420.7c-6.2 6.2-6.2 16.4 0 22.6s16.4 6.2 22.6 0l176-176z',
				),
				'description' => __( 'Add previous/next post navigation links to single posts.', 'digiblocks' ),
			),
			'social-share' => array(
				'title'       => __( 'Social Share', 'digiblocks' ),
				'icon'        => array(
					'viewbox' => '512 512',
					'path'    => 'M296 160c13.3 0 24-10.7 24-24l0-8 0-16 0-48L480 208 320 352l0-48 0-16 0-8c0-13.3-10.7-24-24-24l-8 0-96 0c-70.7 0-128 57.3-128 128c0 8.3 .7 16.1 2 23.2C47.9 383.7 32 350.1 32 304c0-79.5 64.5-144 144-144l112 0 8 0zm-8 144l0 16 0 32c0 12.6 7.4 24.1 19 29.2s25 3 34.4-5.4l160-144c6.7-6.1 10.6-14.7 10.6-23.8s-3.8-17.7-10.6-23.8l-160-144c-9.4-8.5-22.9-10.6-34.4-5.4s-19 16.6-19 29.2l0 32 0 16 0 16-32 0-80 0C78.8 128 0 206.8 0 304C0 417.3 81.5 467.9 100.2 478.1c2.5 1.4 5.3 1.9 8.1 1.9c10.9 0 19.7-8.9 19.7-19.7c0-7.5-4.3-14.4-9.8-19.5C108.8 431.9 96 414.4 96 384c0-53 43-96 96-96l64 0 32 0 0 16z',
				),
				'description' => __( 'Add social sharing buttons for various platforms.', 'digiblocks' ),
			),
			'table-of-contents' => array(
				'title'       => __( 'Table of Contents', 'digiblocks' ),
				'icon'        => array(
					'viewbox' => '512 512',
					'path'    => 'M64 64a32 32 0 1 0 0 64 32 32 0 1 0 0-64zM176 80c-8.8 0-16 7.2-16 16s7.2 16 16 16l320 0c8.8 0 16-7.2 16-16s-7.2-16-16-16L176 80zm0 160c-8.8 0-16 7.2-16 16s7.2 16 16 16l320 0c8.8 0 16-7.2 16-16s-7.2-16-16-16l-320 0zm0 160c-8.8 0-16 7.2-16 16s7.2 16 16 16l320 0c8.8 0 16-7.2 16-16s-7.2-16-16-16l-320 0zM96 256a32 32 0 1 0 -64 0 32 32 0 1 0 64 0zM64 384a32 32 0 1 0 0 64 32 32 0 1 0 0-64z',
				),
				'description' => __( 'Auto-generate a table of contents from page headings.', 'digiblocks' ),
			),
			'author-box' => array(
				'title'       => __( 'Author Box', 'digiblocks' ),
				'icon'        => array(
					'viewbox' => '576 512',
					'path'    => 'M512 64c17.7 0 32 14.3 32 32l0 320c0 17.7-14.3 32-32 32L64 448c-17.7 0-32-14.3-32-32L32 96c0-17.7 14.3-32 32-32l448 0zM64 32C28.7 32 0 60.7 0 96L0 416c0 35.3 28.7 64 64 64l448 0c35.3 0 64-28.7 64-64l0-320c0-35.3-28.7-64-64-64L64 32zm96 160a32 32 0 1 1 64 0 32 32 0 1 1 -64 0zm96 0a64 64 0 1 0 -128 0 64 64 0 1 0 128 0zM112 368c0-26.5 21.5-48 48-48l64 0c26.5 0 48 21.5 48 48c0 8.8 7.2 16 16 16s16-7.2 16-16c0-44.2-35.8-80-80-80l-64 0c-44.2 0-80 35.8-80 80c0 8.8 7.2 16 16 16s16-7.2 16-16zM352 160c-8.8 0-16 7.2-16 16s7.2 16 16 16l128 0c8.8 0 16-7.2 16-16s-7.2-16-16-16l-128 0zm0 64c-8.8 0-16 7.2-16 16s7.2 16 16 16l128 0c8.8 0 16-7.2 16-16s-7.2-16-16-16l-128 0zm0 64c-8.8 0-16 7.2-16 16s7.2 16 16 16l128 0c8.8 0 16-7.2 16-16s-7.2-16-16-16l-128 0z',
				),
				'description' => __( 'Display author information, bio, avatar and social icons.', 'digiblocks' ),
			),
			'related-posts' => array(
				'title'       => __( 'Related Posts', 'digiblocks' ),
				'icon'        => array(
					'viewbox' => '512 512',
					'path'    => 'M336 0c-8.8 0-16 7.2-16 16s7.2 16 16 16l121.4 0L212.7 276.7c-6.2 6.2-6.2 16.4 0 22.6s16.4 6.2 22.6 0L480 54.6 480 176c0 8.8 7.2 16 16 16s16-7.2 16-16l0-160c0-8.8-7.2-16-16-16L336 0zM64 32C28.7 32 0 60.7 0 96L0 448c0 35.3 28.7 64 64 64l352 0c35.3 0 64-28.7 64-64l0-144c0-8.8-7.2-16-16-16s-16 7.2-16 16l0 144c0 17.7-14.3 32-32 32L64 480c-17.7 0-32-14.3-32-32L32 96c0-17.7 14.3-32 32-32l144 0c8.8 0 16-7.2 16-16s-7.2-16-16-16L64 32z',
				),
				'description' => __( 'Display posts related to the current post.', 'digiblocks' ),
			),
			'post-comments' => array(
				'title'       => __( 'Post Comments', 'digiblocks' ),
				'icon'        => array(
					'viewbox' => '512 512',
					'path'    => 'M256 64C125.8 64 32 148.6 32 240c0 37.1 15.5 70.6 40 100c5.2 6.3 8.4 14.8 7.4 23.9c-3.1 27-11.4 52.5-25.7 76.3c-.5 .9-1.1 1.8-1.6 2.6c11.1-2.9 22.2-7 32.7-11.5L91.2 446l-6.4-14.7c17-7.4 33-16.7 48.4-27.4c8.5-5.9 19.4-7.5 29.2-4.2C193 410.1 224.1 416 256 416c130.2 0 224-84.6 224-176s-93.8-176-224-176zM0 240C0 125.2 114.5 32 256 32s256 93.2 256 208s-114.5 208-256 208c-36 0-70.5-6.7-103.8-17.9c-.2-.1-.5 0-.7 .1c-16.9 11.7-34.7 22.1-53.9 30.5C73.6 471.1 44.7 480 16 480c-6.5 0-12.3-3.9-14.8-9.8s-1.1-12.8 3.4-17.4c8.1-8.2 15.2-18.2 21.7-29c11.7-19.6 18.7-40.6 21.3-63.1c0 0-.1-.1-.1-.2C19.6 327.1 0 286.6 0 240z',
				),
				'description' => __( 'Display and customize the comments section.', 'digiblocks' ),
			),
			'copyright' => array(
				'title'       => __( 'Copyright', 'digiblocks' ),
				'icon'        => array(
					'viewbox' => '512 512',
					'path'    => 'M256 32a224 224 0 1 1 0 448 224 224 0 1 1 0-448zm0 480A256 256 0 1 0 256 0a256 256 0 1 0 0 512zm67.9-188.1c-37.5 37.5-98.3 37.5-135.8 0s-37.5-98.3 0-135.8s98.3-37.5 135.8 0c6.2 6.2 16.4 6.2 22.6 0s6.2-16.4 0-22.6c-50-50-131-50-181 0s-50 131 0 181s131 50 181 0c6.2-6.2 6.2-16.4 0-22.6s-16.4-6.2-22.6 0z',
				),
				'description' => __( 'Display copyright text with dynamic year, site name and site URL.', 'digiblocks' ),
			),
		);

		// Conditionally add DigiCommerce blocks if DigiCommerce is active
		if ( class_exists( 'DigiCommerce' ) ) {
			$blocks_data['digi-products'] = array(
				'title'       => __('Digi Products', 'digiblocks'),
				'icon'        => array(
					'viewbox' => '640 512',
					'path'    => 'M64 16C64 7.2 71.2 0 80 0l37.9 0c20.6 0 38.6 13 45.3 32l440.4 0c20.8 0 36.1 19.6 31 39.8L592.6 239.5C585.5 268 559.9 288 530.5 288L216 288l7.9 38.4c3 14.9 16.1 25.6 31.4 25.6L560 352c8.8 0 16 7.2 16 16s-7.2 16-16 16l-304.8 0c-30.4 0-56.6-21.4-62.7-51.2l-58.9-288C132 37.3 125.5 32 117.9 32L80 32c-8.8 0-16-7.2-16-16zM530.5 256c14.7 0 27.5-10 31-24.2L603.5 64 170.1 64l39.3 192 321.1 0zM256 480a24 24 0 1 0 0-48 24 24 0 1 0 0 48zm0-80a56 56 0 1 1 0 112 56 56 0 1 1 0-112zm280 56a24 24 0 1 0 -48 0 24 24 0 1 0 48 0zm-80 0a56 56 0 1 1 112 0 56 56 0 1 1 -112 0zM16 128l96 0c8.8 0 16 7.2 16 16s-7.2 16-16 16l-96 0c-8.8 0-16-7.2-16-16s7.2-16 16-16zm0 64l112 0c8.8 0 16 7.2 16 16s-7.2 16-16 16L16 224c-8.8 0-16-7.2-16-16s7.2-16 16-16zm0 64l128 0c8.8 0 16 7.2 16 16s-7.2 16-16 16L16 288c-8.8 0-16-7.2-16-16s7.2-16 16-16z',
				),
				'description' => __('Display your DigiCommerce products in a beautiful way.', 'digiblocks'),
			);
		}

		// Conditionally add WooCommerce products block if WooCommerce is active
		if ( class_exists( 'WooCommerce' ) ) {
			$blocks_data['woo-products'] = array(
				'title'       => __('Woo Products', 'digiblocks'),
				'icon'        => array(
					'viewbox' => '576 512',
					'path'    => 'M16 0C7.2 0 0 7.2 0 16s7.2 16 16 16l37.9 0c7.6 0 14.2 5.3 15.7 12.8l58.9 288c6.1 29.8 32.3 51.2 62.7 51.2L496 384c8.8 0 16-7.2 16-16s-7.2-16-16-16l-304.8 0c-15.2 0-28.3-10.7-31.4-25.6L152 288l314.6 0c29.4 0 55-20 62.1-48.5L570.6 71.8c5-20.2-10.2-39.8-31-39.8L99.1 32C92.5 13 74.4 0 53.9 0L16 0zm90.1 64l433.4 0L497.6 231.8C494 246 481.2 256 466.5 256l-321.1 0L106.1 64zM168 456a24 24 0 1 1 48 0 24 24 0 1 1 -48 0zm80 0a56 56 0 1 0 -112 0 56 56 0 1 0 112 0zm200-24a24 24 0 1 1 0 48 24 24 0 1 1 0-48zm0 80a56 56 0 1 0 0-112 56 56 0 1 0 0 112z',
				),
				'description' => __('Display your WooCommerce products in a beautiful grid layout.', 'digiblocks'),
			);
		}

		// If block name is specified, return data for that block
		if ( ! empty( $block_name ) ) {
			return isset( $blocks_data[ $block_name ] ) ? $blocks_data[ $block_name ] : false;
		}

		// Otherwise return all blocks data
		return $blocks_data;
	}

	/**
	 * Generate block assets (CSS and JS) for a post.
	 *
	 * @param int     $post_id Post ID.
	 * @param WP_Post $post Post object.
	 */
	public function generate_block_assets( $post_id, $post ) {
		// Skip if this is an autosave, a revision, or a restore.
		if ( wp_is_post_autosave( $post_id ) || wp_is_post_revision( $post_id ) || ( defined( 'DOING_AUTOSAVE' ) && DOING_AUTOSAVE ) ) {
			return;
		}

		// Skip if post status is 'auto-draft'.
		if ( 'auto-draft' === $post->post_status ) {
			return;
		}

		// Skip if post type doesn't support the block editor.
		if ( ! use_block_editor_for_post_type( $post->post_type ) ) {
			return;
		}

		$content = $post->post_content;

		// Check if content has any DigiBlocks blocks.
		if ( false === strpos( $content, '<!-- wp:digiblocks/' ) ) {
			// No DigiBlocks found, clean up existing files.
			$this->cleanup_block_assets( $post_id );
			return;
		}

		// Extract CSS and JS from blocks.
		$css = $this->extract_block_css( $content, $post_id );
		$js  = $this->extract_block_js( $content, $post_id );

		// Generate assets.
		$this->generate_css_file( $post_id, $css );
		$this->generate_js_file( $post_id, $js );
	}

	/**
	 * Extract CSS from blocks.
	 *
	 * @param string $content Post content.
	 * @param int    $post_id Post ID.
	 * @return string Combined CSS.
	 */
	private function extract_block_css( $content, $post_id ) {
		$css = '';
		$blocks = parse_blocks( $content );
		
		// Process blocks recursively.
		$css = $this->process_blocks_for_css( $blocks, $post_id );
		return $css;
	}

	/**
	 * Process blocks recursively to extract CSS.
	 *
	 * @param array $blocks Array of blocks.
	 * @param int   $post_id Post ID.
	 * @return string Combined CSS.
	 */
	private function process_blocks_for_css( $blocks, $post_id ) {
		$css = '';
		$digiblock_count = 0;
	
		foreach ( $blocks as $block ) {
			// Check if this is a DigiBlocks block.
			if ( isset( $block['blockName'] ) && 0 === strpos( $block['blockName'], 'digiblocks/' ) ) {
				$digiblock_count++;
				$block_name = str_replace( 'digiblocks/', '', $block['blockName'] );
				$block_instance_id = isset( $block['attrs']['id'] ) ? $block['attrs']['id'] : uniqid( 'digiblock-' );
	
				// Pass the block ID and attributes to get_block_css
				$block_css = $this->get_block_css( $block_name, $block_instance_id, $block['attrs'] );
				$css .= $block_css;
			}
	
			// Process inner blocks.
			if ( ! empty( $block['innerBlocks'] ) ) {
				$inner_css = $this->process_blocks_for_css( $block['innerBlocks'], $post_id );
				$css .= $inner_css;
			}
		}
		return $css;
	}

	/**
	 * Get block-specific CSS.
	 *
	 * @param string $block_name Block name.
	 * @param string $block_id Block ID.
	 * @param array  $attrs Block attributes.
	 * @return string Block CSS.
	 */
	private function get_block_css( $block_name, $block_id, $attrs ) {
		$block_css_file = DIGIBLOCKS_PLUGIN_DIR . 'blocks/' . $block_name . '/styles.php';
	
		if ( file_exists( $block_css_file ) ) {
			// Create a variable that will be accessible in the included file
			$digiblocks_css_output = '';
			
			// Include the file - it will set $digiblocks_css_output
			include $block_css_file;
			
			// Return the CSS set by the included file
			return $digiblocks_css_output;
		}
	
		return '';
	}

	/**
	 * Extract JS from blocks.
	 *
	 * @param string $content Post content.
	 * @param int    $post_id Post ID.
	 * @return string Combined JS.
	 */
	private function extract_block_js( $content, $post_id ) {
		$js     = '';
		$blocks = parse_blocks( $content );

		// Process blocks recursively.
		$js = $this->process_blocks_for_js( $blocks, $post_id );

		return $js;
	}

	/**
	 * Process blocks recursively to extract JS.
	 *
	 * @param array $blocks Array of blocks.
	 * @param int   $post_id Post ID.
	 * @return string Combined JS.
	 */
	private function process_blocks_for_js( $blocks, $post_id ) {
		$js = '';

		foreach ( $blocks as $block ) {
			// Check if this is a DigiBlocks block.
			if ( isset( $block['blockName'] ) && 0 === strpos( $block['blockName'], 'digiblocks/' ) ) {
				$block_name        = str_replace( 'digiblocks/', '', $block['blockName'] );
				$block_instance_id = isset( $block['attrs']['id'] ) ? $block['attrs']['id'] : uniqid( 'digiblock-' );

				// Get block-specific JS.
				$block_js = $this->get_block_js( $block_name, $block_instance_id, $block['attrs'] );
				$js      .= $block_js;
			}

			// Process inner blocks.
			if ( ! empty( $block['innerBlocks'] ) ) {
				$js .= $this->process_blocks_for_js( $block['innerBlocks'], $post_id );
			}
		}

		return $js;
	}

	/**
	 * Get block-specific JS.
	 *
	 * @param string $block_name Block name.
	 * @param string $block_id Block ID.
	 * @param array  $attrs Block attributes.
	 * @return string Block JS.
	 */
	private function get_block_js( $block_name, $block_id, $attrs ) {
		$block_js_file = DIGIBLOCKS_PLUGIN_DIR . 'blocks/' . $block_name . '/script.php';
	
		if ( file_exists( $block_js_file ) ) {
			// Create a variable that will be accessible in the included file
			$digiblocks_js_output = '';
			
			// Include the file - it will set $digiblocks_js_output
			include $block_js_file;
			
			// Return the JS set by the included file
			return $digiblocks_js_output;
		}
	
		return '';
	}

	/**
	 * Generate CSS file for a post.
	 *
	 * @param int    $post_id Post ID.
	 * @param string $css CSS content.
	 */
	public function generate_css_file( $post_id, $css ) {
		// Initialize WP_Filesystem
		global $wp_filesystem;
		if ( ! is_object( $wp_filesystem ) ) {
			require_once ABSPATH . 'wp-admin/includes/file.php';
			$filesystem_init = WP_Filesystem();
		}

		$css_file = DIGIBLOCKS_ASSETS_DIR . '/digiblocks-' . $post_id . '.css';

		if ( empty( $css ) ) {
			// Clean up CSS file if it exists.
			if ( $wp_filesystem->exists( $css_file ) ) {
				$delete_result = $wp_filesystem->delete( $css_file );
			}
			return;
		}

		// Ensure digiblocks directory exists in uploads folder.
		if ( ! file_exists( DIGIBLOCKS_ASSETS_DIR ) ) {
			$mkdir_result = wp_mkdir_p( DIGIBLOCKS_ASSETS_DIR );
		}

		// Direct file system access backup in case WP_Filesystem fails
		if ( ! $wp_filesystem || ! is_object( $wp_filesystem ) ) {
			// Try to initialize a direct file system instance as fallback
			if ( ! class_exists( 'WP_Filesystem_Direct' ) ) {
				require_once ABSPATH . 'wp-admin/includes/class-wp-filesystem-base.php';
				require_once ABSPATH . 'wp-admin/includes/class-wp-filesystem-direct.php';
			}
			$wp_filesystem_direct = new WP_Filesystem_Direct( null );
			$write_result = $wp_filesystem_direct->put_contents( $css_file, $css, FS_CHMOD_FILE );
			return;
		}

		// Minify CSS.
		$css = $this->minify_css( $css );

		// Write CSS file.
		$put_result = $wp_filesystem->put_contents( $css_file, $css, FS_CHMOD_FILE );
	}

	/**
	 * Generate JS file for a post.
	 *
	 * @param int    $post_id Post ID.
	 * @param string $js JS content.
	 */
	public function generate_js_file( $post_id, $js ) {
		// Initialize WP_Filesystem
		global $wp_filesystem;
		if ( ! is_object( $wp_filesystem ) ) {
			require_once ABSPATH . 'wp-admin/includes/file.php';
			$filesystem_init = WP_Filesystem();
		}

		$js_file = DIGIBLOCKS_ASSETS_DIR . '/digiblocks-' . $post_id . '.js';

		if ( empty( $js ) ) {
			// Clean up JS file if it exists.
			if ( $wp_filesystem->exists( $js_file ) ) {
				$delete_result = $wp_filesystem->delete( $js_file );
			}
			return;
		}

		// Ensure digiblocks directory exists in uploads folder.
		if ( ! file_exists( DIGIBLOCKS_ASSETS_DIR ) ) {
			$mkdir_result = wp_mkdir_p( DIGIBLOCKS_ASSETS_DIR );
		}

		// Direct file system access backup in case WP_Filesystem fails
		if ( ! $wp_filesystem || ! is_object( $wp_filesystem ) ) {
			// Try to initialize a direct file system instance as fallback
			if ( ! class_exists( 'WP_Filesystem_Direct' ) ) {
				require_once ABSPATH . 'wp-admin/includes/class-wp-filesystem-base.php';
				require_once ABSPATH . 'wp-admin/includes/class-wp-filesystem-direct.php';
			}
			$wp_filesystem_direct = new WP_Filesystem_Direct( null );
			$write_result = $wp_filesystem_direct->put_contents( $js_file, $js, FS_CHMOD_FILE );
			return;
		}

		// Minify JS.
		$js = $this->minify_js( $js );

		// Write JS file.
		$put_result = $wp_filesystem->put_contents( $js_file, $js, FS_CHMOD_FILE );
	}

	/**
	 * Minify CSS.
	 *
	 * @param string $css CSS content.
	 * @return string Minified CSS.
	 */
	private function minify_css( $css ) {
		// Remove comments.
		$css = preg_replace( '!/\*[^*]*\*+([^/][^*]*\*+)*/!', '', $css );
		// Remove space after colons.
		$css = str_replace( ': ', ':', $css );
		// Remove whitespace.
		$css = str_replace( array( "\r\n", "\r", "\n", "\t", '  ', '    ', '    ' ), '', $css );

		return $css;
	}

	/**
	 * Minify JS.
	 *
	 * @param string $js JS content.
	 * @return string Minified JS.
	 */
	private function minify_js( $js ) {
		// Remove comments (single line).
		$js = preg_replace( '/(\/\/[^\n]*\n)/', '', $js );
		// Remove comments (multi-line).
		$js = preg_replace( '/(\/\*.*?\*\/)/', '', $js );
		// Remove whitespace.
		$js = preg_replace( '/\s+/', ' ', $js );

		return $js;
	}

	/**
	 * Clean up block assets.
	 *
	 * @param int $post_id Post ID.
	 */
	private function cleanup_block_assets( $post_id ) {
		$css_file = DIGIBLOCKS_ASSETS_DIR . '/digiblocks-' . $post_id . '.css';
		$js_file  = DIGIBLOCKS_ASSETS_DIR . '/digiblocks-' . $post_id . '.js';

		if ( file_exists( $css_file ) ) {
			wp_delete_file( $css_file );
		}

		if ( file_exists( $js_file ) ) {
			wp_delete_file( $js_file );
		}
	}

	/**
	 * Enqueue block assets on front-end.
	 */
	public function enqueue_block_assets() {
		global $post;

		if ( ! is_singular() || empty( $post ) ) {
			return;
		}

		$post_id  = $post->ID;
		$css_file = DIGIBLOCKS_ASSETS_DIR . '/digiblocks-' . $post_id . '.css';
		$js_file  = DIGIBLOCKS_ASSETS_DIR . '/digiblocks-' . $post_id . '.js';

		// Check if post content has DigiBlocks blocks
		if ( has_blocks( $post->post_content ) ) {
			$blocks         = parse_blocks( $post->post_content );
			$has_digiblocks = $this->has_digiblocks_blocks( $blocks );

			if ( $has_digiblocks ) {
				// Enqueue the CSS file
				if ( file_exists( $css_file ) ) {
					wp_enqueue_style(
						'digiblocks-' . $post_id,
						DIGIBLOCKS_ASSETS_URL . '/digiblocks-' . $post_id . '.css',
						array(),
						filemtime( $css_file )
					);
				}

				// Enqueue the JS file
				if ( file_exists( $js_file ) ) {
					wp_enqueue_script(
						'digiblocks-' . $post_id,
						DIGIBLOCKS_ASSETS_URL . '/digiblocks-' . $post_id . '.js',
						array(),
						filemtime( $js_file ),
						true
					);

					// Check for Forms and Newsletter blocks
					$has_forms_block = $this->has_forms_block( $blocks );
					$has_newsletter_block = $this->has_newsletter_block( $blocks );

					if ( $has_forms_block || $has_newsletter_block ) {
						$settings             = get_option( 'digiblocks_settings', array() );

						// Forms data
						if ( $has_forms_block ) {
							$recaptcha_site_key   = isset( $settings['recaptcha_site_key'] ) ? $settings['recaptcha_site_key'] : '';
							$recaptcha_secret_key = isset( $settings['recaptcha_secret_key'] ) ? $settings['recaptcha_secret_key'] : '';

							// Enqueue Google reCAPTCHA if needed (only once for both blocks)
							if ( ! empty( $recaptcha_site_key ) && ! empty( $recaptcha_secret_key ) ) {
								wp_enqueue_script(
									'google-recaptcha',
									'https://www.google.com/recaptcha/api.js?render=' . $recaptcha_site_key,
									array(),
									null, // phpcs:ignore
									true
								);
							}

							wp_localize_script(
								'digiblocks-' . $post_id,
								'digiBlocksFormData',
								array(
									'ajax_url'           => admin_url( 'admin-ajax.php' ),
									'form_nonce'         => wp_create_nonce( 'digiblocks_form_nonce' ),
									'recaptcha_site_key' => $recaptcha_site_key,
								)
							);
						}

						// Newsletter data
						if ( $has_newsletter_block ) {
							wp_localize_script(
								'digiblocks-' . $post_id,
								'digiBlocksNewsletterData',
								array(
									'ajax_url' => admin_url( 'admin-ajax.php' ),
									'nonce'    => wp_create_nonce( 'digiblocks_newsletter_nonce' ),
								)
							);
						}
					}
				}

				// Check for Google Map block and enqueue the Google Maps API if needed
				if ( $this->has_google_map_blocks( $blocks ) ) {
					$this->enqueue_google_maps_api();
				}

				// Check for Lottie block and enqueue
				if ( $this->has_lottie_blocks( $blocks ) ) {
					$this->enqueue_lottie_if_needed( $post_id, $blocks );
				}

				// Check for blocks with animations and enqueue if needed
				$this->enqueue_animations_if_needed( $post_id, $blocks );
			}
		}
	}

	/**
	 * Check if blocks array contains any DigiBlocks blocks.
	 *
	 * @param array $blocks Array of parsed blocks.
	 * @return bool True if DigiBlocks blocks are found.
	 */
	private function has_digiblocks_blocks( $blocks ) {
		foreach ( $blocks as $block ) {
			if ( isset( $block['blockName'] ) && 0 === strpos( $block['blockName'], 'digiblocks/' ) ) {
				return true;
			}
			
			if ( ! empty( $block['innerBlocks'] ) ) {
				if ( $this->has_digiblocks_blocks( $block['innerBlocks'] ) ) {
					return true;
				}
			}
		}
		
		return false;
	}

	/**
	 * Check if blocks array contains any Google Map blocks.
	 *
	 * @param array $blocks Array of parsed blocks.
	 * @return bool True if Google Map blocks are found.
	 */
	private function has_google_map_blocks($blocks) {
		foreach ($blocks as $block) {
			if (isset($block['blockName']) && $block['blockName'] === 'digiblocks/google-map') {
				return true;
			}
			
			if (!empty($block['innerBlocks'])) {
				if ($this->has_google_map_blocks($block['innerBlocks'])) {
					return true;
				}
			}
		}
		
		return false;
	}

	/**
	 * Enqueue Google Maps API.
	 */
	private function enqueue_google_maps_api() {
		// Get API key from settings
		$settings = get_option('digiblocks_settings', array());
		$api_key = isset($settings['google_maps_api_key']) ? $settings['google_maps_api_key'] : '';

		if (!empty($api_key)) {
			wp_enqueue_script(
				'google-maps-api',
				'https://maps.googleapis.com/maps/api/js?key=' . esc_attr($api_key) . '&callback=digiblocksGoogleMapsCallback&loading=async',
				array(),
				null, // phpcs:ignore
				true
			);
		}
	}

	/**
	 * Check if any DigiBlocks with animations are present on the page.
	 *
	 * @param array $blocks Array of parsed blocks.
	 * @return bool True if animations are found.
	 */
	private function has_block_animations( $blocks ) {
		foreach ( $blocks as $block ) {
			// Check if this is a DigiBlocks block with animation attribute
			if ( isset( $block['blockName'] ) && 
				0 === strpos( $block['blockName'], 'digiblocks/' ) && 
				isset( $block['attrs']['animation'] ) && 
				$block['attrs']['animation'] !== 'none' ) {
				return true;
			}
			
			// Check inner blocks recursively
			if ( ! empty( $block['innerBlocks'] ) ) {
				if ( $this->has_block_animations( $block['innerBlocks'] ) ) {
					return true;
				}
			}
		}
		
		return false;
	}

	/**
	 * Enqueue animations script if needed.
	 *
	 * @param int $post_id Post ID.
	 * @param array $blocks Parsed blocks from content.
	 */
	private function enqueue_animations_if_needed( $post_id, $blocks ) {
		static $animations_enqueued = false;
		
		// Check if animations are already enqueued
		if ( $animations_enqueued ) {
			return;
		}
		
		// Check if any block has animations
		if ( $this->has_block_animations( $blocks ) ) {
			wp_enqueue_script(
				'digiblocks-animations',
				DIGIBLOCKS_PLUGIN_URL . 'assets/js/front-animations.js',
				array(),
				DIGIBLOCKS_VERSION,
				true
			);
			
			$animations_enqueued = true;
		}
	}

	/**
	 * Add admin menu.
	 */
	public function add_admin_menu() {
		$icon = 'data:image/svg+xml;base64,' . base64_encode( $this->get_plugin_icon() ); // phpcs:ignore

		add_menu_page(
			__( 'DigiBlocks', 'digiblocks' ),
			__( 'DigiBlocks', 'digiblocks' ),
			'manage_options',
			'digiblocks',
			array( $this, 'render_dashboard_page' ),
			$icon,
			58
		);

		add_submenu_page(
			'digiblocks',
			__( 'Dashboard', 'digiblocks' ),
			__( 'Dashboard', 'digiblocks' ),
			'manage_options',
			'digiblocks',
			array( $this, 'render_dashboard_page' )
		);

		add_submenu_page(
			'digiblocks',
			__( 'Settings', 'digiblocks' ),
			__( 'Settings', 'digiblocks' ),
			'manage_options',
			'digiblocks-settings',
			array( $this, 'render_settings_page' )
		);
	}

	/**
	 * Render dashboard page.
	 */
	public function render_dashboard_page() {
		include DIGIBLOCKS_PLUGIN_DIR . 'admin/dashboard.php';
	}

	/**
	 * Render settings page.
	 */
	public function render_settings_page() {
		include DIGIBLOCKS_PLUGIN_DIR . 'admin/settings.php';
	}

	/**
	 * Enqueue editor assets
	 */
	public function enqueue_editor_assets() {
		// Style for editor.
		wp_enqueue_style(
			'digiblocks-editor',
			DIGIBLOCKS_PLUGIN_URL . 'assets/css/blocks/editor.css',
			array( 'wp-edit-blocks' ),
			DIGIBLOCKS_VERSION
		);

		// First enqueue the globals script
		wp_enqueue_script(
			'digiblocks-globals',
			DIGIBLOCKS_PLUGIN_URL . 'assets/js/globals.js',
			array(
				'wp-blocks',
				'wp-i18n',
				'wp-element',
				'wp-editor',
				'wp-components',
				'wp-data',
				'wp-block-editor',
			),
			DIGIBLOCKS_VERSION,
			true
		);

		// Enqueue editor scripts.
		wp_enqueue_script(
			'digiblocks-blocks-editor',
			DIGIBLOCKS_PLUGIN_URL . 'assets/js/blocks/index.js',
			array(
				'wp-blocks',
				'wp-i18n',
				'wp-element',
				'wp-editor',
				'wp-components',
				'wp-data',
				'wp-block-editor',
				'digiblocks-globals',
			),
			DIGIBLOCKS_VERSION,
			true
		);

		// Get settings
		$settings = get_option('digiblocks_settings', array());

		// Get default width and max width
		$content_width = !empty($settings['content_width']) ? intval($settings['content_width']) : 1200;
		$content_max_width = !empty($settings['content_max_width']) ? intval($settings['content_max_width']) : 90;

		// Google Map API key.
		$settings = get_option('digiblocks_settings', array());
		$google_maps_api_key = isset($settings['google_maps_api_key']) ? $settings['google_maps_api_key'] : '';
		$google_maps_map_id = isset($settings['google_maps_map_id']) ? $settings['google_maps_map_id'] : '';

		// Add FA icons to the editor.
		wp_localize_script(
			'digiblocks-globals',
			'digiBlocksData',
			array(
				'fontAwesomeIcons'     => $this->get_fa_icons(),
				'blocks'               => $this->get_block_data(),
				'inactiveBlocks'       => get_option( 'digiblocks_inactive_blocks', array() ),
				'contentWidth'         => $content_width,
				'contentMaxWidth'      => $content_max_width,
				'googleMapsApiKey'     => $google_maps_api_key,
				'googleMapsMapId'      => $google_maps_map_id,
				'navigation_nonce'     => wp_create_nonce( 'digiblocks_nav_nonce' ),
				'isDigiActive'         => class_exists( 'DigiCommerce' ),
				'isDigiProActive'      => class_exists( 'DigiCommerce_Pro' ),
				'digiCurrency'         => ( class_exists( 'DigiCommerce' ) && class_exists( 'DigiCommerce_Product' ) ) ? DigiCommerce_Product::instance()->get_currency_symbol( DigiCommerce()->get_option( 'currency', 'USD' ) ) : '$',
        		'digiCurrencyPosition' => class_exists( 'DigiCommerce' ) ? DigiCommerce()->get_option( 'currency_position', 'left' ) : 'left',
				'isWooActive'          => class_exists( 'WooCommerce' ),
				'lottie'               => DIGIBLOCKS_PLUGIN_URL . 'assets/js/lottie.js',
			)
		);
	}

	/**
	 * Get Font Awesome icons.
	 */
	public function get_fa_icons() {
		$icons = array_merge(
			require_once plugin_dir_path( __FILE__ ) . 'icons/v6-0.php',
			require_once plugin_dir_path( __FILE__ ) . 'icons/v6-1.php',
			require_once plugin_dir_path( __FILE__ ) . 'icons/v6-2.php',
			require_once plugin_dir_path( __FILE__ ) . 'icons/v6-3.php',
		);

		// Allow developers to add custom icons
		return apply_filters( 'digiblocks_fa_icons', $icons );
	}

	/**
	 * Enqueue admin scripts.
	 *
	 * @param string $hook Hook suffix.
	 */
	public function enqueue_admin_scripts( $hook ) {
		// Load only on DigiBlocks admin pages.
		if ( 'toplevel_page_digiblocks' === $hook || 'digiblocks_page_digiblocks-settings' === $hook ) {
			wp_enqueue_style(
				'digiblocks-admin',
				DIGIBLOCKS_PLUGIN_URL . 'assets/css/admin/admin.css',
				array(),
				DIGIBLOCKS_VERSION
			);

			wp_enqueue_script(
				'digiblocks-admin',
				DIGIBLOCKS_PLUGIN_URL . 'assets/js/admin/admin.js',
				array( 'wp-api', 'wp-i18n' ),
				DIGIBLOCKS_VERSION,
				true
			);

			wp_localize_script(
				'digiblocks-admin',
				'digiBlocksAdmin',
				array(
					'apiNonce' => wp_create_nonce( 'wp_rest' ),
					'apiUrl'   => rest_url( 'digiblocks/v1/' ),
				)
			);
		}
	}

	/**
	 * Check if blocks array contains any Lottie blocks.
	 *
	 * @param array $blocks Array of parsed blocks.
	 * @return bool True if Lottie blocks are found.
	 */
	private function has_lottie_blocks($blocks) {
		foreach ($blocks as $block) {
			if (isset($block['blockName']) && $block['blockName'] === 'digiblocks/lottie') {
				return true;
			}
			
			if (!empty($block['innerBlocks'])) {
				if ($this->has_lottie_blocks($block['innerBlocks'])) {
					return true;
				}
			}
		}
		
		return false;
	}

	/**
	 * Enqueue lottie script if needed
	 * 
	 * @param int $post_id Post ID.
	 * @param array $blocks Parsed blocks from content.
	 */
	private function enqueue_lottie_if_needed($post_id, $blocks) {
		static $lottie_enqueued = false;
		
		// Check if lottie js is already enqueued
		if ($lottie_enqueued) {
			return;
		}
		
		// Check if any block has lottie
		if ($this->has_lottie_blocks($blocks)) {
			wp_enqueue_script(
				'digiblocks-lottie-player',
				DIGIBLOCKS_PLUGIN_URL . 'assets/js/lottie.js',
				array(),
				DIGIBLOCKS_VERSION,
				true
			);
			
			$lottie_enqueued = true;
		}
	}

	/**
	 * Register REST API routes.
	 */
	public function register_rest_routes() {
		register_rest_route(
			'digiblocks/v1',
			'/update-settings',
			array(
				'methods'             => 'POST',
				'callback'            => array( $this, 'update_settings' ),
				'permission_callback' => function () {
					return current_user_can( 'manage_options' );
				},
			)
		);

		register_rest_route(
			'digiblocks/v1',
			'/update-blocks',
			array(
				'methods'             => 'POST',
				'callback'            => array( $this, 'update_active_blocks' ),
				'permission_callback' => function () {
					return current_user_can( 'manage_options' );
				},
			)
		);
	}

	/**
	 * Update settings.
	 *
	 * @param WP_REST_Request $request Request object.
	 * @return WP_REST_Response Response object.
	 */
	public function update_settings( $request ) {
		$settings         = $request->get_json_params();
		$current_settings = get_option( 'digiblocks_settings', array() );

		// Check for font loading mode change
		$font_setting_changed = false;
		$new_use_local_fonts = isset($settings['google_fonts_local']) ? (bool) $settings['google_fonts_local'] : false;
		$old_use_local_fonts = isset($current_settings['google_fonts_local']) ? (bool) $current_settings['google_fonts_local'] : false;
		
		if ($new_use_local_fonts !== $old_use_local_fonts) {
			$font_setting_changed = true;
		}

		// Validate settings.
		$validated_settings = array(
			'content_width'        => isset( $settings['content_width'] ) ? sanitize_text_field( $settings['content_width'] ) : $current_settings['content_width'],
			'content_max_width'    => isset( $settings['content_max_width'] ) ? sanitize_text_field( $settings['content_max_width'] ) : $current_settings['content_max_width'],
			'recaptcha_site_key'   => isset( $settings['recaptcha_site_key'] ) ? sanitize_text_field( $settings['recaptcha_site_key'] ) : $current_settings['recaptcha_site_key'],
			'recaptcha_secret_key' => isset( $settings['recaptcha_secret_key'] ) ? sanitize_text_field( $settings['recaptcha_secret_key'] ) : $current_settings['recaptcha_secret_key'],
			'google_maps_api_key'  => isset( $settings['google_maps_api_key'] ) ? sanitize_text_field( $settings['google_maps_api_key'] ) : $current_settings['google_maps_api_key'],
			'google_maps_map_id'   => isset( $settings['google_maps_map_id'] ) ? sanitize_text_field( $settings['google_maps_map_id'] ) : $current_settings['google_maps_map_id'],
			'google_fonts_local'   => $new_use_local_fonts,
			
			// Newsletter settings
			'newsletter_platform'  => isset( $settings['newsletter_platform'] ) ? sanitize_text_field( $settings['newsletter_platform'] ) : ( isset( $current_settings['newsletter_platform'] ) ? $current_settings['newsletter_platform'] : '' ),
			
			// MailChimp
			'mailchimp_api_key'       => isset( $settings['mailchimp_api_key'] ) ? sanitize_text_field( $settings['mailchimp_api_key'] ) : ( isset( $current_settings['mailchimp_api_key'] ) ? $current_settings['mailchimp_api_key'] : '' ),
			'mailchimp_audience_id'   => isset( $settings['mailchimp_audience_id'] ) ? sanitize_text_field( $settings['mailchimp_audience_id'] ) : ( isset( $current_settings['mailchimp_audience_id'] ) ? $current_settings['mailchimp_audience_id'] : '' ),
			'mailchimp_tags'          => isset( $settings['mailchimp_tags'] ) ? sanitize_text_field( $settings['mailchimp_tags'] ) : ( isset( $current_settings['mailchimp_tags'] ) ? $current_settings['mailchimp_tags'] : '' ),
			'mailchimp_double_optin'  => isset( $settings['mailchimp_double_optin'] ) ? (bool) $settings['mailchimp_double_optin'] : ( isset( $current_settings['mailchimp_double_optin'] ) ? $current_settings['mailchimp_double_optin'] : false ),
			
			// ActiveCampaign
			'activecampaign_api_url'  => isset( $settings['activecampaign_api_url'] ) ? esc_url_raw( $settings['activecampaign_api_url'] ) : ( isset( $current_settings['activecampaign_api_url'] ) ? $current_settings['activecampaign_api_url'] : '' ),
			'activecampaign_api_key'  => isset( $settings['activecampaign_api_key'] ) ? sanitize_text_field( $settings['activecampaign_api_key'] ) : ( isset( $current_settings['activecampaign_api_key'] ) ? $current_settings['activecampaign_api_key'] : '' ),
			'activecampaign_list_id'  => isset( $settings['activecampaign_list_id'] ) ? sanitize_text_field( $settings['activecampaign_list_id'] ) : ( isset( $current_settings['activecampaign_list_id'] ) ? $current_settings['activecampaign_list_id'] : '' ),
			'activecampaign_tags'     => isset( $settings['activecampaign_tags'] ) ? sanitize_text_field( $settings['activecampaign_tags'] ) : ( isset( $current_settings['activecampaign_tags'] ) ? $current_settings['activecampaign_tags'] : '' ),
			
			// Brevo
			'brevo_api_key'           => isset( $settings['brevo_api_key'] ) ? sanitize_text_field( $settings['brevo_api_key'] ) : ( isset( $current_settings['brevo_api_key'] ) ? $current_settings['brevo_api_key'] : '' ),
			'brevo_list_id'           => isset( $settings['brevo_list_id'] ) ? sanitize_text_field( $settings['brevo_list_id'] ) : ( isset( $current_settings['brevo_list_id'] ) ? $current_settings['brevo_list_id'] : '' ),
			
			// Klaviyo
			'klaviyo_api_key'         => isset( $settings['klaviyo_api_key'] ) ? sanitize_text_field( $settings['klaviyo_api_key'] ) : ( isset( $current_settings['klaviyo_api_key'] ) ? $current_settings['klaviyo_api_key'] : '' ),
			'klaviyo_list_id'         => isset( $settings['klaviyo_list_id'] ) ? sanitize_text_field( $settings['klaviyo_list_id'] ) : ( isset( $current_settings['klaviyo_list_id'] ) ? $current_settings['klaviyo_list_id'] : '' ),
			
			// ConvertKit
			'convertkit_api_key'      => isset( $settings['convertkit_api_key'] ) ? sanitize_text_field( $settings['convertkit_api_key'] ) : ( isset( $current_settings['convertkit_api_key'] ) ? $current_settings['convertkit_api_key'] : '' ),
			'convertkit_form_id'      => isset( $settings['convertkit_form_id'] ) ? sanitize_text_field( $settings['convertkit_form_id'] ) : ( isset( $current_settings['convertkit_form_id'] ) ? $current_settings['convertkit_form_id'] : '' ),
			'convertkit_tags'         => isset( $settings['convertkit_tags'] ) ? sanitize_text_field( $settings['convertkit_tags'] ) : ( isset( $current_settings['convertkit_tags'] ) ? $current_settings['convertkit_tags'] : '' ),
			
			// MailerLite
			'mailerlite_api_key'      => isset( $settings['mailerlite_api_key'] ) ? sanitize_text_field( $settings['mailerlite_api_key'] ) : ( isset( $current_settings['mailerlite_api_key'] ) ? $current_settings['mailerlite_api_key'] : '' ),
			'mailerlite_group_id'     => isset( $settings['mailerlite_group_id'] ) ? sanitize_text_field( $settings['mailerlite_group_id'] ) : ( isset( $current_settings['mailerlite_group_id'] ) ? $current_settings['mailerlite_group_id'] : '' ),
		);

		update_option( 'digiblocks_settings', $validated_settings );

		// Process all fonts if the font loading setting changed
		if ($font_setting_changed) {
			// Get the existing fonts manager instance
			$fonts_handler = DigiBlocks_Fonts::get_instance();
			$fonts_handler->process_all_fonts_on_setting_change($new_use_local_fonts);
		}

		return rest_ensure_response(
			array(
				'success' => true,
				'message' => __( 'Settings updated successfully.', 'digiblocks' ),
			)
		);
	}

	/**
	 * Update active blocks.
	 *
	 * @param WP_REST_Request $request Request object.
	 * @return WP_REST_Response Response object.
	 */
	public function update_active_blocks( $request ) {
		$blocks_status = $request->get_json_params();
		$inactive_blocks = array();
		
		// Find blocks that are set as inactive
		foreach ( $blocks_status as $block_name => $is_active ) {
			if ( ! $is_active ) {
				$inactive_blocks[$block_name] = true;
			}
		}
		
		// Save only the inactive blocks
		update_option( 'digiblocks_inactive_blocks', $inactive_blocks );

		return rest_ensure_response(
			array(
				'success' => true,
				'message' => __( 'Block settings updated successfully.', 'digiblocks' ),
			)
		);
	}

	/**
	 * Get active status for a block
	 *
	 * @param string $block_name Block name
	 * @return bool Whether the block is active
	 */
	private function get_block_active_status( $block_name ) {
		// Get list of inactive blocks
		$inactive_blocks = get_option('digiblocks_inactive_blocks', array());
		
		// If block is in the inactive list, it's not active
		if (isset($inactive_blocks[$block_name]) && $inactive_blocks[$block_name] === true) {
			return false;
		}
		
		// By default, all blocks are active if not explicitly deactivated
		return true;
	}

	/**
	 * Get plugin icon.
	 *
	 * @return string SVG icon.
	 */
	private function get_plugin_icon() {
		return '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100" width="24" height="24" fill="#fff"><path d="m48.9542389 5.0452399-21.4456806 11.5626397c9.7644787 5.3564796 4.6071224 2.5277596 21.4441586 11.7617607l21.4472008-11.7617588z"/><path d="m25.1662388 45.1154823-21.4456787 11.5611191c9.5319195 5.2303162 4.5615196 2.5034409 21.4441586 11.7617607l21.3712006-11.7207184c-6.8780023-3.8136863-2.5885583-1.4774398-21.3696805-11.6021614z"/><path d="m26.2788792 94.9547577 21.5551204-11.9487152v-24.4491997l-21.5551204 11.8210411z"/><path d="m72.7376785 45.1154823c-18.8555984 10.1642342-14.6254425 7.862957-21.3712005 11.6021614 8.4952812 4.6618423 4.0827217 2.2419968 21.3696823 11.7222443l21.4472046-11.7617607z"/><path d="m71.6204758 42.9358025v-24.4492035l-21.5551186 11.8210411v24.4917603c7.0406418-3.7939225 2.7223206-1.4242402 21.5551186-11.8635979z"/><path d="m50.0714417 58.5568428v24.4491997l21.5444793 11.9487152v-24.5783997c-18.2627983-10.0198402-13.8046417-7.5741577-21.5444793-11.8195152z"/><path d="m47.8324776 54.7963562v-24.4902363c-17.3903179-9.5410404-12.936718-7.0984001-21.5444775-11.819519v24.4492016c18.6853619 10.3633613 14.3518391 7.983036 21.5444775 11.8605537z"/><path d="m73.8488007 94.9547577 21.5551147-11.9487152v-24.4491997l-21.5551147 11.8210411z"/><path d="m2.5 58.5568428v24.4491997l21.5444794 11.9487152v-24.5783997c-17.2352791-9.4574394-12.7771197-7.0102386-21.5444794-11.8195152z"/><path d="m97.3297577 55.9622002c.059288.0440788.1185608.0896759.1489639.1489601.0106354.0167236.0121613.0349579.0212784.0516815-.0075989-.0182419-.0060806-.0395241-.0151978-.0562401-.0364761-.0623207-.1018448-.0987968-.1504745-.1519966-.0775223-.0881577-.1413651-.1869621-.2447205-.247757l.0015182.0015182c.1048737.0607949.1641541.1641503.2386323.2538339z"/></svg>';
	}

	/**
	 * Check if blocks array contains any Forms blocks.
	 *
	 * @param array $blocks Array of parsed blocks.
	 * @return bool True if Forms blocks are found.
	 */
	private function has_forms_block( $blocks ) {
		foreach ( $blocks as $block ) {
			if ( isset( $block['blockName'] ) && $block['blockName'] === 'digiblocks/forms' ) {
				return true;
			}
			
			if ( ! empty( $block['innerBlocks'] ) ) {
				if ( $this->has_forms_block( $block['innerBlocks'] ) ) {
					return true;
				}
			}
		}
		
		return false;
	}

	/**
	 * Initialize forms handler if needed.
	 */
	public function init_forms_handler() {
		// First, check if the forms block is even active in settings
		if (!$this->get_block_active_status('forms')) {
			return;
		}

		// Check if it's an AJAX form submission
		// phpcs:ignore WordPress.Security.NonceVerification.Missing
		$is_form_submission = defined( 'DOING_AJAX' ) && DOING_AJAX && isset( $_POST['action'] ) && $_POST['action'] === 'digiblocks_submit_form';
		

		// Case 1: AJAX form submission - load the handler directly
		if ( $is_form_submission ) {
			$this->load_forms_handler();
			return;
		}

		// Case 2: Check if current page contains forms block
		global $post;
		if ( $post && has_blocks( $post->post_content ) ) {
			$blocks = parse_blocks( $post->post_content );
			if ( $this->has_forms_block( $blocks ) ) {
				$this->load_forms_handler();
			}
		}
	}

	/**
	 * Load the forms handler file if it hasn't been loaded yet.
	 */
	private function load_forms_handler() {
		static $handler_loaded = false;

		// Only load the handler once
		if ( ! $handler_loaded ) {
			$handler_file = DIGIBLOCKS_PLUGIN_DIR . 'includes/class-digiblocks-forms-handler.php';

			if ( file_exists( $handler_file ) ) {
				require_once $handler_file;
				$handler_loaded = true;
			}
		}
	}

	/**
	 * Initialize newsletter handler if needed.
	 */
	public function init_newsletter_handler() {
		// First, check if the newsletter block is even active in settings
		if (!$this->get_block_active_status('newsletter')) {
			return;
		}

		// Check if it's an AJAX newsletter submission
		// phpcs:ignore WordPress.Security.NonceVerification.Missing
		$is_newsletter_submission = defined( 'DOING_AJAX' ) && DOING_AJAX && isset( $_POST['action'] ) && $_POST['action'] === 'digiblocks_newsletter_subscribe';
		

		// Case 1: AJAX newsletter submission - load the handler directly
		if ( $is_newsletter_submission ) {
			$this->load_newsletter_handler();
			return;
		}

		// Case 2: Check if current page contains newsletter block
		global $post;
		if ( $post && has_blocks( $post->post_content ) ) {
			$blocks = parse_blocks( $post->post_content );
			if ( $this->has_newsletter_block( $blocks ) ) {
				$this->load_newsletter_handler();
			}
		}
	}

	/**
	 * Check if blocks array contains any Newsletter blocks.
	 *
	 * @param array $blocks Array of parsed blocks.
	 * @return bool True if Newsletter blocks are found.
	 */
	private function has_newsletter_block( $blocks ) {
		foreach ( $blocks as $block ) {
			if ( isset( $block['blockName'] ) && $block['blockName'] === 'digiblocks/newsletter' ) {
				return true;
			}
			
			if ( ! empty( $block['innerBlocks'] ) ) {
				if ( $this->has_newsletter_block( $block['innerBlocks'] ) ) {
					return true;
				}
			}
		}
		
		return false;
	}

	/**
	 * Load the newsletter handler file if it hasn't been loaded yet.
	 */
	private function load_newsletter_handler() {
		static $handler_loaded = false;

		// Only load the handler once
		if ( ! $handler_loaded ) {
			$handler_file = DIGIBLOCKS_PLUGIN_DIR . 'includes/class-digiblocks-newsletter-handler.php';

			if ( file_exists( $handler_file ) ) {
				require_once $handler_file;
				$handler_loaded = true;
			}
		}
	}

	/**
	 * Register block with render callback
	 */
	public function register_blocks() {
		// Create a list of blocks that need server-side rendering
		$blocks = array(
			'posts'           => array( $this, 'render_posts_block' ),
			'navigation'      => array( $this, 'render_navigation_block' ),
			'login-link'      => array( $this, 'render_login_link_block' ),
			'page-title'      => array( $this, 'render_page_title_block' ),
			'breadcrumbs'     => array( $this, 'render_breadcrumbs_block' ),
			'featured-image'  => array( $this, 'render_featured_image_block' ),
			'post-meta'       => array( $this, 'render_post_meta_block' ),
			'post-content'    => array( $this, 'render_post_content_block' ),
			'post-navigation' => array( $this, 'render_post_navigation_block' ),
			'author-box'      => array( $this, 'render_author_box_block' ),
			'related-posts'   => array( $this, 'render_related_posts_block' ),
			'post-comments'   => array( $this, 'render_post_comments_block' ),
			'copyright'       => array( $this, 'render_copyright_block' ),
		);

		foreach ( $blocks as $block_name => $render_callback ) {
			if ( $this->get_block_active_status( $block_name ) ) {
				register_block_type(
					'digiblocks/' . $block_name,
					array(
						'render_callback' => $render_callback,
					)
				);
			}
		}

		// Register DigiCommerce products block if active
		if ( $this->get_block_active_status( 'digi-products' ) && class_exists( 'DigiCommerce' ) ) {
			register_block_type(
				'digiblocks/digi-products',
				array(
					'render_callback' => array($this, 'render_digi_products_block'),
				)
			);
		}

		// Register WooCommerce products block if active
		if ( $this->get_block_active_status( 'woo-products' ) && class_exists( 'WooCommerce' ) ) {
			register_block_type(
				'digiblocks/woo-products',
				array(
					'render_callback' => array($this, 'render_woo_products_block'),
				)
			);
		}
	}

	/**
	 * Render callback for posts block
	 *
	 * @param array    $attributes Block attributes.
	 * @param string   $content Block content.
	 * @param WP_Block $block Block instance.
	 */
	public function render_posts_block( $attributes, $content, $block ) {
		// Extract block attributes
		$id                       = isset( $attributes['id'] ) ? $attributes['id'] : 'digi-posts-' . uniqid();
		$anchor                   = isset( $attributes['anchor'] ) ? $attributes['anchor'] : '';
		$custom_classes           = isset( $attributes['customClasses'] ) ? $attributes['customClasses'] : '';
		$posts_to_show            = isset( $attributes['postsToShow'] ) ? $attributes['postsToShow'] : 3;
		$post_style               = isset( $attributes['postStyle'] ) ? $attributes['postStyle'] : 'grid';
		$display_featured_image   = isset( $attributes['displayFeaturedImage'] ) ? $attributes['displayFeaturedImage'] : true;
		$display_title            = isset( $attributes['displayTitle'] ) ? $attributes['displayTitle'] : true;
		$display_meta             = isset( $attributes['displayMeta'] ) ? $attributes['displayMeta'] : true;
		$display_excerpt          = isset( $attributes['displayExcerpt'] ) ? $attributes['displayExcerpt'] : true;
		$display_read_more_button = isset( $attributes['displayReadMoreButton'] ) ? $attributes['displayReadMoreButton'] : true;
		$meta_settings            = isset( $attributes['metaSettings'] ) ? $attributes['metaSettings'] : [
			'displayAuthor'     => true,
			'displayDate'       => true,
			'displayCategories' => true,
			'displayComments'   => true,
		];
		$excerpt_length           = isset( $attributes['excerptLength'] ) ? $attributes['excerptLength'] : 25;
		$read_more_text           = isset( $attributes['readMoreText'] ) ? $attributes['readMoreText'] : __( 'Read More', 'digiblocks' );
		$order                    = isset( $attributes['order'] ) ? $attributes['order'] : 'desc';
		$order_by                 = isset( $attributes['orderBy'] ) ? $attributes['orderBy'] : 'date';
		$categories               = isset( $attributes['categories'] ) ? $attributes['categories'] : [];
		$animation                = isset( $attributes['animation'] ) ? $attributes['animation'] : 'none';
		$image_size               = isset( $attributes['imageSize'] ) ? $attributes['imageSize'] : 'medium';

		// Pagination attributes
		$enable_pagination        = isset( $attributes['enablePagination'] ) ? $attributes['enablePagination'] : false;
			
		// Get the current responsive state
		$animation_class = ( 'none' !== $animation ) ? ' animate-' . $animation : '';
	
		// Build the block class
		$block_class = "digiblocks-posts $id style-$post_style $custom_classes $animation_class";
		
		// Format the ID attribute
		$id_attr = $anchor ? ' id="' . esc_attr( $anchor ) . '"' : '';

		// Get current page
		$paged = get_query_var('paged') ? get_query_var('paged') : 1;
	
		// Set up the query arguments
		$args = array(
			'posts_per_page'      => $posts_to_show,
			'post_status'         => 'publish',
			'order'               => $order,
			'orderby'             => $order_by,
			'ignore_sticky_posts' => true,
			'paged'               => $paged,
		);
	
		// Add categories if specified
		if ( ! empty( $categories ) && ! in_array( 0, $categories, true ) ) {
			$args['category__in'] = $categories;
		}
	
		// Get posts
		$query = new WP_Query( $args );
	
		// Start output buffer
		ob_start();
	
		if ( $query->have_posts() ) :
			?>
			<div class="<?php echo esc_attr( $block_class ); ?>"<?php echo wp_kses_post( $id_attr ); ?>>
				<div class="digiblocks-posts-container <?php echo 'layout-' . esc_attr( $post_style ); ?>">
					<?php while ( $query->have_posts() ) : ?>
						<?php 
						$query->the_post(); 
						$post_id = get_the_ID();
						?>
						<article class="digiblocks-post-item">
							<?php if ( $display_featured_image && has_post_thumbnail() ) : ?>
								<div class="digiblocks-post-image">
									<a href="<?php the_permalink(); ?>">
										<?php the_post_thumbnail( $image_size ); ?>
									</a>
								</div>
							<?php endif; ?>
	
							<div class="digiblocks-post-content">
								<?php if ( $display_title ) : ?>
									<h3 class="digiblocks-post-title">
										<a href="<?php the_permalink(); ?>"><?php the_title(); ?></a>
									</h3>
								<?php endif; ?>
	
								<?php if ( $display_excerpt ) : ?>
									<div class="digiblocks-post-excerpt">
										<?php 
										// Get the excerpt
										$excerpt = get_the_excerpt();
										
										// Limit by word count
										$words = explode(' ', $excerpt);
										if (count($words) > $excerpt_length) {
											$excerpt = implode(' ', array_slice($words, 0, $excerpt_length)) . '...';
										}
										
										echo wp_kses_post( $excerpt );
										?>
									</div>
								<?php endif; ?>

								<?php if ( $display_meta ): ?>
									<?php if ( isset( $meta_settings['displayCategories'] ) && $meta_settings['displayCategories'] ) : ?>
										<?php $categories = get_the_category(); ?>
										<?php if ( ! empty( $categories ) ) : ?>
											<div class="digiblocks-post-categories">
												<?php
												$cat_links = array();
												foreach ($categories as $category) {
													$cat_links[] = '<a href="' . esc_url(get_category_link($category->term_id)) . '">' . esc_html($category->name) . '</a>';
												}
												echo wp_kses_post( implode(' ', $cat_links) );
												?>
											</div>
										<?php endif; ?>
									<?php endif; ?>

									<div class="digiblocks-post-footer-meta">
										<?php if ( isset( $meta_settings['displayAuthor'] ) && $meta_settings['displayAuthor'] ): ?>
											<div class="digiblocks-author-avatar">
												<a href="<?php echo esc_url(get_author_posts_url(get_the_author_meta('ID'))); ?>">
													<?php echo get_avatar(get_the_author_meta('ID'), 96); ?>
												</a>
											</div>
										<?php endif; ?>
										
										<div class="digiblocks-footer-meta-items">
											<?php if ( isset( $meta_settings['displayAuthor'] ) && $meta_settings['displayAuthor'] ): ?>
												<span class="digiblocks-posted-by">
													<span class="digiblocks-meta-prefix"><?php esc_html_e('by', 'digiblocks'); ?></span>
													<a href="<?php echo esc_url(get_author_posts_url(get_the_author_meta('ID'))); ?>" title="<?php echo esc_attr(get_the_author()); ?>" rel="author">
														<?php the_author(); ?>
													</a>
												</span>
											<?php endif; ?>
											
											<?php if ( isset( $meta_settings['displayDate'] ) && $meta_settings['displayDate'] ): ?>
												<span class="digiblocks-posted-on">
													<span class="digiblocks-meta-prefix"><?php esc_html_e('on', 'digiblocks'); ?></span>
													<time datetime="<?php echo esc_attr(get_the_date('c')); ?>">
														<?php echo get_the_date(); ?>
													</time>
												</span>
											<?php endif; ?>
										</div>
									</div>
								<?php endif; ?>
	
								<?php 
								if ( $display_read_more_button || ( $display_meta && isset( $meta_settings['displayComments'] ) && $meta_settings['displayComments'] ) ): ?>
									<div class="digiblocks-post-footer-actions">
										<?php if ( $display_read_more_button ): ?>
											<a href="<?php echo esc_url( get_permalink() ); ?>" class="digiblocks-post-read-more">
												<?php echo esc_html( $read_more_text ); ?>
											</a>
										<?php endif; ?>
										
										<?php if ( $display_meta && isset( $meta_settings['displayComments'] ) && $meta_settings['displayComments'] ): 
											$comment_count = get_comments_number();
											$comment_link = get_comments_link();
											?>
											<a href="<?php echo esc_url( $comment_link ); ?>" class="digiblocks-post-comments-count">
												<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512" width="1em" height="1em"><path d="M256 64C125.8 64 32 148.6 32 240c0 37.1 15.5 70.6 40 100c5.2 6.3 8.4 14.8 7.4 23.9c-3.1 27-11.4 52.5-25.7 76.3c-.5 .9-1.1 1.8-1.6 2.6c11.1-2.9 22.2-7 32.7-11.5L91.2 446l-6.4-14.7c17-7.4 33-16.7 48.4-27.4c8.5-5.9 19.4-7.5 29.2-4.2C193 410.1 224.1 416 256 416c130.2 0 224-84.6 224-176s-93.8-176-224-176zM0 240C0 125.2 114.5 32 256 32s256 93.2 256 208s-114.5 208-256 208c-36 0-70.5-6.7-103.8-17.9c-.2-.1-.5 0-.7 .1c-16.9 11.7-34.7 22.1-53.9 30.5C73.6 471.1 44.7 480 16 480c-6.5 0-12.3-3.9-14.8-9.8s-1.1-12.8 3.4-17.4c8.1-8.2 15.2-18.2 21.7-29c11.7-19.6 18.7-40.6 21.3-63.1c0 0-.1-.1-.1-.2C19.6 327.1 0 286.6 0 240z"/></svg>
												<?php 
												if ( $comment_count == 0 ) {
													esc_html_e( 'Leave a Comment', 'digiblocks' );
												} elseif ( $comment_count == 1 ) {
													esc_html_e( '1 Comment', 'digiblocks' );
												} else {
													echo esc_html(
														sprintf(
															/* translators: %d: number of comments */
															esc_html__( '%d Comments', 'digiblocks' ),
															$comment_count
														)
													);
												}
												?>
											</a>
										<?php endif; ?>
									</div>
								<?php endif; ?>
							</div>
						</article>
					<?php endwhile; ?>
				</div>
				<?php if ($enable_pagination) {
					$total_pages = $query->max_num_pages;
					
					if ($total_pages > 1) {
						$current_page = max(1, get_query_var('paged'));
						
						echo '<div class="digiblocks-pagination">';
						
						$pagination_args = array(
							'base'         => str_replace(999999999, '%#%', esc_url(get_pagenum_link(999999999))),
							'total'        => $total_pages,
							'current'      => $current_page,
							'format'       => '?paged=%#%',
							'show_all'     => false,
							'type'         => 'plain',
							'end_size'     => 2,
							'mid_size'     => 1,
							'prev_next'    => true,
							'prev_text'    => '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 320 512" width="1em" height="1em"><path d="M47 239c-9.4 9.4-9.4 24.6 0 33.9L207 433c9.4 9.4 24.6 9.4 33.9 0s9.4-24.6 0-33.9L97.9 256 241 113c9.4-9.4 9.4-24.6 0-33.9s-24.6-9.4-33.9 0L47 239z"/></svg>',
							'next_text'    => '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 320 512" width="1em" height="1em"><path d="M273 239c9.4 9.4 9.4 24.6 0 33.9L113 433c-9.4 9.4-24.6 9.4-33.9 0s-9.4-24.6 0-33.9l143-143L79 113c-9.4-9.4-9.4-24.6 0-33.9s24.6-9.4 33.9 0L273 239z"/></svg>',
							'add_args'     => false,
							'add_fragment' => '',
						);
						
						echo paginate_links( $pagination_args ); // phpcs:ignore
						echo '</div>';
					}
				}
				?>
			</div>
			<?php
		else:
			?>
			<div class="<?php echo esc_attr( $block_class ); ?>"<?php echo wp_kses_post( $id_attr ); ?>>
				<p class="digiblocks-posts-no-results"><?php esc_html_e( 'No posts found.', 'digiblocks' ); ?></p>
			</div>
			<?php
		endif;
	
		// Reset post data
		wp_reset_postdata();
	
		// Get the output buffer
		$output = ob_get_clean();
	
		return $output;
	}

	/**
	 * Render callback for digi products block
	 *
	 * @param array    $attributes Block attributes.
	 * @param string   $content Block content.
	 * @param WP_Block $block Block instance.
	 */
	public function render_digi_products_block( $attributes, $content, $block ) {
		// Check if DigiCommerce exists
		if ( ! class_exists( 'DigiCommerce' ) ) {
			return '<p>' . __( 'DigiCommerce plugin is required to use this block.', 'digiblocks' ) . '</p>';
		}

		// Extract block attributes
		$id                       = isset( $attributes['id'] ) ? $attributes['id'] : 'digi-products-' . uniqid();
		$anchor                   = isset( $attributes['anchor'] ) ? $attributes['anchor'] : '';
		$custom_classes           = isset( $attributes['customClasses'] ) ? $attributes['customClasses'] : '';
		$products_to_show         = isset( $attributes['productsToShow'] ) ? $attributes['productsToShow'] : 3;
		$product_style            = isset( $attributes['productStyle'] ) ? $attributes['productStyle'] : 'grid';
		$display_featured_image   = isset( $attributes['displayFeaturedImage'] ) ? $attributes['displayFeaturedImage'] : true;
		$display_title            = isset( $attributes['displayTitle'] ) ? $attributes['displayTitle'] : true;
		$display_price            = isset( $attributes['displayPrice'] ) ? $attributes['displayPrice'] : true;
		$display_rating           = isset( $attributes['displayRating'] ) ? $attributes['displayRating'] : true;
		$display_categories       = isset( $attributes['displayCategories'] ) ? $attributes['displayCategories'] : true;
		$display_excerpt          = isset( $attributes['displayExcerpt'] ) ? $attributes['displayExcerpt'] : true;
		$display_view_product     = isset( $attributes['displayViewProductButton'] ) ? $attributes['displayViewProductButton'] : true;
		$excerpt_length           = isset( $attributes['excerptLength'] ) ? $attributes['excerptLength'] : 25;
		$view_product_text        = isset( $attributes['viewProductText'] ) ? $attributes['viewProductText'] : __( 'View Product', 'digiblocks' );
		$order                    = isset( $attributes['order'] ) ? $attributes['order'] : 'desc';
		$order_by                 = isset( $attributes['orderBy'] ) ? $attributes['orderBy'] : 'date';
		$categories               = isset( $attributes['categories'] ) ? $attributes['categories'] : [];
		$animation                = isset( $attributes['animation'] ) ? $attributes['animation'] : 'none';
		$image_size               = isset( $attributes['imageSize'] ) ? $attributes['imageSize'] : 'medium';
		$enable_pagination        = isset( $attributes['enablePagination'] ) ? $attributes['enablePagination'] : false;
		
		// Get the current responsive state
		$animation_class = ( 'none' !== $animation ) ? ' animate-' . $animation : '';
		
		// Build the block class
		$block_class = "digiblocks-products $id style-$product_style $custom_classes $animation_class";
		
		// Format the ID attribute
		$id_attr = $anchor ? ' id="' . esc_attr( $anchor ) . '"' : '';

		// Get current page
		$paged = get_query_var('paged') ? get_query_var('paged') : 1;
		
		// Set up the query arguments
		$args = array(
			'post_type'           => 'digi_product',
			'posts_per_page'      => $products_to_show,
			'post_status'         => 'publish',
			'order'               => $order,
			'orderby'             => $order_by,
			'ignore_sticky_posts' => true,
			'paged'               => $paged,
		);
		
		// Add categories if specified
		if ( ! empty( $categories ) && ! in_array( 0, $categories, true ) ) {
			$args['tax_query'] = array( // phpcs:ignore
				array(
					'taxonomy' => 'digi_product_cat',
					'field'    => 'term_id',
					'terms'    => $categories,
				),
			);
		}
		
		// For meta_value_num orderby, add meta_key for price
		if ( $order_by === 'meta_value_num' ) {
			$args['meta_key'] = 'digi_price'; // phpcs:ignore
		}
		
		// Get products
		$query = new WP_Query( $args );
		
		// Check for DigiCommerce_Pro and if reviews are enabled
		$reviews_enabled = class_exists( 'DigiCommerce_Pro' ) && 
						class_exists( 'DigiCommerce_Pro_Reviews' ) && 
						DigiCommerce()->get_option( 'enable_reviews', false );
		
		// Start output buffer
		ob_start();
		
		if ( $query->have_posts() ) :
			?>
			<div class="<?php echo esc_attr( $block_class ); ?>"<?php echo wp_kses_post( $id_attr ); ?>>
				<div class="digiblocks-products-container <?php echo 'layout-' . esc_attr( $product_style ); ?>">
					<?php while ( $query->have_posts() ) : ?>
						<?php 
						$query->the_post(); 
						$product_id = get_the_ID();
						
						// Get product meta
						$price = get_post_meta( $product_id, 'digi_price', true );
						$sale_price = get_post_meta( $product_id, 'digi_sale_price', true );
						?>
						<div class="digiblocks-product-item">
							<?php if ( $display_featured_image && has_post_thumbnail() ) : ?>
								<div class="digiblocks-product-image">
									<a href="<?php the_permalink(); ?>">
										<?php the_post_thumbnail( $image_size ); ?>
									</a>
								</div>
							<?php endif; ?>
		
							<div class="digiblocks-product-content">
								<?php if ( $display_categories ): ?>
									<?php $categories = get_the_terms( $product_id, 'digi_product_cat' ); ?>
									<?php if ( ! empty( $categories ) && ! is_wp_error( $categories ) ) : ?>
										<div class="digiblocks-product-categories">
											<?php
											$cat_links = array();
											foreach ($categories as $category) {
												$cat_links[] = '<a href="' . esc_url(get_term_link($category->term_id)) . '">' . esc_html($category->name) . '</a>';
											}
											echo wp_kses_post( implode(' ', $cat_links) );
											?>
										</div>
									<?php endif; ?>
								<?php endif; ?>
								
								<?php if ( $display_title ) : ?>
									<h3 class="digiblocks-product-title">
										<a href="<?php the_permalink(); ?>"><?php the_title(); ?></a>
									</h3>
								<?php endif; ?>
								
								<?php if ( $display_rating && $reviews_enabled ) : 
									// Get rating data if DigiCommerce Pro Reviews is active
									$rating_data = DigiCommerce_Pro_Reviews::instance()->get_product_rating( $product_id );
									if ( $rating_data['count'] > 0 ) :
									?>
									<div class="digiblocks-product-rating">
										<div class="star-rating">
											<?php 
											$rating = $rating_data['average'];
											$full_stars = floor( $rating );
											$half_star = ( $rating - $full_stars ) >= 0.5;
											
											// Output full stars
											for ( $i = 0; $i < $full_stars; $i++ ) {
												echo '<span class="star full">★</span>';
											}
											
											// Output half star if needed
											if ( $half_star ) {
												echo '<span class="star half">★</span>';
												$i++;
											}
											
											// Output empty stars
											for ( ; $i < 5; $i++ ) {
												echo '<span class="star empty">☆</span>';
											}
											?>
										</div>
										<span class="rating-count">(<?php echo esc_html( $rating_data['count'] ); ?>)</span>
									</div>
									<?php endif; ?>
								<?php endif; ?>
								
								<?php if ( $display_price && ( !empty( $price ) || !empty( $sale_price ) ) ) : ?>
									<div class="digiblocks-product-price">
										<?php if ( !empty( $sale_price ) && $sale_price < $price ) : ?>
											<span class="regular-price del"><?php echo wp_kses_post( DigiCommerce_Product::instance()->format_price( $price, '', true ) ); ?></span>
											<span class="sale-price"><?php echo wp_kses_post( DigiCommerce_Product::instance()->format_price( $sale_price, '', true ) ); ?></span>
										<?php else : ?>
											<span class="regular-price"><?php echo wp_kses_post( DigiCommerce_Product::instance()->format_price( $price, '', true ) ); ?></span>
										<?php endif; ?>
									</div>
								<?php endif; ?>
		
								<?php if ( $display_excerpt ) : ?>
									<div class="digiblocks-product-excerpt">
										<?php 
										// Get the excerpt
										$excerpt = get_the_excerpt();
										
										// Limit by word count
										$words = explode(' ', $excerpt);
										if (count($words) > $excerpt_length) {
											$excerpt = implode(' ', array_slice($words, 0, $excerpt_length)) . '...';
										}
										
										echo wp_kses_post( $excerpt );
										?>
									</div>
								<?php endif; ?>
								
								<?php if ( $display_view_product ) : ?>
									<div class="digiblocks-product-view-wrapper">
										<a href="<?php the_permalink(); ?>" class="digiblocks-product-view">
											<?php echo esc_html( $view_product_text ); ?>
										</a>
									</div>
								<?php endif; ?>
							</div>
						</div>
					<?php endwhile; ?>
				</div>
				
				<?php if ( $enable_pagination ) {
					$total_pages = $query->max_num_pages;
					
					if ( $total_pages > 1 ) {
						echo '<div class="digiblocks-pagination">';
						
						$pagination_args = array(
							'base'         => str_replace(999999999, '%#%', esc_url(get_pagenum_link(999999999))),
							'total'        => $total_pages,
							'current'      => $paged,
							'format'       => '?paged=%#%',
							'show_all'     => false,
							'type'         => 'plain',
							'end_size'     => 2,
							'mid_size'     => 1,
							'prev_next'    => true,
							'prev_text'    => '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 320 512" width="1em" height="1em"><path d="M47 239c-9.4 9.4-9.4 24.6 0 33.9L207 433c9.4 9.4 24.6 9.4 33.9 0s9.4-24.6 0-33.9L97.9 256 241 113c9.4-9.4 9.4-24.6 0-33.9s-24.6-9.4-33.9 0L47 239z"/></svg>',
							'next_text'    => '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 320 512" width="1em" height="1em"><path d="M273 239c9.4 9.4 9.4 24.6 0 33.9L113 433c-9.4 9.4-24.6 9.4-33.9 0s-9.4-24.6 0-33.9l143-143L79 113c-9.4-9.4-9.4-24.6 0-33.9s24.6-9.4 33.9 0L273 239z"/></svg>',
							'add_args'     => false,
							'add_fragment' => '',
						);
						
						echo paginate_links( $pagination_args ); // phpcs:ignore
						echo '</div>';
					}
				}
				?>
			</div>
			<?php
		else:
			?>
			<div class="<?php echo esc_attr( $block_class ); ?>"<?php echo wp_kses_post( $id_attr ); ?>>
				<p class="digiblocks-products-no-results"><?php esc_html_e( 'No products found.', 'digiblocks' ); ?></p>
			</div>
			<?php
		endif;
		
		// Reset post data
		wp_reset_postdata();
		
		// Get the output buffer
		$output = ob_get_clean();
		
		return $output;
	}

	/**
	 * Render callback for WooCommerce Products block
	 *
	 * @param array    $attributes Block attributes.
	 * @param string   $content Block content.
	 * @param WP_Block $block Block instance.
	 * @return string Rendered block output.
	 */
	public function render_woo_products_block( $attributes, $content, $block ) {
		// Check if WooCommerce is active
		if ( ! class_exists( 'WooCommerce' ) ) {
			return '<p>' . __( 'WooCommerce is not active. Please install and activate WooCommerce to use this block.', 'digiblocks' ) . '</p>';
		}
	
		// Extract block attributes
		$id                        = isset( $attributes['id'] ) ? $attributes['id'] : 'digi-woo-products-' . uniqid();
		$anchor                    = isset( $attributes['anchor'] ) ? $attributes['anchor'] : '';
		$custom_classes            = isset( $attributes['customClasses'] ) ? $attributes['customClasses'] : '';
		$products_to_show          = isset( $attributes['productsToShow'] ) ? intval( $attributes['productsToShow'] ) : 4;
		$display_featured_image    = isset( $attributes['displayFeaturedImage'] ) ? $attributes['displayFeaturedImage'] : true;
		$display_title             = isset( $attributes['displayTitle'] ) ? $attributes['displayTitle'] : true;
		$display_price             = isset( $attributes['displayPrice'] ) ? $attributes['displayPrice'] : true;
		$display_rating            = isset( $attributes['displayRating'] ) ? $attributes['displayRating'] : true;
		$display_sale_badge        = isset( $attributes['displaySaleBadge'] ) ? $attributes['displaySaleBadge'] : true;
		$display_categories        = isset( $attributes['displayCategories'] ) ? $attributes['displayCategories'] : true;
		$display_short_description = isset( $attributes['displayShortDescription'] ) ? $attributes['displayShortDescription'] : true;
		$display_add_to_cart       = isset( $attributes['displayAddToCart'] ) ? $attributes['displayAddToCart'] : true;
		$short_description_length  = isset( $attributes['shortDescriptionLength'] ) ? intval( $attributes['shortDescriptionLength'] ) : 25;
		$order                     = isset( $attributes['order'] ) ? $attributes['order'] : 'desc';
		$order_by                  = isset( $attributes['orderBy'] ) ? $attributes['orderBy'] : 'date';
		$categories                = isset( $attributes['categories'] ) ? $attributes['categories'] : [];
		$on_sale                   = isset( $attributes['onSale'] ) ? $attributes['onSale'] : false;
		$featured                  = isset( $attributes['featured'] ) ? $attributes['featured'] : false;
		$enable_pagination         = isset( $attributes['enablePagination'] ) ? $attributes['enablePagination'] : false;
		$image_size                = isset( $attributes['imageSize'] ) ? $attributes['imageSize'] : 'woocommerce_thumbnail';
		$animation                 = isset( $attributes['animation'] ) ? $attributes['animation'] : 'none';
	
		// Get current page
		$paged = get_query_var( 'paged' ) ? get_query_var( 'paged' ) : 1;
	
		// Set up the WP_Query arguments
		$query_args = array(
			'post_type'           => 'product',
			'post_status'         => 'publish',
			'ignore_sticky_posts' => true,
			'posts_per_page'      => $products_to_show,
			'paged'               => $paged,
			'orderby'             => $order_by,
			'order'               => $order,
		);
	
		// Add categories if specified - use tax_query for proper category filtering
		if ( ! empty( $categories ) && ! in_array( 0, $categories, true ) ) {
			$query_args['tax_query'][] = array(
				'taxonomy' => 'product_cat',
				'field'    => 'term_id',
				'terms'    => $categories,
				'operator' => 'IN',
			);
		}
	
		// Add featured filter if specified
		if ( $featured ) {
			$query_args['tax_query'][] = array(
				'taxonomy' => 'product_visibility',
				'field'    => 'name',
				'terms'    => 'featured',
				'operator' => 'IN',
			);
		}
	
		// Add on sale filter if specified
		if ( $on_sale ) {
			$on_sale_ids = wc_get_product_ids_on_sale();
			
			if ( ! empty( $on_sale_ids ) ) {
				$query_args['post__in'] = $on_sale_ids;
			} else {
				$query_args['post__in'] = array(0); // No products on sale, show no results
			}
		}
	
		// Set up tax_query relation if multiple conditions exist
		if ( isset( $query_args['tax_query'] ) && count( $query_args['tax_query'] ) > 1 ) {
			$query_args['tax_query']['relation'] = 'AND';
		}
	
		// Make sure hide_out_of_stock is respected
		$stock_option = get_option( 'woocommerce_hide_out_of_stock_items', 'no' );
		if ( 'yes' === $stock_option ) {
			$query_args['meta_query'][] = array(
				'key'     => '_stock_status',
				'value'   => 'instock',
				'compare' => '=',
			);
		}
	
		// Create new query
		$products_query = new WP_Query( $query_args );
	
		// Get animation class if any
		$animation_class = ( 'none' !== $animation ) ? ' animate-' . $animation : '';
	
		// Build class names
		$class_names = "digiblocks-woo-products $id $custom_classes $animation_class";
		
		// Format the ID attribute
		$id_attr = $anchor ? ' id="' . esc_attr( $anchor ) . '"' : '';
	
		// Start output buffer
		ob_start();
	
		if ( $products_query->have_posts() ) {
			?>
			<div class="<?php echo esc_attr( $class_names ); ?>"<?php echo wp_kses_post( $id_attr ); ?>>
				<div class="digiblocks-products-container">
					<?php 
					while ( $products_query->have_posts() ) : 
						$products_query->the_post();
						global $product;
						
						// Ensure $product is a WC_Product
						if ( ! is_a( $product, 'WC_Product' ) ) {
							$product = wc_get_product( get_the_ID() );
						}
						
						if ( ! $product ) {
							continue;
						}
					?>
						<div class="digiblocks-product-item">
							<?php if ( $display_sale_badge && $product->is_on_sale() ) : ?>
								<div class="digiblocks-product-sale-badge">
									<?php echo esc_html__( 'Sale!', 'digiblocks' ); ?>
								</div>
							<?php endif; ?>
	
							<?php if ( $display_featured_image ) : ?>
								<div class="digiblocks-product-image">
									<a href="<?php the_permalink(); ?>">
										<?php 
										if ( has_post_thumbnail() ) {
											the_post_thumbnail( $image_size );
										} else {
											echo wc_placeholder_img( $image_size ); // phpcs:ignore
										}
										?>
									</a>
								</div>
							<?php endif; ?>
	
							<div class="digiblocks-product-content">
								<?php if ( $display_categories ) : 
									$product_categories = wc_get_product_category_list( get_the_ID(), '', '<div class="digiblocks-product-categories">', '</div>' );
									if ( $product_categories ) {
										echo wp_kses_post( $product_categories );
									}
								endif; ?>
	
								<?php if ( $display_title ) : ?>
									<h3 class="digiblocks-product-title">
										<a href="<?php the_permalink(); ?>">
											<?php the_title(); ?>
										</a>
									</h3>
								<?php endif; ?>
	
								<?php if ( $display_price ) : ?>
									<div class="digiblocks-product-price">
										<?php echo wp_kses_post( $product->get_price_html() ); ?>
									</div>
								<?php endif; ?>
	
								<?php if ( $display_rating && wc_review_ratings_enabled() ) : ?>
									<div class="digiblocks-product-rating">
										<?php
										$rating = $product->get_average_rating();
										$count = $product->get_review_count();
										
										if ( $rating > 0 ) {
											// Use WooCommerce's rating HTML
											echo wc_get_rating_html( $rating ); // phpcs:ignore
											// Display count
											if ( $count > 0 ) {
												echo '<span class="count">(' . esc_html( $count ) . ')</span>';
											}
										} else {
											// Display empty stars if no ratings yet
											echo '<div class="star-rating">';
											for ( $i = 0; $i < 5; $i++ ) {
												echo '<span class="star empty"></span>';
											}
											echo '</div>';
											echo '<span class="count">(0)</span>';
										}
										?>
									</div>
								<?php endif; ?>
	
								<?php if ( $display_short_description ) : 
									$short_description = $product->get_short_description();
									if ( ! empty( $short_description ) ) {
										// Trim description to specified word count
										$description = wp_strip_all_tags( $short_description );
										$words = explode( ' ', $description, $short_description_length + 1 );
										if ( count( $words ) > $short_description_length ) {
											array_pop( $words );
											$description = implode( ' ', $words ) . '...';
										}
										?>
										<div class="digiblocks-product-excerpt">
											<?php echo esc_html( $description ); ?>
										</div>
									<?php 
									}
								endif; ?>
	
								<?php if ( $display_add_to_cart ) : ?>
									<div class="digiblocks-product-add-to-cart">
										<?php woocommerce_template_loop_add_to_cart(); ?>
									</div>
								<?php endif; ?>
							</div>
						</div>
					<?php endwhile; ?>
				</div>
	
				<?php if ( $enable_pagination && $products_query->max_num_pages > 1 ) : ?>
					<div class="digiblocks-pagination">
						<?php
						echo paginate_links( array( // phpcs:ignore
							'base'      => str_replace( 999999999, '%#%', esc_url( get_pagenum_link( 999999999 ) ) ),
							'format'    => '?paged=%#%',
							'current'   => max( 1, get_query_var( 'paged' ) ),
							'total'     => $products_query->max_num_pages,
							'prev_text' => '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 320 512" width="1em" height="1em"><path d="M47 239c-9.4 9.4-9.4 24.6 0 33.9L207 433c9.4 9.4 24.6 9.4 33.9 0s9.4-24.6 0-33.9L97.9 256 241 113c9.4-9.4 9.4-24.6 0-33.9s-24.6-9.4-33.9 0L47 239z"/></svg>',
							'next_text' => '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 320 512" width="1em" height="1em"><path d="M273 239c9.4 9.4 9.4 24.6 0 33.9L113 433c-9.4 9.4-24.6 9.4-33.9 0s-9.4-24.6 0-33.9l143-143L79 113c-9.4-9.4-9.4-24.6 0-33.9s24.6-9.4 33.9 0L273 239z"/></svg>',
						) );
						?>
					</div>
				<?php endif; ?>
			</div>
			<?php
			wp_reset_postdata();
		} else {
			?>
			<div class="<?php echo esc_attr( $class_names ); ?>"<?php echo wp_kses_post( $id_attr ); ?>>
				<p class="digiblocks-products-no-results">
					<?php echo esc_html__( 'No products found.', 'digiblocks' ); ?>
				</p>
			</div>
			<?php
		}
	
		return ob_get_clean();
	}

	/**
	 * Render callback for navigation block
	 *
	 * @param array    $attributes Block attributes.
	 * @param string   $content Block content.
	 * @param WP_Block $block Block instance.
	 */
	public function render_navigation_block( $attributes, $content, $block ) {
		// Get block attributes
		$id = $attributes['id'] ?? '';
		$anchor = $attributes['anchor'] ?? '';
		$customClasses = $attributes['customClasses'] ?? '';
		$menuType = $attributes['menuType'] ?? 'wordpress';
		$selectedMenu = $attributes['selectedMenu'] ?? null;
		$customItems = $attributes['customItems'] ?? array();
		$showMobileToggle = $attributes['showMobileToggle'] ?? true;
		$toggleIcon = $attributes['toggleIcon'] ?? 'hamburger';
		$customToggleIcon = $attributes['customToggleIcon'] ?? null;
		
		// Build class names
		$block_classes = array(
			'digiblocks-navigation',
			$id,
			$customClasses,
		);
		
		$block_classes = array_filter($block_classes);
		$block_classes = implode(' ', $block_classes);
	
		// Get SVG allowed elements
		$allowed_svg = digiblocks_allow_svg_in_kses();
		
		// Start output buffering
		ob_start();
		?>
		<nav class="<?php echo esc_attr($block_classes); ?>"<?php echo !empty($anchor) ? ' id="' . esc_attr($anchor) . '"' : ''; ?>>
			
			<?php if ($showMobileToggle): ?>
				<button class="digiblocks-mobile-toggle" 
						aria-label="<?php esc_attr_e('Toggle navigation', 'digiblocks'); ?>"
						data-toggle-target="<?php echo esc_attr($id); ?>">
					<?php if ($toggleIcon === 'hamburger'): ?>
						<div class="digiblocks-mobile-bars">
							<span></span>
							<span></span>
							<span></span>
						</div>
					<?php elseif ($customToggleIcon && !empty($customToggleIcon['svg'])): ?>
						<span><?php echo wp_kses($customToggleIcon['svg'], $allowed_svg); ?></span>
					<?php endif; ?>
				</button>
			<?php endif; ?>
			
			<ul class="digiblocks-navigation-menu" id="<?php echo esc_attr('menu-' . $id); ?>">
				<?php if ($menuType === 'wordpress' && $selectedMenu): ?>
					<?php
					// Render WordPress menu
					wp_nav_menu(array(
						'menu' => $selectedMenu['id'],
						'container' => false,
						'items_wrap' => '%3$s',
						'depth' => 0,
						'fallback_cb' => false,
						'walker' => new DigiBlocks_Navigation_Walker()
					));
					?>
				<?php endif; ?>
				
				<?php foreach($customItems as $item): ?>
					<li class="digiblocks-navigation-menu-item">
						<a href="<?php echo esc_url($item['url']); ?>" 
						class="digiblocks-navigation-link"
						<?php echo (!empty($item['opensInNewTab']) ? 'target="_blank"' : ''); ?>
						<?php echo (!empty($item['rel']) ? 'rel="' . esc_attr($item['rel']) . '"' : (!empty($item['opensInNewTab']) ? 'rel="noopener noreferrer"' : '')); ?>>
							
							<?php 
							// Get icon position - defaults to 'before' if not set
							$icon_position = isset($item['iconPosition']) ? $item['iconPosition'] : 'before'; 
							
							// Display icon before text if position is 'before'
							if ($icon_position === 'before' && !empty($item['icon']['svg'])): 
							?>
								<span class="digiblocks-navigation-icon">
								<?php echo wp_kses($item['icon']['svg'], $allowed_svg); ?>
								</span>
							<?php endif; ?>
							
							<span class="digiblocks-navigation-text"><?php echo esc_html($item['text']); ?></span>
							
							<?php 
							// Display icon after text if position is 'after'
							if ($icon_position === 'after' && !empty($item['icon']['svg'])): 
							?>
								<span class="digiblocks-navigation-icon">
									<?php echo wp_kses($item['icon']['svg'], $allowed_svg); ?>
								</span>
							<?php endif; ?>
						</a>
					</li>
				<?php endforeach; ?>
			</ul>
		</nav>
		<?php
		
		return ob_get_clean();
	}

	/**
	 * Render callback for login link block
	 *
	 * @param array    $attributes Block attributes.
	 * @param string   $content Block content.
	 * @param WP_Block $block Block instance.
	 */
	public function render_login_link_block( $attributes, $content, $block ) {
		// Get block attributes
		$id = $attributes['id'] ?? '';
		$anchor = $attributes['anchor'] ?? '';
		$custom_classes = $attributes['customClasses'] ?? '';
		
		// Check if user is logged in
		$is_logged_in = is_user_logged_in();
		
		if ($is_logged_in) {
			// Use logged in attributes
			$text = $attributes['loggedInText'] ?? __('My Account', 'digiblocks');
			$icon_value = $attributes['loggedInIconValue'] ?? null;
			$icon_position = $attributes['loggedInIconPosition'] ?? 'left';
			$url = $attributes['loggedInUrl'] ?? '';
			$new_tab = $attributes['loggedInOpenInNewTab'] ?? false;
			$rel = $attributes['loggedInRel'] ?? '';
			
			// Default to account page if no URL is provided
			if (empty($url)) {
				$url = get_edit_profile_url();
			}
		} else {
			// Use login attributes
			$text = $attributes['loginText'] ?? __('Log In', 'digiblocks');
			$icon_value = $attributes['loginIconValue'] ?? null;
			$icon_position = $attributes['loginIconPosition'] ?? 'left';
			$url = $attributes['loginUrl'] ?? '';
			$new_tab = $attributes['loginOpenInNewTab'] ?? false;
			$rel = $attributes['loginRel'] ?? '';
			
			// Default to login page if no URL is provided
			if (empty($url)) {
				$request_uri = isset( $_SERVER['REQUEST_URI'] ) ? esc_url_raw( wp_unslash( $_SERVER['REQUEST_URI'] ) ) : '';
				$url = wp_login_url( home_url( $request_uri ) );
			}
		}
		
		// Build class names
		$classes = "digiblocks-login-link $id $custom_classes";
		
		// Build the link
		$link = '<div class="' . esc_attr($classes) . '"';
			if (!empty($anchor)) {
				$link .= ' id="' . esc_attr($anchor) . '"';
			}
		$link .= '>';
			$link .= '<a href="' . esc_url($url) . '"';
			if ($new_tab) {
				$link .= ' target="_blank"';
				$rel = !empty($rel) ? $rel . ' noopener noreferrer' : 'noopener noreferrer';
			}
			if (!empty($rel)) {
				$link .= ' rel="' . esc_attr($rel) . '"';
			}
			$link .= '>';
			
			// Add content based on icon position
			$icon_html = '';
			if ($icon_value && isset($icon_value['svg'])) {
				$icon_html = '<span class="digiblocks-login-link-icon">' . $icon_value['svg'] . '</span>';
			}
			
			if ($icon_position === 'left') {
				$link .= $icon_html;
			}
			
			$link .= '<span class="digiblocks-login-link-text">' . esc_html($text) . '</span>';
			
			if ($icon_position === 'right') {
				$link .= $icon_html;
			}
			
			$link .= '</a>';
		$link .= '</div>';
		
		return $link;
	}

	/**
	 * Render callback for page title block
	 *
	 * @param array    $attributes Block attributes.
	 * @param string   $content Block content.
	 * @param WP_Block $block Block instance.
	 */
	public function render_page_title_block( $attributes, $content, $block ) {
		// Extract block attributes
		$id          = isset( $attributes['id'] ) ? $attributes['id'] : 'digi-page-title-' . uniqid();
		$anchor      = isset( $attributes['anchor'] ) ? $attributes['anchor'] : '';
		$classes     = isset( $attributes['customClasses'] ) ? $attributes['customClasses'] : '';
		$headingTag  = isset( $attributes['headingTag'] ) ? $attributes['headingTag'] : 'h2';
		$animation   = isset( $attributes['animation'] ) ? $attributes['animation'] : 'none';
		
		// Build class names
		$block_classes = "digiblocks-page-title $id";
		if (!empty($classes)) {
			$block_classes .= " $classes";
		}
		if ($animation !== 'none') {
			$block_classes .= " animate-$animation";
		}
		
		// Format the ID attribute
		$id_attr = $anchor ? ' id="' . esc_attr( $anchor ) . '"' : '';

		// Get the current page/post title
		$title = get_the_title();
		
		// If it's the front page or home page, we might want to use the site name instead
		if (is_front_page() && is_home()) {
			$title = get_bloginfo('name');
		}
		
		// For search results
		if (is_search()) {
			/* translators: %s: search query */
			$title = sprintf( esc_html__( 'Search Results for: %s', 'digiblocks' ), get_search_query() );
		}
		
		// For archives
		if (is_archive()) {
			$title = get_the_archive_title();
		}
		
		// For 404 pages
		if (is_404()) {
			$title = esc_html__( 'Page Not Found', 'digiblocks' );
		}
		
		// Render the block
		ob_start();
		?>
		<<?php echo esc_attr( $headingTag ); ?> class="<?php echo esc_attr( $block_classes ); ?>"<?php echo wp_kses_post( $id_attr ); ?>>
			<?php echo wp_kses_post( $title ); ?>
		</<?php echo esc_attr( $headingTag ); ?>>
		<?php
		
		return ob_get_clean();
	}

	/**
	 * Render callback for breadcrumbs block
	 *
	 * @param array    $attributes Block attributes.
	 * @param string   $content Block content.
	 * @param WP_Block $block Block instance.
	 */
	public function render_breadcrumbs_block( $attributes, $content, $block ) {
		// Extract block attributes
		$id           = isset( $attributes['id'] ) ? $attributes['id'] : 'digi-breadcrumbs-' . uniqid();
		$anchor       = isset( $attributes['anchor'] ) ? $attributes['anchor'] : '';
		$classes      = isset( $attributes['customClasses'] ) ? $attributes['customClasses'] : '';
		$showHome     = isset( $attributes['showHome'] ) ? $attributes['showHome'] : true;
		$homeText     = isset( $attributes['homeText'] ) ? $attributes['homeText'] : __( 'Home', 'digiblocks' );
		$showCurrent  = isset( $attributes['showCurrent'] ) ? $attributes['showCurrent'] : true;
		$useYoast     = isset( $attributes['useYoast'] ) ? $attributes['useYoast'] : false;
		$useRankMath  = isset( $attributes['useRankMath'] ) ? $attributes['useRankMath'] : false;
		$animation    = isset( $attributes['animation'] ) ? $attributes['animation'] : 'none';
		$useMicrodata = isset( $attributes['useMicrodata'] ) ? $attributes['useMicrodata'] : false;
		
		// Build class names
		$block_classes = "digiblocks-breadcrumbs $id";
		if (!empty($classes)) {
			$block_classes .= " $classes";
		}
		if ($animation !== 'none') {
			$block_classes .= " animate-$animation";
		}
		
		// Format the ID attribute
		$id_attr = $anchor ? ' id="' . esc_attr( $anchor ) . '"' : '';
		
		// Check if we should use Yoast SEO's breadcrumbs
		if ( $useYoast && function_exists( 'yoast_breadcrumb' ) ) {
			ob_start();
			?>
			<div class="<?php echo esc_attr( $block_classes ); ?>"<?php echo wp_kses_post( $id_attr ); ?>>
				<?php yoast_breadcrumb( '<nav aria-label="' . esc_attr__( 'Breadcrumb', 'digiblocks' ) . '"><p id="breadcrumbs">', '</p></nav>' ); ?>
			</div>
			<?php
			return ob_get_clean();
		}
		
		// Check if we should use Rank Math's breadcrumbs
		if ( $useRankMath && function_exists( 'rank_math_the_breadcrumbs' ) ) {
			ob_start();
			?>
			<div class="<?php echo esc_attr( $block_classes ); ?>"<?php echo wp_kses_post( $id_attr ); ?>>
				<?php rank_math_the_breadcrumbs(); ?>
			</div>
			<?php
			return ob_get_clean();
		}
		
		// If we've reached here, we need to generate our own breadcrumbs
		$breadcrumbs = $this->generate_breadcrumbs( $showHome, $homeText, $showCurrent );
		
		// Start output buffer
		ob_start();
		?>
		<div class="<?php echo esc_attr( $block_classes ); ?>"<?php echo wp_kses_post( $id_attr ); ?>>
			<nav aria-label="<?php echo esc_attr__( 'Breadcrumb', 'digiblocks' ); ?>">
				<ol class="digiblocks-breadcrumb-list"<?php echo $useMicrodata ? ' itemscope itemtype="https://schema.org/BreadcrumbList"' : ''; ?>>
					<?php 
					$position = 1;
					foreach ( $breadcrumbs as $index => $item ) :
						// Check if this is the home item and if we should show it
						if ( $index === 0 && ! $showHome ) {
							continue;
						}
						
						// Check if this is the last item and if we should show it
						if ( $index === count( $breadcrumbs ) - 1 && ! $showCurrent ) {
							continue;
						}
						
						// Determine if this is the current/last item
						$is_last = ( $index === count( $breadcrumbs ) - 1 );
						
						// Get the separator (not for the first item)
						$separator = $index > 0 ? sprintf(
							'<span class="digiblocks-breadcrumb-separator" aria-hidden="true">%s</span>',
							is_rtl() ? 
								'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 320 512" width="1em" height="1em"><path d="M47 239c-9.4 9.4-9.4 24.6 0 33.9L207 433c9.4 9.4 24.6 9.4 33.9 0s9.4-24.6 0-33.9L97.9 256 241 113c9.4-9.4 9.4-24.6 0-33.9s-24.6-9.4-33.9 0L47 239z"/></svg>' : 
								'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 320 512" width="1em" height="1em"><path d="M273 239c9.4 9.4 9.4 24.6 0 33.9L113 433c-9.4 9.4-24.6 9.4-33.9 0s-9.4-24.6 0-33.9l143-143L79 113c-9.4-9.4-9.4-24.6 0-33.9s24.6-9.4 33.9 0L273 239z"/></svg>'
						) : '';
						
						// Start the list item
						echo '<li class="digiblocks-breadcrumb-item"';
						if ( $useMicrodata ) {
							echo ' itemprop="itemListElement" itemscope itemtype="https://schema.org/ListItem"';
						}
						echo '>';

						// If this is the last/current item
						if ( $is_last ) {
							// For the current page, just show the label without any separator
							if ( $useMicrodata ) {
								echo '<span class="digiblocks-breadcrumb-current" itemprop="name">' . esc_html( $item['label'] ) . '</span>';
								echo '<meta itemprop="position" content="' . esc_attr( $position ) . '" />';
							} else {
								echo '<span class="digiblocks-breadcrumb-current">' . esc_html( $item['label'] ) . '</span>';
							}
						} else {
							// For links, show the link followed by a separator
							if ( $useMicrodata ) {
								echo '<a href="' . esc_url( $item['url'] ) . '" class="digiblocks-breadcrumb-link" itemprop="item">';
								echo '<span itemprop="name">' . esc_html( $item['label'] ) . '</span></a>';
								echo '<meta itemprop="position" content="' . esc_attr( $position ) . '" />';
							} else {
								echo '<a href="' . esc_url( $item['url'] ) . '" class="digiblocks-breadcrumb-link">' . esc_html( $item['label'] ) . '</a>';
							}
							
							// Add separator after links
							echo '<span class="digiblocks-breadcrumb-separator" aria-hidden="true">';
							echo is_rtl() ? 
								'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 320 512" width="1em" height="1em"><path d="M47 239c-9.4 9.4-9.4 24.6 0 33.9L207 433c9.4 9.4 24.6 9.4 33.9 0s9.4-24.6 0-33.9L97.9 256 241 113c9.4-9.4 9.4-24.6 0-33.9s-24.6-9.4-33.9 0L47 239z"/></svg>' : 
								'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 320 512" width="1em" height="1em"><path d="M273 239c9.4 9.4 9.4 24.6 0 33.9L113 433c-9.4 9.4-24.6 9.4-33.9 0s-9.4-24.6 0-33.9l143-143L79 113c-9.4-9.4-9.4-24.6 0-33.9s24.6-9.4 33.9 0L273 239z"/></svg>';
							echo '</span>';
						}

						echo '</li>';
						$position++;
					endforeach;
					?>
				</ol>
			</nav>
		</div>
		<?php
		
		// Return the rendered breadcrumb
		return ob_get_clean();
	}

	/**
	 * Render callback for featured image block
	 *
	 * @param array    $attributes Block attributes.
	 * @param string   $content Block content.
	 * @param WP_Block $block Block instance.
	 */
	public function render_featured_image_block( $attributes, $content, $block ) {
		// Extract block attributes
		$id = isset($attributes['id']) ? $attributes['id'] : 'digi-featured-image-' . uniqid();
		$anchor = isset($attributes['anchor']) ? $attributes['anchor'] : '';
		$custom_classes = isset($attributes['customClasses']) ? $attributes['customClasses'] : '';
		$image_size = isset($attributes['imageSize']) ? $attributes['imageSize'] : 'large';
		$image_crop = isset($attributes['imageCrop']) ? $attributes['imageCrop'] : false;
		$aspect_ratio = isset($attributes['aspectRatio']) ? $attributes['aspectRatio'] : 'default';
		$enable_caption = isset($attributes['enableCaption']) ? $attributes['enableCaption'] : false;
		$link_to_post = isset($attributes['linkToPost']) ? $attributes['linkToPost'] : false;
		$animation = isset($attributes['animation']) ? $attributes['animation'] : 'none';
		
		// Build the class names
		$classes = "digiblocks-featured-image $id";
		if ($custom_classes) {
			$classes .= " $custom_classes";
		}
		if ($animation !== 'none') {
			$classes .= " animate-$animation";
		}
		if ($image_crop) {
			$classes .= " crop-enabled";
			if ($aspect_ratio !== 'default') {
				$classes .= " ratio-$aspect_ratio";
			}
		}
		
		// Additional attributes
		$attr = '';
		if ($anchor) {
			$attr .= ' id="' . esc_attr($anchor) . '"';
		}
		
		// Get the current post
		$post_id = get_the_ID();
		
		// Check if the post has a featured image
		if (has_post_thumbnail($post_id)) {
			$image_id = get_post_thumbnail_id($post_id);
			$image_alt = get_post_meta($image_id, '_wp_attachment_image_alt', true);
			$image_caption = '';
			
			// Get image caption if needed
			if ($enable_caption) {
				$attachment = get_post($image_id);
				if ($attachment) {
					$image_caption = $attachment->post_excerpt;
				}
			}
			
			// Get image source
			if ($image_size === 'custom') {
				// For custom size, use 'large' but we'll apply custom dimensions via CSS
				$image_src = wp_get_attachment_image_url($image_id, 'large');
			} else {
				$image_src = wp_get_attachment_image_url($image_id, $image_size);
			}
			
			// Start output buffer
			ob_start();
			
			// Render the image with container
			?>
			<figure class="<?php echo esc_attr($classes); ?>"<?php echo $attr; ?>>
				<span>
					<?php if ($link_to_post): ?>
						<a href="<?php echo esc_url(get_permalink($post_id)); ?>">
							<img src="<?php echo esc_url($image_src); ?>" alt="<?php echo esc_attr($image_alt); ?>" />
						</a>
					<?php else: ?>
						<img src="<?php echo esc_url($image_src); ?>" alt="<?php echo esc_attr($image_alt); ?>" />
					<?php endif; ?>
					
					<?php if ($enable_caption && !empty($image_caption)): ?>
						<figcaption><?php echo wp_kses_post($image_caption); ?></figcaption>
					<?php endif; ?>
				</span>
			</figure>
			<?php
			
			return ob_get_clean();
		} else {
			// No featured image found
			return '<div class="' . esc_attr($classes) . '"' . $attr . '>' . 
				   '<div class="digiblocks-no-featured-image">' . 
				   esc_html__('No featured image found', 'digiblocks') . 
				   '</div></div>';
		}
	}

	/**
	 * Render callback for post meta block
	 *
	 * @param array    $attributes Block attributes.
	 * @param string   $content Block content.
	 * @param WP_Block $block Block instance.
	 */
	public function render_post_meta_block( $attributes, $content, $block ) {
		// Extract block attributes
		$id               = isset( $attributes['id'] ) ? $attributes['id'] : 'digi-post-meta-' . uniqid();
		$anchor           = isset( $attributes['anchor'] ) ? $attributes['anchor'] : '';
		$custom_classes   = isset( $attributes['customClasses'] ) ? $attributes['customClasses'] : '';
		$display_author   = isset( $attributes['displayAuthor'] ) ? $attributes['displayAuthor'] : true;
		$display_date     = isset( $attributes['displayDate'] ) ? $attributes['displayDate'] : true;
		$display_categories = isset( $attributes['displayCategories'] ) ? $attributes['displayCategories'] : true;
		$display_tags     = isset( $attributes['displayTags'] ) ? $attributes['displayTags'] : true;
		$icon_display     = isset( $attributes['iconDisplay'] ) ? $attributes['iconDisplay'] : true;
		$layout           = isset( $attributes['layout'] ) ? $attributes['layout'] : 'inline';
		$separator        = isset( $attributes['separator'] ) ? $attributes['separator'] : 'none';
		$animation        = isset( $attributes['animation'] ) ? $attributes['animation'] : 'none';
		
		// Build class names
		$block_classes = "digiblocks-post-meta $id";
		if (!empty($custom_classes)) {
			$block_classes .= " $custom_classes";
		}
		if ($animation !== 'none') {
			$block_classes .= " animate-$animation";
		}
		
		// Format the ID attribute
		$id_attr = $anchor ? ' id="' . esc_attr( $anchor ) . '"' : '';
		
		// SVG icons for the meta items
		$author_icon = '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512" width="1em" height="1em"><path d="M320 128a96 96 0 1 0 -192 0 96 96 0 1 0 192 0zM96 128a128 128 0 1 1 256 0A128 128 0 1 1 96 128zM32 480l384 0c-1.2-79.7-66.2-144-146.3-144l-91.4 0c-80 0-145 64.3-146.3 144zM0 482.3C0 383.8 79.8 304 178.3 304l91.4 0C368.2 304 448 383.8 448 482.3c0 16.4-13.3 29.7-29.7 29.7L29.7 512C13.3 512 0 498.7 0 482.3z"/></svg>';
		$date_icon = '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512" width="1em" height="1em"><path d="M480 256A224 224 0 1 1 32 256a224 224 0 1 1 448 0zM0 256a256 256 0 1 0 512 0A256 256 0 1 0 0 256zM240 112l0 144c0 5.3 2.7 10.3 7.1 13.3l96 64c7.4 4.9 17.3 2.9 22.2-4.4s2.9-17.3-4.4-22.2L272 247.4 272 112c0-8.8-7.2-16-16-16s-16 7.2-16 16z"/></svg>';
		$categories_icon = '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512" width="1em" height="1em"><path d="M64 64C46.3 64 32 78.3 32 96l0 320c0 17.7 14.3 32 32 32l384 0c17.7 0 32-14.3 32-32l0-256c0-17.7-14.3-32-32-32l-156.1 0c-17 0-33.3-6.7-45.3-18.7L210.7 73.4c-6-6-14.1-9.4-22.6-9.4L64 64zM0 96C0 60.7 28.7 32 64 32l124.1 0c17 0 33.3 6.7 45.3 18.7l35.9 35.9c6 6 14.1 9.4 22.6 9.4L448 96c35.3 0 64 28.7 64 64l0 256c0 35.3-28.7 64-64 64L64 480c-35.3 0-64-28.7-64-64L0 96z"/></svg>';
		$tags_icon = '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512" width="1em" height="1em"><path d="M32 229.5L32 80c0-8.8 7.2-16 16-16l149.5 0c8.5 0 16.6 3.4 22.6 9.4l176 176c12.5 12.5 12.5 32.8 0 45.3L262.6 428.1c-12.5 12.5-32.8 12.5-45.3 0l-176-176L18.7 274.7l22.6-22.6c-6-6-9.4-14.1-9.4-22.6zm-32 0c0 17 6.7 33.3 18.7 45.3l176 176c25 25 65.5 25 90.5 0L418.7 317.3c25-25 25-65.5 0-90.5l-176-176c-12-12-28.3-18.7-45.3-18.7L48 32C21.5 32 0 53.5 0 80L0 229.5zM112 168a24 24 0 1 0 0-48 24 24 0 1 0 0 48z"/></svg>';
		
		// Start output buffer
		ob_start();
		
		// Check if we're in a singular context
		$is_singular = is_singular();
		$post = get_post();
		
		// Start rendering
		?>
		<div class="<?php echo esc_attr( $block_classes ); ?>"<?php echo wp_kses_post( $id_attr ); ?>>
			<ul class="digiblocks-meta-list">
				<?php if ( $display_author && $post ) : ?>
					<li class="digiblocks-meta-item">
						<?php if ( $icon_display ) : ?>
							<span class="digiblocks-meta-icon"><?php echo wp_kses( $author_icon, digiblocks_allow_svg_in_kses() ); ?></span>
						<?php endif; ?>
						
						<span class="digiblocks-meta-value">
							<?php 
							if ( $is_singular ) {
								$author_id = $post->post_author;
								$author_name = get_the_author_meta( 'display_name', $author_id );
								$author_url = get_author_posts_url( $author_id );
								echo '<a href="' . esc_url( $author_url ) . '">' . esc_html( $author_name ) . '</a>';
							}
							?>
						</span>
					</li>
				<?php endif; ?>
				
				<?php if ( $display_date && $post ) : ?>
					<li class="digiblocks-meta-item">
						<?php if ( $icon_display ) : ?>
							<span class="digiblocks-meta-icon"><?php echo wp_kses( $date_icon, digiblocks_allow_svg_in_kses() ); ?></span>
						<?php endif; ?>
						
						<span class="digiblocks-meta-value">
							<?php 
							if ( $is_singular ) {
								$post_date = get_the_date( '', $post );
								echo esc_html( $post_date );
							} else {
								echo esc_html( date_i18n( get_option( 'date_format' ) ) );
							}
							?>
						</span>
					</li>
				<?php endif; ?>
				
				<?php if ( $display_categories && $post ) : ?>
					<li class="digiblocks-meta-item">
						<?php if ( $icon_display ) : ?>
							<span class="digiblocks-meta-icon"><?php echo wp_kses( $categories_icon, digiblocks_allow_svg_in_kses() ); ?></span>
						<?php endif; ?>
						
						<span class="digiblocks-meta-value">
							<?php 
							if ( $is_singular && 'post' === get_post_type() ) {
								$categories = get_the_category( $post->ID );
								if ( ! empty( $categories ) ) {
									$category_links = array();
									foreach ( $categories as $category ) {
										$category_links[] = '<a href="' . esc_url( get_category_link( $category->term_id ) ) . '">' . esc_html( $category->name ) . '</a>';
									}
									echo implode( ', ', $category_links ); // phpcs:ignore WordPress.Security.EscapeOutput.OutputNotEscaped
								} else {
									esc_html_e( 'Uncategorized', 'digiblocks' );
								}
							}
							?>
						</span>
					</li>
				<?php endif; ?>
				
				<?php if ( $display_tags && $post ) : ?>
					<li class="digiblocks-meta-item">
						<?php if ( $icon_display ) : ?>
							<span class="digiblocks-meta-icon"><?php echo wp_kses( $tags_icon, digiblocks_allow_svg_in_kses() ); ?></span>
						<?php endif; ?>
						
						<span class="digiblocks-meta-value">
							<?php 
							if ( $is_singular && 'post' === get_post_type() ) {
								$tags = get_the_tags( $post->ID );
								if ( ! empty( $tags ) ) {
									$tag_links = array();
									foreach ( $tags as $tag ) {
										$tag_links[] = '<a href="' . esc_url( get_tag_link( $tag->term_id ) ) . '">' . esc_html( $tag->name ) . '</a>';
									}
									echo implode( ', ', $tag_links ); // phpcs:ignore WordPress.Security.EscapeOutput.OutputNotEscaped
								} else {
									esc_html_e( 'No Tags', 'digiblocks' );
								}
							}
							?>
						</span>
					</li>
				<?php endif; ?>
			</ul>
		</div>
		<?php
		
		// Return the generated HTML
		return ob_get_clean();
	}

	/**
	 * Render callback for post content block
	 *
	 * @param array    $attributes Block attributes.
	 * @param string   $content Block content.
	 * @param WP_Block $block Block instance.
	 */
	public function render_post_content_block( $attributes, $content, $block ) {
		// Extract block attributes
		$id           = isset( $attributes['id'] ) ? $attributes['id'] : 'digi-post-content-' . uniqid();
		$anchor       = isset( $attributes['anchor'] ) ? $attributes['anchor'] : '';
		$classes      = isset( $attributes['customClasses'] ) ? $attributes['customClasses'] : '';
		$animation    = isset( $attributes['animation'] ) ? $attributes['animation'] : 'none';
		
		// Build class names
		$block_classes = "digiblocks-post-content $id";
		if (!empty($classes)) {
			$block_classes .= " $classes";
		}
		if ($animation !== 'none') {
			$block_classes .= " animate-$animation";
		}
		
		// Format the ID attribute
		$id_attr = $anchor ? ' id="' . esc_attr( $anchor ) . '"' : '';
		
		// Get the post content
		$post_content = '';
		
		if (is_singular()) {
			global $post;
			
			// Get the raw post content
			$post_content = apply_filters('the_content', $post->post_content);
			
			// Remove any instances of this block to prevent infinite loops
			$post_content = preg_replace('/<!-- wp:digiblocks\/post-content.*?\/-->/s', '', $post_content);
		} else {
			// Fallback for non-singular pages (archive, etc.)
			$post_content = '<p>' . esc_html__('Post content will be displayed here in single post view.', 'digiblocks') . '</p>';
		}
		
		// Render the block
		ob_start();
		?>
		<div class="<?php echo esc_attr( $block_classes ); ?>"<?php echo wp_kses_post( $id_attr ); ?>>
			<?php echo $post_content; ?>
		</div>
		<?php
		
		return ob_get_clean();
	}

	/**
	 * Render callback for post navigation block
	 *
	 * @param array    $attributes Block attributes.
	 * @param string   $content Block content.
	 * @param WP_Block $block Block instance.
	 */
	public function render_post_navigation_block( $attributes, $content, $block ) {
		// Extract block attributes
		$id               = isset( $attributes['id'] ) ? $attributes['id'] : 'digi-post-nav-' . uniqid();
		$anchor           = isset( $attributes['anchor'] ) ? $attributes['anchor'] : '';
		$customClasses    = isset( $attributes['customClasses'] ) ? $attributes['customClasses'] : '';
		$showPostTitle    = isset( $attributes['showPostTitle'] ) ? $attributes['showPostTitle'] : true;
		$showNavLabels    = isset( $attributes['showNavLabels'] ) ? $attributes['showNavLabels'] : true;
		$previousLabel    = isset( $attributes['previousLabel'] ) ? $attributes['previousLabel'] : __('Previous', 'digiblocks');
		$nextLabel        = isset( $attributes['nextLabel'] ) ? $attributes['nextLabel'] : __('Next', 'digiblocks');
		$showFeaturedImage = isset( $attributes['showFeaturedImage'] ) ? $attributes['showFeaturedImage'] : false;
		$imageSize        = isset( $attributes['imageSize'] ) ? $attributes['imageSize'] : 'thumbnail';
		$animation        = isset( $attributes['animation'] ) ? $attributes['animation'] : 'none';
		
		// Build the block class
		$block_class = "digiblocks-post-navigation $id";
		
		if ($animation !== 'none') {
			$block_class .= " animate-$animation";
		}
		
		if ($customClasses) {
			$block_class .= " $customClasses";
		}
		
		// Format the ID attribute
		$id_attr = $anchor ? ' id="' . esc_attr( $anchor ) . '"' : '';
		
		// Start output buffer
		ob_start();
		
		// Only show navigation on single posts
		if ( is_single() ) {
			// Get previous and next post objects
			$prev_post = get_previous_post();
			$next_post = get_next_post();
			
			if ( $prev_post || $next_post ) {
				?>
				<div class="<?php echo esc_attr( $block_class ); ?>"<?php echo wp_kses_post( $id_attr ); ?>>
					<div class="digiblocks-post-navigation-links">
						<?php
						// Previous post link
						if ( $prev_post ) {
							$prev_title = get_the_title( $prev_post );
							$prev_url = get_permalink( $prev_post );
							$prev_image = '';
							
							if ( $showFeaturedImage && has_post_thumbnail( $prev_post ) ) {
								$prev_image = get_the_post_thumbnail( $prev_post, $imageSize, array( 'class' => 'digiblocks-post-navigation-image' ) );
							}
							?>
							<a href="<?php echo esc_url( $prev_url ); ?>" class="digiblocks-post-navigation-link digiblocks-post-navigation-prev">
								<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="24" height="24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
									<path d="M19 12H5M12 19l-7-7 7-7"/>
								</svg>
								
								<div class="digiblocks-post-navigation-content">
									<?php if ( $showNavLabels ) : ?>
										<span class="digiblocks-post-navigation-label"><?php echo esc_html( $previousLabel ); ?></span>
									<?php endif; ?>
									
									<?php if ( $showPostTitle ) : ?>
										<span class="digiblocks-post-navigation-title"><?php echo esc_html( $prev_title ); ?></span>
									<?php endif; ?>
								</div>
								<?php if ( $showFeaturedImage && $prev_image ) : ?>
									<?php echo wp_kses_post( $prev_image ); ?>
								<?php endif; ?>
							</a>
							<?php
						} else {
							// Empty div to maintain layout
							echo '<div class="digiblocks-post-navigation-placeholder"></div>';
						}
						
						// Next post link
						if ( $next_post ) {
							$next_title = get_the_title( $next_post );
							$next_url = get_permalink( $next_post );
							$next_image = '';
							
							if ( $showFeaturedImage && has_post_thumbnail( $next_post ) ) {
								$next_image = get_the_post_thumbnail( $next_post, $imageSize, array( 'class' => 'digiblocks-post-navigation-image' ) );
							}
							?>
							<a href="<?php echo esc_url( $next_url ); ?>" class="digiblocks-post-navigation-link digiblocks-post-navigation-next">
								<?php if ( $showFeaturedImage && $next_image ) : ?>
									<?php echo wp_kses_post( $next_image ); ?>
								<?php endif; ?>
								<div class="digiblocks-post-navigation-content">
									<?php if ( $showNavLabels ) : ?>
										<span class="digiblocks-post-navigation-label"><?php echo esc_html( $nextLabel ); ?></span>
									<?php endif; ?>
									
									<?php if ( $showPostTitle ) : ?>
										<span class="digiblocks-post-navigation-title"><?php echo esc_html( $next_title ); ?></span>
									<?php endif; ?>
								</div>
								
								<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="24" height="24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
									<path d="M5 12h14M12 5l7 7-7 7"/>
								</svg>
							</a>
							<?php
						} else {
							// Empty div to maintain layout
							echo '<div class="digiblocks-post-navigation-placeholder"></div>';
						}
						?>
					</div>
				</div>
				<?php
			}
		}
		
		// Get the output buffer
		$output = ob_get_clean();
		
		return $output;
	}

	/**
	 * Render callback for the Author Box block.
	 *
	 * @param array    $attributes Block attributes.
	 * @param string   $content    Block content.
	 * @param WP_Block $block      Block instance.
	 * @return string  Block content.
	 */
	public function render_author_box_block( $attributes, $content, $block ) {
		// Extract attributes
		$id              = isset( $attributes['id'] ) ? $attributes['id'] : '';
		$anchor          = isset( $attributes['anchor'] ) ? $attributes['anchor'] : '';
		$customClasses   = isset( $attributes['customClasses'] ) ? $attributes['customClasses'] : '';
		$layout          = isset( $attributes['layout'] ) ? $attributes['layout'] : 'horizontal';
		$animation       = isset( $attributes['animation'] ) ? $attributes['animation'] : 'none';
		$displayAvatar   = isset( $attributes['displayAvatar'] ) ? $attributes['displayAvatar'] : true;
		$displayName     = isset( $attributes['displayName'] ) ? $attributes['displayName'] : true;
		$displayBio      = isset( $attributes['displayBio'] ) ? $attributes['displayBio'] : true;
		$displaySocial   = isset( $attributes['displaySocial'] ) ? $attributes['displaySocial'] : true;
		$avatarSize      = isset( $attributes['avatarSize'] ) ? $attributes['avatarSize'] : [
			'desktop' => 100,
			'tablet'  => '',
			'mobile'  => '',
		];
		$socialProfiles   = isset( $attributes['socialProfiles'] ) ? $attributes['socialProfiles'] : [];

		// Build the block class
		$block_class = "digiblocks-post-navigation $id";
		
		if ($animation !== 'none') {
			$block_class .= " animate-$animation";
		}
		
		if ($customClasses) {
			$block_class .= " $customClasses";
		}
		
		// Format the ID attribute
		$id_attr = $anchor ? ' id="' . esc_attr( $anchor ) . '"' : '';

		// Social media platform icons
		$social_icons = [
			'website'  => '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512" fill="currentColor"><path d="M352 256c0 22.2-1.2 43.6-3.3 64H163.3c-2.2-20.4-3.3-41.8-3.3-64s1.2-43.6 3.3-64H348.7c2.2 20.4 3.3 41.8 3.3 64zm28.8-64H503.9c5.3 20.5 8.1 41.9 8.1 64s-2.8 43.5-8.1 64H380.8c2.1-20.6 3.2-42 3.2-64s-1.1-43.4-3.2-64zm112.6-32H376.7c-10-63.9-29.8-117.4-55.3-151.6c78.3 20.7 142 77.5 171.9 151.6zm-149.1 0H167.7c6.1-36.4 15.5-68.6 27-94.7c10.5-23.6 22.2-40.7 33.5-51.5C239.4 3.2 248.7 0 256 0s16.6 3.2 27.8 13.8c11.3 10.8 23 27.9 33.5 51.5c11.6 26 20.9 58.2 27 94.7zm-209 0H18.6C48.6 85.9 112.2 29.1 190.6 8.4C165.1 42.6 145.3 96.1 135.3 160zM8.1 192C2.8 212.5 0 233.9 0 256s2.8 43.5 8.1 64H131.2c-2.1-20.6-3.2-42-3.2-64s1.1-43.4 3.2-64zM194.7 446.6c-11.6-26-20.9-58.2-27-94.6H344.3c-6.1 36.4-15.5 68.6-27 94.6c-10.5 23.6-22.2 40.7-33.5 51.5C272.6 508.8 263.3 512 256 512s-16.6-3.2-27.8-13.8c-11.3-10.8-23-27.9-33.5-51.5zM135.3 352c10 63.9 29.8 117.4 55.3 151.6C112.2 482.9 48.6 426.1 18.6 352H135.3zm358.1 0c-30 74.1-93.6 130.9-171.9 151.6c25.5-34.2 45.2-87.7 55.3-151.6H493.4z"/></svg>',
			'facebook' => '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 320 512" fill="currentColor"><path d="M80 299.3V512H196V299.3h86.5l18-97.8H196V166.9c0-51.7 20.3-71.5 72.7-71.5c16.3 0 29.4 .4 37 1.2V7.9C291.4 4 256.4 0 236.2 0C129.3 0 80 50.5 80 159.4v42.1H14v97.8H80z"/></svg>',
			'twitter'  => '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512" fill="currentColor"><path d="M389.2 48h70.6L305.6 224.2 487 464H345L233.7 318.6 106.5 464H35.8L200.7 275.5 26.8 48H172.4L272.9 180.9 389.2 48zM364.4 421.8h39.1L151.1 88h-42L364.4 421.8z"/></svg>',
			'instagram' => '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512" fill="currentColor"><path d="M224.1 141c-63.6 0-114.9 51.3-114.9 114.9s51.3 114.9 114.9 114.9S339 319.5 339 255.9 287.7 141 224.1 141zm0 189.6c-41.1 0-74.7-33.5-74.7-74.7s33.5-74.7 74.7-74.7 74.7 33.5 74.7 74.7-33.6 74.7-74.7 74.7zm146.4-194.3c0 14.9-12 26.8-26.8 26.8-14.9 0-26.8-12-26.8-26.8s12-26.8 26.8-26.8 26.8 12 26.8 26.8zm76.1 27.2c-1.7-35.9-9.9-67.7-36.2-93.9-26.2-26.2-58-34.4-93.9-36.2-37-2.1-147.9-2.1-184.9 0-35.8 1.7-67.6 9.9-93.9 36.1s-34.4 58-36.2 93.9c-2.1 37-2.1 147.9 0 184.9 1.7 35.9 9.9 67.7 36.2 93.9s58 34.4 93.9 36.2c37 2.1 147.9 2.1 184.9 0 35.9-1.7 67.7-9.9 93.9-36.2 26.2-26.2 34.4-58 36.2-93.9 2.1-37 2.1-147.8 0-184.8zM398.8 388c-7.8 19.6-22.9 34.7-42.6 42.6-29.5 11.7-99.5 9-132.1 9s-102.7 2.6-132.1-9c-19.6-7.8-34.7-22.9-42.6-42.6-11.7-29.5-9-99.5-9-132.1s-2.6-102.7 9-132.1c7.8-19.6 22.9-34.7 42.6-42.6 29.5-11.7 99.5-9 132.1-9s102.7-2.6 132.1 9c19.6 7.8 34.7 22.9 42.6 42.6 11.7 29.5 9 99.5 9 132.1s2.7 102.7-9 132.1z"/></svg>',
			'linkedin' => '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512" fill="currentColor"><path d="M100.3 448H7.4V148.9h92.9zM53.8 108.1C24.1 108.1 0 83.5 0 53.8a53.8 53.8 0 0 1 107.6 0c0 29.7-24.1 54.3-53.8 54.3zM447.9 448h-92.7V302.4c0-34.7-.7-79.2-48.3-79.2-48.3 0-55.7 37.7-55.7 76.7V448h-92.8V148.9h89.1v40.8h1.3c12.4-23.5 42.7-48.3 87.9-48.3 94 0 111.3 61.9 111.3 142.3V448z"/></svg>',
			'youtube'  => '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 576 512" fill="currentColor"><path d="M549.7 124.1c-6.3-23.7-24.8-42.3-48.3-48.6C458.8 64 288 64 288 64S117.2 64 74.6 75.5c-23.5 6.3-42 24.9-48.3 48.6-11.4 42.9-11.4 132.3-11.4 132.3s0 89.4 11.4 132.3c6.3 23.7 24.8 41.5 48.3 47.8C117.2 448 288 448 288 448s170.8 0 213.4-11.5c23.5-6.3 42-24.2 48.3-47.8 11.4-42.9 11.4-132.3 11.4-132.3s0-89.4-11.4-132.3zm-317.5 213.5V175.2l142.7 81.2-142.7 81.2z"/></svg>',
			'github'   => '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 496 512" fill="currentColor"><path d="M165.9 397.4c0 2-2.3 3.6-5.2 3.6-3.3.3-5.6-1.3-5.6-3.6 0-2 2.3-3.6 5.2-3.6 3-.3 5.6 1.3 5.6 3.6zm-31.1-4.5c-.7 2 1.3 4.3 4.3 4.9 2.6 1 5.6 0 6.2-2s-1.3-4.3-4.3-5.2c-2.6-.7-5.5.3-6.2 2.3zm44.2-1.7c-2.9.7-4.9 2.6-4.6 4.9.3 2 2.9 3.3 5.9 2.6 2.9-.7 4.9-2.6 4.6-4.6-.3-1.9-3-3.2-5.9-2.9zM244.8 8C106.1 8 0 113.3 0 252c0 110.9 69.8 205.8 169.5 239.2 12.8 2.3 17.3-5.6 17.3-12.1 0-6.2-.3-40.4-.3-61.4 0 0-70 15-84.7-29.8 0 0-11.4-29.1-27.8-36.6 0 0-22.9-15.7 1.6-15.4 0 0 24.9 2 38.6 25.8 21.9 38.6 58.6 27.5 72.9 20.9 2.3-16 8.8-27.1 16-33.7-55.9-6.2-112.3-14.3-112.3-110.5 0-27.5 7.6-41.3 23.6-58.9-2.6-6.5-11.1-33.3 2.6-67.9 20.9-6.5 69 27 69 27 20-5.6 41.5-8.5 62.8-8.5s42.8 2.9 62.8 8.5c0 0 48.1-33.6 69-27 13.7 34.7 5.2 61.4 2.6 67.9 16 17.7 25.8 31.5 25.8 58.9 0 96.5-58.9 104.2-114.8 110.5 9.2 7.9 17 22.9 17 46.4 0 33.7-.3 75.4-.3 83.6 0 6.5 4.6 14.4 17.3 12.1C428.2 457.8 496 362.9 496 252 496 113.3 383.5 8 244.8 8zM97.2 352.9c-1.3 1-1 3.3.7 5.2 1.6 1.6 3.9 2.3 5.2 1 1.3-1 1-3.3-.7-5.2-1.6-1.6-3.9-2.3-5.2-1zm-10.8-8.1c-.7 1.3.3 2.9 2.3 3.9 1.6 1 3.6.7 4.3-.7.7-1.3-.3-2.9-2.3-3.9-2-.6-3.6-.3-4.3.7zm32.4 35.6c-1.6 1.3-1 4.3 1.3 6.2 2.3 2.3 5.2 2.6 6.5 1 1.3-1.3.7-4.3-1.3-6.2-2.2-2.3-5.2-2.6-6.5-1zm-11.4-14.7c-1.6 1-1.6 3.6 0 5.9 1.6 2.3 4.3 3.3 5.6 2.3 1.6-1.3 1.6-3.9 0-6.2-1.4-2.3-4-3.3-5.6-2z"/></svg>',
		];

		// Get the current post's author
		global $post;
		if ( isset( $post->post_author ) ) {
			$author_id = $post->post_author;
		} else {
			// Fallback to the current user if no post is available
			$author_id = get_current_user_id();
		}
		
		// Get author data
		$author_name = get_the_author_meta( 'display_name', $author_id );
		$author_bio = get_the_author_meta( 'description', $author_id );
		$author_avatar = get_avatar( $author_id, $avatarSize['desktop'] );
		
		// Get social media profiles from user meta
		$author_website = get_the_author_meta( 'url', $author_id );
		$author_social = array(
			'facebook'  => get_the_author_meta( 'facebook', $author_id ),
			'twitter'   => get_the_author_meta( 'twitter', $author_id ),
			'instagram' => get_the_author_meta( 'instagram', $author_id ),
			'linkedin'  => get_the_author_meta( 'linkedin', $author_id ),
			'youtube'   => get_the_author_meta( 'youtube', $author_id ),
			'github'    => get_the_author_meta( 'github', $author_id ),
			'website'   => $author_website,
		);

		// Start output buffer
		ob_start();
		?>
		<div class="<?php echo esc_attr( $block_class ); ?>"<?php echo wp_kses_post( $id_attr ); ?>>
			<?php if ( $displayAvatar ) : ?>
				<div class="digiblocks-author-avatar">
					<?php echo $author_avatar; // phpcs:ignore WordPress.Security.EscapeOutput.OutputNotEscaped ?>
				</div>
			<?php endif; ?>
			
			<div class="digiblocks-author-content">
				<?php if ( $displayName && ! empty( $author_name ) ) : ?>
					<h3 class="digiblocks-author-name"><?php echo esc_html( $author_name ); ?></h3>
				<?php endif; ?>
				
				<?php if ( $displayBio && ! empty( $author_bio ) ) : ?>
					<p class="digiblocks-author-description"><?php echo wp_kses_post( $author_bio ); ?></p>
				<?php endif; ?>
				
				<?php if ( $displaySocial && ! empty( $socialProfiles ) ) : ?>
					<div class="digiblocks-author-social">
						<?php 
						// Loop through the enabled social profiles in the block settings
						foreach ( $socialProfiles as $platform => $profile ) :
							if ( isset( $profile['enabled'] ) && $profile['enabled'] ) :
								// Get the platform URL from user meta (if available)
								$social_url = '';
								if ( isset( $author_social[$platform] ) && ! empty( $author_social[$platform] ) ) {
									$social_url = esc_url( $author_social[$platform] );
								} else {
									// Skip if we don't have a URL
									continue;
								}
								
								// If we have a URL, display the icon
								if ( ! empty( $social_url ) ) :
									$icon = isset( $social_icons[$platform] ) ? $social_icons[$platform] : '';
								?>
									<a href="<?php echo esc_url( $social_url ); ?>" target="_blank" rel="noopener noreferrer">
										<?php echo $icon; // phpcs:ignore WordPress.Security.EscapeOutput.OutputNotEscaped ?>
									</a>
								<?php endif; ?>
							<?php endif; ?>
						<?php endforeach; ?>
					</div>
				<?php endif; ?>
			</div>
		</div>
		<?php
		
		// Get the output buffer
		return ob_get_clean();
	}

	/**
	 * Render callback for related posts block
	 *
	 * @param array    $attributes Block attributes.
	 * @param string   $content Block content.
	 * @param WP_Block $block Block instance.
	 * @return string The block content.
	 */
	public function render_related_posts_block($attributes, $content, $block) {
		// Extract block attributes
		$id                       = isset($attributes['id']) ? $attributes['id'] : 'digi-related-posts-' . uniqid();
		$anchor                   = isset($attributes['anchor']) ? $attributes['anchor'] : '';
		$custom_classes           = isset($attributes['customClasses']) ? $attributes['customClasses'] : '';
		$posts_to_show            = isset($attributes['postsToShow']) ? $attributes['postsToShow'] : 3;
		$post_style               = isset($attributes['postStyle']) ? $attributes['postStyle'] : 'grid';
		$display_featured_image   = isset($attributes['displayFeaturedImage']) ? $attributes['displayFeaturedImage'] : true;
		$display_title            = isset($attributes['displayTitle']) ? $attributes['displayTitle'] : true;
		$display_meta             = isset($attributes['displayMeta']) ? $attributes['displayMeta'] : true;
		$display_excerpt          = isset($attributes['displayExcerpt']) ? $attributes['displayExcerpt'] : true;
		$display_read_more_button = isset($attributes['displayReadMoreButton']) ? $attributes['displayReadMoreButton'] : true;
		$meta_settings            = isset($attributes['metaSettings']) ? $attributes['metaSettings'] : [
			'displayAuthor'     => true,
			'displayDate'       => true,
			'displayCategories' => true,
			'displayComments'   => false,
		];
		$excerpt_length           = isset($attributes['excerptLength']) ? $attributes['excerptLength'] : 25;
		$read_more_text           = isset($attributes['readMoreText']) ? $attributes['readMoreText'] : __('Read More', 'digiblocks');
		$relation_type            = isset($attributes['relationType']) ? $attributes['relationType'] : 'category';
		$no_related_posts_text    = isset($attributes['noRelatedPostsText']) ? $attributes['noRelatedPostsText'] : __('No related posts found.', 'digiblocks');
		$heading_text             = isset($attributes['headingText']) ? $attributes['headingText'] : __('Related Posts', 'digiblocks');
		$display_heading          = isset($attributes['displayHeading']) ? $attributes['displayHeading'] : true;
		$animation                = isset($attributes['animation']) ? $attributes['animation'] : 'none';
		$image_size               = isset($attributes['imageSize']) ? $attributes['imageSize'] : 'medium';

		// Get the current responsive state
		$animation_class = ('none' !== $animation) ? ' animate-' . $animation : '';
		
		// Build the block class
		$block_class = "digiblocks-related-posts $id style-$post_style $custom_classes $animation_class";
		
		// Format the ID attribute
		$id_attr = $anchor ? ' id="' . esc_attr($anchor) . '"' : '';

		// Get the current post ID
		$current_post_id = get_the_ID();
		
		// If we're not on a singular post/page, return early
		if (!$current_post_id || !is_singular()) {
			ob_start();
			?>
			<div class="<?php echo esc_attr($block_class); ?>"<?php echo wp_kses_post($id_attr); ?>>
				<p><?php esc_html_e('This block displays related posts and will only show content on single post pages.', 'digiblocks'); ?></p>
			</div>
			<?php
			return ob_get_clean();
		}
		
		// Get the taxonomy terms of the current post based on relation type
		$term_ids = array();
		
		if ($relation_type === 'category' || $relation_type === 'both') {
			$categories = get_the_category($current_post_id);
			if (!empty($categories)) {
				foreach ($categories as $category) {
					$term_ids[] = $category->term_id;
				}
			}
		}
		
		if ($relation_type === 'tag' || $relation_type === 'both') {
			$tags = get_the_tags($current_post_id);
			if (!empty($tags)) {
				foreach ($tags as $tag) {
					$term_ids[] = $tag->term_id;
				}
			}
		}
		
		// If no terms were found, display the no related posts message
		if (empty($term_ids)) {
			ob_start();
			?>
			<div class="<?php echo esc_attr($block_class); ?>"<?php echo wp_kses_post($id_attr); ?>>
				<?php if ($display_heading) : ?>
					<h3 class="digiblocks-related-posts-heading"><?php echo esc_html($heading_text); ?></h3>
				<?php endif; ?>
				<p class="digiblocks-posts-no-results"><?php echo esc_html($no_related_posts_text); ?></p>
			</div>
			<?php
			return ob_get_clean();
		}
		
		// Set up the query arguments
		$args = array(
			'post_type'           => 'post',
			'posts_per_page'      => $posts_to_show,
			'post_status'         => 'publish',
			'post__not_in'        => array($current_post_id), // Exclude current post
			'ignore_sticky_posts' => true,
		);
		
		// Add the taxonomy query
		$tax_query = array('relation' => 'OR');
		
		if ($relation_type === 'category' || $relation_type === 'both') {
			$tax_query[] = array(
				'taxonomy' => 'category',
				'field'    => 'term_id',
				'terms'    => $term_ids,
			);
		}
		
		if ($relation_type === 'tag' || $relation_type === 'both') {
			$tax_query[] = array(
				'taxonomy' => 'post_tag',
				'field'    => 'term_id',
				'terms'    => $term_ids,
			);
		}
		
		$args['tax_query'] = $tax_query;
		
		// Get related posts
		$related_posts = new WP_Query($args);
		
		// Start output buffer
		ob_start();
		
		if ($related_posts->have_posts()) :
			?>
			<div class="<?php echo esc_attr($block_class); ?>"<?php echo wp_kses_post($id_attr); ?>>
				<?php if ($display_heading) : ?>
					<h3 class="digiblocks-related-posts-heading"><?php echo esc_html($heading_text); ?></h3>
				<?php endif; ?>
				
				<div class="digiblocks-posts-container layout-<?php echo esc_attr($post_style); ?>">
					<?php while ($related_posts->have_posts()) : ?>
						<?php 
						$related_posts->the_post(); 
						$post_id = get_the_ID();
						?>
						<article class="digiblocks-post-item">
							<?php if ($display_featured_image && has_post_thumbnail()) : ?>
								<div class="digiblocks-post-image">
									<a href="<?php the_permalink(); ?>">
										<?php the_post_thumbnail($image_size); ?>
									</a>
								</div>
							<?php endif; ?>
		
							<div class="digiblocks-post-content">
								<?php if ($display_title) : ?>
									<h3 class="digiblocks-post-title">
										<a href="<?php the_permalink(); ?>"><?php the_title(); ?></a>
									</h3>
								<?php endif; ?>
		
								<?php if ($display_excerpt) : ?>
									<div class="digiblocks-post-excerpt">
										<?php 
										// Get the excerpt
										$excerpt = get_the_excerpt();
										
										// Limit by word count
										$words = explode(' ', $excerpt);
										if (count($words) > $excerpt_length) {
											$excerpt = implode(' ', array_slice($words, 0, $excerpt_length)) . '...';
										}
										
										echo wp_kses_post($excerpt);
										?>
									</div>
								<?php endif; ?>

								<?php if ($display_meta): ?>
									<?php if (isset($meta_settings['displayCategories']) && $meta_settings['displayCategories']) : ?>
										<?php $categories = get_the_category(); ?>
										<?php if (!empty($categories)) : ?>
											<div class="digiblocks-post-categories">
												<?php
												$cat_links = array();
												foreach ($categories as $category) {
													$cat_links[] = '<a href="' . esc_url(get_category_link($category->term_id)) . '">' . esc_html($category->name) . '</a>';
												}
												echo wp_kses_post(implode(' ', $cat_links));
												?>
											</div>
										<?php endif; ?>
									<?php endif; ?>

									<div class="digiblocks-post-footer-meta">
										<?php if (isset($meta_settings['displayAuthor']) && $meta_settings['displayAuthor']): ?>
											<div class="digiblocks-author-avatar">
												<a href="<?php echo esc_url(get_author_posts_url(get_the_author_meta('ID'))); ?>">
													<?php echo get_avatar(get_the_author_meta('ID'), 96); ?>
												</a>
											</div>
										<?php endif; ?>
										
										<div class="digiblocks-footer-meta-items">
											<?php if (isset($meta_settings['displayAuthor']) && $meta_settings['displayAuthor']): ?>
												<span class="digiblocks-posted-by">
													<span class="digiblocks-meta-prefix"><?php esc_html_e('by', 'digiblocks'); ?></span>
													<a href="<?php echo esc_url(get_author_posts_url(get_the_author_meta('ID'))); ?>" title="<?php echo esc_attr(get_the_author()); ?>" rel="author">
														<?php the_author(); ?>
													</a>
												</span>
											<?php endif; ?>
											
											<?php if (isset($meta_settings['displayDate']) && $meta_settings['displayDate']): ?>
												<span class="digiblocks-posted-on">
													<span class="digiblocks-meta-prefix"><?php esc_html_e('on', 'digiblocks'); ?></span>
													<time datetime="<?php echo esc_attr(get_the_date('c')); ?>">
														<?php echo get_the_date(); ?>
													</time>
												</span>
											<?php endif; ?>
										</div>
									</div>
								<?php endif; ?>
		
								<?php 
								if ($display_read_more_button || ($display_meta && isset($meta_settings['displayComments']) && $meta_settings['displayComments'])) : ?>
									<div class="digiblocks-post-footer-actions">
										<?php if ($display_read_more_button) : ?>
											<a href="<?php echo esc_url(get_permalink()); ?>" class="digiblocks-post-read-more">
												<?php echo esc_html($read_more_text); ?>
											</a>
										<?php endif; ?>
										
										<?php if ($display_meta && isset($meta_settings['displayComments']) && $meta_settings['displayComments']) : 
											$comment_count = get_comments_number();
											$comment_link = get_comments_link();
											?>
											<a href="<?php echo esc_url($comment_link); ?>" class="digiblocks-post-comments-count">
												<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512" width="1em" height="1em"><path d="M256 64C125.8 64 32 148.6 32 240c0 37.1 15.5 70.6 40 100c5.2 6.3 8.4 14.8 7.4 23.9c-3.1 27-11.4 52.5-25.7 76.3c-.5 .9-1.1 1.8-1.6 2.6c11.1-2.9 22.2-7 32.7-11.5L91.2 446l-6.4-14.7c17-7.4 33-16.7 48.4-27.4c8.5-5.9 19.4-7.5 29.2-4.2C193 410.1 224.1 416 256 416c130.2 0 224-84.6 224-176s-93.8-176-224-176zM0 240C0 125.2 114.5 32 256 32s256 93.2 256 208s-114.5 208-256 208c-36 0-70.5-6.7-103.8-17.9c-.2-.1-.5 0-.7 .1c-16.9 11.7-34.7 22.1-53.9 30.5C73.6 471.1 44.7 480 16 480c-6.5 0-12.3-3.9-14.8-9.8s-1.1-12.8 3.4-17.4c8.1-8.2 15.2-18.2 21.7-29c11.7-19.6 18.7-40.6 21.3-63.1c0 0-.1-.1-.1-.2C19.6 327.1 0 286.6 0 240z"/></svg>
												<?php 
												if ($comment_count == 0) {
													esc_html_e('Leave a Comment', 'digiblocks');
												} elseif ($comment_count == 1) {
													esc_html_e('1 Comment', 'digiblocks');
												} else {
													echo esc_html(
														sprintf(
															/* translators: %d: number of comments */
															esc_html__('%d Comments', 'digiblocks'),
															$comment_count
														)
													);
												}
												?>
											</a>
										<?php endif; ?>
									</div>
								<?php endif; ?>
							</div>
						</article>
					<?php endwhile; ?>
				</div>
			</div>
			<?php
		else :
			?>
			<div class="<?php echo esc_attr($block_class); ?>"<?php echo wp_kses_post($id_attr); ?>>
				<?php if ($display_heading) : ?>
					<h3 class="digiblocks-related-posts-heading"><?php echo esc_html($heading_text); ?></h3>
				<?php endif; ?>
				<p class="digiblocks-posts-no-results"><?php echo esc_html($no_related_posts_text); ?></p>
			</div>
			<?php
		endif;
		
		// Reset post data
		wp_reset_postdata();
		
		// Get the output buffer
		$output = ob_get_clean();
		
		return $output;
	}

	/**
	 * Render callback for the Post Comments block.
	 *
	 * @param array    $attributes Block attributes.
	 * @param string   $content    Block content.
	 * @param WP_Block $block      Block instance.
	 * @return string  Block content.
	 */
	public function render_post_comments_block( $attributes, $content, $block ) {
		// Extract attributes
		$id                  = isset( $attributes['id'] ) ? $attributes['id'] : 'digi-comments-' . uniqid();
		$anchor              = isset( $attributes['anchor'] ) ? $attributes['anchor'] : 'comments';
		$customClasses       = isset( $attributes['customClasses'] ) ? $attributes['customClasses'] : '';
		$showAvatars         = isset( $attributes['showAvatars'] ) ? $attributes['showAvatars'] : true;
		$avatarSize          = isset( $attributes['avatarSize'] ) ? $attributes['avatarSize'] : [
			'desktop' => 50,
			'tablet'  => 40,
			'mobile'  => 30,
		];
		$commentsPerPage     = isset( $attributes['commentsPerPage'] ) ? $attributes['commentsPerPage'] : 20;
		$nestedComments      = isset( $attributes['nestedComments'] ) ? $attributes['nestedComments'] : true;
		$commentsOrder       = isset( $attributes['commentsOrder'] ) ? $attributes['commentsOrder'] : 'asc';
		$displayTitle        = isset( $attributes['displayTitle'] ) ? $attributes['displayTitle'] : true;
		$titleText           = isset( $attributes['titleText'] ) ? $attributes['titleText'] : __('Comments', 'digiblocks');
		$customFormTitle     = isset( $attributes['customFormTitle'] ) ? $attributes['customFormTitle'] : false;
		$formTitle           = isset( $attributes['formTitle'] ) ? $attributes['formTitle'] : __('Leave a Reply', 'digiblocks');
		$displayLoggedIn     = isset( $attributes['displayLoggedIn'] ) ? $attributes['displayLoggedIn'] : true;
		$loggedInText        = isset( $attributes['loggedInText'] ) ? $attributes['loggedInText'] : '';
		$displayCookieConsent = isset( $attributes['displayCookieConsent'] ) ? $attributes['displayCookieConsent'] : true;
		$cookieConsentText   = isset( $attributes['cookieConsentText'] ) ? $attributes['cookieConsentText'] : '';
		$displaySubmitButton = isset( $attributes['displaySubmitButton'] ) ? $attributes['displaySubmitButton'] : false;
		$submitButtonText    = isset( $attributes['submitButtonText'] ) ? $attributes['submitButtonText'] : '';
		$displayCancelReply  = isset( $attributes['displayCancelReply'] ) ? $attributes['displayCancelReply'] : false;
		$cancelReplyText     = isset( $attributes['cancelReplyText'] ) ? $attributes['cancelReplyText'] : '';
		$animation           = isset( $attributes['animation'] ) ? $attributes['animation'] : 'none';
	
		// Build the block class
		$block_class = "digiblocks-comments $id";
		
		if ($animation !== 'none') {
			$block_class .= " animate-$animation";
		}
		
		if ($customClasses) {
			$block_class .= " $customClasses";
		}
		
		// Format the ID attribute
		$id_attr = $anchor ? ' id="' . esc_attr( $anchor ) . '"' : '';
	
		// Start output buffer
		ob_start();
	
		// Make sure we're on a singular post or page
		if (!is_singular()) {
			?>
			<div class="<?php echo esc_attr( $block_class ); ?>"<?php echo wp_kses_post( $id_attr ); ?>>
				<p><?php esc_html_e('Comments will be displayed on singular posts and pages.', 'digiblocks'); ?></p>
			</div>
			<?php
			return ob_get_clean();
		}
	
		// Get post ID
		$post_id = get_the_ID();
		
		// Get total comment count
		$comment_count = get_comments_number($post_id);
		
		// Get current page
		$cpage = get_query_var('cpage');
		if (!$cpage) {
			$cpage = isset($_GET['cpage']) ? absint($_GET['cpage']) : 1;
		}
		
		// Set up the comments for display (not using get_comments directly)
		// Instead, we'll use WordPress's built-in functions that handle pagination correctly
		
		// Before output, we need to set comment pagination options
		if ($commentsPerPage > 0) {
			// Set these values before we call comments_template
			add_filter('comments_per_page', function() use ($commentsPerPage) {
				return $commentsPerPage;
			}, 999);
			
			// Ensure page_comments is enabled
			add_filter('pre_option_page_comments', '__return_true');
			
			// Set comment order
			add_filter('pre_option_comment_order', function() use ($commentsOrder) {
				return $commentsOrder;
			}, 999);
			
			// Set default comment page
			add_filter('pre_option_default_comments_page', function() {
				return 'oldest'; // This matches typical WordPress behavior
			}, 999);
		}
		
		// Custom comment callback function
		$comment_callback = function($comment, $args, $depth) use ($id, $showAvatars, $avatarSize) {
			$GLOBALS['comment'] = $comment;
			$avatar_size = $avatarSize['desktop']; // Use desktop size for simplicity
			
			// Get comment classes
			$comment_class = 'digiblocks-comment';
			if ($comment->comment_parent) {
				$comment_class .= ' digiblocks-child-comment';
			}
			?>
			<li id="comment-<?php comment_ID(); ?>" class="<?php echo esc_attr($comment_class); ?>">
				<div class="digiblocks-comment-header">
					<?php if ($showAvatars) : ?>
						<div class="digiblocks-comment-avatar">
							<?php echo get_avatar($comment, $avatar_size); ?>
						</div>
					<?php endif; ?>
					
					<div class="digiblocks-comment-meta">
						<h4 class="digiblocks-comment-author">
							<?php comment_author_link(); ?>
						</h4>
						<div class="digiblocks-comment-date">
							<a href="<?php echo esc_url(get_comment_link()); ?>">
								<?php
								printf(
									/* translators: 1: Comment date, 2: Comment time */
									esc_html__('%1$s at %2$s', 'digiblocks'),
									get_comment_date(),
									get_comment_time()
								);
								?>
							</a>
							<?php edit_comment_link(__('Edit', 'digiblocks'), ' <span class="digiblocks-edit-link">(', ')</span>'); ?>
						</div>
					</div>
				</div>
	
				<div class="digiblocks-comment-content">
					<?php if ($comment->comment_approved == '0') : ?>
						<p class="digiblocks-comment-awaiting-moderation">
							<?php esc_html_e('Your comment is awaiting moderation.', 'digiblocks'); ?>
						</p>
					<?php endif; ?>
					
					<?php comment_text(); ?>
				</div>
	
				<div class="digiblocks-comment-reply">
					<?php
					comment_reply_link(
						array_merge(
							$args,
							array(
								'add_below' => 'comment',
								'depth'     => $depth,
								'max_depth' => $args['max_depth'],
								'reply_text' => __('Reply', 'digiblocks'),
								'login_text' => __('Log in to Reply', 'digiblocks')
							)
						)
					);
					?>
				</div>
			<?php
		};
	
		// Begin output
		?>
		<div class="<?php echo esc_attr($block_class); ?>"<?php echo wp_kses_post($id_attr); ?>>
			<?php if ($displayTitle && ($comment_count > 0 || comments_open($post_id))) : ?>
				<h3 class="digiblocks-comments-title">
					<?php
					if ($comment_count === 0) {
						echo esc_html($titleText);
					} else {
						// translators: %1$s: Comments count, %2$s: Post title
						printf(
							esc_html(_n(
								'%1$s Comment on "%2$s"',
								'%1$s Comments on "%2$s"',
								$comment_count,
								'digiblocks'
							)),
							number_format_i18n($comment_count),
							get_the_title()
						);
					}
					?>
				</h3>
			<?php endif; ?>
	
			<?php
			// We'll use WordPress's comment listing feature directly,
			// which handles pagination and threading correctly
			if ($comment_count > 0) {
				// Setup the comment listing arguments
				$list_args = array(
					'style'       => 'ul',
					'short_ping'  => true,
					'avatar_size' => $avatarSize['desktop'],
					'callback'    => $comment_callback,
					'per_page'    => $commentsPerPage,
					'page'        => $cpage,
					'reverse_top_level' => ($commentsOrder !== 'asc'),
					'max_depth'   => $nestedComments ? 5 : 1,
				);
				
				// Get all approved comments for this post
				$all_comments = get_comments(array(
					'post_id' => $post_id,
					'status'  => 'approve',
					'order'   => $commentsOrder,
				));
				
				echo '<ul class="digiblocks-comments-list">';
				
				// Use the WordPress function that correctly handles pagination
				wp_list_comments($list_args, $all_comments);
				
				echo '</ul>';
				
				// Calculate max pages
				$max_pages = ceil($comment_count / $commentsPerPage);
				
				// Show pagination if needed
				if ($max_pages > 1) {
					$pagination_args = array(
						'base'         => add_query_arg('cpage', '%#%'),
						'format'       => '',
						'total'        => $max_pages,
						'current'      => $cpage,
						'echo'         => true,
						'add_fragment' => '#' . $anchor,
						'prev_text'    => __('&laquo; Previous Comments', 'digiblocks'),
						'next_text'    => __('Next Comments &raquo;', 'digiblocks'),
					);
					
					echo '<nav class="digiblocks-comments-navigation" role="navigation">';
					echo paginate_links($pagination_args);
					echo '</nav>';
				}
			}
			?>
	
			<?php if (comments_open($post_id)) : ?>
				<div class="digiblocks-comment-form">
					<?php
					// Define custom comment form args
					$form_args = array();
					
					// Customize comment form title if needed
					if ($customFormTitle) {
						$form_args['title_reply'] = $formTitle;
					}
					
					// Customize submit button text if needed
					if ($displaySubmitButton) {
						$form_args['label_submit'] = $submitButtonText;
					}
					
					// Customize cancel reply text if needed
					if ($displayCancelReply) {
						$form_args['cancel_reply_link'] = $cancelReplyText;
					}
					
					// Customize logged in text if needed
					if ($displayLoggedIn && !empty($loggedInText)) {
						$user = wp_get_current_user();
						$user_identity = $user->exists() ? $user->display_name : '';
						$form_args['logged_in_as'] = sprintf(
							$loggedInText,
							get_edit_user_link(),
							$user_identity,
							wp_logout_url(apply_filters('the_permalink', get_permalink()))
						);
					}
					
					// Customize cookie consent text if needed
					if ($displayCookieConsent && !empty($cookieConsentText)) {
						$form_args['cookie_consent_text'] = $cookieConsentText;
					}
					
					comment_form($form_args);
					?>
				</div>
			<?php elseif ($comment_count > 0) : ?>
				<p class="digiblocks-comments-closed"><?php esc_html_e('Comments are closed.', 'digiblocks'); ?></p>
			<?php endif; ?>
		</div>
		<?php
	
		// Remove our temporarily added filters
		remove_filter('comments_per_page', function() use ($commentsPerPage) {
			return $commentsPerPage;
		}, 999);
		remove_filter('pre_option_page_comments', '__return_true');
		remove_filter('pre_option_comment_order', function() use ($commentsOrder) {
			return $commentsOrder;
		}, 999);
		remove_filter('pre_option_default_comments_page', function() {
			return 'oldest';
		}, 999);
	
		// Get the output buffer
		return ob_get_clean();
	}

	/**
	 * Render callback for the Copyright block.
	 *
	 * @param array    $attributes Block attributes.
	 * @param string   $content    Block content.
	 * @param WP_Block $block      Block instance.
	 * @return string  Block content.
	 */
	public function render_copyright_block( $attributes, $content, $block ) {
		// Extract attributes
		$id              = isset( $attributes['id'] ) ? $attributes['id'] : '';
		$anchor          = isset( $attributes['anchor'] ) ? $attributes['anchor'] : '';
		$customClasses   = isset( $attributes['customClasses'] ) ? $attributes['customClasses'] : '';
		$copyrightText   = isset( $attributes['copyrightText'] ) ? $attributes['copyrightText'] : __( '© {year} {sitename}. All rights reserved.', 'digiblocks' );
		$animation       = isset( $attributes['animation'] ) ? $attributes['animation'] : 'none';

		// Build the block class
		$block_class = "digiblocks-copyright $id";
		
		if ( $animation !== 'none' ) {
			$block_class .= " animate-$animation";
		}
		
		if ( $customClasses ) {
			$block_class .= " $customClasses";
		}
		
		// Format the ID attribute
		$id_attr = $anchor ? ' id="' . esc_attr( $anchor ) . '"' : '';

		// Process copyright text to replace placeholders
		$processed_text = $copyrightText;
		if ( ! empty( $processed_text ) ) {
			// Get current year, site name and URL
			$current_year = gmdate( 'Y' );
			$site_name = get_bloginfo( 'name' );
			$site_url = home_url();

			// Replace placeholders
			$processed_text = str_replace( '{year}', $current_year, $processed_text );
			$processed_text = str_replace( '{sitename}', $site_name, $processed_text );
			$processed_text = str_replace( 
				'{siteurl}', 
				'<a href="' . esc_url( $site_url ) . '">' . esc_html( $site_name ) . '</a>', 
				$processed_text 
			);
		}

		// Start output buffer
		ob_start();
		?>
		<div class="<?php echo esc_attr( $block_class ); ?>"<?php echo wp_kses_post( $id_attr ); ?>>
			<div class="digiblocks-copyright-text">
				<?php echo wp_kses_post( $processed_text ); ?>
			</div>
		</div>
		<?php
		
		// Get the output buffer
		return ob_get_clean();
	}

	/**
	 * Generate breadcrumbs array
	 *
	 * @param bool   $show_home Show home link.
	 * @param string $home_text Home text.
	 * @param bool   $show_current Show current page.
	 * @return array Breadcrumbs array.
	 */
	private function generate_breadcrumbs( $show_home = true, $home_text = '', $show_current = true ) {
		// Initialize breadcrumbs array
		$breadcrumbs = array();
		
		// Get the home URL and add it as the first item
		$home_url = home_url( '/' );
		$breadcrumbs[] = array(
			'label' => ! empty( $home_text ) ? $home_text : __( 'Home', 'digiblocks' ),
			'url'   => $home_url,
		);
		
		// Front page
		if ( is_front_page() ) {
			// We're on the front page, don't add anything else
			return $breadcrumbs;
		}
		
		// Home page (if different from front page)
		if ( is_home() ) {
			$page_for_posts = get_option( 'page_for_posts' );
			if ( $page_for_posts ) {
				$breadcrumbs[] = array(
					'label' => get_the_title( $page_for_posts ),
					'url'   => get_permalink( $page_for_posts ),
				);
			} else {
				$breadcrumbs[] = array(
					'label' => __( 'Blog', 'digiblocks' ),
					'url'   => '',
				);
			}
			return $breadcrumbs;
		}
		
		// Category archives
		if ( is_category() ) {
			$category = get_queried_object();
			
			// If the category has a parent, add ancestors
			if ( $category->parent ) {
				$ancestors = array_reverse( get_ancestors( $category->term_id, 'category' ) );
				foreach ( $ancestors as $ancestor_id ) {
					$ancestor = get_term( $ancestor_id, 'category' );
					$breadcrumbs[] = array(
						'label' => $ancestor->name,
						'url'   => get_term_link( $ancestor ),
					);
				}
			}
			
			// Add current category
			$breadcrumbs[] = array(
				'label' => $category->name,
				'url'   => '',
			);
			return $breadcrumbs;
		}
		
		// Tag archives
		if ( is_tag() ) {
			$tag = get_queried_object();
			$breadcrumbs[] = array(
				'label' => sprintf( __( 'Tag: %s', 'digiblocks' ), $tag->name ),
				'url'   => '',
			);
			return $breadcrumbs;
		}
		
		// Author archives
		if ( is_author() ) {
			$author = get_queried_object();
			$breadcrumbs[] = array(
				'label' => sprintf( __( 'Author: %s', 'digiblocks' ), $author->display_name ),
				'url'   => '',
			);
			return $breadcrumbs;
		}
		
		// Date archives
		if ( is_date() ) {
			if ( is_year() ) {
				$breadcrumbs[] = array(
					'label' => get_the_time( 'Y' ),
					'url'   => '',
				);
			} elseif ( is_month() ) {
				$breadcrumbs[] = array(
					'label' => get_the_time( 'Y' ),
					'url'   => get_year_link( get_the_time( 'Y' ) ),
				);
				$breadcrumbs[] = array(
					'label' => get_the_time( 'F' ),
					'url'   => '',
				);
			} elseif ( is_day() ) {
				$breadcrumbs[] = array(
					'label' => get_the_time( 'Y' ),
					'url'   => get_year_link( get_the_time( 'Y' ) ),
				);
				$breadcrumbs[] = array(
					'label' => get_the_time( 'F' ),
					'url'   => get_month_link( get_the_time( 'Y' ), get_the_time( 'm' ) ),
				);
				$breadcrumbs[] = array(
					'label' => get_the_time( 'd' ),
					'url'   => '',
				);
			}
			return $breadcrumbs;
		}
		
		// Search results
		if ( is_search() ) {
			$breadcrumbs[] = array(
				'label' => sprintf( __( 'Search results for: %s', 'digiblocks' ), get_search_query() ),
				'url'   => '',
			);
			return $breadcrumbs;
		}
		
		// 404 page
		if ( is_404() ) {
			$breadcrumbs[] = array(
				'label' => __( 'Page not found', 'digiblocks' ),
				'url'   => '',
			);
			return $breadcrumbs;
		}
		
		// Single post
		if ( is_singular( 'post' ) ) {
			// Get post categories
			$categories = get_the_category();
			if ( $categories ) {
				// Get the deepest category
				$category = $this->get_deepest_category( $categories );
				
				// If the category has ancestors, add them to the breadcrumbs
				if ( $category->parent ) {
					$ancestors = array_reverse( get_ancestors( $category->term_id, 'category' ) );
					foreach ( $ancestors as $ancestor_id ) {
						$ancestor = get_term( $ancestor_id, 'category' );
						$breadcrumbs[] = array(
							'label' => $ancestor->name,
							'url'   => get_term_link( $ancestor ),
						);
					}
				}
				
				// Add the category
				$breadcrumbs[] = array(
					'label' => $category->name,
					'url'   => get_term_link( $category ),
				);
			}
			
			// Add current post title
			if ( $show_current ) {
				$breadcrumbs[] = array(
					'label' => get_the_title(),
					'url'   => '',
				);
			}
			return $breadcrumbs;
		}
		
		// Custom post types
		if ( is_singular() && ! is_page() && ! is_attachment() ) {
			$post_type = get_post_type();
			$post_type_obj = get_post_type_object( $post_type );
			
			// Add post type archive link if available
			if ( $post_type_obj && $post_type_obj->has_archive ) {
				$breadcrumbs[] = array(
					'label' => $post_type_obj->labels->name,
					'url'   => get_post_type_archive_link( $post_type ),
				);
			}
			
			// For hierarchical post types, add ancestors
			if ( is_post_type_hierarchical( $post_type ) ) {
				$ancestors = array_reverse( get_post_ancestors( get_the_ID() ) );
				foreach ( $ancestors as $ancestor_id ) {
					$breadcrumbs[] = array(
						'label' => get_the_title( $ancestor_id ),
						'url'   => get_permalink( $ancestor_id ),
					);
				}
			}
			
			// Add taxonomy terms for this post type if applicable
			$taxonomies = get_object_taxonomies( $post_type, 'objects' );
			foreach ( $taxonomies as $taxonomy ) {
				if ( $taxonomy->hierarchical && $taxonomy->public ) {
					$terms = get_the_terms( get_the_ID(), $taxonomy->name );
					if ( $terms ) {
						$term = $this->get_deepest_term( $terms, $taxonomy->name );
						if ( $term ) {
							// Add term ancestors if any
							if ( $term->parent ) {
								$ancestors = array_reverse( get_ancestors( $term->term_id, $taxonomy->name ) );
								foreach ( $ancestors as $ancestor_id ) {
									$ancestor = get_term( $ancestor_id, $taxonomy->name );
									$breadcrumbs[] = array(
										'label' => $ancestor->name,
										'url'   => get_term_link( $ancestor ),
									);
								}
							}
							
							// Add the term
							$breadcrumbs[] = array(
								'label' => $term->name,
								'url'   => get_term_link( $term ),
							);
							break; // Only add one taxonomy's terms
						}
					}
				}
			}
			
			// Add current post title
			if ( $show_current ) {
				$breadcrumbs[] = array(
					'label' => get_the_title(),
					'url'   => '',
				);
			}
			return $breadcrumbs;
		}
		
		// Pages
		if ( is_page() ) {
			// For hierarchical pages, add ancestors
			$ancestors = array_reverse( get_post_ancestors( get_the_ID() ) );
			foreach ( $ancestors as $ancestor_id ) {
				$breadcrumbs[] = array(
					'label' => get_the_title( $ancestor_id ),
					'url'   => get_permalink( $ancestor_id ),
				);
			}
			
			// Add current page title
			if ( $show_current ) {
				$breadcrumbs[] = array(
					'label' => get_the_title(),
					'url'   => '',
				);
			}
			return $breadcrumbs;
		}
		
		// Attachments
		if ( is_attachment() ) {
			// Get parent post
			$parent_id = get_post()->post_parent;
			if ( $parent_id ) {
				$breadcrumbs[] = array(
					'label' => get_the_title( $parent_id ),
					'url'   => get_permalink( $parent_id ),
				);
			}
			
			// Add current attachment title
			if ( $show_current ) {
				$breadcrumbs[] = array(
					'label' => get_the_title(),
					'url'   => '',
				);
			}
			return $breadcrumbs;
		}
		
		// Custom post type archives
		if ( is_post_type_archive() ) {
			$post_type = get_post_type();
			$post_type_obj = get_post_type_object( $post_type );
			if ( $post_type_obj ) {
				$breadcrumbs[] = array(
					'label' => $post_type_obj->labels->name,
					'url'   => '',
				);
			}
			return $breadcrumbs;
		}
		
		// Custom taxonomy archives
		if ( is_tax() ) {
			$term = get_queried_object();
			$taxonomy = get_taxonomy( $term->taxonomy );
			
			// Add taxonomy name if available
			if ( $taxonomy ) {
				$breadcrumbs[] = array(
					'label' => $taxonomy->labels->name,
					'url'   => '',
				);
			}
			
			// If the term has a parent, add ancestors
			if ( $term->parent ) {
				$ancestors = array_reverse( get_ancestors( $term->term_id, $term->taxonomy ) );
				foreach ( $ancestors as $ancestor_id ) {
					$ancestor = get_term( $ancestor_id, $term->taxonomy );
					$breadcrumbs[] = array(
						'label' => $ancestor->name,
						'url'   => get_term_link( $ancestor ),
					);
				}
			}
			
			// Add current term
			$breadcrumbs[] = array(
				'label' => $term->name,
				'url'   => '',
			);
			return $breadcrumbs;
		}
		
		// If we've reached here, we don't know what kind of page this is
		if ( $show_current ) {
			$breadcrumbs[] = array(
				'label' => get_the_title(),
				'url'   => '',
			);
		}
		
		return $breadcrumbs;
	}

	/**
	 * Get the deepest category from an array of categories
	 *
	 * @param array $categories Array of categories.
	 * @return object The deepest category.
	 */
	private function get_deepest_category( $categories ) {
		// Start with the first category
		$deepest_category = $categories[0];
		$max_depth = 0;
		
		// Loop through categories to find the deepest one
		foreach ( $categories as $category ) {
			$depth = count( get_ancestors( $category->term_id, 'category' ) );
			if ( $depth > $max_depth ) {
				$max_depth = $depth;
				$deepest_category = $category;
			}
		}
		
		return $deepest_category;
	}

	/**
	 * Get the deepest term from an array of terms
	 *
	 * @param array  $terms Array of terms.
	 * @param string $taxonomy Taxonomy name.
	 * @return object The deepest term.
	 */
	private function get_deepest_term( $terms, $taxonomy ) {
		// Start with the first term
		$deepest_term = $terms[0];
		$max_depth = 0;
		
		// Loop through terms to find the deepest one
		foreach ( $terms as $term ) {
			$depth = count( get_ancestors( $term->term_id, $taxonomy ) );
			if ( $depth > $max_depth ) {
				$max_depth = $depth;
				$deepest_term = $term;
			}
		}
		
		return $deepest_term;
	}
}